[
  {
    "id": "1",
    "title": "Two Sum",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "examples": [
      "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].",
      "Input: nums = [3,2,4], target = 6\nOutput: [1,2]",
      "Input: nums = [3,3], target = 6\nOutput: [0,1]"
    ],
    "constraints": "`2 <= nums.length <= 103`\n`-109 <= nums[i] <= 109`\n`-109 <= target <= 109`\nOnly one valid answer exists."
  },
  {
    "id": "2",
    "title": "Add Two Numbers",
    "difficulty": "Medium",
    "explanation": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "examples": [
      "Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
      "Input: l1 = [0], l2 = [0]\nOutput: [0]",
      "Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]"
    ],
    "constraints": "The number of nodes in each linked list is in the range `[1, 100]`.\n\n`0 <= Node.val <= 9`\nIt is guaranteed that the list represents a number that does not have leading zeros."
  },
  {
    "id": "3",
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, find the length of the longest substring without repeating characters.",
    "examples": [
      "Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
      "Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.",
      "Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\n\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.",
      "Input: s = \"\"\nOutput: 0"
    ],
    "constraints": "`0 <= s.length <= 5 * 104`\n`s` consists of English letters, digits, symbols and spaces."
  },
  {
    "id": "4",
    "title": "Median of Two Sorted Arrays",
    "difficulty": "Hard",
    "explanation": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.",
    "examples": [
      "Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.",
      "Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.",
      "Input: nums1 = [0,0], nums2 = [0,0]\nOutput: 0.00000",
      "Input: nums1 = [], nums2 = [1]\nOutput: 1.00000",
      "Input: nums1 = [2], nums2 = []\nOutput: 2.00000"
    ],
    "constraints": "`nums1.length == m`\n`nums2.length == n`\n`0 <= m <= 1000`\n`0 <= n <= 1000`\n`1 <= m + n <= 2000`\n`-106 <= nums1[i], nums2[i] <= 106`\nFollow up: The overall run time complexity should be `O(log (m+n))`."
  },
  {
    "id": "5",
    "title": "Longest Palindromic Substring",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, return the longest palindromic substring in `s`.",
    "examples": [
      "Input: s = \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.",
      "Input: s = \"cbbd\"\nOutput: \"bb\"",
      "Input: s = \"a\"\nOutput: \"a\"",
      "Input: s = \"ac\"\nOutput: \"a\""
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consist of only digits and English letters (lower-case and/or upper-case),"
  },
  {
    "id": "6",
    "title": "ZigZag Conversion",
    "difficulty": "Medium",
    "explanation": "The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);",
    "examples": [
      "Input: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"",
      "Input: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I",
      "Input: s = \"A\", numRows = 1\nOutput: \"A\""
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consists of English letters (lower-case and upper-case), `','` and `'.'`.\n\n`1 <= numRows <= 1000`"
  },
  {
    "id": "7",
    "title": "Reverse Integer",
    "difficulty": "Easy",
    "explanation": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
    "examples": [
      "Input: x = 123\nOutput: 321",
      "Input: x = -123\nOutput: -321",
      "Input: x = 120\nOutput: 21",
      "Input: x = 0\nOutput: 0"
    ],
    "constraints": "`-231 <= x <= 231 - 1`"
  },
  {
    "id": "8",
    "title": "String to Integer (atoi)",
    "difficulty": "Medium",
    "explanation": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\nRead in and ignore any leading whitespace.\n\nCheck if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n\nRead in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\n\nConvert these digits into an integer (i.e. `\"123\" -> 123`, `\"0032\" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).\n\nIf the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.\n\nReturn the integer as the final result.\n\nNote:\nOnly the space character `' '` is considered a whitespace character.\n\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.",
    "examples": [
      "Input: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\n\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\n\nSince 42 is in the range [-231, 231 - 1], the final result is 42.",
      "Input: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\n\nSince -42 is in the range [-231, 231 - 1], the final result is -42.",
      "Input: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\n\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.",
      "Input: s = \"words and 987\"\nOutput: 0\nExplanation:\nStep 1: \"words and 987\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"words and 987\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"words and 987\" (reading stops immediately because there is a non-digit 'w')\n         ^\nThe parsed integer is 0 because no digits were read.\n\nSince 0 is in the range [-231, 231 - 1], the final result is 0.",
      "Input: s = \"-91283472332\"\nOutput: -2147483648\nExplanation:\nStep 1: \"-91283472332\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"-91283472332\" ('-' is read, so the result should be negative)\n          ^\nStep 3: \"-91283472332\" (\"91283472332\" is read in)\n                     ^\nThe parsed integer is -91283472332.\n\nSince -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648."
    ],
    "constraints": "`0 <= s.length <= 200`\n`s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`."
  },
  {
    "id": "9",
    "title": "Palindrome Number",
    "difficulty": "Easy",
    "explanation": "Given an integer `x`, return `true` if `x` is palindrome integer.\n\nAn integer is a palindrome when it reads the same backward as forward. For example, `121` is palindrome while `123` is not.",
    "examples": [
      "Input: x = 121\nOutput: true",
      "Input: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.",
      "Input: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.",
      "Input: x = -101\nOutput: false"
    ],
    "constraints": "`-231 <= x <= 231 - 1`\nFollow up: Could you solve it without converting the integer to a string?"
  },
  {
    "id": "10",
    "title": "Regular Expression Matching",
    "difficulty": "Hard",
    "explanation": "Given an input string (`s`) and a pattern (`p`), implement regular expression matching with support for `'.'` and `'*'` where:` `\n`'.'` Matches any single character.​​​​\n`'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).",
    "examples": [
      "Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".",
      "Input: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".",
      "Input: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".",
      "Input: s = \"aab\", p = \"c*a*b\"\nOutput: true\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \"aab\".",
      "Input: s = \"mississippi\", p = \"mis*is*p*.\"\nOutput: false"
    ],
    "constraints": "`0 <= s.length <= 20`\n`0 <= p.length <= 30`\n`s` contains only lowercase English letters.\n\n`p` contains only lowercase English letters, `'.'`, and `'*'`.\n\nIt is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match."
  },
  {
    "id": "11",
    "title": "Container With Most Water",
    "difficulty": "Medium",
    "explanation": "Given `n` non-negative integers `a1, a2, ..., an` , where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\n\nNotice that you may not slant the container.",
    "examples": [
      "Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
      "Input: height = [1,1]\nOutput: 1",
      "Input: height = [4,3,2,1,4]\nOutput: 16",
      "Input: height = [1,2,1]\nOutput: 2"
    ],
    "constraints": "`n == height.length`\n`2 <= n <= 105`\n`0 <= height[i] <= 104`"
  },
  {
    "id": "12",
    "title": "Integer to Roman",
    "difficulty": "Medium",
    "explanation": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.",
    "examples": [
      "Input: num = 3\nOutput: \"III\"",
      "Input: num = 4\nOutput: \"IV\"",
      "Input: num = 9\nOutput: \"IX\"",
      "Input: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.",
      "Input: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4."
    ],
    "constraints": "`1 <= num <= 3999`"
  },
  {
    "id": "13",
    "title": "Roman to Integer",
    "difficulty": "Easy",
    "explanation": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.",
    "examples": [
      "Input: s = \"III\"\nOutput: 3",
      "Input: s = \"IV\"\nOutput: 4",
      "Input: s = \"IX\"\nOutput: 9",
      "Input: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.",
      "Input: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4."
    ],
    "constraints": "`1 <= s.length <= 15`\n`s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.\n\nIt is guaranteed that `s` is a valid roman numeral in the range `[1, 3999]`."
  },
  {
    "id": "14",
    "title": "Longest Common Prefix",
    "difficulty": "Easy",
    "explanation": "Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string `\"\"`.",
    "examples": [
      "Input: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"",
      "Input: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings."
    ],
    "constraints": "`0 <= strs.length <= 200`\n`0 <= strs[i].length <= 200`\n`strs[i]` consists of only lower-case English letters."
  },
  {
    "id": "15",
    "title": "3Sum",
    "difficulty": "Medium",
    "explanation": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.",
    "examples": [
      "Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]",
      "Input: nums = []\nOutput: []",
      "Input: nums = [0]\nOutput: []"
    ],
    "constraints": "`0 <= nums.length <= 3000`\n`-105 <= nums[i] <= 105`"
  },
  {
    "id": "16",
    "title": "3Sum Closest",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of n integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.",
    "examples": [
      "Input: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
    ],
    "constraints": "`3 <= nums.length <= 10^3`\n`-10^3 <= nums[i] <= 10^3`\n`-10^4 <= target <= 10^4`"
  },
  {
    "id": "17",
    "title": "Letter Combinations of a Phone Number",
    "difficulty": "Medium",
    "explanation": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
    "examples": [
      "Input: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
      "Input: digits = \"\"\nOutput: []",
      "Input: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]"
    ],
    "constraints": "`0 <= digits.length <= 4`\n`digits[i]` is a digit in the range `['2', '9']`."
  },
  {
    "id": "18",
    "title": "4Sum",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the sum of `target`.\n\nNotice that the solution set must not contain duplicate quadruplets.",
    "examples": [
      "Input: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
      "Input: nums = [], target = 0\nOutput: []"
    ],
    "constraints": "`0 <= nums.length <= 200`\n`-109 <= nums[i] <= 109`\n`-109 <= target <= 109`"
  },
  {
    "id": "19",
    "title": "Remove Nth Node From End of List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.\n\nFollow up: Could you do this in one pass?",
    "examples": [
      "Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]",
      "Input: head = [1], n = 1\nOutput: []",
      "Input: head = [1,2], n = 1\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the list is `sz`.\n\n`1 <= sz <= 30`\n`0 <= Node.val <= 100`\n`1 <= n <= sz`"
  },
  {
    "id": "20",
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "explanation": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\n\nOpen brackets must be closed in the correct order.",
    "examples": [
      "Input: s = \"()\"\nOutput: true",
      "Input: s = \"()[]{}\"\nOutput: true",
      "Input: s = \"(]\"\nOutput: false",
      "Input: s = \"([)]\"\nOutput: false",
      "Input: s = \"{[]}\"\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of parentheses only `'()[]{}'`."
  },
  {
    "id": "21",
    "title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "explanation": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
    "examples": [
      "Input: l1 = [1,2,4], l2 = [1,3,4]\nOutput: [1,1,2,3,4,4]",
      "Input: l1 = [], l2 = []\nOutput: []",
      "Input: l1 = [], l2 = [0]\nOutput: [0]"
    ],
    "constraints": "The number of nodes in both lists is in the range `[0, 50]`.\n\n`-100 <= Node.val <= 100`\nBoth `l1` and `l2` are sorted in non-decreasing order."
  },
  {
    "id": "22",
    "title": "Generate Parentheses",
    "difficulty": "Medium",
    "explanation": "Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "examples": [
      "Input: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
      "Input: n = 1\nOutput: [\"()\"]"
    ],
    "constraints": "`1 <= n <= 8`"
  },
  {
    "id": "23",
    "title": "Merge k Sorted Lists",
    "difficulty": "Hard",
    "explanation": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.",
    "examples": [
      "Input: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6",
      "Input: lists = []\nOutput: []",
      "Input: lists = [[]]\nOutput: []"
    ],
    "constraints": "`k == lists.length`\n`0 <= k <= 10^4`\n`0 <= lists[i].length <= 500`\n`-10^4 <= lists[i][j] <= 10^4`\n`lists[i]` is sorted in ascending order.\n\nThe sum of `lists[i].length` won't exceed `10^4`."
  },
  {
    "id": "24",
    "title": "Swap Nodes in Pairs",
    "difficulty": "Medium",
    "explanation": "Given a linked list, swap every two adjacent nodes and return its head.",
    "examples": [
      "Input: head = [1,2,3,4]\nOutput: [2,1,4,3]",
      "Input: head = []\nOutput: []",
      "Input: head = [1]\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 100]`.\n\n`0 <= Node.val <= 100`\nFollow up: Can you solve the problem without modifying the values in the list's nodes? (i.e., Only nodes themselves may be changed.)"
  },
  {
    "id": "25",
    "title": "Reverse Nodes in k-Group",
    "difficulty": "Hard",
    "explanation": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n\nFollow up:\nCould you solve the problem in `O(1)` extra memory space?\nYou may not alter the values in the list's nodes, only nodes itself may be changed.",
    "examples": [
      "Input: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]",
      "Input: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]",
      "Input: head = [1,2,3,4,5], k = 1\nOutput: [1,2,3,4,5]",
      "Input: head = [1], k = 1\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the list is in the range `sz`.\n\n`1 <= sz <= 5000`\n`0 <= Node.val <= 1000`\n`1 <= k <= sz`"
  },
  {
    "id": "26",
    "title": "Remove Duplicates from Sorted Array",
    "difficulty": "Easy",
    "explanation": "Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n// any modification to nums in your function would be known by the caller.\n\n// using the length returned by your function, it prints the first len elements.\n\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}",
    "examples": [
      "Input: nums = [1,1,2]\nOutput: 2, nums = [1,2]\nExplanation: Your function should return length = `2`, with the first two elements of `nums` being `1` and `2` respectively. It doesn't matter what you leave beyond the returned length.",
      "Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4]\nExplanation: Your function should return length = `5`, with the first five elements of `nums` being modified to `0`, `1`, `2`, `3`, and `4` respectively. It doesn't matter what values are set beyond the returned length."
    ],
    "constraints": "`0 <= nums.length <= 3 * 104`\n`-104 <= nums[i] <= 104`\n`nums` is sorted in ascending order."
  },
  {
    "id": "27",
    "title": "Remove Element",
    "difficulty": "Easy",
    "explanation": "Given an array nums and a value `val`, remove all instances of that value in-place and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory.\n\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n// any modification to nums in your function would be known by the caller.\n\n// using the length returned by your function, it prints the first len elements.\n\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}",
    "examples": [
      "Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2]\nExplanation: Your function should return length = 2, with the first two elements of nums being 2.\n\nIt doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.",
      "Input: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3]\nExplanation: Your function should return length = `5`, with the first five elements of `nums` containing `0`, `1`, `3`, `0`, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length."
    ],
    "constraints": "`0 <= nums.length <= 100`\n`0 <= nums[i] <= 50`\n`0 <= val <= 100`"
  },
  {
    "id": "28",
    "title": "Implement strStr()",
    "difficulty": "Easy",
    "explanation": "Implement strStr().\n\nReturn the index of the first occurrence of needle in haystack, or `-1` if `needle` is not part of `haystack`.\n\nClarification:\nWhat should we return when `needle` is an empty string? This is a great question to ask during an interview.\n\nFor the purpose of this problem, we will return 0 when `needle` is an empty string. This is consistent to C's strstr() and Java's indexOf().",
    "examples": [
      "Input: haystack = \"hello\", needle = \"ll\"\nOutput: 2",
      "Input: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1",
      "Input: haystack = \"\", needle = \"\"\nOutput: 0"
    ],
    "constraints": "`0 <= haystack.length, needle.length <= 5 * 104`\n`haystack` and `needle` consist of only lower-case English characters."
  },
  {
    "id": "29",
    "title": "Divide Two Integers",
    "difficulty": "Medium",
    "explanation": "Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator.\n\nReturn the quotient after dividing `dividend` by `divisor`.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`.\n\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: `[−231, 231 − 1]`. For this problem, assume that your function returns `231 − 1` when the division result overflows.",
    "examples": [
      "Input: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = truncate(3.33333..) = 3.",
      "Input: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = truncate(-2.33333..) = -2.",
      "Input: dividend = 0, divisor = 1\nOutput: 0",
      "Input: dividend = 1, divisor = 1\nOutput: 1"
    ],
    "constraints": "`-231 <= dividend, divisor <= 231 - 1`\n`divisor != 0`"
  },
  {
    "id": "30",
    "title": "Substring with Concatenation of All Words",
    "difficulty": "Hard",
    "explanation": "You are given a string `s` and an array of strings `words` of the same length. Return all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, in any order, and without any intervening characters.\n\nYou can return the answer in any order.",
    "examples": [
      "Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\n\nThe output order does not matter, returning [9,0] is fine too.",
      "Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []",
      "Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]"
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of lower-case English letters.\n\n`1 <= words.length <= 5000`\n`1 <= words[i].length <= 30`\n`words[i]` consists of lower-case English letters."
  },
  {
    "id": "31",
    "title": "Next Permutation",
    "difficulty": "Medium",
    "explanation": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\n\nThe replacement must be in place and use only constant extra memory.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: [1,3,2]",
      "Input: nums = [3,2,1]\nOutput: [1,2,3]",
      "Input: nums = [1,1,5]\nOutput: [1,5,1]",
      "Input: nums = [1]\nOutput: [1]"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`0 <= nums[i] <= 100`"
  },
  {
    "id": "32",
    "title": "Longest Valid Parentheses",
    "difficulty": "Hard",
    "explanation": "Given a string containing just the characters `'('` and `')'`, find the length of the longest valid (well-formed) parentheses substring.",
    "examples": [
      "Input: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".",
      "Input: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".",
      "Input: s = \"\"\nOutput: 0"
    ],
    "constraints": "`0 <= s.length <= 3 * 104`\n`s[i]` is `'('`, or `')'`."
  },
  {
    "id": "33",
    "title": "Search in Rotated Sorted Array",
    "difficulty": "Medium",
    "explanation": "There is an integer array `nums` sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.\n\nGiven the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.",
    "examples": [
      "Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4",
      "Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1",
      "Input: nums = [1], target = 0\nOutput: -1"
    ],
    "constraints": "`1 <= nums.length <= 5000`\n`-104 <= nums[i] <= 104`\nAll values of `nums` are unique.\n\n`nums` is guaranteed to be rotated at some pivot.\n\n`-104 <= target <= 104`\nFollow up: Can you achieve this in `O(log n)` time complexity?"
  },
  {
    "id": "34",
    "title": "Find First and Last Position of Element in Sorted Array",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value.\n\nIf `target` is not found in the array, return `[-1, -1]`.\n\nFollow up: Could you write an algorithm with `O(log n)` runtime complexity?",
    "examples": [
      "Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]",
      "Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]",
      "Input: nums = [], target = 0\nOutput: [-1,-1]"
    ],
    "constraints": "`0 <= nums.length <= 105`\n`-109 <= nums[i] <= 109`\n`nums` is a non-decreasing array.\n\n`-109 <= target <= 109`"
  },
  {
    "id": "35",
    "title": "Search Insert Position",
    "difficulty": "Easy",
    "explanation": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    "examples": [
      "Input: nums = [1,3,5,6], target = 5\nOutput: 2",
      "Input: nums = [1,3,5,6], target = 2\nOutput: 1",
      "Input: nums = [1,3,5,6], target = 7\nOutput: 4",
      "Input: nums = [1,3,5,6], target = 0\nOutput: 0",
      "Input: nums = [1], target = 0\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-104 <= nums[i] <= 104`\n`nums` contains distinct values sorted in ascending order.\n\n`-104 <= target <= 104`"
  },
  {
    "id": "36",
    "title": "Valid Sudoku",
    "difficulty": "Medium",
    "explanation": "Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits `1-9` without repetition.\n\nEach column must contain the digits `1-9` without repetition.\n\nEach of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.\n\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\n\nOnly the filled cells need to be validated according to the mentioned rules.",
    "examples": [
      "Input: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true",
      "Input: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\n\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
    ],
    "constraints": "`board.length == 9`\n`board[i].length == 9`\n`board[i][j]` is a digit or `'.'`."
  },
  {
    "id": "37",
    "title": "Sudoku Solver",
    "difficulty": "Hard",
    "explanation": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy all of the following rules:\nEach of the digits `1-9` must occur exactly once in each row.\n\nEach of the digits `1-9` must occur exactly once in each column.\n\nEach of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\nThe `'.'` character indicates empty cells.",
    "examples": [
      "Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:"
    ],
    "constraints": "`board.length == 9`\n`board[i].length == 9`\n`board[i][j]` is a digit or `'.'`.\n\nIt is guaranteed that the input board has only one solution."
  },
  {
    "id": "38",
    "title": "Count and Say",
    "difficulty": "Medium",
    "explanation": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n`countAndSay(1) = \"1\"`\n`countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.\n\nTo determine how you \"say\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.\n\nFor example, the saying and conversion for digit string `\"3322251\"`:\nGiven a positive integer `n`, return the `nth` term of the count-and-say sequence.",
    "examples": [
      "Input: n = 1\nOutput: \"1\"\nExplanation: This is the base case.",
      "Input: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\""
    ],
    "constraints": "`1 <= n <= 30`"
  },
  {
    "id": "39",
    "title": "Combination Sum",
    "difficulty": "Medium",
    "explanation": "Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.\n\nThe same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nIt is guaranteed that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.",
    "examples": [
      "Input: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n\n7 is a candidate, and 7 = 7.\n\nThese are the only two combinations.",
      "Input: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]",
      "Input: candidates = [2], target = 1\nOutput: []",
      "Input: candidates = [1], target = 1\nOutput: [[1]]",
      "Input: candidates = [1], target = 2\nOutput: [[1,1]]"
    ],
    "constraints": "`1 <= candidates.length <= 30`\n`1 <= candidates[i] <= 200`\nAll elements of `candidates` are distinct.\n\n`1 <= target <= 500`"
  },
  {
    "id": "40",
    "title": "Combination Sum II",
    "difficulty": "Medium",
    "explanation": "Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.\n\nEach number in `candidates` may only be used once in the combination.\n\nNote: The solution set must not contain duplicate combinations.",
    "examples": [
      "Input: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]",
      "Input: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]"
    ],
    "constraints": "`1 <= candidates.length <= 100`\n`1 <= candidates[i] <= 50`\n`1 <= target <= 30`"
  },
  {
    "id": "41",
    "title": "First Missing Positive",
    "difficulty": "Hard",
    "explanation": "Given an unsorted integer array `nums`, find the smallest missing positive integer.",
    "examples": [
      "Input: nums = [1,2,0]\nOutput: 3",
      "Input: nums = [3,4,-1,1]\nOutput: 2",
      "Input: nums = [7,8,9,11,12]\nOutput: 1"
    ],
    "constraints": "`0 <= nums.length <= 300`\n`-231 <= nums[i] <= 231 - 1`\nFollow up: Could you implement an algorithm that runs in `O(n)` time and uses constant extra space?"
  },
  {
    "id": "42",
    "title": "Trapping Rain Water",
    "difficulty": "Hard",
    "explanation": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.",
    "examples": [
      "Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
      "Input: height = [4,2,0,3,2,5]\nOutput: 9"
    ],
    "constraints": "`n == height.length`\n`0 <= n <= 3 * 104`\n`0 <= height[i] <= 105`"
  },
  {
    "id": "43",
    "title": "Multiply Strings",
    "difficulty": "Medium",
    "explanation": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.",
    "examples": [
      "Input: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"",
      "Input: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\""
    ],
    "constraints": "`1 <= num1.length, num2.length <= 200`\n`num1` and `num2` consist of digits only.\n\nBoth `num1` and `num2` do not contain any leading zero, except the number `0` itself."
  },
  {
    "id": "44",
    "title": "Wildcard Matching",
    "difficulty": "Hard",
    "explanation": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n`'?'` Matches any single character.\n\n`'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).",
    "examples": [
      "Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".",
      "Input: s = \"aa\", p = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.",
      "Input: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.",
      "Input: s = \"adceb\", p = \"*a*b\"\nOutput: true\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".",
      "Input: s = \"acdcb\", p = \"a*c?b\"\nOutput: false"
    ],
    "constraints": "`0 <= s.length, p.length <= 2000`\n`s` contains only lowercase English letters.\n\n`p` contains only lowercase English letters, `'?'` or `'*'`."
  },
  {
    "id": "45",
    "title": "Jump Game II",
    "difficulty": "Medium",
    "explanation": "Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nYour goal is to reach the last index in the minimum number of jumps.\n\nYou can assume that you can always reach the last index.",
    "examples": [
      "Input: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.",
      "Input: nums = [2,3,0,1,4]\nOutput: 2"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`0 <= nums[i] <= 105`"
  },
  {
    "id": "46",
    "title": "Permutations",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
      "Input: nums = [0,1]\nOutput: [[0,1],[1,0]]",
      "Input: nums = [1]\nOutput: [[1]]"
    ],
    "constraints": "`1 <= nums.length <= 6`\n`-10 <= nums[i] <= 10`\nAll the integers of `nums` are unique."
  },
  {
    "id": "47",
    "title": "Permutations II",
    "difficulty": "Medium",
    "explanation": "Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.",
    "examples": [
      "Input: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]",
      "Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
    ],
    "constraints": "`1 <= nums.length <= 8`\n`-10 <= nums[i] <= 10`"
  },
  {
    "id": "48",
    "title": "Rotate Image",
    "difficulty": "Medium",
    "explanation": "You are given an n x n 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
    "examples": [
      "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]",
      "Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
      "Input: matrix = [[1]]\nOutput: [[1]]",
      "Input: matrix = [[1,2],[3,4]]\nOutput: [[3,1],[4,2]]"
    ],
    "constraints": "`matrix.length == n`\n`matrix[i].length == n`\n`1 <= n <= 20`\n`-1000 <= matrix[i][j] <= 1000`"
  },
  {
    "id": "49",
    "title": "Group Anagrams",
    "difficulty": "Medium",
    "explanation": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
      "Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
      "Input: strs = [\"\"]\nOutput: [[\"\"]]",
      "Input: strs = [\"a\"]\nOutput: [[\"a\"]]"
    ],
    "constraints": "`1 <= strs.length <= 104`\n`0 <= strs[i].length <= 100`\n`strs[i]` consists of lower-case English letters."
  },
  {
    "id": "50",
    "title": "Pow(x, n)",
    "difficulty": "Medium",
    "explanation": "Implement pow(x, n), which calculates `x` raised to the power `n` (i.e., `xn`).",
    "examples": [
      "Input: x = 2.00000, n = 10\nOutput: 1024.00000",
      "Input: x = 2.10000, n = 3\nOutput: 9.26100",
      "Input: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25"
    ],
    "constraints": "`-100.0 < x < 100.0`\n`-231 <= n <= 231-1`\n`-104 <= xn <= 104`"
  },
  {
    "id": "51",
    "title": "N-Queens",
    "difficulty": "Hard",
    "explanation": "The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return all distinct solutions to the n-queens puzzle.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.",
    "examples": [
      "Input: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above",
      "Input: n = 1\nOutput: [[\"Q\"]]"
    ],
    "constraints": "`1 <= n <= 9`"
  },
  {
    "id": "52",
    "title": "N-Queens II",
    "difficulty": "Hard",
    "explanation": "The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return the number of distinct solutions to the n-queens puzzle.",
    "examples": [
      "Input: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.",
      "Input: n = 1\nOutput: 1"
    ],
    "constraints": "`1 <= n <= 9`"
  },
  {
    "id": "53",
    "title": "Maximum Subarray",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "examples": [
      "Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.",
      "Input: nums = [1]\nOutput: 1",
      "Input: nums = [5,4,-1,7,8]\nOutput: 23"
    ],
    "constraints": "`1 <= nums.length <= 3 * 104`\n`-105 <= nums[i] <= 105`\nFollow up: If you have figured out the `O(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle."
  },
  {
    "id": "54",
    "title": "Spiral Matrix",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` `matrix`, return all elements of the `matrix` in spiral order.",
    "examples": [
      "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]",
      "Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 10`\n`-100 <= matrix[i][j] <= 100`"
  },
  {
    "id": "55",
    "title": "Jump Game",
    "difficulty": "Medium",
    "explanation": "Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nDetermine if you are able to reach the last index.",
    "examples": [
      "Input: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.",
      "Input: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
    ],
    "constraints": "`1 <= nums.length <= 3 * 104`\n`0 <= nums[i] <= 105`"
  },
  {
    "id": "56",
    "title": "Merge Intervals",
    "difficulty": "Medium",
    "explanation": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "examples": [
      "Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].",
      "Input: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping."
    ],
    "constraints": "`1 <= intervals.length <= 104`\n`intervals[i].length == 2`\n`0 <= starti <= endi <= 104`"
  },
  {
    "id": "57",
    "title": "Insert Interval",
    "difficulty": "Medium",
    "explanation": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\n\nYou may assume that the intervals were initially sorted according to their start times.",
    "examples": [
      "Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]",
      "Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval `[4,8]` overlaps with `[3,5],[6,7],[8,10]`.",
      "Input: intervals = [], newInterval = [5,7]\nOutput: [[5,7]]",
      "Input: intervals = [[1,5]], newInterval = [2,3]\nOutput: [[1,5]]",
      "Input: intervals = [[1,5]], newInterval = [2,7]\nOutput: [[1,7]]"
    ],
    "constraints": "`0 <= intervals.length <= 104`\n`intervals[i].length == 2`\n`0 <= intervals[i][0] <= intervals[i][1] <= 105`\n`intervals` is sorted by `intervals[i][0]` in ascending order.\n\n`newInterval.length == 2`\n`0 <= newInterval[0] <= newInterval[1] <= 105`"
  },
  {
    "id": "58",
    "title": "Length of Last Word",
    "difficulty": "Easy",
    "explanation": "Given a string `s` consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return `0`.\n\nA word is a maximal substring consisting of non-space characters only.",
    "examples": [
      "Input: s = \"Hello World\"\nOutput: 5",
      "Input: s = \" \"\nOutput: 0"
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of only English letters and spaces `' '`."
  },
  {
    "id": "59",
    "title": "Spiral Matrix II",
    "difficulty": "Medium",
    "explanation": "Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.",
    "examples": [
      "Input: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]",
      "Input: n = 1\nOutput: [[1]]"
    ],
    "constraints": "`1 <= n <= 20`"
  },
  {
    "id": "60",
    "title": "Permutation Sequence",
    "difficulty": "Hard",
    "explanation": "The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:\n`\"123\"`\n`\"132\"`\n`\"213\"`\n`\"231\"`\n`\"312\"`\n`\"321\"`\nGiven `n` and `k`, return the `kth` permutation sequence.",
    "examples": [
      "Input: n = 3, k = 3\nOutput: \"213\"",
      "Input: n = 4, k = 9\nOutput: \"2314\"",
      "Input: n = 3, k = 1\nOutput: \"123\""
    ],
    "constraints": "`1 <= n <= 9`\n`1 <= k <= n!`"
  },
  {
    "id": "61",
    "title": "Rotate List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a linked list, rotate the list to the right by `k` places.",
    "examples": [
      "Input: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]",
      "Input: head = [0,1,2], k = 4\nOutput: [2,0,1]"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 500]`.\n\n`-100 <= Node.val <= 100`\n`0 <= k <= 2 * 109`"
  },
  {
    "id": "62",
    "title": "Unique Paths",
    "difficulty": "Medium",
    "explanation": "A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?",
    "examples": [
      "Input: m = 3, n = 7\nOutput: 28",
      "Input: m = 3, n = 2\nOutput: 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down",
      "Input: m = 7, n = 3\nOutput: 28",
      "Input: m = 3, n = 3\nOutput: 6"
    ],
    "constraints": "`1 <= m, n <= 100`\nIt's guaranteed that the answer will be less than or equal to `2 * 109`."
  },
  {
    "id": "63",
    "title": "Unique Paths II",
    "difficulty": "Medium",
    "explanation": "A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\nAn obstacle and space is marked as `1` and `0` respectively in the grid.",
    "examples": [
      "Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\n\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right",
      "Input: obstacleGrid = [[0,1],[0,0]]\nOutput: 1"
    ],
    "constraints": "`m == obstacleGrid.length`\n`n == obstacleGrid[i].length`\n`1 <= m, n <= 100`\n`obstacleGrid[i][j]` is `0` or `1`."
  },
  {
    "id": "64",
    "title": "Minimum Path Sum",
    "difficulty": "Medium",
    "explanation": "Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\nNote: You can only move either down or right at any point in time.",
    "examples": [
      "Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.",
      "Input: grid = [[1,2,3],[4,5,6]]\nOutput: 12"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 200`\n`0 <= grid[i][j] <= 100`"
  },
  {
    "id": "65",
    "title": "Valid Number",
    "difficulty": "Hard",
    "explanation": "A valid number can be split up into these components (in order):\nA decimal number or an integer.\n\n(Optional) An `'e'` or `'E'`, followed by an integer.\n\nA decimal number can be split up into these components (in order):\n(Optional) A sign character (either `'+'` or `'-'`).\n\nOne of the following formats:\n\t\nAt least one digit, followed by a dot `'.'`.\n\nAt least one digit, followed by a dot `'.'`, followed by at least one digit.\n\nA dot `'.'`, followed by at least one digit.\n\nAn integer can be split up into these components (in order):\n(Optional) A sign character (either `'+'` or `'-'`).\n\nAt least one digit.\n\nFor example, all the following are valid numbers: `[\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"]`, while the following are not valid numbers: `[\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]`.\n\nGiven a string `s`, return `true` if `s` is a valid number.",
    "examples": [
      "Input: s = \"0\"\nOutput: true",
      "Input: s = \"e\"\nOutput: false",
      "Input: s = \".\"\nOutput: false",
      "Input: s = \".1\"\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 20`\n`s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`."
  },
  {
    "id": "66",
    "title": "Plus One",
    "difficulty": "Easy",
    "explanation": "Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\n\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n\nYou may assume the integer does not contain any leading zero, except the number 0 itself.",
    "examples": [
      "Input: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.",
      "Input: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.",
      "Input: digits = [0]\nOutput: [1]"
    ],
    "constraints": "`1 <= digits.length <= 100`\n`0 <= digits[i] <= 9`"
  },
  {
    "id": "67",
    "title": "Add Binary",
    "difficulty": "Easy",
    "explanation": "Given two binary strings `a` and `b`, return their sum as a binary string.",
    "examples": [
      "Input: a = \"11\", b = \"1\"\nOutput: \"100\"",
      "Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\""
    ],
    "constraints": "`1 <= a.length, b.length <= 104`\n`a` and `b` consist only of `'0'` or `'1'` characters.\n\nEach string does not contain leading zeros except for the zero itself."
  },
  {
    "id": "68",
    "title": "Text Justification",
    "difficulty": "Hard",
    "explanation": "Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly maxWidth characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left justified and no extra space is inserted between words.\n\nNote:\nA word is defined as a character sequence consisting of non-space characters only.\n\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n\nThe input array `words` contains at least one word.",
    "examples": [
      "Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput:\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]",
      "Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput:\n[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n\nNote that the second line is also left-justified becase it contains only one word.",
      "Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\nOutput:\n[\n  \"Science  is  what we\",\n  \"understand      well\",\n  \"enough to explain to\",\n  \"a  computer.  Art is\",\n  \"everything  else  we\",\n  \"do                  \"\n]"
    ],
    "constraints": "`1 <= words.length <= 300`\n`1 <= words[i].length <= 20`\n`words[i]` consists of only English letters and symbols.\n\n`1 <= maxWidth <= 100`\n`words[i].length <= maxWidth`"
  },
  {
    "id": "69",
    "title": "Sqrt(x)",
    "difficulty": "Easy",
    "explanation": "Given a non-negative integer `x`, compute and return the square root of `x`.\n\nSince the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.",
    "examples": [
      "Input: x = 4\nOutput: 2",
      "Input: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."
    ],
    "constraints": "`0 <= x <= 231 - 1`"
  },
  {
    "id": "70",
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "explanation": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?",
    "examples": [
      "Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n\n1. 1 step + 1 step\n2. 2 steps",
      "Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
    ],
    "constraints": "`1 <= n <= 45`"
  },
  {
    "id": "71",
    "title": "Simplify Path",
    "difficulty": "Medium",
    "explanation": "Given a string `path`, which is an absolute path (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n\nIn a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.\n\nThe canonical path should have the following format:\nThe path starts with a single slash `'/'`.\n\nAny two directories are separated by a single slash `'/'`.\n\nThe path does not end with a trailing `'/'`.\n\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)\nReturn the simplified canonical path.",
    "examples": [
      "Input: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.",
      "Input: path = \"/../\"\nOutput: \"/\"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.",
      "Input: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.",
      "Input: path = \"/a/./b/../../c/\"\nOutput: \"/c\""
    ],
    "constraints": "`1 <= path.length <= 3000`\n`path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.\n\n`path` is a valid absolute Unix path."
  },
  {
    "id": "72",
    "title": "Edit Distance",
    "difficulty": "Hard",
    "explanation": "Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`.\n\nYou have the following three operations permitted on a word:\nInsert a character\nDelete a character\nReplace a character",
    "examples": [
      "Input: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')",
      "Input: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"
    ],
    "constraints": "`0 <= word1.length, word2.length <= 500`\n`word1` and `word2` consist of lowercase English letters."
  },
  {
    "id": "73",
    "title": "Set Matrix Zeroes",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` matrix. If an element is 0, set its entire row and column to 0. Do it in-place.\n\nFollow up:\nA straight forward solution using O(mn) space is probably a bad idea.\n\nA simple improvement uses O(m + n) space, but still not the best solution.\n\nCould you devise a constant space solution?",
    "examples": [
      "Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]",
      "Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[0].length`\n`1 <= m, n <= 200`\n`-231 <= matrix[i][j] <= 231 - 1`"
  },
  {
    "id": "74",
    "title": "Search a 2D Matrix",
    "difficulty": "Medium",
    "explanation": "Write an efficient algorithm that searches for a value in an `m x n` matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right.\n\nThe first integer of each row is greater than the last integer of the previous row.",
    "examples": [
      "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true",
      "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 100`\n`-104 <= matrix[i][j], target <= 104`"
  },
  {
    "id": "75",
    "title": "Sort Colors",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.",
    "examples": [
      "Input: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]",
      "Input: nums = [2,0,1]\nOutput: [0,1,2]",
      "Input: nums = [0]\nOutput: [0]",
      "Input: nums = [1]\nOutput: [1]"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 300`\n`nums[i]` is `0`, `1`, or `2`.\n\nFollow up:\nCould you solve this problem without using the library's sort function?\nCould you come up with a one-pass algorithm using only `O(1)` constant space?"
  },
  {
    "id": "76",
    "title": "Minimum Window Substring",
    "difficulty": "Hard",
    "explanation": "Given two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return the empty string `\"\"`.\n\nNote that If there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`.",
    "examples": [
      "Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"",
      "Input: s = \"a\", t = \"a\"\nOutput: \"a\""
    ],
    "constraints": "`1 <= s.length, t.length <= 105`\n`s` and `t` consist of English letters.\n\nFollow up: Could you find an algorithm that runs in `O(n)` time?"
  },
  {
    "id": "77",
    "title": "Combinations",
    "difficulty": "Medium",
    "explanation": "Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`.\n\nYou may return the answer in any order.",
    "examples": [
      "Input: n = 4, k = 2\nOutput:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]",
      "Input: n = 1, k = 1\nOutput: [[1]]"
    ],
    "constraints": "`1 <= n <= 20`\n`1 <= k <= n`"
  },
  {
    "id": "78",
    "title": "Subsets",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` of unique elements, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
      "Input: nums = [0]\nOutput: [[],[0]]"
    ],
    "constraints": "`1 <= nums.length <= 10`\n`-10 <= nums[i] <= 10`\nAll the numbers of `nums` are unique."
  },
  {
    "id": "79",
    "title": "Word Search",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
    "examples": [
      "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true",
      "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true",
      "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false"
    ],
    "constraints": "`m == board.length`\n`n = board[i].length`\n`1 <= m, n <= 6`\n`1 <= word.length <= 15`\n`board` and `word` consists of only lowercase and uppercase English letters.\n\nFollow up: Could you use search pruning to make your solution faster with a larger `board`?"
  },
  {
    "id": "80",
    "title": "Remove Duplicates from Sorted Array II",
    "difficulty": "Medium",
    "explanation": "Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\n\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\n\nClarification:\nConfused why the returned value is an integer, but your answer is an array?\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller.\n\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n// any modification to nums in your function would be known by the caller.\n\n// using the length returned by your function, it prints the first len elements.\n\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}",
    "examples": [
      "Input: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3]\nExplanation: Your function should return length = `5`, with the first five elements of `nums` being `1, 1, 2, 2` and 3 respectively. It doesn't matter what you leave beyond the returned length.",
      "Input: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3]\nExplanation: Your function should return length = `7`, with the first seven elements of `nums` being modified to `0`, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length."
    ],
    "constraints": "`1 <= nums.length <= 3 * 104`\n`-104 <= nums[i] <= 104`\n`nums` is sorted in ascending order."
  },
  {
    "id": "81",
    "title": "Search in Rotated Sorted Array II",
    "difficulty": "Medium",
    "explanation": "There is an integer array `nums` sorted in non-decreasing order (not necessarily with distinct values).\n\nBefore being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.\n\nGiven the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`.",
    "examples": [
      "Input: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true",
      "Input: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false"
    ],
    "constraints": "`1 <= nums.length <= 5000`\n`-104 <= nums[i] <= 104`\n`nums` is guaranteed to be rotated at some pivot.\n\n`-104 <= target <= 104`\nFollow up: This problem is the same as Search in Rotated Sorted Array, where `nums` may contain duplicates. Would this affect the runtime complexity? How and why?"
  },
  {
    "id": "82",
    "title": "Remove Duplicates from Sorted List II",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",
    "examples": [
      "Input: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]",
      "Input: head = [1,1,1,2,3]\nOutput: [2,3]"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 300]`.\n\n`-100 <= Node.val <= 100`\nThe list is guaranteed to be sorted in ascending order."
  },
  {
    "id": "83",
    "title": "Remove Duplicates from Sorted List",
    "difficulty": "Easy",
    "explanation": "Given the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.",
    "examples": [
      "Input: head = [1,1,2]\nOutput: [1,2]",
      "Input: head = [1,1,2,3,3]\nOutput: [1,2,3]"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 300]`.\n\n`-100 <= Node.val <= 100`\nThe list is guaranteed to be sorted in ascending order."
  },
  {
    "id": "84",
    "title": "Largest Rectangle in Histogram",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram.",
    "examples": [
      "Input: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\n\nThe largest rectangle is shown in the red area, which has an area = 10 units.",
      "Input: heights = [2,4]\nOutput: 4"
    ],
    "constraints": "`1 <= heights.length <= 105`\n`0 <= heights[i] <= 104`"
  },
  {
    "id": "85",
    "title": "Maximal Rectangle",
    "difficulty": "Hard",
    "explanation": "Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return its area.",
    "examples": [
      "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.",
      "Input: matrix = []\nOutput: 0",
      "Input: matrix = [[\"0\"]]\nOutput: 0",
      "Input: matrix = [[\"1\"]]\nOutput: 1",
      "Input: matrix = [[\"0\",\"0\"]]\nOutput: 0"
    ],
    "constraints": "`rows == matrix.length`\n`cols == matrix[i].length`\n`0 <= row, cols <= 200`\n`matrix[i][j]` is `'0'` or `'1'`."
  },
  {
    "id": "86",
    "title": "Partition List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`.\n\nYou should preserve the original relative order of the nodes in each of the two partitions.",
    "examples": [
      "Input: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]",
      "Input: head = [2,1], x = 2\nOutput: [1,2]"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 200]`.\n\n`-100 <= Node.val <= 100`\n`-200 <= x <= 200`"
  },
  {
    "id": "87",
    "title": "Scramble String",
    "difficulty": "Hard",
    "explanation": "We can scramble a string s to get a string t using the following algorithm:\nIf the length of the string is 1, stop.\n\nIf the length of the string is > 1, do the following:\n\t\nSplit the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.\n\nRandomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.\n\nApply step 1 recursively on each of the two substrings `x` and `y`.\n\nGiven two strings `s1` and `s2` of the same length, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.",
    "examples": [
      "Input: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.\n\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n\nThe algorithm stops now and the result string is \"rgeat\" which is s2.\n\nAs there is one possible scenario that led s1 to be scrambled to s2, we return true.",
      "Input: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false",
      "Input: s1 = \"a\", s2 = \"a\"\nOutput: true"
    ],
    "constraints": "`s1.length == s2.length`\n`1 <= s1.length <= 30`\n`s1` and `s2` consist of lower-case English letters."
  },
  {
    "id": "88",
    "title": "Merge Sorted Array",
    "difficulty": "Easy",
    "explanation": "Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.\n\nThe number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`.",
    "examples": [
      "Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]",
      "Input: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]"
    ],
    "constraints": "`nums1.length == m + n`\n`nums2.length == n`\n`0 <= m, n <= 200`\n`1 <= m + n <= 200`\n`-109 <= nums1[i], nums2[i] <= 109`"
  },
  {
    "id": "89",
    "title": "Gray Code",
    "difficulty": "Medium",
    "explanation": "The gray code is a binary numeral system where two successive values differ in only one bit.\n\nGiven an integer `n` representing the total number of bits in the code, return any sequence of gray code.\n\nA gray code sequence must begin with `0`.",
    "examples": [
      "Input: n = 2\nOutput: [0,1,3,2]\nExplanation:\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n[0,2,3,1] is also a valid gray code sequence.\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1",
      "Input: n = 1\nOutput: [0,1]"
    ],
    "constraints": "`1 <= n <= 16`"
  },
  {
    "id": "90",
    "title": "Subsets II",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` that may contain duplicates, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order.",
    "examples": [
      "Input: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]",
      "Input: nums = [0]\nOutput: [[],[0]]"
    ],
    "constraints": "`1 <= nums.length <= 10`\n`-10 <= nums[i] <= 10`"
  },
  {
    "id": "91",
    "title": "Decode Ways",
    "difficulty": "Medium",
    "explanation": "A message containing letters from `A-Z` can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n`\"AAJF\"` with the grouping `(1 1 10 6)`\n`\"KJF\"` with the grouping `(11 10 6)`\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\nGiven a string `s` containing only digits, return the number of ways to decode it.\n\nThe answer is guaranteed to fit in a 32-bit integer.",
    "examples": [
      "Input: s = \"12\"\nOutput: 2\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).",
      "Input: s = \"226\"\nOutput: 3\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).",
      "Input: s = \"0\"\nOutput: 0\nExplanation: There is no character that is mapped to a number starting with 0.\n\nThe only valid mappings with 0 are 'J' -> \"10\" and 'T' -> \"20\", neither of which start with 0.\n\nHence, there are no valid ways to decode this since all digits need to be mapped.",
      "Input: s = \"06\"\nOutput: 0\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."
    ],
    "constraints": "`1 <= s.length <= 100`\n`s` contains only digits and may contain leading zero(s)."
  },
  {
    "id": "92",
    "title": "Reverse Linked List II",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.",
    "examples": [
      "Input: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]",
      "Input: head = [5], left = 1, right = 1\nOutput: [5]"
    ],
    "constraints": "The number of nodes in the list is `n`.\n\n`1 <= n <= 500`\n`-500 <= Node.val <= 500`\n`1 <= left <= right <= n`\nFollow up: Could you do it in one pass?"
  },
  {
    "id": "93",
    "title": "Restore IP Addresses",
    "difficulty": "Medium",
    "explanation": "Given a string `s` containing only digits, return all possible valid IP addresses that can be obtained from `s`. You can return them in any order.\n\nA valid IP address consists of exactly four integers, each integer is between `0` and `255`, separated by single dots and cannot have leading zeros. For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses and \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.",
    "examples": [
      "Input: s = \"25525511135\"\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]",
      "Input: s = \"0000\"\nOutput: [\"0.0.0.0\"]",
      "Input: s = \"1111\"\nOutput: [\"1.1.1.1\"]",
      "Input: s = \"010010\"\nOutput: [\"0.10.0.10\",\"0.100.1.0\"]",
      "Input: s = \"101023\"\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]"
    ],
    "constraints": "`0 <= s.length <= 3000`\n`s` consists of digits only."
  },
  {
    "id": "94",
    "title": "Binary Tree Inorder Traversal",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.",
    "examples": [
      "Input: root = [1,null,2,3]\nOutput: [1,3,2]",
      "Input: root = []\nOutput: []",
      "Input: root = [1]\nOutput: [1]",
      "Input: root = [1,2]\nOutput: [2,1]",
      "Input: root = [1,null,2]\nOutput: [1,2]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`\nFollow up:\nRecursive solution is trivial, could you do it iteratively?"
  },
  {
    "id": "95",
    "title": "Unique Binary Search Trees II",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return all the structurally unique BST's (binary search trees), which has exactly `n` nodes of unique values from `1` to `n`. Return the answer in any order.",
    "examples": [
      "Input: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
      "Input: n = 1\nOutput: [[1]]"
    ],
    "constraints": "`1 <= n <= 8`"
  },
  {
    "id": "96",
    "title": "Unique Binary Search Trees",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the number of structurally unique BST's (binary search trees) which has exactly `n` nodes of unique values from `1` to `n`.",
    "examples": [
      "Input: n = 3\nOutput: 5",
      "Input: n = 1\nOutput: 1"
    ],
    "constraints": "`1 <= n <= 19`"
  },
  {
    "id": "97",
    "title": "Interleaving String",
    "difficulty": "Medium",
    "explanation": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`.\n\nAn interleaving of two strings `s` and `t` is a configuration where they are divided into non-empty substrings such that:\n`s = s1 + s2 + ... + sn`\n`t = t1 + t2 + ... + tm`\n`|n - m| <= 1`\nThe interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\nNote: `a + b` is the concatenation of strings `a` and `b`.",
    "examples": [
      "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true",
      "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false",
      "Input: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true"
    ],
    "constraints": "`0 <= s1.length, s2.length <= 100`\n`0 <= s3.length <= 200`\n`s1`, `s2`, and `s3` consist of lowercase English letters.\n\nFollow up: Could you solve it using only `O(s2.length)` additional memory space?"
  },
  {
    "id": "98",
    "title": "Validate Binary Search Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node's key.\n\nThe right subtree of a node contains only nodes with keys greater than the node's key.\n\nBoth the left and right subtrees must also be binary search trees.",
    "examples": [
      "Input: root = [2,1,3]\nOutput: true",
      "Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-231 <= Node.val <= 231 - 1`"
  },
  {
    "id": "99",
    "title": "Recover Binary Search Tree",
    "difficulty": "Hard",
    "explanation": "You are given the `root` of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n\nFollow up: A solution using `O(n)` space is pretty straight forward. Could you devise a constant space solution?",
    "examples": [
      "Input: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.",
      "Input: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 1000]`.\n\n`-231 <= Node.val <= 231 - 1`"
  },
  {
    "id": "100",
    "title": "Same Tree",
    "difficulty": "Easy",
    "explanation": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
    "examples": [
      "Input: p = [1,2,3], q = [1,2,3]\nOutput: true",
      "Input: p = [1,2], q = [1,null,2]\nOutput: false",
      "Input: p = [1,2,1], q = [1,1,2]\nOutput: false"
    ],
    "constraints": "The number of nodes in both trees is in the range `[0, 100]`.\n\n`-104 <= Node.val <= 104`"
  },
  {
    "id": "101",
    "title": "Symmetric Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
    "examples": [
      "Input: root = [1,2,2,3,4,4,3]\nOutput: true",
      "Input: root = [1,2,2,null,3,null,3]\nOutput: false"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 1000]`.\n\n`-100 <= Node.val <= 100`\nFollow up: Could you solve it both recursively and iteratively?"
  },
  {
    "id": "102",
    "title": "Binary Tree Level Order Traversal",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]",
      "Input: root = [1]\nOutput: [[1]]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 2000]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "103",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]",
      "Input: root = [1]\nOutput: [[1]]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 2000]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "104",
    "title": "Maximum Depth of Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: 3",
      "Input: root = [1,null,2]\nOutput: 2",
      "Input: root = []\nOutput: 0",
      "Input: root = [0]\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "105",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "difficulty": "Medium",
    "explanation": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.",
    "examples": [
      "Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]",
      "Input: preorder = [-1], inorder = [-1]\nOutput: [-1]"
    ],
    "constraints": "`1 <= preorder.length <= 3000`\n`inorder.length == preorder.length`\n`-3000 <= preorder[i], inorder[i] <= 3000`\n`preorder` and `inorder` consist of unique values.\n\nEach value of `inorder` also appears in `preorder`.\n\n`preorder` is guaranteed to be the preorder traversal of the tree.\n\n`inorder` is guaranteed to be the inorder traversal of the tree."
  },
  {
    "id": "106",
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "difficulty": "Medium",
    "explanation": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.",
    "examples": [
      "Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]",
      "Input: inorder = [-1], postorder = [-1]\nOutput: [-1]"
    ],
    "constraints": "`1 <= inorder.length <= 3000`\n`postorder.length == inorder.length`\n`-3000 <= inorder[i], postorder[i] <= 3000`\n`inorder` and `postorder` consist of unique values.\n\nEach value of `postorder` also appears in `inorder`.\n\n`inorder` is guaranteed to be the inorder traversal of the tree.\n\n`postorder` is guaranteed to be the postorder traversal of the tree."
  },
  {
    "id": "107",
    "title": "Binary Tree Level Order Traversal II",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]",
      "Input: root = [1]\nOutput: [[1]]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 2000]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "108",
    "title": "Convert Sorted Array to Binary Search Tree",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.",
    "examples": [
      "Input: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:",
      "Input: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,3] and [3,1] are both a height-balanced BSTs."
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-104 <= nums[i] <= 104`\n`nums` is sorted in a strictly increasing order."
  },
  {
    "id": "109",
    "title": "Convert Sorted List to Binary Search Tree",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.",
    "examples": [
      "Input: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.",
      "Input: head = []\nOutput: []",
      "Input: head = [0]\nOutput: [0]",
      "Input: head = [1,3]\nOutput: [3,1]"
    ],
    "constraints": "The number of nodes in `head` is in the range `[0, 2 * 104]`.\n\n`-10^5 <= Node.val <= 10^5`"
  },
  {
    "id": "110",
    "title": "Balanced Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given a binary tree, determine if it is height-balanced.\n\nFor this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: true",
      "Input: root = [1,2,2,3,3,null,null,4,4]\nOutput: false",
      "Input: root = []\nOutput: true"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 5000]`.\n\n`-104 <= Node.val <= 104`"
  },
  {
    "id": "111",
    "title": "Minimum Depth of Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\nNote: A leaf is a node with no children.",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: 2",
      "Input: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 105]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "112",
    "title": "Path Sum",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`.\n\nA leaf is a node with no children.",
    "examples": [
      "Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true",
      "Input: root = [1,2,3], targetSum = 5\nOutput: false",
      "Input: root = [1,2], targetSum = 0\nOutput: false"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 5000]`.\n\n`-1000 <= Node.val <= 1000`\n`-1000 <= targetSum <= 1000`"
  },
  {
    "id": "113",
    "title": "Path Sum II",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where each path's sum equals `targetSum`.\n\nA leaf is a node with no children.",
    "examples": [
      "Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]",
      "Input: root = [1,2,3], targetSum = 5\nOutput: []",
      "Input: root = [1,2], targetSum = 0\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 5000]`.\n\n`-1000 <= Node.val <= 1000`\n`-1000 <= targetSum <= 1000`"
  },
  {
    "id": "114",
    "title": "Flatten Binary Tree to Linked List",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, flatten the tree into a \"linked list\":\nThe \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.\n\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.",
    "examples": [
      "Input: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]",
      "Input: root = []\nOutput: []",
      "Input: root = [0]\nOutput: [0]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 2000]`.\n\n`-100 <= Node.val <= 100`\nFollow up: Can you flatten the tree in-place (with `O(1)` extra space)?"
  },
  {
    "id": "115",
    "title": "Distinct Subsequences",
    "difficulty": "Hard",
    "explanation": "Given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`.\n\nA string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., `\"ACE\"` is a subsequence of `\"ABCDE\"` while `\"AEC\"` is not).\n\nIt is guaranteed the answer fits on a 32-bit signed integer.",
    "examples": [
      "Input: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n\n`rabbbit`\n`rabbbit`\n`rabbbit`",
      "Input: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n\n`babgbag`\n`babgbag`\n`babgbag`\n`babgbag`\n`babgbag`"
    ],
    "constraints": "`1 <= s.length, t.length <= 1000`\n`s` and `t` consist of English letters."
  },
  {
    "id": "116",
    "title": "Populating Next Right Pointers in Each Node",
    "difficulty": "Medium",
    "explanation": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\nFollow up:\nYou may only use constant extra space.\n\nRecursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.",
    "examples": [
      "Input: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
    ],
    "constraints": "The number of nodes in the given tree is less than `4096`.\n\n`-1000 <= node.val <= 1000`"
  },
  {
    "id": "117",
    "title": "Populating Next Right Pointers in Each Node II",
    "difficulty": "Medium",
    "explanation": "Given a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\nFollow up:\nYou may only use constant extra space.\n\nRecursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.",
    "examples": [
      "Input: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
    ],
    "constraints": "The number of nodes in the given tree is less than `6000`.\n\n`-100 <= node.val <= 100`"
  },
  {
    "id": "118",
    "title": "Pascal's Triangle",
    "difficulty": "Easy",
    "explanation": "Given an integer `numRows`, return the first numRows of Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
    "examples": [
      "Input: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
      "Input: numRows = 1\nOutput: [[1]]"
    ],
    "constraints": "`1 <= numRows <= 30`"
  },
  {
    "id": "119",
    "title": "Pascal's Triangle II",
    "difficulty": "Easy",
    "explanation": "Given an integer `rowIndex`, return the `rowIndexth` (0-indexed) row of the Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
    "examples": [
      "Input: rowIndex = 3\nOutput: [1,3,3,1]",
      "Input: rowIndex = 0\nOutput: [1]",
      "Input: rowIndex = 1\nOutput: [1,1]"
    ],
    "constraints": "`0 <= rowIndex <= 33`\nFollow up: Could you optimize your algorithm to use only `O(rowIndex)` extra space?"
  },
  {
    "id": "120",
    "title": "Triangle",
    "difficulty": "Medium",
    "explanation": "Given a `triangle` array, return the minimum path sum from top to bottom.\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.",
    "examples": [
      "Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).",
      "Input: triangle = [[-10]]\nOutput: -10"
    ],
    "constraints": "`1 <= triangle.length <= 200`\n`triangle[0].length == 1`\n`triangle[i].length == triangle[i - 1].length + 1`\n`-104 <= triangle[i][j] <= 104`\nFollow up: Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?"
  },
  {
    "id": "121",
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "explanation": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return `0`.",
    "examples": [
      "Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.",
      "Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0."
    ],
    "constraints": "`1 <= prices.length <= 105`\n`0 <= prices[i] <= 104`"
  },
  {
    "id": "122",
    "title": "Best Time to Buy and Sell Stock II",
    "difficulty": "Easy",
    "explanation": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "examples": [
      "Input: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.",
      "Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.",
      "Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e., max profit = 0."
    ],
    "constraints": "`1 <= prices.length <= 3 * 104`\n`0 <= prices[i] <= 104`"
  },
  {
    "id": "123",
    "title": "Best Time to Buy and Sell Stock III",
    "difficulty": "Hard",
    "explanation": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete at most two transactions.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "examples": [
      "Input: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.",
      "Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.",
      "Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.",
      "Input: prices = [1]\nOutput: 0"
    ],
    "constraints": "`1 <= prices.length <= 105`\n`0 <= prices[i] <= 105`"
  },
  {
    "id": "124",
    "title": "Binary Tree Maximum Path Sum",
    "difficulty": "Hard",
    "explanation": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n\nThe path sum of a path is the sum of the node's values in the path.\n\nGiven the `root` of a binary tree, return the maximum path sum of any path.",
    "examples": [
      "Input: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.",
      "Input: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 3 * 104]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "125",
    "title": "Valid Palindrome",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
    "examples": [
      "Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.",
      "Input: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome."
    ],
    "constraints": "`1 <= s.length <= 2 * 105`\n`s` consists only of printable ASCII characters."
  },
  {
    "id": "126",
    "title": "Word Ladder II",
    "difficulty": "Hard",
    "explanation": "A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\nEvery adjacent pair of words differs by a single letter.\n\nEvery `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n\n`sk == endWord`\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return all the shortest transformation sequences from `beginWord` to `endWord`, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words `[beginWord, s1, s2, ..., sk]`.",
    "examples": [
      "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation: There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"",
      "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
    ],
    "constraints": "`1 <= beginWord.length <= 10`\n`endWord.length == beginWord.length`\n`1 <= wordList.length <= 5000`\n`wordList[i].length == beginWord.length`\n`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n\n`beginWord != endWord`\nAll the words in `wordList` are unique."
  },
  {
    "id": "127",
    "title": "Word Ladder",
    "difficulty": "Hard",
    "explanation": "A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\nEvery adjacent pair of words differs by a single letter.\n\nEvery `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n\n`sk == endWord`\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or `0` if no such sequence exists.",
    "examples": [
      "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.",
      "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
    ],
    "constraints": "`1 <= beginWord.length <= 10`\n`endWord.length == beginWord.length`\n`1 <= wordList.length <= 5000`\n`wordList[i].length == beginWord.length`\n`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n\n`beginWord != endWord`\nAll the words in `wordList` are unique."
  },
  {
    "id": "128",
    "title": "Longest Consecutive Sequence",
    "difficulty": "Hard",
    "explanation": "Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.",
    "examples": [
      "Input: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.",
      "Input: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9"
    ],
    "constraints": "`0 <= nums.length <= 104`\n`-109 <= nums[i] <= 109`\nFollow up: Could you implement the `O(n)` solution?"
  },
  {
    "id": "129",
    "title": "Sum Root to Leaf Numbers",
    "difficulty": "Medium",
    "explanation": "You are given the `root` of a binary tree containing digits from `0` to `9` only.\n\nEach root-to-leaf path in the tree represents a number.\n\nFor example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.\n\nReturn the total sum of all root-to-leaf numbers.\n\nA leaf node is a node with no children.",
    "examples": [
      "Input: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path `1->2` represents the number `12`.\n\nThe root-to-leaf path `1->3` represents the number `13`.\n\nTherefore, sum = 12 + 13 = `25`.",
      "Input: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path `4->9->5` represents the number 495.\n\nThe root-to-leaf path `4->9->1` represents the number 491.\n\nThe root-to-leaf path `4->0` represents the number 40.\n\nTherefore, sum = 495 + 491 + 40 = `1026`."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 1000]`.\n\n`0 <= Node.val <= 9`\nThe depth of the tree will not exceed `10`."
  },
  {
    "id": "130",
    "title": "Surrounded Regions",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all regions surrounded by `'X'`.\n\nA region is captured by flipping all `'O'`s into `'X'`s in that surrounded region.",
    "examples": [
      "Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nExplanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.",
      "Input: board = [[\"X\"]]\nOutput: [[\"X\"]]"
    ],
    "constraints": "`m == board.length`\n`n == board[i].length`\n`1 <= m, n <= 200`\n`board[i][j]` is `'X'` or `'O'`."
  },
  {
    "id": "131",
    "title": "Palindrome Partitioning",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of `s`.\n\nA palindrome string is a string that reads the same backward as forward.",
    "examples": [
      "Input: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
      "Input: s = \"a\"\nOutput: [[\"a\"]]"
    ],
    "constraints": "`1 <= s.length <= 16`\n`s` contains only lowercase English letters."
  },
  {
    "id": "132",
    "title": "Palindrome Partitioning II",
    "difficulty": "Hard",
    "explanation": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome.\n\nReturn the minimum cuts needed for a palindrome partitioning of `s`.",
    "examples": [
      "Input: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.",
      "Input: s = \"a\"\nOutput: 0",
      "Input: s = \"ab\"\nOutput: 1"
    ],
    "constraints": "`1 <= s.length <= 2000`\n`s` consists of lower-case English letters only."
  },
  {
    "id": "133",
    "title": "Clone Graph",
    "difficulty": "Medium",
    "explanation": "Given a reference of a node in a connected undirected graph.\n\nReturn a deep copy (clone) of the graph.\n\nEach node in the graph contains a val (`int`) and a list (`List[Node]`) of its neighbors.\n\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\nTest case format:\nFor simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with `val = 1`, the second node with `val = 2`, and so on. The graph is represented in the test case using an adjacency list.\n\nAdjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n\nThe given node will always be the first node with `val = 1`. You must return the copy of the given node as a reference to the cloned graph.",
    "examples": [
      "Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).",
      "Input: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.",
      "Input: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.",
      "Input: adjList = [[2],[1]]\nOutput: [[2],[1]]"
    ],
    "constraints": "`1 <= Node.val <= 100`\n`Node.val` is unique for each node.\n\nNumber of Nodes will not exceed 100.\n\nThere is no repeated edges and no self-loops in the graph.\n\nThe Graph is connected and all nodes can be visited starting from the given node."
  },
  {
    "id": "134",
    "title": "Gas Station",
    "difficulty": "Medium",
    "explanation": "There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.\n\nGiven two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`. If there exists a solution, it is guaranteed to be unique",
    "examples": [
      "Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n\nTherefore, return 3 as the starting index.",
      "Input: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n\nTherefore, you can't travel around the circuit once no matter where you start."
    ],
    "constraints": "`gas.length == n`\n`cost.length == n`\n`1 <= n <= 104`\n`0 <= gas[i], cost[i] <= 104`"
  },
  {
    "id": "135",
    "title": "Candy",
    "difficulty": "Hard",
    "explanation": "There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.\n\nYou are giving candies to these children subjected to the following requirements:\nEach child must have at least one candy.\n\nChildren with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children.",
    "examples": [
      "Input: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.",
      "Input: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n\nThe third child gets 1 candy because it satisfies the above two conditions."
    ],
    "constraints": "`n == ratings.length`\n`1 <= n <= 2 * 104`\n`0 <= ratings[i] <= 2 * 104`"
  },
  {
    "id": "136",
    "title": "Single Number",
    "difficulty": "Easy",
    "explanation": "Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.\n\nFollow up: Could you implement a solution with a linear runtime complexity and without using extra memory?",
    "examples": [
      "Input: nums = [2,2,1]\nOutput: 1",
      "Input: nums = [4,1,2,1,2]\nOutput: 4",
      "Input: nums = [1]\nOutput: 1"
    ],
    "constraints": "`1 <= nums.length <= 3 * 104`\n`-3 * 104 <= nums[i] <= 3 * 104`\nEach element in the array appears twice except for one element which appears only once."
  },
  {
    "id": "137",
    "title": "Single Number II",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` where every element appears three times except for one, which appears exactly once. Find the single element and return it.",
    "examples": [
      "Input: nums = [2,2,3,2]\nOutput: 3",
      "Input: nums = [0,1,0,1,0,1,99]\nOutput: 99"
    ],
    "constraints": "`1 <= nums.length <= 3 * 104`\n`-231 <= nums[i] <= 231 - 1`\nEach element in `nums` appears exactly three times except for one element which appears once.\n\nFollow up: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?"
  },
  {
    "id": "138",
    "title": "Copy List with Random Pointer",
    "difficulty": "Medium",
    "explanation": "A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.\n\nConstruct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n\nFor example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.\n\nReturn the head of the copied linked list.\n\nThe linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:\n`val`: an integer representing `Node.val`\n`random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.\n\nYour code will only be given the `head` of the original linked list.",
    "examples": [
      "Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]",
      "Input: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]",
      "Input: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]",
      "Input: head = []\nOutput: []\nExplanation: The given linked list is empty (null pointer), so return null."
    ],
    "constraints": "`0 <= n <= 1000`\n`-10000 <= Node.val <= 10000`\n`Node.random` is `null` or is pointing to some node in the linked list."
  },
  {
    "id": "139",
    "title": "Word Break",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
    "examples": [
      "Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".",
      "Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n\nNote that you are allowed to reuse a dictionary word.",
      "Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false"
    ],
    "constraints": "`1 <= s.length <= 300`\n`1 <= wordDict.length <= 1000`\n`1 <= wordDict[i].length <= 20`\n`s` and `wordDict[i]` consist of only lowercase English letters.\n\nAll the strings of `wordDict` are unique."
  },
  {
    "id": "140",
    "title": "Word Break II",
    "difficulty": "Hard",
    "explanation": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
    "examples": [
      "Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]",
      "Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.",
      "Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []"
    ],
    "constraints": "`1 <= s.length <= 20`\n`1 <= wordDict.length <= 1000`\n`1 <= wordDict[i].length <= 10`\n`s` and `wordDict[i]` consist of only lowercase English letters.\n\nAll the strings of `wordDict` are unique."
  },
  {
    "id": "141",
    "title": "Linked List Cycle",
    "difficulty": "Easy",
    "explanation": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.\n\nReturn `true` if there is a cycle in the linked list. Otherwise, return `false`.",
    "examples": [
      "Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).",
      "Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.",
      "Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list."
    ],
    "constraints": "The number of the nodes in the list is in the range `[0, 104]`.\n\n`-105 <= Node.val <= 105`\n`pos` is `-1` or a valid index in the linked-list.\n\nFollow up: Can you solve it using `O(1)` (i.e. constant) memory?"
  },
  {
    "id": "142",
    "title": "Linked List Cycle II",
    "difficulty": "Medium",
    "explanation": "Given a linked list, return the node where the cycle begins. If there is no cycle, return `null`.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.\n\nNotice that you should not modify the linked list.",
    "examples": [
      "Input: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.",
      "Input: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.",
      "Input: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list."
    ],
    "constraints": "The number of the nodes in the list is in the range `[0, 104]`.\n\n`-105 <= Node.val <= 105`\n`pos` is `-1` or a valid index in the linked-list.\n\nFollow up: Can you solve it using `O(1)` (i.e. constant) memory?"
  },
  {
    "id": "143",
    "title": "Reorder List",
    "difficulty": "Medium",
    "explanation": "You are given the head of a singly linked-list. The list can be represented as:\nL0 → L1 → ... → Ln - 1 → Ln\nReorder the list to be on the following form:\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → ...\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.",
    "examples": [
      "Input: head = [1,2,3,4]\nOutput: [1,4,2,3]",
      "Input: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]"
    ],
    "constraints": "The number of nodes in the list is in the range `[1, 5 * 104]`.\n\n`1 <= Node.val <= 1000`"
  },
  {
    "id": "144",
    "title": "Binary Tree Preorder Traversal",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the preorder traversal of its nodes' values.",
    "examples": [
      "Input: root = [1,null,2,3]\nOutput: [1,2,3]",
      "Input: root = []\nOutput: []",
      "Input: root = [1]\nOutput: [1]",
      "Input: root = [1,2]\nOutput: [1,2]",
      "Input: root = [1,null,2]\nOutput: [1,2]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`\nFollow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "id": "145",
    "title": "Binary Tree Postorder Traversal",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the postorder traversal of its nodes' values.",
    "examples": [
      "Input: root = [1,null,2,3]\nOutput: [3,2,1]",
      "Input: root = []\nOutput: []",
      "Input: root = [1]\nOutput: [1]",
      "Input: root = [1,2]\nOutput: [2,1]",
      "Input: root = [1,null,2]\nOutput: [2,1]"
    ],
    "constraints": "The number of the nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`\nFollow up:\nRecursive solution is trivial, could you do it iteratively?"
  },
  {
    "id": "146",
    "title": "LRU Cache",
    "difficulty": "Medium",
    "explanation": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n\nImplement the `LRUCache` class:\n`LRUCache(int capacity)` Initialize the LRU cache with positive size `capacity`.\n\n`int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.\n\n`void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, evict the least recently used key.\n\nFollow up:\nCould you do `get` and `put` in `O(1)` time complexity?",
    "examples": [
      "Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
    ],
    "constraints": "`1 <= capacity <= 3000`\n`0 <= key <= 3000`\n`0 <= value <= 104`\nAt most `3 * 104` calls will be made to `get` and `put`."
  },
  {
    "id": "147",
    "title": "Insertion Sort List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n\nThe steps of the insertion sort algorithm:\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n\nIt repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.",
    "examples": [
      "Input: head = [4,2,1,3]\nOutput: [1,2,3,4]",
      "Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]"
    ],
    "constraints": "The number of nodes in the list is in the range `[1, 5000]`.\n\n`-5000 <= Node.val <= 5000`"
  },
  {
    "id": "148",
    "title": "Sort List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a linked list, return the list after sorting it in ascending order.\n\nFollow up: Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?",
    "examples": [
      "Input: head = [4,2,1,3]\nOutput: [1,2,3,4]",
      "Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]",
      "Input: head = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 5 * 104]`.\n\n`-105 <= Node.val <= 105`"
  },
  {
    "id": "149",
    "title": "Max Points on a Line",
    "difficulty": "Hard",
    "explanation": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.",
    "examples": [
      "Input: points = [[1,1],[2,2],[3,3]]\nOutput: 3",
      "Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4"
    ],
    "constraints": "`1 <= points.length <= 300`\n`points[i].length == 2`\n`-104 <= xi, yi <= 104`\nAll the `points` are unique."
  },
  {
    "id": "150",
    "title": "Evaluate Reverse Polish Notation",
    "difficulty": "Medium",
    "explanation": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n\nValid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression.\n\nNote that division between two integers should truncate toward zero.\n\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.",
    "examples": [
      "Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9",
      "Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6",
      "Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"
    ],
    "constraints": "`1 <= tokens.length <= 104`\n`tokens[i]` is either an operator: `\"+\"`, `\"-\"`, `\"*\"`, or `\"/\"`, or an integer in the range `[-200, 200]`."
  },
  {
    "id": "151",
    "title": "Reverse Words in a String",
    "difficulty": "Medium",
    "explanation": "Given an input string `s`, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\nNote that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
    "examples": [
      "Input: s = \"the sky is blue\"\nOutput: \"blue is sky the\"",
      "Input: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.",
      "Input: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.",
      "Input: s = \"  Bob    Loves  Alice   \"\nOutput: \"Alice Loves Bob\"",
      "Input: s = \"Alice does not even like bob\"\nOutput: \"bob like even not does Alice\""
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.\n\nThere is at least one word in `s`.\n\nFollow up: Could you solve it in-place with `O(1)` extra space?"
  },
  {
    "id": "152",
    "title": "Maximum Product Subarray",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\n\nIt is guaranteed that the answer will fit in a 32-bit integer.\n\nA subarray is a contiguous subsequence of the array.",
    "examples": [
      "Input: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.",
      "Input: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray."
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`-10 <= nums[i] <= 10`\nThe product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer."
  },
  {
    "id": "153",
    "title": "Find Minimum in Rotated Sorted Array",
    "difficulty": "Medium",
    "explanation": "Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n`[4,5,6,7,0,1,2]` if it was rotated `4` times.\n\n`[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\nNotice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` of unique elements, return the minimum element of this array.",
    "examples": [
      "Input: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.",
      "Input: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.",
      "Input: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times."
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 5000`\n`-5000 <= nums[i] <= 5000`\nAll the integers of `nums` are unique.\n\n`nums` is sorted and rotated between `1` and `n` times."
  },
  {
    "id": "154",
    "title": "Find Minimum in Rotated Sorted Array II",
    "difficulty": "Hard",
    "explanation": "Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:\n`[4,5,6,7,0,1,4]` if it was rotated `4` times.\n\n`[0,1,4,4,5,6,7]` if it was rotated `7` times.\n\nNotice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` that may contain duplicates, return the minimum element of this array.",
    "examples": [
      "Input: nums = [1,3,5]\nOutput: 1",
      "Input: nums = [2,2,2,0,1]\nOutput: 0"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 5000`\n`-5000 <= nums[i] <= 5000`\n`nums` is sorted and rotated between `1` and `n` times.\n\nFollow up: This is the same as Find Minimum in Rotated Sorted Array but with duplicates. Would allow duplicates affect the run-time complexity? How and why?"
  },
  {
    "id": "155",
    "title": "Min Stack",
    "difficulty": "Easy",
    "explanation": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the `MinStack` class:\n`MinStack()` initializes the stack object.\n\n`void push(val)` pushes the element `val` onto the stack.\n\n`void pop()` removes the element on the top of the stack.\n\n`int top()` gets the top element of the stack.\n\n`int getMin()` retrieves the minimum element in the stack.",
    "examples": [
      "Input\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\nOutput\n[null,null,null,null,-3,null,0,-2]\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2"
    ],
    "constraints": "`-231 <= val <= 231 - 1`\nMethods `pop`, `top` and `getMin` operations will always be called on non-empty stacks.\n\nAt most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`."
  },
  {
    "id": "156",
    "title": "Binary Tree Upside Down",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, turn the tree upside down and return the new root.\n\nYou can turn a binary tree upside down with the following steps:\nThe original left child becomes the new root.\n\nThe original root becomes the new right child.\n\nThe original right child becomes the new left child.\n\nThe mentioned steps are done level by level, it is guaranteed that every node in the given tree has either 0 or 2 children.",
    "examples": [
      "Input: root = [1,2,3,4,5]\nOutput: [4,5,2,null,null,3,1]",
      "Input: root = []\nOutput: []",
      "Input: root = [1]\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the tree will be in the range `[0, 10]`.\n\n`1 <= Node.val <= 10`\n`Every node has either 0 or 2 children.`"
  },
  {
    "id": "157",
    "title": "Read N Characters Given Read4",
    "difficulty": "Easy",
    "explanation": "Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.\n\nMethod read4: \nThe API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.\n\nThe return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C.\n\nDefinition of read4:\n    Parameter:  char[] buf4\n    Returns:    int\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\n\nBelow is a high-level example of how `read4` works:\nFile file(\"abcde`\"); // File is \"`abcde`\", initially file pointer (fp) points to 'a'\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = \"abcd\", fp points to 'e'\nread4(buf4); // read4 returns 1. Now buf4 = \"e\", fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = \"\", fp points to end of file`\nMethod read:\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.\n\nThe return value is the number of actual characters read.\n\nDefinition of read: \n    Parameters:\tchar[] buf, int n\n    Returns:\tint\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n\nNote:\nConsider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.\n\nThe `read` function will only be called once for each test case.\n\nYou may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.",
    "examples": [
      "Input: file = \"abc\", n = 4\nOutput: 3\nExplanation: After calling your read method, buf should contain \"abc\". We read a total of 3 characters from the file, so return 3.\n\nNote that \"abc\" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.",
      "Input: file = \"abcde\", n = 5\nOutput: 5\nExplanation: After calling your read method, buf should contain \"abcde\". We read a total of 5 characters from the file, so return 5.",
      "Input: file = \"abcdABCD1234\", n = 12\nOutput: 12\nExplanation: After calling your read method, buf should contain \"abcdABCD1234\". We read a total of 12 characters from the file, so return 12.",
      "Input: file = \"leetcode\", n = 5\nOutput: 5\nExplanation: After calling your read method, buf should contain \"leetc\". We read a total of 5 characters from the file, so return 5."
    ],
    "constraints": "`1 <= file.length <= 500`\n`file` consist of English letters and digits.\n\n`1 <= n <= 1000`"
  },
  {
    "id": "158",
    "title": "Read N Characters Given Read4 II - Call multiple times",
    "difficulty": "Hard",
    "explanation": "Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be called multiple times.\n\nMethod read4: \nThe API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.\n\nThe return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C.\n\nDefinition of read4:\n    Parameter:  char[] buf4\n    Returns:    int\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\n\nBelow is a high-level example of how `read4` works:\nFile file(\"abcde`\"); // File is \"`abcde`\", initially file pointer (fp) points to 'a'\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = \"abcd\", fp points to 'e'\nread4(buf4); // read4 returns 1. Now buf4 = \"e\", fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = \"\", fp points to end of file`\nMethod read:\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.\n\nThe return value is the number of actual characters read.\n\nDefinition of read: \n    Parameters:\tchar[] buf, int n\n    Returns:\tint\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n\nNote:\nConsider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.\n\nThe read function may be called multiple times.\n\nPlease remember to RESET your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see here for more details.\n\nYou may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.\n\nIt is guaranteed that in a given test case the same buffer `buf` is called by `read`.",
    "examples": [
      "Input: file = \"abc\", queries = [1,2,1]\nOutput: [1,2,0]\nExplanation: The test case represents the following scenario:\nFile file(\"abc\");\nSolution sol;\nsol.read(buf, 1); // After calling your read method, buf should contain \"a\". We read a total of 1 character from the file, so return 1.\n\nsol.read(buf, 2); // Now buf should contain \"bc\". We read a total of 2 characters from the file, so return 2.\n\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\n\nAssume buf is allocated and guaranteed to have enough space for storing all characters from the file.",
      "Input: file = \"abc\", queries = [4,1]\nOutput: [3,0]\nExplanation: The test case represents the following scenario:\nFile file(\"abc\");\nSolution sol;\nsol.read(buf, 4); // After calling your read method, buf should contain \"abc\". We read a total of 3 characters from the file, so return 3.\n\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0."
    ],
    "constraints": "`1 <= file.length <= 500`\n`file` consist of English letters and digits.\n\n`1 <= queries.length <= 10`\n`1 <= queries[i] <= 500`"
  },
  {
    "id": "159",
    "title": "Longest Substring with At Most Two Distinct Characters",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, return the length of the longest substring that contains at most two distinct characters.",
    "examples": [
      "Input: s = \"eceba\"\nOutput: 3\nExplanation: The substring is \"ece\" which its length is 3.",
      "Input: s = \"ccaabbb\"\nOutput: 5\nExplanation: The substring is \"aabbb\" which its length is 5."
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of English letters."
  },
  {
    "id": "160",
    "title": "Intersection of Two Linked Lists",
    "difficulty": "Easy",
    "explanation": "Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.\n\nFor example, the following two linked lists begin to intersect at node `c1`:\nIt is guaranteed that there are no cycles anywhere in the entire linked structure.\n\nNote that the linked lists must retain their original structure after the function returns.",
    "examples": [
      "Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\n\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.",
      "Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\n\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.",
      "Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\n\nExplanation: The two lists do not intersect, so return null."
    ],
    "constraints": "The number of nodes of `listA` is in the `m`.\n\nThe number of nodes of `listB` is in the `n`.\n\n`0 <= m, n <= 3 * 104`\n`1 <= Node.val <= 105`\n`0 <= skipA <= m`\n`0 <= skipB <= n`\n`intersectVal` is `0` if `listA` and `listB` do not intersect.\n\n`intersectVal == listA[skipA + 1] == listB[skipB + 1]` if `listA` and `listB` intersect.\n\nFollow up: Could you write a solution that runs in `O(n)` time and use only `O(1)` memory?"
  },
  {
    "id": "161",
    "title": "One Edit Distance",
    "difficulty": "Medium",
    "explanation": "Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.\n\nA string `s` is said to be one distance apart from a string `t` if you can:\nInsert exactly one character into `s` to get `t`.\n\nDelete exactly one character from `s` to get `t`.\n\nReplace exactly one character of `s` with a different character to get `t`.",
    "examples": [
      "Input: s = \"ab\", t = \"acb\"\nOutput: true\nExplanation: We can insert 'c' into s to get t.",
      "Input: s = \"\", t = \"\"\nOutput: false\nExplanation: We cannot get t from s by only one step.",
      "Input: s = \"a\", t = \"\"\nOutput: true",
      "Input: s = \"\", t = \"A\"\nOutput: true"
    ],
    "constraints": "`0 <= s.length <= 104`\n`0 <= t.length <= 104`\n`s` and `t` consist of lower-case letters, upper-case letters and/or digits."
  },
  {
    "id": "162",
    "title": "Find Peak Element",
    "difficulty": "Medium",
    "explanation": "A peak element is an element that is strictly greater than its neighbors.\n\nGiven an integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n\nYou may imagine that `nums[-1] = nums[n] = -∞`.",
    "examples": [
      "Input: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.",
      "Input: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`-231 <= nums[i] <= 231 - 1`\n`nums[i] != nums[i + 1]` for all valid `i`.\n\nFollow up: Could you implement a solution with logarithmic complexity?"
  },
  {
    "id": "163",
    "title": "Missing Ranges",
    "difficulty": "Easy",
    "explanation": "You are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range.\n\nA number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`.\n\nReturn the smallest sorted list of ranges that cover every missing number exactly. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.\n\nEach range `[a,b]` in the list should be output as:\n`\"a->b\"` if `a != b`\n`\"a\"` if `a == b`",
    "examples": [
      "Input: nums = [0,1,3,50,75], lower = 0, upper = 99\nOutput: [\"2\",\"4->49\",\"51->74\",\"76->99\"]\nExplanation: The ranges are:\n[2,2] --> \"2\"\n[4,49] --> \"4->49\"\n[51,74] --> \"51->74\"\n[76,99] --> \"76->99\"",
      "Input: nums = [], lower = 1, upper = 1\nOutput: [\"1\"]\nExplanation: The only missing range is [1,1], which becomes \"1\".",
      "Input: nums = [], lower = -3, upper = -1\nOutput: [\"-3->-1\"]\nExplanation: The only missing range is [-3,-1], which becomes \"-3->-1\".",
      "Input: nums = [-1], lower = -1, upper = -1\nOutput: []\nExplanation: There are no missing ranges since there are no missing numbers.",
      "Input: nums = [-1], lower = -2, upper = -1\nOutput: [\"-2\"]"
    ],
    "constraints": "`-109 <= lower <= upper <= 109`\n`0 <= nums.length <= 100`\n`lower <= nums[i] <= upper`\nAll the values of `nums` are unique."
  },
  {
    "id": "164",
    "title": "Maximum Gap",
    "difficulty": "Hard",
    "explanation": "Given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return `0`.",
    "examples": [
      "Input: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
      "Input: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0."
    ],
    "constraints": "`1 <= nums.length <= 104`\n`0 <= nums[i] <= 109`\nFollow up: Could you solve it in linear time/space?"
  },
  {
    "id": "165",
    "title": "Compare Version Numbers",
    "difficulty": "Medium",
    "explanation": "Given two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of one or more revisions joined by a dot `'.'`. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions `1` and `001` are considered equal. If a version number does not specify a revision at an index, then treat the revision as `0`. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\nReturn the following:\nIf `version1 < version2`, return `-1`.\n\nIf `version1 > version2`, return `1`.\n\nOtherwise, return `0`.",
    "examples": [
      "Input: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".",
      "Input: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".",
      "Input: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.",
      "Input: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1",
      "Input: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1"
    ],
    "constraints": "`1 <= version1.length, version2.length <= 500`\n`version1` and `version2` only contain digits and `'.'`.\n\n`version1` and `version2` are valid version numbers.\n\nAll the given revisions in `version1` and `version2` can be stored in a 32-bit integer."
  },
  {
    "id": "166",
    "title": "Fraction to Recurring Decimal",
    "difficulty": "Medium",
    "explanation": "Given two integers representing the `numerator` and `denominator` of a fraction, return the fraction in string format.\n\nIf the fractional part is repeating, enclose the repeating part in parentheses.\n\nIf multiple answers are possible, return any of them.\n\nIt is guaranteed that the length of the answer string is less than `104` for all the given inputs.",
    "examples": [
      "Input: numerator = 1, denominator = 2\nOutput: \"0.5\"",
      "Input: numerator = 2, denominator = 1\nOutput: \"2\"",
      "Input: numerator = 2, denominator = 3\nOutput: \"0.(6)\"",
      "Input: numerator = 4, denominator = 333\nOutput: \"0.(012)\"",
      "Input: numerator = 1, denominator = 5\nOutput: \"0.2\""
    ],
    "constraints": "`-231 <= numerator, denominator <= 231 - 1`\n`denominator != 0`"
  },
  {
    "id": "167",
    "title": "Two Sum II - Input array is sorted",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `numbers` that is already sorted in ascending order, find two numbers such that they add up to a specific `target` number.\n\nReturn the indices of the two numbers (1-indexed) as an integer array `answer` of size `2`, where `1 <= answer[0] < answer[1] <= numbers.length`.\n\nYou may assume that each input would have exactly one solution and you may not use the same element twice.",
    "examples": [
      "Input: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.",
      "Input: numbers = [2,3,4], target = 6\nOutput: [1,3]",
      "Input: numbers = [-1,0], target = -1\nOutput: [1,2]"
    ],
    "constraints": "`2 <= numbers.length <= 3 * 104`\n`-1000 <= numbers[i] <= 1000`\n`numbers` is sorted in increasing order.\n\n`-1000 <= target <= 1000`\nOnly one valid answer exists."
  },
  {
    "id": "168",
    "title": "Excel Sheet Column Title",
    "difficulty": "Easy",
    "explanation": "Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet.\n\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\n\nZ -> 26\nAA -> 27\nAB -> 28 \n...",
    "examples": [
      "Input: columnNumber = 1\nOutput: \"A\"",
      "Input: columnNumber = 28\nOutput: \"AB\"",
      "Input: columnNumber = 701\nOutput: \"ZY\"",
      "Input: columnNumber = 2147483647\nOutput: \"FXSHRXW\""
    ],
    "constraints": "`1 <= columnNumber <= 231 - 1`"
  },
  {
    "id": "169",
    "title": "Majority Element",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` of size `n`, return the majority element.\n\nThe majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.",
    "examples": [
      "Input: nums = [3,2,3]\nOutput: 3",
      "Input: nums = [2,2,1,1,1,2,2]\nOutput: 2"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 5 * 104`\n`-231 <= nums[i] <= 231 - 1`\nFollow-up: Could you solve the problem in linear time and in `O(1)` space?"
  },
  {
    "id": "170",
    "title": "Two Sum III - Data structure design",
    "difficulty": "Easy",
    "explanation": "Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.\n\nImplement the `TwoSum` class:\n`TwoSum()` Initializes the `TwoSum` object, with an empty array initially.\n\n`void add(int number)` Adds `number` to the data structure.\n\n`boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.",
    "examples": [
      "Input\n[\"TwoSum\", \"add\", \"add\", \"add\", \"find\", \"find\"]\n[[], [1], [3], [5], [4], [7]]\nOutput\n[null, null, null, null, true, false]\nExplanation\nTwoSum twoSum = new TwoSum();\ntwoSum.add(1);   // [] --> [1]\ntwoSum.add(3);   // [1] --> [1,3]\ntwoSum.add(5);   // [1,3] --> [1,3,5]\ntwoSum.find(4);  // 1 + 3 = 4, return true\ntwoSum.find(7);  // No two integers sum up to 7, return false"
    ],
    "constraints": "`-105 <= number <= 105`\n`-231 <= value <= 231 - 1`\nAt most `5 * 104` calls will be made to `add` and `find`."
  },
  {
    "id": "171",
    "title": "Excel Sheet Column Number",
    "difficulty": "Easy",
    "explanation": "Given a string `columnTitle` that represents the column title as appear in an Excel sheet, return its corresponding column number.\n\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\n\nZ -> 26\nAA -> 27\nAB -> 28 \n...",
    "examples": [
      "Input: columnTitle = \"A\"\nOutput: 1",
      "Input: columnTitle = \"AB\"\nOutput: 28",
      "Input: columnTitle = \"ZY\"\nOutput: 701",
      "Input: columnTitle = \"FXSHRXW\"\nOutput: 2147483647"
    ],
    "constraints": "`1 <= columnTitle.length <= 7`\n`columnTitle` consists only of uppercase English letters.\n\n`columnTitle` is in the range `[\"A\", \"FXSHRXW\"]`."
  },
  {
    "id": "172",
    "title": "Factorial Trailing Zeroes",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return the number of trailing zeroes in `n!`.\n\nFollow up: Could you write a solution that works in logarithmic time complexity?",
    "examples": [
      "Input: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.",
      "Input: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.",
      "Input: n = 0\nOutput: 0"
    ],
    "constraints": "`0 <= n <= 104`"
  },
  {
    "id": "173",
    "title": "Binary Search Tree Iterator",
    "difficulty": "Medium",
    "explanation": "Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):\n`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n\n`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n\n`int next()` Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.",
    "examples": [
      "Input\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 105]`.\n\n`0 <= Node.val <= 106`\nAt most `105` calls will be made to `hasNext`, and `next`.\n\nFollow up:\nCould you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?"
  },
  {
    "id": "174",
    "title": "Dungeon Game",
    "difficulty": "Hard",
    "explanation": "The demons had captured the princess and imprisoned her in the bottom-right corner of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through `dungeon` to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n\nReturn the knight's minimum initial health so that he can rescue the princess.\n\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.",
    "examples": [
      "Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.",
      "Input: dungeon = [[0]]\nOutput: 1"
    ],
    "constraints": "`m == dungeon.length`\n`n == dungeon[i].length`\n`1 <= m, n <= 200`\n`-1000 <= dungeon[i][j] <= 1000`"
  },
  {
    "id": "175",
    "title": "Combine Two Tables",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "176",
    "title": "Second Highest Salary",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "177",
    "title": "Nth Highest Salary",
    "difficulty": "Medium",
    "explanation": "Write a SQL query to get the nth highest salary from the `Employee` table.\n\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nFor example, given the above Employee table, the nth highest salary where n = 2 is `200`. If there is no nth highest salary, then the query should return `null`.\n\n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "178",
    "title": "Rank Scores",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "179",
    "title": "Largest Number",
    "difficulty": "Medium",
    "explanation": "Given a list of non-negative integers `nums`, arrange them such that they form the largest number.\n\nNote: The result may be very large, so you need to return a string instead of an integer.",
    "examples": [
      "Input: nums = [10,2]\nOutput: \"210\"",
      "Input: nums = [3,30,34,5,9]\nOutput: \"9534330\"",
      "Input: nums = [1]\nOutput: \"1\"",
      "Input: nums = [10]\nOutput: \"10\""
    ],
    "constraints": "`1 <= nums.length <= 100`\n`0 <= nums[i] <= 109`"
  },
  {
    "id": "180",
    "title": "Consecutive Numbers",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "181",
    "title": "Employees Earning More Than Their Managers",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "182",
    "title": "Duplicate Emails",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "183",
    "title": "Customers Who Never Order",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "184",
    "title": "Department Highest Salary",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "185",
    "title": "Department Top Three Salaries",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "186",
    "title": "Reverse Words in a String II",
    "difficulty": "Medium",
    "explanation": "Given a character array `s`, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in `s` will be separated by a single space.",
    "examples": [
      "Input: s = [\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]\nOutput: [\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]",
      "Input: s = [\"a\"]\nOutput: [\"a\"]"
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.\n\nThere is at least one word in `s`.\n\n`s` does not contain leading or trailing spaces.\n\nAll the words in `s` are guaranteed to be separated by a single space.\n\nFollow up: Could you do it in-place without allocating extra space?"
  },
  {
    "id": "187",
    "title": "Repeated DNA Sequences",
    "difficulty": "Medium",
    "explanation": "The DNA sequence is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.\n\nFor example, `\"ACGAATTCCG\"` is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\n\nGiven a string `s` that represents a DNA sequence, return all the `10`-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.",
    "examples": [
      "Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]",
      "Input: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]"
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`."
  },
  {
    "id": "188",
    "title": "Best Time to Buy and Sell Stock IV",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "examples": [
      "Input: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.",
      "Input: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."
    ],
    "constraints": "`0 <= k <= 100`\n`0 <= prices.length <= 1000`\n`0 <= prices[i] <= 1000`"
  },
  {
    "id": "189",
    "title": "Rotate Array",
    "difficulty": "Medium",
    "explanation": "Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.",
    "examples": [
      "Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]",
      "Input: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`-231 <= nums[i] <= 231 - 1`\n`0 <= k <= 105`\nFollow up:\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\n\nCould you do it in-place with `O(1)` extra space?"
  },
  {
    "id": "190",
    "title": "Reverse Bits",
    "difficulty": "Easy",
    "explanation": "Reverse bits of a given 32 bits unsigned integer.\n\nNote:\nNote that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n\n\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.\n\nFollow up:\nIf this function is called many times, how would you optimize it?",
    "examples": [
      "Input: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.",
      "Input: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111."
    ],
    "constraints": "The input must be a binary string of length `32`"
  },
  {
    "id": "191",
    "title": "Number of 1 Bits",
    "difficulty": "Easy",
    "explanation": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\nNote:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n\n\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. `-3`.",
    "examples": [
      "Input: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.",
      "Input: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.",
      "Input: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits."
    ],
    "constraints": "The input must be a binary string of length `32`.\n\nFollow up: If this function is called many times, how would you optimize it?"
  },
  {
    "id": "192",
    "title": "Word Frequency",
    "difficulty": "Medium",
    "explanation": "Write a bash script to calculate the frequency of each word in a text file `words.txt`.\n\nFor simplicity sake, you may assume:\n`words.txt` contains only lowercase characters and space `' '` characters.\n\nEach word must consist of lowercase characters only.\n\nWords are separated by one or more whitespace characters.\n\n\nExample:\nAssume that `words.txt` has the following content:\nthe day is sunny the the\nthe sunny is is\nYour script should output the following, sorted by descending frequency:\nthe 4\nis 3\nsunny 2\nday 1\nNote:\nDon't worry about handling ties, it is guaranteed that each word's frequency count is unique.\n\nCould you write it in one-line using Unix pipes?",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "193",
    "title": "Valid Phone Numbers",
    "difficulty": "Easy",
    "explanation": "Given a text file `file.txt` that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\n\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\n\n\nExample:\nAssume that `file.txt` has the following content:\n987-123-4567\n123 456 7890\n(123) 456-7890\nYour script should output the following valid phone numbers:\n987-123-4567\n(123) 456-7890",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "194",
    "title": "Transpose File",
    "difficulty": "Medium",
    "explanation": "Given a text file `file.txt`, transpose its content.\n\nYou may assume that each row has the same number of columns, and each field is separated by the `' '` character.\n\n\nExample:\nIf `file.txt` has the following content:\nname age\nalice 21\nryan 30\nOutput the following:\nname alice ryan\nage 21 30",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "195",
    "title": "Tenth Line",
    "difficulty": "Easy",
    "explanation": "Given a text file `file.txt`, print just the 10th line of the file.\n\n\nExample:\nAssume that `file.txt` has the following content:\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\nYour script should output the tenth line, which is:\nLine 10\nNote:\n1. If the file contains less than 10 lines, what should you output?\n2. There's at least three different solutions. Try to explore all possibilities.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "196",
    "title": "Delete Duplicate Emails",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "197",
    "title": "Rising Temperature",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "198",
    "title": "House Robber",
    "difficulty": "Medium",
    "explanation": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "examples": [
      "Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n\nTotal amount you can rob = 1 + 3 = 4.",
      "Input: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n\nTotal amount you can rob = 2 + 9 + 1 = 12."
    ],
    "constraints": "`1 <= nums.length <= 100`\n`0 <= nums[i] <= 400`"
  },
  {
    "id": "199",
    "title": "Binary Tree Right Side View",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
    "examples": [
      "Input: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]",
      "Input: root = [1,null,3]\nOutput: [1,3]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "200",
    "title": "Number of Islands",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "examples": [
      "Input: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1",
      "Input: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 300`\n`grid[i][j]` is `'0'` or `'1'`."
  },
  {
    "id": "201",
    "title": "Bitwise AND of Numbers Range",
    "difficulty": "Medium",
    "explanation": "Given two integers `left` and `right` that represent the range `[left, right]`, return the bitwise AND of all numbers in this range, inclusive.",
    "examples": [
      "Input: left = 5, right = 7\nOutput: 4",
      "Input: left = 0, right = 0\nOutput: 0",
      "Input: left = 1, right = 2147483647\nOutput: 0"
    ],
    "constraints": "`0 <= left <= right <= 231 - 1`"
  },
  {
    "id": "202",
    "title": "Happy Number",
    "difficulty": "Easy",
    "explanation": "Write an algorithm to determine if a number `n` is happy.\n\nA happy number is a number defined by the following process:\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\n\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n\nThose numbers for which this process ends in 1 are happy.\n\nReturn `true` if `n` is a happy number, and `false` if not.",
    "examples": [
      "Input: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1",
      "Input: n = 2\nOutput: false"
    ],
    "constraints": "`1 <= n <= 231 - 1`"
  },
  {
    "id": "203",
    "title": "Remove Linked List Elements",
    "difficulty": "Easy",
    "explanation": "Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return the new head.",
    "examples": [
      "Input: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]",
      "Input: head = [], val = 1\nOutput: []",
      "Input: head = [7,7,7,7], val = 7\nOutput: []"
    ],
    "constraints": "The number of nodes in the list is in the range `[0, 104]`.\n\n`1 <= Node.val <= 50`\n`0 <= k <= 50`"
  },
  {
    "id": "204",
    "title": "Count Primes",
    "difficulty": "Easy",
    "explanation": "Count the number of prime numbers less than a non-negative number, `n`.",
    "examples": [
      "Input: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.",
      "Input: n = 0\nOutput: 0",
      "Input: n = 1\nOutput: 0"
    ],
    "constraints": "`0 <= n <= 5 * 106`"
  },
  {
    "id": "205",
    "title": "Isomorphic Strings",
    "difficulty": "Easy",
    "explanation": "Given two strings `s` and `t`, determine if they are isomorphic.\n\nTwo strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.\n\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
    "examples": [
      "Input: s = \"egg\", t = \"add\"\nOutput: true",
      "Input: s = \"foo\", t = \"bar\"\nOutput: false",
      "Input: s = \"paper\", t = \"title\"\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 5 * 104`\n`t.length == s.length`\n`s` and `t` consist of any valid ascii character."
  },
  {
    "id": "206",
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "explanation": "Given the `head` of a singly linked list, reverse the list, and return the reversed list.",
    "examples": [
      "Input: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]",
      "Input: head = [1,2]\nOutput: [2,1]",
      "Input: head = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the list is the range `[0, 5000]`.\n\n`-5000 <= Node.val <= 5000`\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?"
  },
  {
    "id": "207",
    "title": "Course Schedule",
    "difficulty": "Medium",
    "explanation": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.\n\nFor example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.",
    "examples": [
      "Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.",
      "Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
    ],
    "constraints": "`1 <= numCourses <= 105`\n`0 <= prerequisites.length <= 5000`\n`prerequisites[i].length == 2`\n`0 <= ai, bi < numCourses`\nAll the pairs prerequisites[i] are unique."
  },
  {
    "id": "208",
    "title": "Implement Trie (Prefix Tree)",
    "difficulty": "Medium",
    "explanation": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n`Trie()` Initializes the trie object.\n\n`void insert(String word)` Inserts the string `word` into the trie.\n\n`boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n\n`boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.",
    "examples": [
      "Input\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True"
    ],
    "constraints": "`1 <= word.length, prefix.length <= 2000`\n`word` and `prefix` consist only of lowercase English letters.\n\nAt most `3 * 104` calls in total will be made to `insert`, `search`, and `startsWith`."
  },
  {
    "id": "209",
    "title": "Minimum Size Subarray Sum",
    "difficulty": "Medium",
    "explanation": "Given an array of positive integers `nums` and a positive integer `target`, return the minimal length of a contiguous subarray `[numsl, numsl+1, ..., numsr-1, numsr]` of which the sum is greater than or equal to `target`. If there is no such subarray, return `0` instead.",
    "examples": [
      "Input: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.",
      "Input: target = 4, nums = [1,4,4]\nOutput: 1",
      "Input: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0"
    ],
    "constraints": "`1 <= target <= 109`\n`1 <= nums.length <= 105`\n`1 <= nums[i] <= 105`\nFollow up: If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`."
  },
  {
    "id": "210",
    "title": "Course Schedule II",
    "difficulty": "Medium",
    "explanation": "There are a total of `n` courses you have to take labelled from `0` to `n - 1`.\n\nSome courses may have `prerequisites`, for example, if `prerequisites[i] = [ai, bi]` this means you must take the course `bi` before the course `ai`.\n\nGiven the total number of courses `numCourses` and a list of the `prerequisite` pairs, return the ordering of courses you should take to finish all courses.\n\nIf there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
    "examples": [
      "Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].",
      "Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\n\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].",
      "Input: numCourses = 1, prerequisites = []\nOutput: [0]"
    ],
    "constraints": "`1 <= numCourses <= 2000`\n`0 <= prerequisites.length <= numCourses * (numCourses - 1)`\n`prerequisites[i].length == 2`\n`0 <= ai, bi < numCourses`\n`ai != bi`\nAll the pairs `[ai, bi]` are distinct."
  },
  {
    "id": "211",
    "title": "Design Add and Search Words Data Structure",
    "difficulty": "Medium",
    "explanation": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the `WordDictionary` class:\n`WordDictionary()` Initializes the object.\n\n`void addWord(word)` Adds `word` to the data structure, it can be matched later.\n\n`bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.\n\n\nExample:\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n\nConstraints:\n`1 <= word.length <= 500`\n`word` in `addWord` consists lower-case English letters.\n\n`word` in `search` consist of  `'.'` or lower-case English letters.\n\nAt most `50000` calls will be made to `addWord` and `search`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "212",
    "title": "Word Search II",
    "difficulty": "Hard",
    "explanation": "Given an `m x n` `board` of characters and a list of strings `words`, return all words on the board.\n\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.",
    "examples": [
      "Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]",
      "Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []"
    ],
    "constraints": "`m == board.length`\n`n == board[i].length`\n`1 <= m, n <= 12`\n`board[i][j]` is a lowercase English letter.\n\n`1 <= words.length <= 3 * 104`\n`1 <= words[i].length <= 10`\n`words[i]` consists of lowercase English letters.\n\nAll the strings of `words` are unique."
  },
  {
    "id": "213",
    "title": "House Robber II",
    "difficulty": "Medium",
    "explanation": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "examples": [
      "Input: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.",
      "Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n\nTotal amount you can rob = 1 + 3 = 4.",
      "Input: nums = [0]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`0 <= nums[i] <= 1000`"
  },
  {
    "id": "214",
    "title": "Shortest Palindrome",
    "difficulty": "Hard",
    "explanation": "You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.\n\nReturn the shortest palindrome you can find by performing this transformation.",
    "examples": [
      "Input: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"",
      "Input: s = \"abcd\"\nOutput: \"dcbabcd\""
    ],
    "constraints": "`0 <= s.length <= 5 * 104`\n`s` consists of lowercase English letters only."
  },
  {
    "id": "215",
    "title": "Kth Largest Element in an Array",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` and an integer `k`, return the `kth` largest element in the array.\n\nNote that it is the `kth` largest element in the sorted order, not the `kth` distinct element.",
    "examples": [
      "Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5",
      "Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4"
    ],
    "constraints": "`1 <= k <= nums.length <= 104`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "216",
    "title": "Combination Sum III",
    "difficulty": "Medium",
    "explanation": "Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:\nOnly numbers `1` through `9` are used.\n\nEach number is used at most once.\n\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.",
    "examples": [
      "Input: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.",
      "Input: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.",
      "Input: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.",
      "Input: k = 3, n = 2\nOutput: []\nExplanation: There are no valid combinations.",
      "Input: k = 9, n = 45\nOutput: [[1,2,3,4,5,6,7,8,9]]\nExplanation:\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n​​​​​​​There are no other valid combinations."
    ],
    "constraints": "`2 <= k <= 9`\n`1 <= n <= 60`"
  },
  {
    "id": "217",
    "title": "Contains Duplicate",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.",
    "examples": [
      "Input: nums = [1,2,3,1]\nOutput: true",
      "Input: nums = [1,2,3,4]\nOutput: false",
      "Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "218",
    "title": "The Skyline Problem",
    "difficulty": "Hard",
    "explanation": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n\nThe geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:\n`lefti` is the x coordinate of the left edge of the `ith` building.\n\n`righti` is the x coordinate of the right edge of the `ith` building.\n\n`heighti` is the height of the `ith` building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.\n\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`",
    "examples": [
      "Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\n\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.",
      "Input: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]"
    ],
    "constraints": "`1 <= buildings.length <= 104`\n`0 <= lefti < righti <= 231 - 1`\n`1 <= heighti <= 231 - 1`\n`buildings` is sorted by `lefti` in non-decreasing order."
  },
  {
    "id": "219",
    "title": "Contains Duplicate II",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.",
    "examples": [
      "Input: nums = [1,2,3,1], k = 3\nOutput: true",
      "Input: nums = [1,0,1,1], k = 1\nOutput: true",
      "Input: nums = [1,2,3,1,2,3], k = 2\nOutput: false"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-109 <= nums[i] <= 109`\n`0 <= k <= 105`"
  },
  {
    "id": "220",
    "title": "Contains Duplicate III",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` and two integers `k` and `t`, return `true` if there are two distinct indices `i` and `j` in the array such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.",
    "examples": [
      "Input: nums = [1,2,3,1], k = 3, t = 0\nOutput: true",
      "Input: nums = [1,0,1,1], k = 1, t = 2\nOutput: true",
      "Input: nums = [1,5,9,1,5,9], k = 2, t = 3\nOutput: false"
    ],
    "constraints": "`0 <= nums.length <= 2 * 104`\n`-231 <= nums[i] <= 231 - 1`\n`0 <= k <= 104`\n`0 <= t <= 231 - 1`"
  },
  {
    "id": "221",
    "title": "Maximal Square",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, find the largest square containing only `1`'s and return its area.",
    "examples": [
      "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4",
      "Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1",
      "Input: matrix = [[\"0\"]]\nOutput: 0"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 300`\n`matrix[i][j]` is `'0'` or `'1'`."
  },
  {
    "id": "222",
    "title": "Count Complete Tree Nodes",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a complete binary tree, return the number of the nodes in the tree.\n\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.",
    "examples": [
      "Input: root = [1,2,3,4,5,6]\nOutput: 6",
      "Input: root = []\nOutput: 0",
      "Input: root = [1]\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 5 * 104]`.\n\n`0 <= Node.val <= 5 * 104`\nThe tree is guaranteed to be complete.\n\nFollow up: Traversing the tree to count the number of nodes in the tree is an easy solution but with `O(n)` complexity. Could you find a faster algorithm?"
  },
  {
    "id": "223",
    "title": "Rectangle Area",
    "difficulty": "Medium",
    "explanation": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\n\nThe first rectangle is defined by its bottom-left corner `(A, B)` and its top-right corner `(C, D)`.\n\nThe second rectangle is defined by its bottom-left corner `(E, F)` and its top-right corner `(G, H)`.",
    "examples": [
      "Input: A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2\nOutput: 45",
      "Input: A = -2, B = -2, C = 2, D = 2, E = -2, F = -2, G = 2, H = 2\nOutput: 16"
    ],
    "constraints": "`-104 <= A, B, C, D, E, F, G, H <= 104`"
  },
  {
    "id": "224",
    "title": "Basic Calculator",
    "difficulty": "Hard",
    "explanation": "Given a string `s` representing an expression, implement a basic calculator to evaluate it.",
    "examples": [
      "Input: s = \"1 + 1\"\nOutput: 2",
      "Input: s = \" 2-1 + 2 \"\nOutput: 3",
      "Input: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23"
    ],
    "constraints": "`1 <= s.length <= 3 * 105`\n`s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.\n\n`s` represents a valid expression."
  },
  {
    "id": "225",
    "title": "Implement Stack using Queues",
    "difficulty": "Easy",
    "explanation": "Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (`push`, `top`, `pop`, and `empty`).\n\nImplement the `MyStack` class:\n`void push(int x)` Pushes element x to the top of the stack.\n\n`int pop()` Removes the element on the top of the stack and returns it.\n\n`int top()` Returns the element on the top of the stack.\n\n`boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\nNotes:\nYou must use only standard operations of a queue, which means only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid.\n\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.",
    "examples": [
      "Input\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False"
    ],
    "constraints": "`1 <= x <= 9`\nAt most `100` calls will be made to `push`, `pop`, `top`, and `empty`.\n\nAll the calls to `pop` and `top` are valid.\n\nFollow-up: Can you implement the stack such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer. You can use more than two queues."
  },
  {
    "id": "226",
    "title": "Invert Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, invert the tree, and return its root.",
    "examples": [
      "Input: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]",
      "Input: root = [2,1,3]\nOutput: [2,3,1]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "227",
    "title": "Basic Calculator II",
    "difficulty": "Medium",
    "explanation": "Given a string `s` which represents an expression, evaluate this expression and return its value. \nThe integer division should truncate toward zero.",
    "examples": [
      "Input: s = \"3+2*2\"\nOutput: 7",
      "Input: s = \" 3/2 \"\nOutput: 1",
      "Input: s = \" 3+5 / 2 \"\nOutput: 5"
    ],
    "constraints": "`1 <= s.length <= 3 * 105`\n`s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.\n\n`s` represents a valid expression.\n\nAll the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.\n\nThe answer is guaranteed to fit in a 32-bit integer."
  },
  {
    "id": "228",
    "title": "Summary Ranges",
    "difficulty": "Easy",
    "explanation": "You are given a sorted unique integer array `nums`.\n\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.\n\nEach range `[a,b]` in the list should be output as:\n`\"a->b\"` if `a != b`\n`\"a\"` if `a == b`",
    "examples": [
      "Input: nums = [0,1,2,4,5,7]\nOutput: [\"0->2\",\"4->5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\"",
      "Input: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\nExplanation: The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\"",
      "Input: nums = []\nOutput: []",
      "Input: nums = [-1]\nOutput: [\"-1\"]",
      "Input: nums = [0]\nOutput: [\"0\"]"
    ],
    "constraints": "`0 <= nums.length <= 20`\n`-231 <= nums[i] <= 231 - 1`\nAll the values of `nums` are unique.\n\n`nums` is sorted in ascending order."
  },
  {
    "id": "229",
    "title": "Majority Element II",
    "difficulty": "Medium",
    "explanation": "Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.\n\nFollow-up: Could you solve the problem in linear time and in O(1) space?",
    "examples": [
      "Input: nums = [3,2,3]\nOutput: [3]",
      "Input: nums = [1]\nOutput: [1]",
      "Input: nums = [1,2]\nOutput: [1,2]"
    ],
    "constraints": "`1 <= nums.length <= 5 * 104`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "230",
    "title": "Kth Smallest Element in a BST",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary search tree, and an integer `k`, return the `kth` (1-indexed) smallest element in the tree.",
    "examples": [
      "Input: root = [3,1,4,null,2], k = 1\nOutput: 1",
      "Input: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3"
    ],
    "constraints": "The number of nodes in the tree is `n`.\n\n`1 <= k <= n <= 104`\n`0 <= Node.val <= 104`\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"
  },
  {
    "id": "231",
    "title": "Power of Two",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return `true` if it is a power of two. Otherwise, return `false`.\n\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.",
    "examples": [
      "Input: n = 1\nOutput: true\nExplanation: 20 = 1",
      "Input: n = 16\nOutput: true\nExplanation: 24 = 16",
      "Input: n = 3\nOutput: false",
      "Input: n = 4\nOutput: true",
      "Input: n = 5\nOutput: false"
    ],
    "constraints": "`-231 <= n <= 231 - 1`\nFollow up: Could you solve it without loops/recursion?"
  },
  {
    "id": "232",
    "title": "Implement Queue using Stacks",
    "difficulty": "Easy",
    "explanation": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).\n\nImplement the `MyQueue` class:\n`void push(int x)` Pushes element x to the back of the queue.\n\n`int pop()` Removes the element from the front of the queue and returns it.\n\n`int peek()` Returns the element at the front of the queue.\n\n`boolean empty()` Returns `true` if the queue is empty, `false` otherwise.\n\nNotes:\nYou must use only standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.\n\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\nFollow-up: Can you implement the queue such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.",
    "examples": [
      "Input\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false"
    ],
    "constraints": "`1 <= x <= 9`\nAt most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.\n\nAll the calls to `pop` and `peek` are valid."
  },
  {
    "id": "233",
    "title": "Number of Digit One",
    "difficulty": "Hard",
    "explanation": "Given an integer `n`, count the total number of digit `1` appearing in all non-negative integers less than or equal to `n`.",
    "examples": [
      "Input: n = 13\nOutput: 6",
      "Input: n = 0\nOutput: 0"
    ],
    "constraints": "`0 <= n <= 2 * 109`"
  },
  {
    "id": "234",
    "title": "Palindrome Linked List",
    "difficulty": "Easy",
    "explanation": "Given the `head` of a singly linked list, return `true` if it is a palindrome.",
    "examples": [
      "Input: head = [1,2,2,1]\nOutput: true",
      "Input: head = [1,2]\nOutput: false"
    ],
    "constraints": "The number of nodes in the list is in the range `[1, 105]`.\n\n`0 <= Node.val <= 9`\nFollow up: Could you do it in `O(n)` time and `O(1)` space?"
  },
  {
    "id": "235",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "difficulty": "Easy",
    "explanation": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”",
    "examples": [
      "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.",
      "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.",
      "Input: root = [2,1], p = 2, q = 1\nOutput: 2"
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 105]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`p != q`\n`p` and `q` will exist in the BST."
  },
  {
    "id": "236",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.",
      "Input: root = [1,2], p = 1, q = 2\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 105]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`p != q`\n`p` and `q` will exist in the tree."
  },
  {
    "id": "237",
    "title": "Delete Node in a Linked List",
    "difficulty": "Easy",
    "explanation": "Write a function to delete a node in a singly-linked list. You will not be given access to the `head` of the list, instead you will be given access to the node to be deleted directly.\n\nIt is guaranteed that the node to be deleted is not a tail node in the list.",
    "examples": [
      "Input: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.",
      "Input: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.",
      "Input: head = [1,2,3,4], node = 3\nOutput: [1,2,4]",
      "Input: head = [0,1], node = 0\nOutput: [1]",
      "Input: head = [-3,5,-99], node = -3\nOutput: [5,-99]"
    ],
    "constraints": "The number of the nodes in the given list is in the range `[2, 1000]`.\n\n`-1000 <= Node.val <= 1000`\nThe value of each node in the list is unique.\n\nThe `node` to be deleted is in the list and is not a tail node"
  },
  {
    "id": "238",
    "title": "Product of Array Except Self",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.\n\nThe product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.",
    "examples": [
      "Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]",
      "Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]"
    ],
    "constraints": "`2 <= nums.length <= 105`\n`-30 <= nums[i] <= 30`\nThe product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.\n\nFollow up:\nCould you solve it in `O(n)` time complexity and without using division?\nCould you solve it with `O(1)` constant space complexity? (The output array does not count as extra space for space complexity analysis.)"
  },
  {
    "id": "239",
    "title": "Sliding Window Maximum",
    "difficulty": "Hard",
    "explanation": "You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\nReturn the max sliding window.",
    "examples": [
      "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7",
      "Input: nums = [1], k = 1\nOutput: [1]",
      "Input: nums = [1,-1], k = 1\nOutput: [1,-1]",
      "Input: nums = [9,11], k = 2\nOutput: [11]",
      "Input: nums = [4,-2], k = 2\nOutput: [4]"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-104 <= nums[i] <= 104`\n`1 <= k <= nums.length`"
  },
  {
    "id": "240",
    "title": "Search a 2D Matrix II",
    "difficulty": "Medium",
    "explanation": "Write an efficient algorithm that searches for a `target` value in an `m x n` integer `matrix`. The `matrix` has the following properties:\nIntegers in each row are sorted in ascending from left to right.\n\nIntegers in each column are sorted in ascending from top to bottom.",
    "examples": [
      "Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true",
      "Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= n, m <= 300`\n`-109 <= matix[i][j] <= 109`\nAll the integers in each row are sorted in ascending order.\n\nAll the integers in each column are sorted in ascending order.\n\n`-109 <= target <= 109`"
  },
  {
    "id": "241",
    "title": "Different Ways to Add Parentheses",
    "difficulty": "Medium",
    "explanation": "Given a string `expression` of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.",
    "examples": [
      "Input: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2",
      "Input: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10"
    ],
    "constraints": "`1 <= expression.length <= 20`\n`expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`."
  },
  {
    "id": "242",
    "title": "Valid Anagram",
    "difficulty": "Easy",
    "explanation": "Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.",
    "examples": [
      "Input: s = \"anagram\", t = \"nagaram\"\nOutput: true",
      "Input: s = \"rat\", t = \"car\"\nOutput: false"
    ],
    "constraints": "`1 <= s.length, t.length <= 5 * 104`\n`s` and `t` consist of lowercase English letters.\n\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"
  },
  {
    "id": "243",
    "title": "Shortest Word Distance",
    "difficulty": "Easy",
    "explanation": "Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.",
    "examples": [
      "Input: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"coding\", word2 = \"practice\"\nOutput: 3",
      "Input: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"\nOutput: 1"
    ],
    "constraints": "`1 <= wordsDict.length <= 3 * 104`\n`1 <= wordsDict[i].length <= 10`\n`wordsDict[i]` consists of lowercase English letters.\n\n`word1` and `word2` are in `wordsDict`.\n\n`word1 != word2`"
  },
  {
    "id": "244",
    "title": "Shortest Word Distance II",
    "difficulty": "Medium",
    "explanation": "Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\n\nImplement the `WordDistance` class:\n`WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.\n\n`int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.",
    "examples": [
      "Input\n[\"WordDistance\", \"shortest\", \"shortest\"]\n[[[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]], [\"coding\", \"practice\"], [\"makes\", \"coding\"]]\nOutput\n[null, 3, 1]\nExplanation\nWordDistance wordDistance = new WordDistance([\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]);\nwordDistance.shortest(\"coding\", \"practice\"); // return 3\nwordDistance.shortest(\"makes\", \"coding\");    // return 1"
    ],
    "constraints": "`1 <= wordsDict.length <= 3 * 104`\n`1 <= wordsDict[i].length <= 10`\n`wordsDict[i]` consists of lowercase English letters.\n\n`word1` and `word2` are in `wordsDict`.\n\n`word1 != word2`\nAt most `5000` calls will be made to `shortest`."
  },
  {
    "id": "245",
    "title": "Shortest Word Distance III",
    "difficulty": "Medium",
    "explanation": "Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.\n\nNote that `word1` and `word2` may be the same. It is guaranteed that they represent two individual words in the list.",
    "examples": [
      "Input: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"\nOutput: 1",
      "Input: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"makes\"\nOutput: 3"
    ],
    "constraints": "`1 <= wordsDict.length <= 3 * 104`\n`1 <= wordsDict[i].length <= 10`\n`wordsDict[i]` consists of lowercase English letters.\n\n`word1` and `word2` are in `wordsDict`."
  },
  {
    "id": "246",
    "title": "Strobogrammatic Number",
    "difficulty": "Easy",
    "explanation": "Given a string `num` which represents an integer, return `true` if `num` is a strobogrammatic number.\n\nA strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).",
    "examples": [
      "Input: num = \"69\"\nOutput: true",
      "Input: num = \"88\"\nOutput: true",
      "Input: num = \"962\"\nOutput: false",
      "Input: num = \"1\"\nOutput: true"
    ],
    "constraints": "`1 <= num.length <= 50`\n`num` consists of only digits.\n\n`num` does not contain any leading zeros except for zero itself."
  },
  {
    "id": "247",
    "title": "Strobogrammatic Number II",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return all the strobogrammatic numbers that are of length `n`. You may return the answer in any order.\n\nA strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).",
    "examples": [
      "Input: n = 2\nOutput: [\"11\",\"69\",\"88\",\"96\"]",
      "Input: n = 1\nOutput: [\"0\",\"1\",\"8\"]"
    ],
    "constraints": "`1 <= n <= 14`"
  },
  {
    "id": "248",
    "title": "Strobogrammatic Number III",
    "difficulty": "Hard",
    "explanation": "Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return the number of strobogrammatic numbers in the range `[low, high]`.\n\nA strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).",
    "examples": [
      "Input: low = \"50\", high = \"100\"\nOutput: 3",
      "Input: low = \"0\", high = \"0\"\nOutput: 1"
    ],
    "constraints": "`1 <= low.length, high.length <= 15`\n`low` and `high` consist of only digits.\n\n`low <= high`\n`low` and `high` do not contain any leading zeros except for zero itself."
  },
  {
    "id": "249",
    "title": "Group Shifted Strings",
    "difficulty": "Medium",
    "explanation": "We can shift a string by shifting each of its letters to its successive letter.\n\nFor example, `\"abc\"` can be shifted to be `\"bcd\"`.\n\nWe can keep shifting the string to form a sequence.\n\nFor example, we can keep shifting `\"abc\"` to form the sequence: `\"abc\" -> \"bcd\" -> ... -> \"xyz\"`.\n\nGiven an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in any order.",
    "examples": [
      "Input: strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]\nOutput: [[\"acef\"],[\"a\",\"z\"],[\"abc\",\"bcd\",\"xyz\"],[\"az\",\"ba\"]]",
      "Input: strings = [\"a\"]\nOutput: [[\"a\"]]"
    ],
    "constraints": "`1 <= strings.length <= 200`\n`1 <= strings[i].length <= 50`\n`strings[i]` consists of lowercase English letters."
  },
  {
    "id": "250",
    "title": "Count Univalue Subtrees",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the number of uni-value subtrees.\n\nA uni-value subtree means all nodes of the subtree have the same value.",
    "examples": [
      "Input: root = [5,1,5,5,5,null,5]\nOutput: 4",
      "Input: root = []\nOutput: 0",
      "Input: root = [5,5,5,5,5,null,5]\nOutput: 6"
    ],
    "constraints": "The numbrt of the node in the tree will be in the range `[0, 1000]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "251",
    "title": "Flatten 2D Vector",
    "difficulty": "Medium",
    "explanation": "Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.\n\nImplement the `Vector2D` class:\n`Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.\n\n`next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.\n\n`hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.",
    "examples": [
      "Input\n[\"Vector2D\", \"next\", \"next\", \"next\", \"hasNext\", \"hasNext\", \"next\", \"hasNext\"]\n[[[[1, 2], [3], [4]]], [], [], [], [], [], [], []]\nOutput\n[null, 1, 2, 3, true, true, 4, false]\nExplanation\nVector2D vector2D = new Vector2D([[1, 2], [3], [4]]);\nvector2D.next();    // return 1\nvector2D.next();    // return 2\nvector2D.next();    // return 3\nvector2D.hasNext(); // return True\nvector2D.hasNext(); // return True\nvector2D.next();    // return 4\nvector2D.hasNext(); // return False"
    ],
    "constraints": "`0 <= vec.length <= 200`\n`0 <= vec[i].length <= 500`\n`-500 <= vec[i][j] <= 500`\nAt most `105` calls will be made to `next` and `hasNext`.\n\nFollow up: As an added challenge, try to code it using only iterators in C++ or iterators in Java."
  },
  {
    "id": "252",
    "title": "Meeting Rooms",
    "difficulty": "Easy",
    "explanation": "Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.",
    "examples": [
      "Input: intervals = [[0,30],[5,10],[15,20]]\nOutput: false",
      "Input: intervals = [[7,10],[2,4]]\nOutput: true"
    ],
    "constraints": "`0 <= intervals.length <= 104`\n`intervals[i].length == 2`\n`0 <= starti < endi <= 106`"
  },
  {
    "id": "253",
    "title": "Meeting Rooms II",
    "difficulty": "Medium",
    "explanation": "Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.",
    "examples": [
      "Input: intervals = [[0,30],[5,10],[15,20]]\nOutput: 2",
      "Input: intervals = [[7,10],[2,4]]\nOutput: 1"
    ],
    "constraints": "`1 <= intervals.length <= 104`\n`0 <= starti < endi <= 106`"
  },
  {
    "id": "254",
    "title": "Factor Combinations",
    "difficulty": "Medium",
    "explanation": "Numbers can be regarded as the product of their factors.\n\nFor example, `8 = 2 x 2 x 2 = 2 x 4`.\n\nGiven an integer `n`, return all possible combinations of its factors. You may return the answer in any order.\n\nNote that the factors should be in the range `[2, n - 1]`.",
    "examples": [
      "Input: n = 1\nOutput: []",
      "Input: n = 12\nOutput: [[2,6],[3,4],[2,2,3]]",
      "Input: n = 37\nOutput: []",
      "Input: n = 32\nOutput: [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]"
    ],
    "constraints": "`1 <= n <= 108`"
  },
  {
    "id": "255",
    "title": "Verify Preorder Sequence in Binary Search Tree",
    "difficulty": "Medium",
    "explanation": "Given an array of unique integers `preorder`, return `true` if it is the correct preorder traversal sequence of a binary search tree.",
    "examples": [
      "Input: preorder = [5,2,1,3,6]\nOutput: true",
      "Input: preorder = [5,2,6,1,3]\nOutput: false"
    ],
    "constraints": "`1 <= preorder.length <= 104`\n`1 <= preorder[i] <= 104`\nAll the elements of `preorder` are unique.\n\nFollow up: Could you do it using only constant space complexity?"
  },
  {
    "id": "256",
    "title": "Paint House",
    "difficulty": "Medium",
    "explanation": "There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\nThe cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.\n\nFor example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...\n\nReturn the minimum cost to paint all houses.",
    "examples": [
      "Input: costs = [[17,2,17],[16,16,5],[14,3,19]]\nOutput: 10\nExplanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.\n\nMinimum cost: 2 + 5 + 3 = 10.",
      "Input: costs = [[7,6,2]]\nOutput: 2"
    ],
    "constraints": "`costs.length == n`\n`costs[i].length == 3`\n`1 <= n <= 100`\n`1 <= costs[i][j] <= 20`"
  },
  {
    "id": "257",
    "title": "Binary Tree Paths",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, return all root-to-leaf paths in any order.\n\nA leaf is a node with no children.",
    "examples": [
      "Input: root = [1,2,3,null,5]\nOutput: [\"1->2->5\",\"1->3\"]",
      "Input: root = [1]\nOutput: [\"1\"]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 100]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "258",
    "title": "Add Digits",
    "difficulty": "Easy",
    "explanation": "Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.",
    "examples": [
      "Input: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.",
      "Input: num = 0\nOutput: 0"
    ],
    "constraints": "`0 <= num <= 231 - 1`\nFollow up: Could you do it without any loop/recursion in `O(1)` runtime?"
  },
  {
    "id": "259",
    "title": "3Sum Smaller",
    "difficulty": "Medium",
    "explanation": "Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.\n\nFollow up: Could you solve it in `O(n2)` runtime?",
    "examples": [
      "Input: nums = [-2,0,1,3], target = 2\nOutput: 2\nExplanation: Because there are two triplets which sums are less than 2:\n[-2,0,1]\n[-2,0,3]",
      "Input: nums = [], target = 0\nOutput: 0",
      "Input: nums = [0], target = 0\nOutput: 0"
    ],
    "constraints": "`n == nums.length`\n`0 <= n <= 300`\n`-100 <= nums[i] <= 100`\n`-100 <= target <= 100`"
  },
  {
    "id": "260",
    "title": "Single Number III",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\n\nFollow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?",
    "examples": [
      "Input: nums = [1,2,1,3,2,5]\nOutput: [3,5]\nExplanation:  [5, 3] is also a valid answer.",
      "Input: nums = [-1,0]\nOutput: [-1,0]",
      "Input: nums = [0,1]\nOutput: [1,0]"
    ],
    "constraints": "`2 <= nums.length <= 3 * 104`\n`-231 <= nums[i] <= 231 - 1`\nEach integer in `nums` will appear twice, only two integers will appear once."
  },
  {
    "id": "261",
    "title": "Graph Valid Tree",
    "difficulty": "Medium",
    "explanation": "You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.\n\nReturn `true` if the edges of the given graph make up a valid tree, and `false` otherwise.",
    "examples": [
      "Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]\nOutput: true",
      "Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]\nOutput: false"
    ],
    "constraints": "`1 <= 2000 <= n`\n`0 <= edges.length <= 5000`\n`edges[i].length == 2`\n`0 <= ai, bi < n`\n`ai != bi`\nThere are no self-loops or repeated edges."
  },
  {
    "id": "262",
    "title": "Trips and Users",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "263",
    "title": "Ugly Number",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return `true` if `n` is an ugly number.\n\nUgly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.",
    "examples": [
      "Input: n = 6\nOutput: true\nExplanation: 6 = 2 × 3",
      "Input: n = 8\nOutput: true\nExplanation: 8 = 2 × 2 × 2",
      "Input: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes another prime factor 7.",
      "Input: n = 1\nOutput: true\nExplanation: 1 is typically treated as an ugly number."
    ],
    "constraints": "`-231 <= n <= 231 - 1`"
  },
  {
    "id": "264",
    "title": "Ugly Number II",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the `nth` ugly number.\n\nUgly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.",
    "examples": [
      "Input: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.",
      "Input: n = 1\nOutput: 1\nExplanation: 1 is typically treated as an ugly number."
    ],
    "constraints": "`1 <= n <= 1690`"
  },
  {
    "id": "265",
    "title": "Paint House II",
    "difficulty": "Hard",
    "explanation": "There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\nThe cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.\n\nFor example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...\n\nReturn the minimum cost to paint all houses.",
    "examples": [
      "Input: costs = [[1,5,3],[2,9,4]]\nOutput: 5\nExplanation:\nPaint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \nOr paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.",
      "Input: costs = [[1,3],[2,4]]\nOutput: 5"
    ],
    "constraints": "`costs.length == n`\n`costs[i].length == k`\n`1 <= n <= 100`\n`1 <= k <= 20`\n`1 <= costs[i][j] <= 20`\nFollow up: Could you solve it in `O(nk)` runtime?"
  },
  {
    "id": "266",
    "title": "Palindrome Permutation",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, return `true` if a permutation of the string could form a palindrome.",
    "examples": [
      "Input: s = \"code\"\nOutput: false",
      "Input: s = \"aab\"\nOutput: true",
      "Input: s = \"carerac\"\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 5000`\n`s` consists of only lowercase English letters."
  },
  {
    "id": "267",
    "title": "Palindrome Permutation II",
    "difficulty": "Medium",
    "explanation": "Given a string s, return all the palindromic permutations (without duplicates) of it.\n\nYou may return the answer in any order. If `s` has no palindromic permutation, return an empty list.",
    "examples": [
      "Input: s = \"aabb\"\nOutput: [\"abba\",\"baab\"]",
      "Input: s = \"abc\"\nOutput: []"
    ],
    "constraints": "`1 <= s.length <= 16`\n`s` consists of only lowercase English letters."
  },
  {
    "id": "268",
    "title": "Missing Number",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\nFollow up: Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?",
    "examples": [
      "Input: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.",
      "Input: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.",
      "Input: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.",
      "Input: nums = [0]\nOutput: 1\nExplanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums."
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 104`\n`0 <= nums[i] <= n`\nAll the numbers of `nums` are unique."
  },
  {
    "id": "269",
    "title": "Alien Dictionary",
    "difficulty": "Hard",
    "explanation": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\n\nYou are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are sorted lexicographically by the rules of this new language.\n\nReturn a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return `\"\"`. If there are multiple solutions, return any of them.\n\nA string `s` is lexicographically smaller than a string `t` if at the first letter where they differ, the letter in `s` comes before the letter in `t` in the alien language. If the first `min(s.length, t.length)` letters are the same, then `s` is smaller if and only if `s.length < t.length`.",
    "examples": [
      "Input: words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\nOutput: \"wertf\"",
      "Input: words = [\"z\",\"x\"]\nOutput: \"zx\"",
      "Input: words = [\"z\",\"x\",\"z\"]\nOutput: \"\"\nExplanation: The order is invalid, so return `\"\"`."
    ],
    "constraints": "`1 <= words.length <= 100`\n`1 <= words[i].length <= 100`\n`words[i]` consists of only lowercase English letters."
  },
  {
    "id": "270",
    "title": "Closest Binary Search Tree Value",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary search tree and a `target` value, return the value in the BST that is closest to the `target`.",
    "examples": [
      "Input: root = [4,2,5,1,3], target = 3.714286\nOutput: 4",
      "Input: root = [1], target = 4.428571\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`0 <= Node.val <= 109`\n`-109 <= target <= 109`"
  },
  {
    "id": "271",
    "title": "Encode and Decode Strings",
    "difficulty": "Medium",
    "explanation": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\n\nMachine 1 (sender) has the function:\nstring encode(vector<string> strs) {\n  // ... your code\n  return encoded_string;\n}\nMachine 2 (receiver) has the function:\nvector<string> decode(string s) {\n  //... your code\n  return strs;\n}\nSo Machine 1 does:\nstring encoded_string = encode(strs);\nand Machine 2 does:\nvector<string> strs2 = decode(encoded_string);\n`strs2` in Machine 2 should be the same as `strs` in Machine 1.\n\nImplement the `encode` and `decode` methods.",
    "examples": [
      "Input: dummy_input = [\"Hello\",\"World\"]\nOutput: [\"Hello\",\"World\"]\nExplanation:\nMachine 1:\nCodec encoder = new Codec();\nString msg = encoder.encode(strs);\nMachine 1 ---msg---> Machine 2\nMachine 2:\nCodec decoder = new Codec();\nString[] strs = decoder.decode(msg);",
      "Input: dummy_input = [\"\"]\nOutput: [\"\"]"
    ],
    "constraints": "`1 <= strs.length <= 200`\n`0 <= strs[i].length <= 200`\n`strs[i]` contains any possible characters out of `256` valid ASCII characters.\n\nFollow up:\nCould you write a generalized algorithm to work on any possible characters?\nCould you solve the problem without using any serialize methods (such as `eval`)?"
  },
  {
    "id": "272",
    "title": "Closest Binary Search Tree Value II",
    "difficulty": "Hard",
    "explanation": "Given the `root` of a binary search tree, a `target` value, and an integer `k`, return the `k` values in the BST that are closest to the `target`. You may return the answer in any order.\n\nYou are guaranteed to have only one unique set of `k` values in the BST that are closest to the `target`.",
    "examples": [
      "Input: root = [4,2,5,1,3], target = 3.714286, k = 2\nOutput: [4,3]",
      "Input: root = [1], target = 0.000000, k = 1\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the tree is `n`.\n\n`1 <= k <= n <= 104`.\n\n`0 <= Node.val <= 109`\n`-109 <= target <= 109`\nFollow up: Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?"
  },
  {
    "id": "273",
    "title": "Integer to English Words",
    "difficulty": "Hard",
    "explanation": "Convert a non-negative integer `num` to its English words representation.",
    "examples": [
      "Input: num = 123\nOutput: \"One Hundred Twenty Three\"",
      "Input: num = 12345\nOutput: \"Twelve Thousand Three Hundred Forty Five\"",
      "Input: num = 1234567\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"",
      "Input: num = 1234567891\nOutput: \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\""
    ],
    "constraints": "`0 <= num <= 231 - 1`"
  },
  {
    "id": "274",
    "title": "H-Index",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return compute the researcher's `h`-index.\n\nAccording to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each.\n\nIf there are several possible values for `h`, the maximum one is taken as the `h`-index.",
    "examples": [
      "Input: citations = [3,0,6,1,5]\nOutput: 3\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\n\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
      "Input: citations = [1,3,1]\nOutput: 1"
    ],
    "constraints": "`n == citations.length`\n`1 <= n <= 5000`\n`0 <= citations[i] <= 1000`"
  },
  {
    "id": "275",
    "title": "H-Index II",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in an ascending order, return compute the researcher's `h`-index.\n\nAccording to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each.\n\nIf there are several possible values for `h`, the maximum one is taken as the `h`-index.",
    "examples": [
      "Input: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\n\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
      "Input: citations = [1,2,100]\nOutput: 2"
    ],
    "constraints": "`n == citations.length`\n`1 <= n <= 105`\n`0 <= citations[i] <= 1000`\n`citations` is sorted in ascending order.\n\nFollow up: Could you solve it in logarithmic time complexity?"
  },
  {
    "id": "276",
    "title": "Paint Fence",
    "difficulty": "Medium",
    "explanation": "You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:\nEvery post must be painted exactly one color.\n\nAt most one pair of adjacent fence posts can have the same color.\n\nGiven the two integers `n` and `k`, return the number of ways you can paint the fence.",
    "examples": [
      "Input: n = 3, k = 2\nOutput: 6\nExplanation: All the possibilities are shown.\n\nNote that painting all the posts red or all the posts green is invalid because there can only be at most one pair of adjacent posts that are the same color.",
      "Input: n = 1, k = 1\nOutput: 1",
      "Input: n = 7, k = 2\nOutput: 42"
    ],
    "constraints": "`1 <= n <= 50`\n`1 <= k <= 105`\nThe answer is guaranteed to be in the range `[0, 231 - 1]` for the given `n` and `k`."
  },
  {
    "id": "277",
    "title": "Find the Celebrity",
    "difficulty": "Medium",
    "explanation": "Suppose you are at a party with `n` people (labeled from `0` to `n - 1`), and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know him/her, but he/she does not know any of them.\n\nNow you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: \"Hi, A. Do you know B?\" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).\n\nYou are given a helper function `bool knows(a, b)` which tells you whether A knows B. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return `-1`.",
    "examples": [
      "Input: graph = [[1,1,0],[0,1,0],[1,1,1]]\nOutput: 1\nExplanation: There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.",
      "Input: graph = [[1,0,1],[1,1,0],[0,1,1]]\nOutput: -1\nExplanation: There is no celebrity."
    ],
    "constraints": "`n == graph.length`\n`n == graph[i].length`\n`2 <= n <= 100`\n`graph[i][j]` is `0` or `1`.\n\n`graph[i][i] == 1`\nFollow up: If the maximum number of allowed calls to the API `knows` is `3 * n`, could you find a solution without exceeding the maximum number of calls?"
  },
  {
    "id": "278",
    "title": "First Bad Version",
    "difficulty": "Easy",
    "explanation": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.",
    "examples": [
      "Input: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.",
      "Input: n = 1, bad = 1\nOutput: 1"
    ],
    "constraints": "`1 <= bad <= n <= 231 - 1`"
  },
  {
    "id": "279",
    "title": "Perfect Squares",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the least number of perfect square numbers that sum to `n`.\n\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.",
    "examples": [
      "Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.",
      "Input: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9."
    ],
    "constraints": "`1 <= n <= 104`"
  },
  {
    "id": "280",
    "title": "Wiggle Sort",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.\n\nYou may assume the input array always has a valid answer.",
    "examples": [
      "Input: nums = [3,5,2,1,6,4]\nOutput: [3,5,1,6,2,4]\nExplanation: [1,6,2,5,3,4] is also accepted.",
      "Input: nums = [6,6,5,6,3,8]\nOutput: [6,6,5,6,3,8]"
    ],
    "constraints": "`1 <= nums.length <= 5 * 104`\n`0 <= nums[i] <= 104`\nIt is guaranteed that there will be an answer for the given input `nums`.\n\nFollow up: Could you do it without sorting the array?"
  },
  {
    "id": "281",
    "title": "Zigzag Iterator",
    "difficulty": "Medium",
    "explanation": "Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately.\n\nImplement the `ZigzagIterator` class:\n`ZigzagIterator(List<int> v1, List<int> v2)` initializes the object with the two vectors `v1` and `v2`.\n\n`boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise.\n\n`int next()` returns the current element of the iterator and moves the iterator to the next element.",
    "examples": [
      "Input: v1 = [1,2], v2 = [3,4,5,6]\nOutput: [1,3,2,4,5,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].",
      "Input: v1 = [1], v2 = []\nOutput: [1]",
      "Input: v1 = [], v2 = [1]\nOutput: [1]"
    ],
    "constraints": "`0 <= v1.length, v2.length <= 1000`\n`1 <= v1.length + v2.length <= 2000`\n`-231 <= v1[i], v2[i] <= 231 - 1`\nFollow up: What if you are given `k` vectors? How well can your code be extended to such cases?\nClarification for the follow-up question:\nThe \"Zigzag\" order is not clearly defined and is ambiguous for `k > 2` cases. If \"Zigzag\" does not look right to you, replace \"Zigzag\" with \"Cyclic\".\n\n\nExample:\nInput: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]\nOutput: [1,4,8,2,5,9,3,6,7]"
  },
  {
    "id": "282",
    "title": "Expression Add Operators",
    "difficulty": "Hard",
    "explanation": "Given a string `num` that contains only digits and an integer `target`, return all possibilities to add the binary operators `'+'`, `'-'`, or `'*'` between the digits of `num` so that the resultant expression evaluates to the `target` value.",
    "examples": [
      "Input: num = \"123\", target = 6\nOutput: [\"1*2*3\",\"1+2+3\"]",
      "Input: num = \"232\", target = 8\nOutput: [\"2*3+2\",\"2+3*2\"]",
      "Input: num = \"105\", target = 5\nOutput: [\"1*0+5\",\"10-5\"]",
      "Input: num = \"00\", target = 0\nOutput: [\"0*0\",\"0+0\",\"0-0\"]",
      "Input: num = \"3456237490\", target = 9191\nOutput: []"
    ],
    "constraints": "`1 <= num.length <= 10`\n`num` consists of only digits.\n\n`-231 <= target <= 231 - 1`"
  },
  {
    "id": "283",
    "title": "Move Zeroes",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.",
    "examples": [
      "Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]",
      "Input: nums = [0]\nOutput: [0]"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-231 <= nums[i] <= 231 - 1`\nFollow up: Could you minimize the total number of operations done?"
  },
  {
    "id": "284",
    "title": "Peeking Iterator",
    "difficulty": "Medium",
    "explanation": "Design an iterator that supports the `peek` operation on a list in addition to the `hasNext` and the `next` operations.\n\nImplement the `PeekingIterator` class:\n`PeekingIterator(int[] nums)` Initializes the object with the given integer array `nums`.\n\n`int next()` Returns the next element in the array and moves the pointer to the next element.\n\n`bool hasNext()` Returns `true` if there are still elements in the array.\n\n`int peek()` Returns the next element in the array without moving the pointer.",
    "examples": [
      "Input\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 2, 2, 3, false]\nExplanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\n\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\n\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= 1000`\nAll the calls to `next` and `peek` are valid.\n\nAt most `1000` calls will be made to `next`, `hasNext`, and `peek`.\n\nFollow up: How would you extend your design to be generic and work with all types, not just integer?"
  },
  {
    "id": "285",
    "title": "Inorder Successor in BST",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary search tree and a node `p` in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return `null`.\n\nThe successor of a node `p` is the node with the smallest key greater than `p.val`.",
    "examples": [
      "Input: root = [2,1,3], p = 1\nOutput: 2\nExplanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.",
      "Input: root = [5,3,6,2,4,null,null,1], p = 6\nOutput: null\nExplanation: There is no in-order successor of the current node, so the answer is `null`."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-105 <= Node.val <= 105`\nAll Nodes will have unique values."
  },
  {
    "id": "286",
    "title": "Walls and Gates",
    "difficulty": "Medium",
    "explanation": "You are given an `m x n` grid `rooms` initialized with these three possible values.\n\n`-1` A wall or an obstacle.\n\n`0` A gate.\n\n`INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`.\n\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with `INF`.",
    "examples": [
      "Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]\nOutput: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]",
      "Input: rooms = [[-1]]\nOutput: [[-1]]",
      "Input: rooms = [[2147483647]]\nOutput: [[2147483647]]",
      "Input: rooms = [[0]]\nOutput: [[0]]"
    ],
    "constraints": "`m == rooms.length`\n`n == rooms[i].length`\n`1 <= m, n <= 250`\n`rooms[i][j]` is `-1`, `0`, or `231 - 1`."
  },
  {
    "id": "287",
    "title": "Find the Duplicate Number",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\nThere is only one repeated number in `nums`, return this repeated number.",
    "examples": [
      "Input: nums = [1,3,4,2,2]\nOutput: 2",
      "Input: nums = [3,1,3,4,2]\nOutput: 3",
      "Input: nums = [1,1]\nOutput: 1",
      "Input: nums = [1,1,2]\nOutput: 1"
    ],
    "constraints": "`2 <= n <= 3 * 104`\n`nums.length == n + 1`\n`1 <= nums[i] <= n`\nAll the integers in `nums` appear only once except for precisely one integer which appears two or more times.\n\nFollow up:\nHow can we prove that at least one duplicate number must exist in `nums`?\nCan you solve the problem without modifying the array `nums`?\nCan you solve the problem using only constant, `O(1)` extra space?\nCan you solve the problem with runtime complexity less than `O(n2)`?"
  },
  {
    "id": "288",
    "title": "Unique Word Abbreviation",
    "difficulty": "Medium",
    "explanation": "The abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an abbreviation of itself.\n\nFor example:\n`dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`.\n\n`internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`.\n\n`it --> it` because any word with only two characters is an abbreviation of itself.\n\nImplement the `ValidWordAbbr` class:\n`ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words.\n\n`boolean isUnique(string word)` Returns `true` if either of the following conditions are met (otherwise returns `false`):\n\t\nThere is no word in `dictionary` whose abbreviation is equal to `word`'s abbreviation.\n\nFor any word in `dictionary` whose abbreviation is equal to `word`'s abbreviation, that word and `word` are the same.",
    "examples": [
      "Input\n[\"ValidWordAbbr\", \"isUnique\", \"isUnique\", \"isUnique\", \"isUnique\"]\n[[[\"deer\", \"door\", \"cake\", \"card\"]], [\"dear\"], [\"cart\"], [\"cane\"], [\"make\"]]\nOutput\n[null, false, true, false, true]\nExplanation\nValidWordAbbr validWordAbbr = new ValidWordAbbr([\"deer\", \"door\", \"cake\", \"card\"]);\nvalidWordAbbr.isUnique(\"dear\"); // return false, dictionary word \"deer\" and word \"dear\" have the same abbreviation\n                                // \"d2r\" but are not the same.\n\nvalidWordAbbr.isUnique(\"cart\"); // return true, no words in the dictionary have the abbreviation \"c2t\".\n\nvalidWordAbbr.isUnique(\"cane\"); // return false, dictionary word \"cake\" and word \"cane\" have the same abbreviation \n                                // \"c2e\" but are not the same.\n\nvalidWordAbbr.isUnique(\"make\"); // return true, no words in the dictionary have the abbreviation \"m2e\".\n\nvalidWordAbbr.isUnique(\"cake\"); // return true, because \"cake\" is already in the dictionary and no other word in the dictionary has \"c2e\" abbreviation."
    ],
    "constraints": "`1 <= dictionary.length <= 3 * 104`\n`1 <= dictionary[i].length <= 20`\n`dictionary[i]` consists of lowercase English letters.\n\n`1 <= word.length <= 20`\n`word` consists of lowercase English letters.\n\nAt most `5000` calls will be made to `isUnique`."
  },
  {
    "id": "289",
    "title": "Game of Life",
    "difficulty": "Medium",
    "explanation": "According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nThe board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\nAny live cell with fewer than two live neighbors dies as if caused by under-population.\n\nAny live cell with two or three live neighbors lives on to the next generation.\n\nAny live cell with more than three live neighbors dies, as if by over-population.\n\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return the next state.",
    "examples": [
      "Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
      "Input: board = [[1,1],[1,0]]\nOutput: [[1,1],[1,1]]"
    ],
    "constraints": "`m == board.length`\n`n == board[i].length`\n`1 <= m, n <= 25`\n`board[i][j]` is `0` or `1`.\n\nFollow up:\nCould you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\n\nIn this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?"
  },
  {
    "id": "290",
    "title": "Word Pattern",
    "difficulty": "Easy",
    "explanation": "Given a `pattern` and a string `s`, find if `s` follows the same pattern.\n\nHere follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.",
    "examples": [
      "Input: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true",
      "Input: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false",
      "Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false",
      "Input: pattern = \"abba\", s = \"dog dog dog dog\"\nOutput: false"
    ],
    "constraints": "`1 <= pattern.length <= 300`\n`pattern` contains only lower-case English letters.\n\n`1 <= s.length <= 3000`\n`s` contains only lower-case English letters and spaces `' '`.\n\n`s` does not contain any leading or trailing spaces.\n\nAll the words in `s` are separated by a single space."
  },
  {
    "id": "291",
    "title": "Word Pattern II",
    "difficulty": "Medium",
    "explanation": "Given a `pattern` and a string `s`, return `true` if `s` matches the `pattern`.\n\nA string `s` matches a `pattern` if there is some bijective mapping of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.",
    "examples": [
      "Input: pattern = \"abab\", s = \"redblueredblue\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"red\"\n'b' -> \"blue\"",
      "Input: pattern = \"aaaa\", s = \"asdasdasdasd\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"asd\"",
      "Input: pattern = \"abab\", s = \"asdasdasdasd\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"a\"\n'b' -> \"sdasd\"\nNote that 'a' and 'b' cannot both map to \"asd\" since the mapping is a bijection.",
      "Input: pattern = \"aabb\", s = \"xyzabcxzyabc\"\nOutput: false"
    ],
    "constraints": "`1 <= pattern.length, s.length <= 20`\n`pattern` and `s` consist of only lower-case English letters."
  },
  {
    "id": "292",
    "title": "Nim Game",
    "difficulty": "Easy",
    "explanation": "You are playing the following Nim Game with your friend:\nInitially, there is a heap of stones on the table.\n\nYou and your friend will alternate taking turns, and you go first.\n\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n\nThe one who removes the last stone is the winner.\n\nGiven `n`, the number of stones in the heap, return `true` if you can win the game assuming both you and your friend play optimally, otherwise return `false`.",
    "examples": [
      "Input: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\n\nIn all outcomes, your friend wins.",
      "Input: n = 1\nOutput: true",
      "Input: n = 2\nOutput: true"
    ],
    "constraints": "`1 <= n <= 231 - 1`"
  },
  {
    "id": "293",
    "title": "Flip Game",
    "difficulty": "Easy",
    "explanation": "You are playing a Flip Game with your friend.\n\nYou are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.\n\nReturn all possible states of the string `currentState` after one valid move. You may return the answer in any order. If there is no valid move, return an empty list `[]`.",
    "examples": [
      "Input: currentState = \"++++\"\nOutput: [\"--++\",\"+--+\",\"++--\"]",
      "Input: currentState = \"+\"\nOutput: []"
    ],
    "constraints": "`1 <= currentState.length <= 500`\n`currentState[i]` is either `'+'` or `'-'`."
  },
  {
    "id": "294",
    "title": "Flip Game II",
    "difficulty": "Medium",
    "explanation": "You are playing a Flip Game with your friend.\n\nYou are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.\n\nReturn `true` if the starting player can guarantee a win, and `false` otherwise.",
    "examples": [
      "Input: currentState = \"++++\"\nOutput: true\nExplanation: The starting player can guarantee a win by flipping the middle \"++\" to become \"+--+\".",
      "Input: currentState = \"+\"\nOutput: false"
    ],
    "constraints": "`1 <= currentState.length <= 60`\n`currentState[i]` is either `'+'` or `'-'`.\n\nFollow up: Derive your algorithm's runtime complexity."
  },
  {
    "id": "295",
    "title": "Find Median from Data Stream",
    "difficulty": "Hard",
    "explanation": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\n\nFor example, for `arr = [2,3,4]`, the median is `3`.\n\nFor example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.\n\nImplement the MedianFinder class:\n`MedianFinder()` initializes the `MedianFinder` object.\n\n`void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n\n`double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      "Input\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0"
    ],
    "constraints": "`-105 <= num <= 105`\nThere will be at least one element in the data structure before calling `findMedian`.\n\nAt most `5 * 104` calls will be made to `addNum` and `findMedian`.\n\nFollow up:\nIf all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?\nIf `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?"
  },
  {
    "id": "296",
    "title": "Best Meeting Point",
    "difficulty": "Hard",
    "explanation": "Given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return the minimal total travel distance.\n\nThe total travel distance is the sum of the distances between the houses of the friends and the meeting point.\n\nThe distance is calculated using Manhattan Distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.",
    "examples": [
      "Input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]\nOutput: 6\nExplanation: Given three friends living at (0,0), (0,4), and (2,2).\n\nThe point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.\n\nSo return 6.",
      "Input: grid = [[1,1]]\nOutput: 1"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 200`\n`grid[i][j]` is either `0` or `1`.\n\nThere will be at least two friends in the `grid`."
  },
  {
    "id": "297",
    "title": "Serialize and Deserialize Binary Tree",
    "difficulty": "Hard",
    "explanation": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.",
    "examples": [
      "Input: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]",
      "Input: root = []\nOutput: []",
      "Input: root = [1]\nOutput: [1]",
      "Input: root = [1,2]\nOutput: [1,2]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "298",
    "title": "Binary Tree Longest Consecutive Sequence",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the length of the longest consecutive sequence path.\n\nThe path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path needs to be from parent to child (cannot be the reverse).",
    "examples": [
      "Input: root = [1,null,3,2,4,null,null,null,5]\nOutput: 3\nExplanation: Longest consecutive sequence path is 3-4-5, so return 3.",
      "Input: root = [2,null,3,2,null,1]\nOutput: 2\nExplanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 3 * 104]`.\n\n`-3 * 104 <= Node.val <= 3 * 104`"
  },
  {
    "id": "299",
    "title": "Bulls and Cows",
    "difficulty": "Medium",
    "explanation": "You are playing the Bulls and Cows game with your friend.\n\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\n\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number `secret` and your friend's guess `guess`, return the hint for your friend's guess.\n\nThe hint should be formatted as `\"xAyB\"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.",
    "examples": [
      "Input: secret = \"1807\", guess = \"7810\"\nOutput: \"1A3B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\"",
      "Input: secret = \"1123\", guess = \"0111\"\nOutput: \"1A1B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.",
      "Input: secret = \"1\", guess = \"0\"\nOutput: \"0A0B\"",
      "Input: secret = \"1\", guess = \"1\"\nOutput: \"1A0B\""
    ],
    "constraints": "`1 <= secret.length, guess.length <= 1000`\n`secret.length == guess.length`\n`secret` and `guess` consist of digits only."
  },
  {
    "id": "300",
    "title": "Longest Increasing Subsequence",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, return the length of the longest strictly increasing subsequence.\n\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.",
    "examples": [
      "Input: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.",
      "Input: nums = [0,1,0,3,2,3]\nOutput: 4",
      "Input: nums = [7,7,7,7,7,7,7]\nOutput: 1"
    ],
    "constraints": "`1 <= nums.length <= 2500`\n`-104 <= nums[i] <= 104`\nFollow up:\nCould you come up with the `O(n2)` solution?\nCould you improve it to `O(n log(n))` time complexity?"
  },
  {
    "id": "301",
    "title": "Remove Invalid Parentheses",
    "difficulty": "Hard",
    "explanation": "Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\nReturn all the possible results. You may return the answer in any order.",
    "examples": [
      "Input: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]",
      "Input: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]",
      "Input: s = \")(\"\nOutput: [\"\"]"
    ],
    "constraints": "`1 <= s.length <= 25`\n`s` consists of lowercase English letters and parentheses `'('` and `')'`.\n\nThere will be at most `20` parentheses in `s`."
  },
  {
    "id": "302",
    "title": "Smallest Rectangle Enclosing Black Pixels",
    "difficulty": "Hard",
    "explanation": "You are given an `image` that is represented by a binary matrix with `0` as a white pixel and `1` as a black pixel.\n\nThe black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.\n\nGiven two integers `x` and `y` that represent the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.",
    "examples": [
      "Input: image = [[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]], x = 0, y = 2\nOutput: 6",
      "Input: image = [[\"1\"]], x = 0, y = 0\nOutput: 1"
    ],
    "constraints": "`m == image.length`\n`n == image[i].length`\n`1 <= m, n <= 100`\n`image[i][j]` is either `'0'` or `'1'`.\n\n`1 <= x < m`\n`1 <= y < n`\n`image[x][y] == '1'.`\nThe black pixels in the `image` only form one component."
  },
  {
    "id": "303",
    "title": "Range Sum Query - Immutable",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums`, find the sum of the elements between indices `left` and `right` inclusive, where `(left <= right)`.\n\nImplement the `NumArray` class:\n`NumArray(int[] nums)` initializes the object with the integer array `nums`.\n\n`int sumRange(int left, int right)` returns the sum of the elements of the `nums` array in the range `[left, right]` inclusive (i.e., `sum(nums[left], nums[left + 1], ... , nums[right])`).",
    "examples": [
      "Input\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)\nnumArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) \nnumArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-105 <= nums[i] <= 105`\n`0 <= left <= right < nums.length`\nAt most `104` calls will be made to `sumRange`."
  },
  {
    "id": "304",
    "title": "Range Sum Query 2D - Immutable",
    "difficulty": "Medium",
    "explanation": "Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.\n\nImplement the NumMatrix class:\n`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.\n\n`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.",
    "examples": [
      "Input\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangele).\n\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangele).\n\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangele)."
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 200`\n`-105 <= matrix[i][j] <= 105`\n`0 <= row1 <= row2 < m`\n`0 <= col1 <= col2 < n`\nAt most `104` calls will be made to `sumRegion`."
  },
  {
    "id": "305",
    "title": "Number of Islands II",
    "difficulty": "Hard",
    "explanation": "You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s).\n\nWe may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation.\n\nReturn an array of integers `answer` where `answer[i]` is the number of islands after turning the cell `(ri, ci)` into a land.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "examples": [
      "Input: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]\nOutput: [1,1,2,3]\nExplanation:\nInitially, the 2d grid is filled with water.\n\n- Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land. We have 1 island.\n\n- Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land. We still have 1 island.\n\n- Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land. We have 2 islands.\n\n- Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land. We have 3 islands.",
      "Input: m = 1, n = 1, positions = [[0,0]]\nOutput: [1]"
    ],
    "constraints": "`1 <= m, n, positions.length <= 104`\n`1 <= m * n <= 104`\n`positions[i].length == 2`\n`0 <= ri < m`\n`0 <= ci < n`\nFollow up: Could you solve it in time complexity `O(k log(mn))`, where `k == positions.length`?"
  },
  {
    "id": "306",
    "title": "Additive Number",
    "difficulty": "Medium",
    "explanation": "Additive number is a string whose digits can form additive sequence.\n\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n\nGiven a string containing only digits `'0'-'9'`, write a function to determine if it's an additive number.\n\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.",
    "examples": [
      "Input: \"112358\"\nOutput: true\nExplanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8",
      "Input: \"199100199\"\nOutput: true\nExplanation: The additive sequence is: 1, 99, 100, 199. \n             1 + 99 = 100, 99 + 100 = 199"
    ],
    "constraints": "`num` consists only of digits `'0'-'9'`.\n\n`1 <= num.length <= 35`\nFollow up:\nHow would you handle overflow for very large input integers?"
  },
  {
    "id": "307",
    "title": "Range Sum Query - Mutable",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array.\n\nImplement the `NumArray` class:\n`NumArray(int[] nums)` initializes the object with the integer array `nums`.\n\n`void update(int index, int val)` updates the value of `nums[index]` to be `val`.\n\n`int sumRange(int left, int right)` returns the sum of the subarray `nums[left, right]` (i.e., `nums[left] + nums[left + 1], ..., nums[right]`).",
    "examples": [
      "Input\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 9 = sum([1,3,5])\nnumArray.update(1, 2);   // nums = [1,2,5]\nnumArray.sumRange(0, 2); // return 8 = sum([1,2,5])"
    ],
    "constraints": "`1 <= nums.length <= 3 * 104`\n`-100 <= nums[i] <= 100`\n`0 <= index < nums.length`\n`-100 <= val <= 100`\n`0 <= left <= right < nums.length`\nAt most `3 * 104` calls will be made to `update` and `sumRange`."
  },
  {
    "id": "308",
    "title": "Range Sum Query 2D - Mutable",
    "difficulty": "Hard",
    "explanation": "Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.\n\nImplement the NumMatrix class:\n`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.\n\n`void update(int row, int col, int val)` updates the value of `matrix[row][col]` to be `val`.\n\n`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.",
    "examples": [
      "Input\n[\"NumMatrix\", \"sumRegion\", \"update\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [3, 2, 2], [2, 1, 4, 3]]\nOutput\n[null, 8, null, 10]\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8\nnumMatrix.update(3, 2, 2);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 10"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 200`\n`-105 <= matrix[i][j] <= 105`\n`0 <= row < m`\n`0 <= col < n`\n`-105 <= val <= 105`\n`0 <= row1 <= row2 < m`\n`0 <= col1 <= col2 < n`\nAt most `104` calls will be made to `sumRegion` and `update`."
  },
  {
    "id": "309",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "difficulty": "Medium",
    "explanation": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "examples": [
      "Input: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]",
      "Input: prices = [1]\nOutput: 0"
    ],
    "constraints": "`1 <= prices.length <= 5000`\n`0 <= prices[i] <= 1000`"
  },
  {
    "id": "310",
    "title": "Minimum Height Trees",
    "difficulty": "Medium",
    "explanation": "A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n\nGiven a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`)  are called minimum height trees (MHTs).\n\nReturn a list of all MHTs' root labels. You can return the answer in any order.\n\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.",
    "examples": [
      "Input: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.",
      "Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]",
      "Input: n = 1, edges = []\nOutput: [0]",
      "Input: n = 2, edges = [[0,1]]\nOutput: [0,1]"
    ],
    "constraints": "`1 <= n <= 2 * 104`\n`edges.length == n - 1`\n`0 <= ai, bi < n`\n`ai != bi`\nAll the pairs `(ai, bi)` are distinct.\n\nThe given input is guaranteed to be a tree and there will be no repeated edges."
  },
  {
    "id": "311",
    "title": "Sparse Matrix Multiplication",
    "difficulty": "Medium",
    "explanation": "Given two sparse matrices `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.",
    "examples": [
      "Input: mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]\nOutput: [[7,0,0],[-7,0,3]]",
      "Input: mat1 = [[0]], mat2 = [[0]]\nOutput: [[0]]"
    ],
    "constraints": "`m == mat1.length`\n`k == mat1[i].length == mat2.length`\n`n == mat2[i].length`\n`1 <= m, n, k <= 100`\n`-100 <= mat1[i][j], mat2[i][j] <= 100`"
  },
  {
    "id": "312",
    "title": "Burst Balloons",
    "difficulty": "Hard",
    "explanation": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.\n\nReturn the maximum coins you can collect by bursting the balloons wisely.",
    "examples": [
      "Input: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167",
      "Input: nums = [1,5]\nOutput: 10"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 500`\n`0 <= nums[i] <= 100`"
  },
  {
    "id": "313",
    "title": "Super Ugly Number",
    "difficulty": "Medium",
    "explanation": "Given an integer `n` and an array of integers `primes`, return the `nth` super ugly number.\n\nSuper ugly number is a positive number whose all prime factors are in the array `primes`.\n\nThe `nth` super ugly number is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
      "Input: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].",
      "Input: n = 1, primes = [2,3,5]\nOutput: 1\nExplanation: 1 is a super ugly number for any given primes."
    ],
    "constraints": "`1 <= n <= 106`\n`1 <= primes.length <= 100`\n`2 <= primes[i] <= 1000`\n`primes[i]` is guaranteed to be a prime number.\n\nAll the values of `primes` are unique and sorted in ascending order."
  },
  {
    "id": "314",
    "title": "Binary Tree Vertical Order Traversal",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).\n\nIf two nodes are in the same row and column, the order should be from left to right.",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]",
      "Input: root = [3,9,8,4,0,1,7]\nOutput: [[4],[9],[3,0,1],[8],[7]]",
      "Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]\nOutput: [[4],[9,5],[3,0,1],[8,2],[7]]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 100]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "315",
    "title": "Count of Smaller Numbers After Self",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `nums` and you have to return a new `counts` array. The `counts` array has the property where `counts[i]` is the number of smaller elements to the right of `nums[i]`.",
    "examples": [
      "Input: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\n\nTo the right of 2 there is only 1 smaller element (1).\n\nTo the right of 6 there is 1 smaller element (1).\n\nTo the right of 1 there is 0 smaller element.",
      "Input: nums = [-1]\nOutput: [0]",
      "Input: nums = [-1,-1]\nOutput: [0,0]"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "316",
    "title": "Remove Duplicate Letters",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/",
    "examples": [
      "Input: s = \"bcabc\"\nOutput: \"abc\"",
      "Input: s = \"cbacdcbc\"\nOutput: \"acdb\""
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of lowercase English letters."
  },
  {
    "id": "317",
    "title": "Shortest Distance from All Buildings",
    "difficulty": "Hard",
    "explanation": "You are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where:\neach `0` marks an empty land that you can pass by freely,\neach `1` marks a building that you cannot pass through, and\neach `2` marks an obstacle that you cannot pass through.\n\nYou want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.\n\nReturn the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return `-1`.\n\nThe total travel distance is the sum of the distances between the houses of the friends and the meeting point.\n\nThe distance is calculated using Manhattan Distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.",
    "examples": [
      "Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]\nOutput: 7\nExplanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).\n\nThe point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.\n\nSo return 7.",
      "Input: grid = [[1,0]]\nOutput: 1",
      "Input: grid = [[1]]\nOutput: -1"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 100`\n`grid[i][j]` is either `0`, `1`, or `2`.\n\nThere will be at least one building in the `grid`."
  },
  {
    "id": "318",
    "title": "Maximum Product of Word Lengths",
    "difficulty": "Medium",
    "explanation": "Given a string array `words`, return the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. If no such two words exist, return `0`.",
    "examples": [
      "Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\nOutput: 16\nExplanation: The two words can be \"abcw\", \"xtfn\".",
      "Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\nOutput: 4\nExplanation: The two words can be \"ab\", \"cd\".",
      "Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: 0\nExplanation: No such pair of words."
    ],
    "constraints": "`2 <= words.length <= 1000`\n`1 <= words[i].length <= 1000`\n`words[i]` consists only of lowercase English letters."
  },
  {
    "id": "319",
    "title": "Bulb Switcher",
    "difficulty": "Medium",
    "explanation": "There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.\n\nReturn the number of bulbs that are on after `n` rounds.",
    "examples": [
      "Input: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off].\n\nAfter the first round, the three bulbs are [on, on, on].\n\nAfter the second round, the three bulbs are [on, off, on].\n\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.",
      "Input: n = 0\nOutput: 0",
      "Input: n = 1\nOutput: 1"
    ],
    "constraints": "`0 <= n <= 109`"
  },
  {
    "id": "320",
    "title": "Generalized Abbreviation",
    "difficulty": "Medium",
    "explanation": "A word's generalized abbreviation can be constructed by taking any number of non-overlapping substrings and replacing them with their respective lengths. For example, `\"abcde\"` can be abbreviated into `\"a3e\"` (`\"bcd\"` turned into `\"3\"`), `\"1bcd1\"` (`\"a\"` and `\"e\"` both turned into `\"1\"`), and `\"23\"` (`\"ab\"` turned into `\"2\"` and `\"cde\"` turned into `\"3\"`).\n\nGiven a string `word`, return a list of all the possible generalized abbreviations of `word`. Return the answer in any order.",
    "examples": [
      "Input: word = \"word\"\nOutput: [\"4\",\"3d\",\"2r1\",\"2rd\",\"1o2\",\"1o1d\",\"1or1\",\"1ord\",\"w3\",\"w2d\",\"w1r1\",\"w1rd\",\"wo2\",\"wo1d\",\"wor1\",\"word\"]",
      "Input: word = \"a\"\nOutput: [\"1\",\"a\"]"
    ],
    "constraints": "`1 <= word.length <= 15`\n`word` consists of only lowercase English letters."
  },
  {
    "id": "321",
    "title": "Create Maximum Number",
    "difficulty": "Hard",
    "explanation": "You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.\n\nCreate the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n\nReturn an array of the `k` digits representing the answer.",
    "examples": [
      "Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]",
      "Input: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]",
      "Input: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]"
    ],
    "constraints": "`m == nums1.length`\n`n == nums2.length`\n`1 <= m, n <= 500`\n`0 <= nums1[i], nums2[i] <= 9`\n`1 <= k <= m + n`\nFollow up: Try to optimize your time and space complexity."
  },
  {
    "id": "322",
    "title": "Coin Change",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`.\n\nYou may assume that you have an infinite number of each kind of coin.",
    "examples": [
      "Input: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1",
      "Input: coins = [2], amount = 3\nOutput: -1",
      "Input: coins = [1], amount = 0\nOutput: 0",
      "Input: coins = [1], amount = 1\nOutput: 1",
      "Input: coins = [1], amount = 2\nOutput: 2"
    ],
    "constraints": "`1 <= coins.length <= 12`\n`1 <= coins[i] <= 231 - 1`\n`0 <= amount <= 104`"
  },
  {
    "id": "323",
    "title": "Number of Connected Components in an Undirected Graph",
    "difficulty": "Medium",
    "explanation": "You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph.\n\nReturn the number of connected components in the graph.",
    "examples": [
      "Input: n = 5, edges = [[0,1],[1,2],[3,4]]\nOutput: 2",
      "Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]\nOutput: 1"
    ],
    "constraints": "`1 <= n <= 2000`\n`1 <= edges.length <= 5000`\n`edges[i].length == 2`\n`0 <= ai <= bi < n`\n`ai != bi`\nThere are no repeated edges."
  },
  {
    "id": "324",
    "title": "Wiggle Sort II",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.\n\nYou may assume the input array always has a valid answer.",
    "examples": [
      "Input: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.",
      "Input: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]"
    ],
    "constraints": "`1 <= nums.length <= 5 * 104`\n`0 <= nums[i] <= 5000`\nIt is guaranteed that there will be an answer for the given input `nums`.\n\nFollow Up: Can you do it in `O(n)` time and/or in-place with `O(1)` extra space?"
  },
  {
    "id": "325",
    "title": "Maximum Size Subarray Sum Equals k",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` and an integer `k`, return the maximum length of a subarray that sums to `k`. If there isn't one, return `0` instead.",
    "examples": [
      "Input: nums = [1,-1,5,-2,3], k = 3\nOutput: 4\nExplanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.",
      "Input: nums = [-2,-1,2,1], k = 1\nOutput: 2\nExplanation: The subarray [-1, 2] sums to 1 and is the longest."
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-104 <= nums[i] <= 104`\n`-105 <= k <= 105`\nFollow Up: Can you do it in `O(n)` time?"
  },
  {
    "id": "326",
    "title": "Power of Three",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return `true` if it is a power of three. Otherwise, return `false`.\n\nAn integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.",
    "examples": [
      "Input: n = 27\nOutput: true",
      "Input: n = 0\nOutput: false",
      "Input: n = 9\nOutput: true",
      "Input: n = 45\nOutput: false"
    ],
    "constraints": "`-231 <= n <= 231 - 1`\nFollow up: Could you solve it without loops/recursion?"
  },
  {
    "id": "327",
    "title": "Count of Range Sum",
    "difficulty": "Hard",
    "explanation": "Given an integer array `nums` and two integers `lower` and `upper`, return the number of range sums that lie in `[lower, upper]` inclusive.\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.",
    "examples": [
      "Input: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.",
      "Input: nums = [0], lower = 0, upper = 0\nOutput: 1"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-231 <= nums[i] <= 231 - 1`\n`-3 * 104 <= lower <= upper <= 3 * 104`\nFollow up: A naive algorithm of `O(n2)` is trivial, Could you do better than that?"
  },
  {
    "id": "328",
    "title": "Odd Even Linked List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\n\nThe first node is considered odd, and the second node is even, and so on.\n\nNote that the relative order inside both the even and odd groups should remain as it was in the input.",
    "examples": [
      "Input: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]",
      "Input: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]"
    ],
    "constraints": "The number of nodes in the linked list is in the range `[0, 104]`.\n\n`-106 <= Node.val <= 106`\nFollow up: Could you solve it in `O(1)` space complexity and `O(nodes)` time complexity?"
  },
  {
    "id": "329",
    "title": "Longest Increasing Path in a Matrix",
    "difficulty": "Hard",
    "explanation": "Given an `m x n` integers `matrix`, return the length of the longest increasing path in `matrix`.\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).",
    "examples": [
      "Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is `[1, 2, 6, 9]`.",
      "Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed.",
      "Input: matrix = [[1]]\nOutput: 1"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 200`\n`0 <= matrix[i][j] <= 231 - 1`"
  },
  {
    "id": "330",
    "title": "Patching Array",
    "difficulty": "Hard",
    "explanation": "Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array.\n\nReturn the minimum number of patches required.",
    "examples": [
      "Input: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\n\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\n\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\n\nSo we only need 1 patch.",
      "Input: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].",
      "Input: nums = [1,2,2], n = 5\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= 104`\n`nums` is sorted in ascending order.\n\n`1 <= n <= 231 - 1`"
  },
  {
    "id": "331",
    "title": "Verify Preorder Serialization of a Binary Tree",
    "difficulty": "Medium",
    "explanation": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.\n\nFor example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,#\"`, where `'#'` represents a null node.\n\nGiven a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.\n\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.\n\nYou may assume that the input format is always valid.\n\nFor example, it could never contain two consecutive commas, such as `\"1,,3\"`.",
    "examples": [
      "Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true",
      "Input: preorder = \"1,#\"\nOutput: false",
      "Input: preorder = \"9,#,#,1\"\nOutput: false"
    ],
    "constraints": "`1 <= preorder.length <= 104`\n`preoder` consist of integers in the range `[0, 100]` and `'#'` separated by commas `','`.\n\nFollow up: Find an algorithm without reconstructing the tree."
  },
  {
    "id": "332",
    "title": "Reconstruct Itinerary",
    "difficulty": "Medium",
    "explanation": "You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n\nAll of the tickets belong to a man who departs from `\"JFK\"`, thus, the itinerary must begin with `\"JFK\"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\nFor example, the itinerary `[\"JFK\", \"LGA\"]` has a smaller lexical order than `[\"JFK\", \"LGB\"]`.\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.",
    "examples": [
      "Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]",
      "Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order."
    ],
    "constraints": "`1 <= tickets.length <= 300`\n`tickets[i].length == 2`\n`fromi.length == 3`\n`toi.length == 3`\n`fromi` and `toi` consist of uppercase English letters.\n\n`fromi != toi`"
  },
  {
    "id": "333",
    "title": "Largest BST Subtree",
    "difficulty": "Medium",
    "explanation": "Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.\n\nA Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties:\nThe left subtree values are less than the value of their parent (root) node's value.\n\nThe right subtree values are greater than the value of their parent (root) node's value.\n\nNote: A subtree must include all of its descendants.\n\nFollow up: Can you figure out ways to solve it with O(n) time complexity?",
    "examples": [
      "Input: root = [10,5,15,1,8,null,7]\nOutput: 3\nExplanation: The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.",
      "Input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]\nOutput: 2"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-104 <= Node.val <= 104`"
  },
  {
    "id": "334",
    "title": "Increasing Triplet Subsequence",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, return `true` if there exists a triple of indices `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.",
    "examples": [
      "Input: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i < j < k is valid.",
      "Input: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.",
      "Input: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-231 <= nums[i] <= 231 - 1`\nFollow up: Could you implement a solution that runs in `O(n)` time complexity and `O(1)` space complexity?"
  },
  {
    "id": "335",
    "title": "Self Crossing",
    "difficulty": "Hard",
    "explanation": "You are given an array of integers `distance`.\n\nYou start at point `(0,0)` on an X-Y plane and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n\nReturn `true` if your path crosses itself, and `false` if it does not.",
    "examples": [
      "Input: distance = [2,1,1,2]\nOutput: true",
      "Input: distance = [1,2,3,4]\nOutput: false",
      "Input: distance = [1,1,1,1]\nOutput: true"
    ],
    "constraints": "`1 <= distance.length <= 500`\n`1 <= distance[i] <= 500`\nFollow up: Could you write a one-pass algorithm with `O(1)` extra space?"
  },
  {
    "id": "336",
    "title": "Palindrome Pairs",
    "difficulty": "Hard",
    "explanation": "Given a list of unique words, return all the pairs of the distinct indices `(i, j)` in the given list, so that the concatenation of the two words `words[i] + words[j]` is a palindrome.",
    "examples": [
      "Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]",
      "Input: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]",
      "Input: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]"
    ],
    "constraints": "`1 <= words.length <= 5000`\n`0 <= words[i].length <= 300`\n`words[i]` consists of lower-case English letters."
  },
  {
    "id": "337",
    "title": "House Robber III",
    "difficulty": "Medium",
    "explanation": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.\n\nBesides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\n\nGiven the `root` of the binary tree, return the maximum amount of money the thief can rob without alerting the police.",
    "examples": [
      "Input: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.",
      "Input: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`0 <= Node.val <= 104`"
  },
  {
    "id": "338",
    "title": "Counting Bits",
    "difficulty": "Medium",
    "explanation": "Given an integer `num`, return an array of the number of `1`'s in the binary representation of every number in the range `[0, num]`.",
    "examples": [
      "Input: num = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10",
      "Input: num = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101"
    ],
    "constraints": "`0 <= num <= 105`\nFollow up:\nIt is very easy to come up with a solution with run time `O(32n)`. Can you do it in linear time `O(n)` and possibly in a single pass?\nCould you solve it in `O(n)` space complexity?\nCan you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?"
  },
  {
    "id": "339",
    "title": "Nested List Weight Sum",
    "difficulty": "Medium",
    "explanation": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth.\n\nReturn the sum of each integer in `nestedList` multiplied by its depth.",
    "examples": [
      "Input: nestedList = [[1,1],2,[1,1]]\nOutput: 10\nExplanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.",
      "Input: nestedList = [1,[4,[6]]]\nOutput: 27\nExplanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.",
      "Input: nestedList = [0]\nOutput: 0"
    ],
    "constraints": "`1 <= nestedList.length <= 50`\nThe values of the integers in the nested list is in the range `[-100, 100]`.\n\nThe maximum depth of any integer is less than or equal to `50`."
  },
  {
    "id": "340",
    "title": "Longest Substring with At Most K Distinct Characters",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.",
    "examples": [
      "Input: s = \"eceba\", k = 2\nOutput: 3\nExplanation: The substring is \"ece\" with length 3.",
      "Input: s = \"aa\", k = 1\nOutput: 2\nExplanation: The substring is \"aa\" with length 2."
    ],
    "constraints": "`1 <= s.length <= 5 * 104`\n`0 <= k <= 50`"
  },
  {
    "id": "341",
    "title": "Flatten Nested List Iterator",
    "difficulty": "Medium",
    "explanation": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\nImplement the `NestedIterator` class:\n`NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.\n\n`int next()` Returns the next integer in the nested list.\n\n`boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.",
    "examples": [
      "Input: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].",
      "Input: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."
    ],
    "constraints": "`1 <= nestedList.length <= 500`\nThe values of the integers in the nested list is in the range `[-106, 106]`."
  },
  {
    "id": "342",
    "title": "Power of Four",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return `true` if it is a power of four. Otherwise, return `false`.\n\nAn integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.",
    "examples": [
      "Input: n = 16\nOutput: true",
      "Input: n = 5\nOutput: false",
      "Input: n = 1\nOutput: true"
    ],
    "constraints": "`-231 <= n <= 231 - 1`\nFollow up: Could you solve it without loops/recursion?"
  },
  {
    "id": "343",
    "title": "Integer Break",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, break it into the sum of `k` positive integers, where `k >= 2`, and maximize the product of those integers.\n\nReturn the maximum product you can get.",
    "examples": [
      "Input: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 × 1 = 1.",
      "Input: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36."
    ],
    "constraints": "`2 <= n <= 58`"
  },
  {
    "id": "344",
    "title": "Reverse String",
    "difficulty": "Easy",
    "explanation": "Write a function that reverses a string. The input string is given as an array of characters `s`.",
    "examples": [
      "Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]",
      "Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is a printable ascii character.\n\nFollow up: Do not allocate extra space for another array. You must do this by modifying the input array in-place with `O(1)` extra memory."
  },
  {
    "id": "345",
    "title": "Reverse Vowels of a String",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, reverse only all the vowels in the string and return it.\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both cases.",
    "examples": [
      "Input: s = \"hello\"\nOutput: \"holle\"",
      "Input: s = \"leetcode\"\nOutput: \"leotcede\""
    ],
    "constraints": "`1 <= s.length <= 3 * 105`\n`s` consist of printable ASCII characters."
  },
  {
    "id": "346",
    "title": "Moving Average from Data Stream",
    "difficulty": "Easy",
    "explanation": "Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.\n\nImplement the `MovingAverage` class:\n`MovingAverage(int size)` Initializes the object with the size of the window `size`.\n\n`double next(int val)` Returns the moving average of the last `size` values of the stream.",
    "examples": [
      "Input\n[\"MovingAverage\", \"next\", \"next\", \"next\", \"next\"]\n[[3], [1], [10], [3], [5]]\nOutput\n[null, 1.0, 5.5, 4.66667, 6.0]\nExplanation\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // return 1.0 = 1 / 1\nmovingAverage.next(10); // return 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3"
    ],
    "constraints": "`1 <= size <= 1000`\n`-105 <= val <= 105`\nAt most `104` calls will be made to `next`."
  },
  {
    "id": "347",
    "title": "Top K Frequent Elements",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.",
    "examples": [
      "Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]",
      "Input: nums = [1], k = 1\nOutput: [1]"
    ],
    "constraints": "`1 <= nums.legth <= 105`\n`k` is in the range `[1, the number of unique elements in the array]`.\n\nIt is guaranteed that the answer is unique.\n\nFollow up: Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size."
  },
  {
    "id": "348",
    "title": "Design Tic-Tac-Toe",
    "difficulty": "Medium",
    "explanation": "Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players:\nA move is guaranteed to be valid and is placed on an empty block.\n\nOnce a winning condition is reached, no more moves are allowed.\n\nA player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game.\n\nImplement the `TicTacToe` class:\n`TicTacToe(int n)` Initializes the object the size of the board `n`.\n\n`int move(int row, int col, int player)` Indicates that player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move.\n\nFollow up:\nCould you do better than `O(n2)` per `move()` operation?",
    "examples": [
      "Input\n[\"TicTacToe\", \"move\", \"move\", \"move\", \"move\", \"move\", \"move\", \"move\"]\n[[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]\nOutput\n[null, 0, 0, 0, 0, 0, 0, 1]\nExplanation\nTicTacToe ticTacToe = new TicTacToe(3);\nAssume that player 1 is \"X\" and player 2 is \"O\" in the board.\n\nticTacToe.move(0, 0, 1); // return 0 (no one wins)\n|X| | |\n| | | |    // Player 1 makes a move at (0, 0).\n\n| | | |\nticTacToe.move(0, 2, 2); // return 0 (no one wins)\n|X| |O|\n| | | |    // Player 2 makes a move at (0, 2).\n\n| | | |\nticTacToe.move(2, 2, 1); // return 0 (no one wins)\n|X| |O|\n| | | |    // Player 1 makes a move at (2, 2).\n\n| | |X|\nticTacToe.move(1, 1, 2); // return 0 (no one wins)\n|X| |O|\n| |O| |    // Player 2 makes a move at (1, 1).\n\n| | |X|\nticTacToe.move(2, 0, 1); // return 0 (no one wins)\n|X| |O|\n| |O| |    // Player 1 makes a move at (2, 0).\n\n|X| |X|\nticTacToe.move(1, 0, 2); // return 0 (no one wins)\n|X| |O|\n|O|O| |    // Player 2 makes a move at (1, 0).\n\n|X| |X|\nticTacToe.move(2, 1, 1); // return 1 (player 1 wins)\n|X| |O|\n|O|O| |    // Player 1 makes a move at (2, 1).\n\n|X|X|X|"
    ],
    "constraints": "`2 <= n <= 100`\nplayer is `1` or `2`.\n\n`1 <= row, col <= n`\n`(row, col)` are unique for each different call to `move`.\n\nAt most `n2` calls will be made to `move`."
  },
  {
    "id": "349",
    "title": "Intersection of Two Arrays",
    "difficulty": "Easy",
    "explanation": "Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.",
    "examples": [
      "Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]",
      "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted."
    ],
    "constraints": "`1 <= nums1.length, nums2.length <= 1000`\n`0 <= nums1[i], nums2[i] <= 1000`"
  },
  {
    "id": "350",
    "title": "Intersection of Two Arrays II",
    "difficulty": "Easy",
    "explanation": "Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.",
    "examples": [
      "Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]",
      "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted."
    ],
    "constraints": "`1 <= nums1.length, nums2.length <= 1000`\n`0 <= nums1[i], nums2[i] <= 1000`\nFollow up:\nWhat if the given array is already sorted? How would you optimize your algorithm?\nWhat if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?\nWhat if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"
  },
  {
    "id": "351",
    "title": "Android Unlock Patterns",
    "difficulty": "Medium",
    "explanation": "Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an \"unlock pattern\" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a valid unlock pattern if both of the following are true:\nAll the dots in the sequence are distinct.\n\nIf the line segment connecting two consecutive dots in the sequence passes through any other dot, the other dot must have previously appeared in the sequence. No jumps through non-selected dots are allowed.\n\nHere are some example valid and invalid unlock patterns:\nThe 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.\n\nThe 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.\n\nThe 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.\n\nThe 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.\n\nGiven two integers `m` and `n`, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least `m` keys and at most `n` keys.\n\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.",
    "examples": [
      "Input: m = 1, n = 1\nOutput: 9",
      "Input: m = 1, n = 2\nOutput: 65"
    ],
    "constraints": "`1 <= m, n <= 9`"
  },
  {
    "id": "352",
    "title": "Data Stream as Disjoint Intervals",
    "difficulty": "Hard",
    "explanation": "Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.\n\nImplement the `SummaryRanges` class:\n`SummaryRanges()` Initializes the object with an empty stream.\n\n`void addNum(int val)` Adds the integer `val` to the stream.\n\n`int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`.",
    "examples": [
      "Input\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\nOutput\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\nExplanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]"
    ],
    "constraints": "`0 <= val <= 104`\nAt most `3 * 104` calls will be made to `addNum` and `getIntervals`.\n\nFollow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?"
  },
  {
    "id": "353",
    "title": "Design Snake Game",
    "difficulty": "Medium",
    "explanation": "Design a Snake game that is played on a device with screen size `height x width`. Play the game online if you are not familiar with the game.\n\nThe snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.\n\nYou are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.\n\nEach piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.\n\nWhen a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake.\n\nThe game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself).\n\nImplement the `SnakeGame` class:\n`SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`.\n\n`int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.",
    "examples": [
      "Input\n[\"SnakeGame\", \"move\", \"move\", \"move\", \"move\", \"move\", \"move\"]\n[[3, 2, [[1, 2], [0, 1]]], [\"R\"], [\"D\"], [\"R\"], [\"U\"], [\"L\"], [\"U\"]]\nOutput\n[null, 0, 0, 1, 1, 2, -1]\nExplanation\nSnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);\nsnakeGame.move(\"R\"); // return 0\nsnakeGame.move(\"D\"); // return 0\nsnakeGame.move(\"R\"); // return 1, snake eats the first piece of food. The second piece of food appears\n                     // at (0, 1).\n\nsnakeGame.move(\"U\"); // return 1\nsnakeGame.move(\"L\"); // return 2, snake eats the second food. No more food appears.\n\nsnakeGame.move(\"U\"); // return -1, game over because snake collides with border"
    ],
    "constraints": "`1 <= width, height <= 104`\n`1 <= food.length <= 50`\n`food[i].length == 2`\n`0 <= ri < height`\n`0 <= ci < width`\n`direction.length == 1`\n`direction` is `'U'`, `'D'`, `'L'`, or `'R'`.\n\nAt most `104` calls will be made to `move`."
  },
  {
    "id": "354",
    "title": "Russian Doll Envelopes",
    "difficulty": "Hard",
    "explanation": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope.\n\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\n\nNote: You cannot rotate an envelope.",
    "examples": [
      "Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is `3` ([2,3] => [5,4] => [6,7]).",
      "Input: envelopes = [[1,1],[1,1],[1,1]]\nOutput: 1"
    ],
    "constraints": "`1 <= envelopes.length <= 5000`\n`envelopes[i].length == 2`\n`1 <= wi, hi <= 104`"
  },
  {
    "id": "355",
    "title": "Design Twitter",
    "difficulty": "Medium",
    "explanation": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.\n\nImplement the `Twitter` class:\n`Twitter()` Initializes your twitter object.\n\n`void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.\n\n`List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n\n`void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.\n\n`void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.",
    "examples": [
      "Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\n\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\n\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\n\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\n\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\n\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
    ],
    "constraints": "`1 <= userId, followerId, followeeId <= 500`\n`0 <= tweetId <= 104`\nAll the tweets have unique IDs.\n\nAt most `3 * 104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`."
  },
  {
    "id": "356",
    "title": "Line Reflection",
    "difficulty": "Medium",
    "explanation": "Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points symmetrically, in other words, answer whether or not if there exists a line that after reflecting all points over the given line the set of the original points is the same that the reflected ones.\n\nNote that there can be repeated points.\n\nFollow up:\nCould you do better than O(n2) ?",
    "examples": [
      "Input: points = [[1,1],[-1,1]]\nOutput: true\nExplanation: We can choose the line x = 0.",
      "Input: points = [[1,1],[-1,-1]]\nOutput: false\nExplanation: We can't choose a line."
    ],
    "constraints": "`n == points.length`\n`1 <= n <= 10^4`\n`-10^8 <= points[i][j] <= 10^8`"
  },
  {
    "id": "357",
    "title": "Count Numbers with Unique Digits",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.",
    "examples": [
      "Input: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99",
      "Input: n = 0\nOutput: 1"
    ],
    "constraints": "`0 <= n <= 8`"
  },
  {
    "id": "358",
    "title": "Rearrange String k Distance Apart",
    "difficulty": "Hard",
    "explanation": "Given a string `s` and an integer `k`, rearrange `s` such that the same characters are at least distance `k` from each other. If it is not possible to rearrange the string, return an empty string `\"\"`.",
    "examples": [
      "Input: s = \"aabbcc\", k = 3\nOutput: \"abcabc\"\nExplanation: The same letters are at least a distance of 3 from each other.",
      "Input: s = \"aaabc\", k = 3\nOutput: \"\"\nExplanation: It is not possible to rearrange the string.",
      "Input: s = \"aaadbbcc\", k = 2\nOutput: \"abacabcd\"\nExplanation: The same letters are at least a distance of 2 from each other."
    ],
    "constraints": "`1 <= s.length <= 3 * 105`\n`s` consists of only lowercase English letters.\n\n`0 <= k <= s.length`"
  },
  {
    "id": "359",
    "title": "Logger Rate Limiter",
    "difficulty": "Easy",
    "explanation": "Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`).\n\nAll messages will come in chronological order. Several messages may arrive at the same timestamp.\n\nImplement the `Logger` class:\n`Logger()` Initializes the `logger` object.\n\n`bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.",
    "examples": [
      "Input\n[\"Logger\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\"]\n[[], [1, \"foo\"], [2, \"bar\"], [3, \"foo\"], [8, \"bar\"], [10, \"foo\"], [11, \"foo\"]]\nOutput\n[null, true, true, false, false, false, true]\nExplanation\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1, \"foo\");  // return true, next allowed timestamp for \"foo\" is 1 + 10 = 11\nlogger.shouldPrintMessage(2, \"bar\");  // return true, next allowed timestamp for \"bar\" is 2 + 10 = 12\nlogger.shouldPrintMessage(3, \"foo\");  // 3 < 11, return false\nlogger.shouldPrintMessage(8, \"bar\");  // 8 < 12, return false\nlogger.shouldPrintMessage(10, \"foo\"); // 10 < 11, return false\nlogger.shouldPrintMessage(11, \"foo\"); // 11 >= 11, return true, next allowed timestamp for \"foo\" is\n                                      // 11 + 10 = 21"
    ],
    "constraints": "`0 <= timestamp <= 109`\nEvery `timestamp` will be passed in non-decreasing order (chronological order).\n\n`1 <= message.length <= 30`\nAt most `104` calls will be made to `shouldPrintMessage`."
  },
  {
    "id": "360",
    "title": "Sort Transformed Array",
    "difficulty": "Medium",
    "explanation": "Given a sorted integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return the array in a sorted order.",
    "examples": [
      "Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5\nOutput: [3,9,15,33]",
      "Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5\nOutput: [-23,-5,1,7]"
    ],
    "constraints": "`1 <= nums.length <= 200`\n`-100 <= nums[i], a, b, c <= 100`\n`nums` is sorted in ascending order.\n\nFollow up: Could you solve it in `O(n)` time?"
  },
  {
    "id": "361",
    "title": "Bomb Enemy",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return the maximum enemies you can kill using one bomb. You can only place the bomb in an empty cell.\n\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.",
    "examples": [
      "Input: grid = [[\"0\",\"E\",\"0\",\"0\"],[\"E\",\"0\",\"W\",\"E\"],[\"0\",\"E\",\"0\",\"0\"]]\nOutput: 3",
      "Input: grid = [[\"W\",\"W\",\"W\"],[\"0\",\"0\",\"0\"],[\"E\",\"E\",\"E\"]]\nOutput: 1"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 500`\n`grid[i][j]` is either `'W'`, `'E'`, or `'0'`."
  },
  {
    "id": "362",
    "title": "Design Hit Counter",
    "difficulty": "Medium",
    "explanation": "Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds).\n\nYour system should accept a `timestamp` parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time.\n\nImplement the `HitCounter` class:\n`HitCounter()` Initializes the object of the hit counter system.\n\n`void hit(int timestamp)` Records a hit that happened at `timestamp` (in seconds). Several hits may happen at the same `timestamp`.\n\n`int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).",
    "examples": [
      "Input\n[\"HitCounter\", \"hit\", \"hit\", \"hit\", \"getHits\", \"hit\", \"getHits\", \"getHits\"]\n[[], [1], [2], [3], [4], [300], [300], [301]]\nOutput\n[null, null, null, null, 3, null, 4, 3]\nExplanation\nHitCounter hitCounter = new HitCounter();\nhitCounter.hit(1);       // hit at timestamp 1.\n\nhitCounter.hit(2);       // hit at timestamp 2.\n\nhitCounter.hit(3);       // hit at timestamp 3.\n\nhitCounter.getHits(4);   // get hits at timestamp 4, return 3.\n\nhitCounter.hit(300);     // hit at timestamp 300.\n\nhitCounter.getHits(300); // get hits at timestamp 300, return 4.\n\nhitCounter.getHits(301); // get hits at timestamp 301, return 3."
    ],
    "constraints": "`1 <= timestamp <= 2 * 109`\nAll the calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing).\n\nAt most `300` calls will be made to `hit` and `getHits`.\n\nFollow up: What if the number of hits per second could be huge? Does your design scale?"
  },
  {
    "id": "363",
    "title": "Max Sum of Rectangle No Larger Than K",
    "difficulty": "Hard",
    "explanation": "Given an `m x n` matrix `matrix` and an integer `k`, return the max sum of a rectangle in the matrix such that its sum is no larger than `k`.\n\nIt is guaranteed that there will be a rectangle with a sum no larger than `k`.",
    "examples": [
      "Input: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).",
      "Input: matrix = [[2,2,-1]], k = 3\nOutput: 3"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 100`\n`-100 <= matrix[i][j] <= 100`\n`-105 <= k <= 105`\nFollow up: What if the number of rows is much larger than the number of columns?"
  },
  {
    "id": "364",
    "title": "Nested List Weight Sum II",
    "difficulty": "Medium",
    "explanation": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. Let `maxDepth` be the maximum depth of any integer.\n\nThe weight of an integer is `maxDepth - (the depth of the integer) + 1`.\n\nReturn the sum of each integer in `nestedList` multiplied by its weight.",
    "examples": [
      "Input: nestedList = [[1,1],2,[1,1]]\nOutput: 8\nExplanation: Four 1's with a weight of 1, one 2 with a weight of 2.\n\n1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8",
      "Input: nestedList = [1,[4,[6]]]\nOutput: 17\nExplanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.\n\n1*3 + 4*2 + 6*1 = 17"
    ],
    "constraints": "`1 <= nestedList.length <= 50`\nThe values of the integers in the nested list is in the range `[-100, 100]`.\n\nThe maximum depth of any integer is less than or equal to `50`."
  },
  {
    "id": "365",
    "title": "Water and Jug Problem",
    "difficulty": "Medium",
    "explanation": "You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.\n\nIf `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained within one or both buckets by the end.\n\nOperations allowed:\nFill any of the jugs with water.\n\nEmpty any of the jugs.\n\nPour water from one jug into another till the other jug is completely full, or the first jug itself is empty.",
    "examples": [
      "Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\nOutput: true\nExplanation: The famous Die Hard example",
      "Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\nOutput: false",
      "Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\nOutput: true"
    ],
    "constraints": "`1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`"
  },
  {
    "id": "366",
    "title": "Find Leaves of Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, collect a tree's nodes as if you were doing this:\nCollect all the leaf nodes.\n\nRemove all the leaf nodes.\n\nRepeat until the tree is empty.",
    "examples": [
      "Input: root = [1,2,3,4,5]\nOutput: [[4,5,3],[2],[1]]\nExplanation:\n[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.",
      "Input: root = [1]\nOutput: [[1]]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 100]`.\n\n`1 <= Node.val <= 100`"
  },
  {
    "id": "367",
    "title": "Valid Perfect Square",
    "difficulty": "Easy",
    "explanation": "Given a positive integer num, write a function which returns True if num is a perfect square else False.\n\nFollow up: Do not use any built-in library function such as `sqrt`.",
    "examples": [
      "Input: num = 16\nOutput: true",
      "Input: num = 14\nOutput: false"
    ],
    "constraints": "`1 <= num <= 2^31 - 1`"
  },
  {
    "id": "368",
    "title": "Largest Divisible Subset",
    "difficulty": "Medium",
    "explanation": "Given a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n`answer[i] % answer[j] == 0`, or\n`answer[j] % answer[i] == 0`\nIf there are multiple solutions, return any of them.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.",
      "Input: nums = [1,2,4,8]\nOutput: [1,2,4,8]"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= 2 * 109`\nAll the integers in `nums` are unique."
  },
  {
    "id": "369",
    "title": "Plus One Linked List",
    "difficulty": "Medium",
    "explanation": "Given a non-negative integer represented as a linked list of digits, plus one to the integer.\n\nThe digits are stored such that the most significant digit is at the `head` of the list.",
    "examples": [
      "Input: head = [1,2,3]\nOutput: [1,2,4]",
      "Input: head = [0]\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the linked list is in the range `[1, 100]`.\n\n`0 <= Node.val <= 9`\nThe number represented by the linked list does not contain leading zeros except for the zero itself."
  },
  {
    "id": "370",
    "title": "Range Addition",
    "difficulty": "Medium",
    "explanation": "You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`.\n\nYou have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`.\n\nReturn `arr` after applying all the `updates`.",
    "examples": [
      "Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]\nOutput: [-2,0,3,5,3]",
      "Input: length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]\nOutput: [0,-4,2,2,2,4,4,-4,-4,-4]"
    ],
    "constraints": "`1 <= length <= 105`\n`0 <= updates.length <= 104`\n`0 <= startIdxi <= endIdxi < length`\n`-1000 <= inci <= 1000`"
  },
  {
    "id": "371",
    "title": "Sum of Two Integers",
    "difficulty": "Medium",
    "explanation": "Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.",
    "examples": [
      "Input: a = 1, b = 2\nOutput: 3",
      "Input: a = 2, b = 3\nOutput: 5"
    ],
    "constraints": "`-1000 <= a, b <= 1000`"
  },
  {
    "id": "372",
    "title": "Super Pow",
    "difficulty": "Medium",
    "explanation": "Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.",
    "examples": [
      "Input: a = 2, b = [3]\nOutput: 8",
      "Input: a = 2, b = [1,0]\nOutput: 1024",
      "Input: a = 1, b = [4,3,3,8,5,2]\nOutput: 1",
      "Input: a = 2147483647, b = [2,0,0]\nOutput: 1198"
    ],
    "constraints": "`1 <= a <= 231 - 1`\n`1 <= b.length <= 2000`\n`0 <= b[i] <= 9`\n`b` doesn't contain leading zeros."
  },
  {
    "id": "373",
    "title": "Find K Pairs with Smallest Sums",
    "difficulty": "Medium",
    "explanation": "You are given two integer arrays `nums1` and `nums2` sorted in ascending order and an integer `k`.\n\nDefine a pair `(u, v)` which consists of one element from the first array and one element from the second array.\n\nReturn the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.",
    "examples": [
      "Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\nOutput: [[1,2],[1,4],[1,6]]\nExplanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]",
      "Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\nOutput: [[1,1],[1,1]]\nExplanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]",
      "Input: nums1 = [1,2], nums2 = [3], k = 3\nOutput: [[1,3],[2,3]]\nExplanation: All possible pairs are returned from the sequence: [1,3],[2,3]"
    ],
    "constraints": "`1 <= nums1.length, nums2.length <= 104`\n`-109 <= nums1[i], nums2[i] <= 109`\n`nums1` and `nums2` both are sorted in ascending order.\n\n`1 <= k <= 1000`"
  },
  {
    "id": "374",
    "title": "Guess Number Higher or Lower",
    "difficulty": "Easy",
    "explanation": "We are playing the Guess Game. The game is as follows:\nI pick a number from `1` to `n`. You have to guess which number I picked.\n\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n\nYou call a pre-defined API `int guess(int num)`, which returns 3 possible results:\n`-1`: The number I picked is lower than your guess (i.e. `pick < num`).\n\n`1`: The number I picked is higher than your guess (i.e. `pick > num`).\n\n`0`: The number I picked is equal to your guess (i.e. `pick == num`).\n\nReturn the number that I picked.",
    "examples": [
      "Input: n = 10, pick = 6\nOutput: 6",
      "Input: n = 1, pick = 1\nOutput: 1",
      "Input: n = 2, pick = 1\nOutput: 1",
      "Input: n = 2, pick = 2\nOutput: 2"
    ],
    "constraints": "`1 <= n <= 231 - 1`\n`1 <= pick <= n`"
  },
  {
    "id": "375",
    "title": "Guess Number Higher or Lower II",
    "difficulty": "Medium",
    "explanation": "We are playing the Guessing Game. The game will work as follows:\nI pick a number between `1` and `n`.\n\nYou guess a number.\n\nIf you guess the right number, you win the game.\n\nIf you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n\nEvery time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, you lose the game.\n\nGiven a particular `n`, return the minimum amount of money you need to guarantee a win regardless of what number I pick.",
    "examples": [
      "Input: n = 10\nOutput: 16\nExplanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n\n    - If this is my number, your total is $0. Otherwise, you pay $7.\n\n    - If my number is higher, the range is [8,10]. Guess 9.\n\n        - If this is my number, your total is $7. Otherwise, you pay $9.\n\n        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n\n        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n\n    - If my number is lower, the range is [1,6]. Guess 3.\n\n        - If this is my number, your total is $7. Otherwise, you pay $3.\n\n        - If my number is higher, the range is [4,6]. Guess 5.\n\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n\n            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n\n            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n\n        - If my number is lower, the range is [1,2]. Guess 1.\n\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n\n            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\n\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.",
      "Input: n = 1\nOutput: 0\nExplanation: There is only one possible number, so you can guess 1 and not have to pay anything.",
      "Input: n = 2\nOutput: 1\nExplanation: There are two possible numbers, 1 and 2.\n\n- Guess 1.\n\n    - If this is my number, your total is $0. Otherwise, you pay $1.\n\n    - If my number is higher, it must be 2. Guess 2. Your total is $1.\n\nThe worst case is that you pay $1."
    ],
    "constraints": "`1 <= n <= 200`"
  },
  {
    "id": "376",
    "title": "Wiggle Subsequence",
    "difficulty": "Medium",
    "explanation": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with two or fewer elements is trivially a wiggle sequence.\n\nFor example, `[1, 7, 4, 9, 2, 5]` is a wiggle sequence because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n\nIn contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\nGiven an integer array `nums`, return the length of the longest wiggle subsequence of `nums`.",
    "examples": [
      "Input: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).",
      "Input: nums = [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nExplanation: There are several subsequences that achieve this length.\n\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).",
      "Input: nums = [1,2,3,4,5,6,7,8,9]\nOutput: 2"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`0 <= nums[i] <= 1000`\nFollow up: Could you solve this in `O(n)` time?"
  },
  {
    "id": "377",
    "title": "Combination Sum IV",
    "difficulty": "Medium",
    "explanation": "Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`.\n\nThe answer is guaranteed to fit in a 32-bit integer.",
    "examples": [
      "Input: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.",
      "Input: nums = [9], target = 3\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 200`\n`1 <= nums[i] <= 1000`\nAll the elements of `nums` are unique.\n\n`1 <= target <= 1000`\nFollow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?"
  },
  {
    "id": "378",
    "title": "Kth Smallest Element in a Sorted Matrix",
    "difficulty": "Medium",
    "explanation": "Given an `n x n` `matrix` where each of the rows and columns are sorted in ascending order, return the `kth` smallest element in the matrix.\n\nNote that it is the `kth` smallest element in the sorted order, not the `kth` distinct element.",
    "examples": [
      "Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\nOutput: 13\nExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13",
      "Input: matrix = [[-5]], k = 1\nOutput: -5"
    ],
    "constraints": "`n == matrix.length`\n`n == matrix[i].length`\n`1 <= n <= 300`\n`-109 <= matrix[i][j] <= 109`\nAll the rows and columns of `matrix` are guaranteed to be sorted in non-degreasing order.\n\n`1 <= k <= n2`"
  },
  {
    "id": "379",
    "title": "Design Phone Directory",
    "difficulty": "Medium",
    "explanation": "Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.\n\nImplement the `PhoneDirectory` class:\n`PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`.\n\n`int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available.\n\n`bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise.\n\n`void release(int number)` Recycles or releases the slot `number`.",
    "examples": [
      "Input\n[\"PhoneDirectory\", \"get\", \"get\", \"check\", \"get\", \"check\", \"release\", \"check\"]\n[[3], [], [], [2], [], [2], [2], [2]]\nOutput\n[null, 0, 1, true, 2, false, null, true]\nExplanation\nPhoneDirectory phoneDirectory = new PhoneDirectory(3);\nphoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.\n\nphoneDirectory.get();      // Assume it returns 1.\n\nphoneDirectory.check(2);   // The number 2 is available, so return true.\n\nphoneDirectory.get();      // It returns 2, the only number that is left.\n\nphoneDirectory.check(2);   // The number 2 is no longer available, so return false.\n\nphoneDirectory.release(2); // Release number 2 back to the pool.\n\nphoneDirectory.check(2);   // Number 2 is available again, return true."
    ],
    "constraints": "`1 <= maxNumbers <= 104`\n`0 <= number < maxNumbers`\nAt most `2 * 104` calls will be made to `get`, `check`, and `release`."
  },
  {
    "id": "380",
    "title": "Insert Delete GetRandom O(1)",
    "difficulty": "Medium",
    "explanation": "Implement the `RandomizedSet` class:\n`RandomizedSet()` Initializes the `RandomizedSet` object.\n\n`bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n\n`bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n\n`int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.",
    "examples": [
      "Input\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\n\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\n\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\n\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\n\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\n\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\n\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2."
    ],
    "constraints": "`-231 <= val <= 231 - 1`\nAt most `105` calls will be made to `insert`, `remove`, and `getRandom`.\n\nThere will be at least one element in the data structure when `getRandom` is called.\n\nFollow up: Could you implement the functions of the class with each function works in average `O(1)` time?"
  },
  {
    "id": "381",
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "difficulty": "Hard",
    "explanation": "Implement the `RandomizedCollection` class:\n`RandomizedCollection()` Initializes the `RandomizedCollection` object.\n\n`bool insert(int val)` Inserts an item `val` into the multiset if not present. Returns `true` if the item was not present, `false` otherwise.\n\n`bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item was present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n\n`int getRandom()` Returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). The probability of each element being returned is linearly related to the number of same values the multiset contains.",
    "examples": [
      "Input\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return True. Inserts 1 to the collection. Returns true as the collection did not contain 1.\n\nrandomizedCollection.insert(1);   // return False. Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\n\nrandomizedCollection.insert(2);   // return True. Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\n\nrandomizedCollection.getRandom(); // getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\n\nrandomizedCollection.remove(1);   // return True. Removes 1 from the collection, returns true. Collection now contains [1,2].\n\nrandomizedCollection.getRandom(); // getRandom should return 1 and 2 both equally likely."
    ],
    "constraints": "`-231 <= val <= 231 - 1`\nAt most `105` calls will be made to `insert`, `remove`, and `getRandom`.\n\nThere will be at least one element in the data structure when `getRandom` is called.\n\nFollow up: Could you implement the functions of the class with each function works in average `O(1)` time?"
  },
  {
    "id": "382",
    "title": "Linked List Random Node",
    "difficulty": "Medium",
    "explanation": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.",
    "examples": [
      "Input\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning."
    ],
    "constraints": "The number of nodes in the linked list will be in the range `[1, 104]`.\n\n`-104 <= Node.val <= 104`\nAt most `104` calls will be made to `getRandom`.\n\nFollow up:\nWhat if the linked list is extremely large and its length is unknown to you?\nCould you solve this efficiently without using extra space?"
  },
  {
    "id": "383",
    "title": "Ransom Note",
    "difficulty": "Easy",
    "explanation": "Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\n\nEach letter in the magazine string can only be used once in your ransom note.",
    "examples": [
      "Input: ransomNote = \"a\", magazine = \"b\"\nOutput: false",
      "Input: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false",
      "Input: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true"
    ],
    "constraints": "You may assume that both strings contain only lowercase letters."
  },
  {
    "id": "384",
    "title": "Shuffle an Array",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, design an algorithm to randomly shuffle the array.\n\nImplement the `Solution` class:\n`Solution(int[] nums)` Initializes the object with the integer array nums.\n\n`int[] reset()` Resets the array to its original configuration and returns it.\n\n`int[] shuffle()` Returns a random shuffling of the array.",
    "examples": [
      "Input\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\nExplanation\nSolution solution = new Solution([1, 2, 3]);\n\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must be equally likely to be returned. Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\n\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]"
    ],
    "constraints": "`1 <= nums.length <= 200`\n`-106 <= nums[i] <= 106`\nAll the elements of `nums` are unique.\n\nAt most `5 * 104` calls will be made to `reset` and `shuffle`."
  },
  {
    "id": "385",
    "title": "Mini Parser",
    "difficulty": "Medium",
    "explanation": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized `NestedInteger`.\n\nEach element is either an integer or a list whose elements may also be integers or other lists.",
    "examples": [
      "Input: s = \"324\"\nOutput: 324\nExplanation: You should return a NestedInteger object which contains a single integer 324.",
      "Input: s = \"[123,[456,[789]]]\"\nOutput: [123,[456,[789]]]\nExplanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n\n    ii. A nested list with one element:\n         a. An integer containing value 789"
    ],
    "constraints": "`1 <= s.length <= 5 * 104`\n`s` consists of digits, square brackets `\"[]\"`, negative sign `'-'`, and commas `','`.\n\n`s` is the serialization of valid `NestedInteger`."
  },
  {
    "id": "386",
    "title": "Lexicographical Numbers",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.",
    "examples": [
      "Input: n = 13\nOutput: [1,10,11,12,13,2,3,4,5,6,7,8,9]",
      "Input: n = 2\nOutput: [1,2]"
    ],
    "constraints": "`1 <= n <= 5 * 104`\nFollow up: Could you optimize your solution to use `O(n)` runtime and `O(1)` space?"
  },
  {
    "id": "387",
    "title": "First Unique Character in a String",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, return the first non-repeating character in it and return its index. If it does not exist, return `-1`.",
    "examples": [
      "Input: s = \"leetcode\"\nOutput: 0",
      "Input: s = \"loveleetcode\"\nOutput: 2",
      "Input: s = \"aabb\"\nOutput: -1"
    ],
    "constraints": "`1 <= s.length <= 105`\n`s` consists of only lowercase English letters."
  },
  {
    "id": "388",
    "title": "Longest Absolute File Path",
    "difficulty": "Medium",
    "explanation": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\nHere, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.\n\nIn text form, it looks like this (with ⟶ representing the tab character):\ndir\n⟶ subdir1\n⟶ ⟶ file1.ext\n⟶ ⟶ subsubdir1\n⟶ subdir2\n⟶ ⟶ subsubdir2\n⟶ ⟶ ⟶ file2.ext\nIf we were to write this representation in code, it will look like this: `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"`. Note that the `'\\n'` and `'\\t'` are the new-line and tab characters.\n\nEvery file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the absolute path to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext\"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.\n\nGiven a string `input` representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return `0`.",
    "examples": [
      "Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\nOutput: 20\nExplanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.",
      "Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\nOutput: 32\nExplanation: We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\n\nWe return 32 since it is the longest absolute path to a file.",
      "Input: input = \"a\"\nOutput: 0\nExplanation: We do not have any files, just a single directory named \"a\".",
      "Input: input = \"file1.txt\\nfile2.txt\\nlongfile.txt\"\nOutput: 12\nExplanation: There are 3 files at the root directory.\n\nSince the absolute path for anything at the root directory is just the name itself, the answer is \"longfile.txt\" with length 12."
    ],
    "constraints": "`1 <= input.length <= 104`\n`input` may contain lowercase or uppercase English letters, a new line character `'\\n'`, a tab character `'\\t'`, a dot `'.'`, a space `' '`, and digits."
  },
  {
    "id": "389",
    "title": "Find the Difference",
    "difficulty": "Easy",
    "explanation": "You are given two strings `s` and `t`.\n\nString `t` is generated by random shuffling string `s` and then add one more letter at a random position.\n\nReturn the letter that was added to `t`.",
    "examples": [
      "Input: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.",
      "Input: s = \"\", t = \"y\"\nOutput: \"y\"",
      "Input: s = \"a\", t = \"aa\"\nOutput: \"a\"",
      "Input: s = \"ae\", t = \"aea\"\nOutput: \"a\""
    ],
    "constraints": "`0 <= s.length <= 1000`\n`t.length == s.length + 1`\n`s` and `t` consist of lower-case English letters."
  },
  {
    "id": "390",
    "title": "Elimination Game",
    "difficulty": "Medium",
    "explanation": "You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:\nStarting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n\nRepeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n\nKeep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\nGiven the integer `n`, return the last number that remains in `arr`.",
    "examples": [
      "Input: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]",
      "Input: n = 1\nOutput: 1"
    ],
    "constraints": "`1 <= n <= 109`"
  },
  {
    "id": "391",
    "title": "Perfect Rectangle",
    "difficulty": "Hard",
    "explanation": "Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`.\n\nReturn `true` if all the rectangles together form an exact cover of a rectangular region.",
    "examples": [
      "Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.",
      "Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.",
      "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap in the top center.",
      "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other."
    ],
    "constraints": "`1 <= rectangles.length <= 2 * 104`\n`rectangles[i].length == 4`\n`-105 <= xi, yi, ai, bi <= 105`"
  },
  {
    "id": "392",
    "title": "Is Subsequence",
    "difficulty": "Easy",
    "explanation": "Given two strings `s` and `t`, check if `s` is a subsequence of `t`.\n\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not).",
    "examples": [
      "Input: s = \"abc\", t = \"ahbgdc\"\nOutput: true",
      "Input: s = \"axc\", t = \"ahbgdc\"\nOutput: false"
    ],
    "constraints": "`0 <= s.length <= 100`\n`0 <= t.length <= 104`\n`s` and `t` consist only of lowercase English letters.\n\nFollow up: If there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?"
  },
  {
    "id": "393",
    "title": "UTF-8 Validation",
    "difficulty": "Medium",
    "explanation": "Given an integer array `data` representing the data, return whether it is a valid UTF-8 encoding.\n\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\nFor a 1-byte character, the first bit is a `0`, followed by its Unicode code.\n\nFor an n-bytes character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\nThis is how the UTF-8 encoding would work:\n`   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx`\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.",
    "examples": [
      "Input: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\n\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.",
      "Input: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\n\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\n\nThe next byte is a continuation byte which starts with 10 and that's correct.\n\nBut the second continuation byte does not start with 10, so it is invalid."
    ],
    "constraints": "`1 <= data.length <= 2 * 104`\n`0 <= data[i] <= 255`"
  },
  {
    "id": "394",
    "title": "Decode String",
    "difficulty": "Medium",
    "explanation": "Given an encoded string, return its decoded string.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.\n\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\n\nFurthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there won't be input like `3a` or `2[4]`.",
    "examples": [
      "Input: s = \"3[a]2[bc]\"\nOutput: \"aaabcbc\"",
      "Input: s = \"3[a2[c]]\"\nOutput: \"accaccacc\"",
      "Input: s = \"2[abc]3[cd]ef\"\nOutput: \"abcabccdcdcdef\"",
      "Input: s = \"abc3[cd]xyz\"\nOutput: \"abccdcdcdxyz\""
    ],
    "constraints": "`1 <= s.length <= 30`\n`s` consists of lowercase English letters, digits, and square brackets `'[]'`.\n\n`s` is guaranteed to be a valid input.\n\nAll the integers in `s` are in the range `[1, 300]`."
  },
  {
    "id": "395",
    "title": "Longest Substring with At Least K Repeating Characters",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is greater than or equal to `k`.",
    "examples": [
      "Input: s = \"aaabb\", k = 3\nOutput: 3\nExplanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.",
      "Input: s = \"ababbc\", k = 2\nOutput: 5\nExplanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times."
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of only lowercase English letters.\n\n`1 <= k <= 105`"
  },
  {
    "id": "396",
    "title": "Rotate Function",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` of length `n`.\n\nAssume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the rotation function `F` on `nums` as follow:\n`F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\nReturn the maximum value of `F(0), F(1), ..., F(n-1)`.",
    "examples": [
      "Input: nums = [4,3,2,6]\nOutput: 26\nExplanation:\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.",
      "Input: nums = [1000000007]\nOutput: 0"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 105`\n`-231 <= nums[i] <= 231 - 1`"
  },
  {
    "id": "397",
    "title": "Integer Replacement",
    "difficulty": "Medium",
    "explanation": "Given a positive integer `n`, you can apply one of the following operations:\nIf `n` is even, replace `n` with `n / 2`.\n\nIf `n` is odd, replace `n` with either `n + 1` or `n - 1`.\n\nReturn the minimum number of operations needed for `n` to become `1`.",
    "examples": [
      "Input: n = 8\nOutput: 3\nExplanation: 8 -> 4 -> 2 -> 1",
      "Input: n = 7\nOutput: 4\nExplanation: 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1",
      "Input: n = 4\nOutput: 2"
    ],
    "constraints": "`1 <= n <= 231 - 1`"
  },
  {
    "id": "398",
    "title": "Random Pick Index",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` with possible duplicates, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.\n\nImplement the `Solution` class:\n`Solution(int[] nums)` Initializes the object with the array `nums`.\n\n`int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.",
    "examples": [
      "Input\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\n\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning."
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`-231 <= nums[i] <= 231 - 1`\n`target` is an integer from `nums`.\n\nAt most `104` calls will be made to `pick`."
  },
  {
    "id": "399",
    "title": "Evaluate Division",
    "difficulty": "Medium",
    "explanation": "You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.\n\nYou are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.\n\nReturn the answers to all queries. If a single answer cannot be determined, return `-1.0`.\n\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.",
    "examples": [
      "Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation: \nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]",
      "Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000,0.40000,5.00000,0.20000]",
      "Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]"
    ],
    "constraints": "`1 <= equations.length <= 20`\n`equations[i].length == 2`\n`1 <= Ai.length, Bi.length <= 5`\n`values.length == equations.length`\n`0.0 < values[i] <= 20.0`\n`1 <= queries.length <= 20`\n`queries[i].length == 2`\n`1 <= Cj.length, Dj.length <= 5`\n`Ai, Bi, Cj, Dj` consist of lower case English letters and digits."
  },
  {
    "id": "400",
    "title": "Nth Digit",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.",
    "examples": [
      "Input: n = 3\nOutput: 3",
      "Input: n = 11\nOutput: 0\nExplanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."
    ],
    "constraints": "`1 <= n <= 231 - 1`"
  },
  {
    "id": "401",
    "title": "Binary Watch",
    "difficulty": "Easy",
    "explanation": "A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).\n\nEach LED represents a zero or one, with the least significant bit on the right.\n\nFor example, the above binary watch reads \"3:25\".\n\nGiven a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.\n\n\nExample:\nInput: n = 1Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]\nNote:\nThe order of output does not matter.\n\nThe hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".\n\nThe minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "402",
    "title": "Remove K Digits",
    "difficulty": "Medium",
    "explanation": "Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\n\nNote:\nThe length of num is less than 10002 and will be ≥ k.\n\nThe given num does not contain any leading zero.",
    "examples": [
      "Input: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
      "Input: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.",
      "Input: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0."
    ],
    "constraints": ""
  },
  {
    "id": "403",
    "title": "Frog Jump",
    "difficulty": "Hard",
    "explanation": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n\nGiven a list of `stones`' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit.\n\nIf the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.",
    "examples": [
      "Input: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.",
      "Input: stones = [0,1,2,3,4,8,9,11]\nOutput: false\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large."
    ],
    "constraints": "`2 <= stones.length <= 2000`\n`0 <= stones[i] <= 231 - 1`\n`stones[0] == 0`"
  },
  {
    "id": "404",
    "title": "Sum of Left Leaves",
    "difficulty": "Easy",
    "explanation": "Find the sum of all left leaves in a given binary tree.\n\n\nExample:\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nThere are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "405",
    "title": "Convert a Number to Hexadecimal",
    "difficulty": "Easy",
    "explanation": "Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.\n\nNote:\nAll letters in hexadecimal (`a-f`) must be in lowercase.\n\nThe hexadecimal string must not contain extra leading `0`s. If the number is zero, it is represented by a single zero character `'0'`; otherwise, the first character in the hexadecimal string will not be the zero character.\n\nThe given number is guaranteed to fit within the range of a 32-bit signed integer.\n\nYou must not use any method provided by the library which converts/formats the number to hex directly.",
    "examples": [
      "Input:\n26\nOutput:\n\"1a\"",
      "Input:\n-1\nOutput:\n\"ffffffff\""
    ],
    "constraints": ""
  },
  {
    "id": "406",
    "title": "Queue Reconstruction by Height",
    "difficulty": "Medium",
    "explanation": "You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with exactly `ki` other people in front who have a height greater than or equal to `hi`.\n\nReconstruct and return the queue that is represented by the input array `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).",
    "examples": [
      "Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\n\nPerson 1 has height 7 with no other people taller or the same height in front.\n\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\n\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\n\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\n\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\n\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.",
      "Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]"
    ],
    "constraints": "`1 <= people.length <= 2000`\n`0 <= hi <= 106`\n`0 <= ki < people.length`\nIt is guaranteed that the queue can be reconstructed."
  },
  {
    "id": "407",
    "title": "Trapping Rain Water II",
    "difficulty": "Hard",
    "explanation": "Given an `m x n` matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.\n\n\nExample:\nGiven the following 3x6 height map:\n[\n  [1,4,3,1,3,2],\n  [3,2,1,3,2,4],\n  [2,3,3,2,3,1]\n]\nReturn 4.\n\nThe above image represents the elevation map `[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]` before the rain.\n\nAfter the rain, water is trapped between the blocks. The total volume of water trapped is 4.\n\n\nConstraints:\n`1 <= m, n <= 110`\n`0 <= heightMap[i][j] <= 20000`",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "408",
    "title": "Valid Word Abbreviation",
    "difficulty": "Easy",
    "explanation": "Given a non-empty string `s` and an abbreviation `abbr`, return whether the string matches with the given abbreviation.\n\nA string such as `\"word\"` contains only the following valid abbreviations:\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\nNotice that only the above abbreviations are valid abbreviations of the string `\"word\"`. Any other string is not a valid abbreviation of `\"word\"`.\n\nNote:\nAssume `s` contains only lowercase letters and `abbr` contains only lowercase letters and digits.",
    "examples": [
      "Given s = \"internationalization\", abbr = \"i12iz4n\":\nReturn true.",
      "Given s = \"apple\", abbr = \"a2e\":\nReturn false."
    ],
    "constraints": ""
  },
  {
    "id": "409",
    "title": "Longest Palindrome",
    "difficulty": "Easy",
    "explanation": "Given a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n\nLetters are case sensitive, for example, `\"Aa\"` is not considered a palindrome here.",
    "examples": [
      "Input: s = \"abccccdd\"\nOutput: 7\nExplanation:\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.",
      "Input: s = \"a\"\nOutput: 1",
      "Input: s = \"bb\"\nOutput: 2"
    ],
    "constraints": "`1 <= s.length <= 2000`\n`s` consists of lowercase and/or uppercase English letters only."
  },
  {
    "id": "410",
    "title": "Split Array Largest Sum",
    "difficulty": "Hard",
    "explanation": "Given an array `nums` which consists of non-negative integers and an integer `m`, you can split the array into `m` non-empty continuous subarrays.\n\nWrite an algorithm to minimize the largest sum among these `m` subarrays.",
    "examples": [
      "Input: nums = [7,2,5,10,8], m = 2\nOutput: 18\nExplanation:\nThere are four ways to split nums into two subarrays.\n\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18.",
      "Input: nums = [1,2,3,4,5], m = 2\nOutput: 9",
      "Input: nums = [1,4,4], m = 3\nOutput: 4"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`0 <= nums[i] <= 106`\n`1 <= m <= min(50, nums.length)`"
  },
  {
    "id": "411",
    "title": "Minimum Unique Word Abbreviation",
    "difficulty": "Hard",
    "explanation": "A string can be abbreviated by replacing any number of non-adjacent substrings with their lengths. For example, a string such as `\"substitution\"` could be abbreviated as (but not limited to):\n`\"s10n\"` (`\"s ubstitutio n\"`)\n`\"sub4u4\"` (`\"sub stit u tion\"`)\n`\"12\"` (`\"substitution\"`)\n`\"su3i1u2on\"` (`\"su bst i t u ti on\"`)\n`\"substitution\"` (no substrings replaced)\nNote that `\"s55n\"` (`\"s ubsti tutio n\"`) is not a valid abbreviation of `\"substitution\"` because the replaced substrings are adjacent.\n\nThe length of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation `\"s10n\"` has a length of `3` (`2` letters + `1` substring) and `\"su3i1u2on\"` has a length of `9` (`6` letters + `3` substrings).\n\nGiven a target string `target` and an array of strings `dictionary`, return an abbreviation of `target` with the shortest possible length such that it is not an abbreviation of any string in `dictionary`. If there are multiple shortest abbreviations, return any of them.",
    "examples": [
      "Input: target = \"apple\", dictionary = [\"blade\"]\nOutput: \"a4\"\nExplanation: The shortest abbreviation of \"apple\" is \"5\", but this is also an abbreviation of \"blade\".\n\nThe next shortest abbreviations are \"a4\" and \"4e\". \"4e\" is an abbreviation of blade while \"a4\" is not.\n\nHence, return \"a4\".",
      "Input: target = \"apple\", dictionary = [\"blade\",\"plain\",\"amber\"]\nOutput: \"1p3\"\nExplanation: \"5\" is an abbreviation of both \"apple\" but also every word in the dictionary.\n\n\"a4\" is an abbreviation of \"apple\" but also \"amber\".\n\n\"4e\" is an abbreviation of \"apple\" but also \"blade\".\n\n\"1p3\", \"2p2\", and \"3l1\" are the next shortest abbreviations of \"apple\".\n\nSince none of them are abbreviations of words in the dictionary, returning any of them is correct."
    ],
    "constraints": "`target.length == m`\n`dictionary.length == n`\n`1 <= m <= 21`\n`0 <= n <= 1000`\n`1 <= dictionary[i] <= 100`\n`log2(n) + m <= 21` if `n > 0`"
  },
  {
    "id": "412",
    "title": "Fizz Buzz",
    "difficulty": "Easy",
    "explanation": "Write a program that outputs the string representation of numbers from 1 to n.\n\nBut for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.\n\n\nExample:\nn = 15,\nReturn:\n[\n    \"1\",\n    \"2\",\n    \"Fizz\",\n    \"4\",\n    \"Buzz\",\n    \"Fizz\",\n    \"7\",\n    \"8\",\n    \"Fizz\",\n    \"Buzz\",\n    \"11\",\n    \"Fizz\",\n    \"13\",\n    \"14\",\n    \"FizzBuzz\"\n]",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "413",
    "title": "Arithmetic Slices",
    "difficulty": "Medium",
    "explanation": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.\n\nGiven an integer array `nums`, return the number of arithmetic subarrays of `nums`.\n\nA subarray is a contiguous subsequence of the array.",
    "examples": [
      "Input: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.",
      "Input: nums = [1]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 5000`\n`-1000 <= nums[i] <= 1000`"
  },
  {
    "id": "414",
    "title": "Third Maximum Number",
    "difficulty": "Easy",
    "explanation": "Given integer array `nums`, return the third maximum number in this array. If the third maximum does not exist, return the maximum number.",
    "examples": [
      "Input: nums = [3,2,1]\nOutput: 1\nExplanation: The third maximum is 1.",
      "Input: nums = [1,2]\nOutput: 2\nExplanation: The third maximum does not exist, so the maximum (2) is returned instead.",
      "Input: nums = [2,2,3,1]\nOutput: 1\nExplanation: Note that the third maximum here means the third maximum distinct number.\n\nBoth numbers with value 2 are both considered as second maximum."
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-231 <= nums[i] <= 231 - 1`\nFollow up: Can you find an `O(n)` solution?"
  },
  {
    "id": "415",
    "title": "Add Strings",
    "difficulty": "Easy",
    "explanation": "Given two non-negative integers, `num1` and `num2` represented as string, return the sum of `num1` and `num2` as a string.",
    "examples": [
      "Input: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"",
      "Input: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"",
      "Input: num1 = \"0\", num2 = \"0\"\nOutput: \"0\""
    ],
    "constraints": "`1 <= num1.length, num2.length <= 104`\n`num1` and `num2` consist of only digits.\n\n`num1` and `num2` don't have any leading zeros except for the zero itself.\n\nFollow up: Could you solve it without using any built-in `BigInteger` library or converting the inputs to integer directly?"
  },
  {
    "id": "416",
    "title": "Partition Equal Subset Sum",
    "difficulty": "Medium",
    "explanation": "Given a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.",
    "examples": [
      "Input: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].",
      "Input: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets."
    ],
    "constraints": "`1 <= nums.length <= 200`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "417",
    "title": "Pacific Atlantic Water Flow",
    "difficulty": "Medium",
    "explanation": "You are given an `m x n` integer matrix `heights` representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.\n\nWater can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.\n\nReturn a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.",
    "examples": [
      "Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
      "Input: heights = [[2,1],[1,2]]\nOutput: [[0,0],[0,1],[1,0],[1,1]]"
    ],
    "constraints": "`m == heights.length`\n`n == heights[i].length`\n`1 <= m, n <= 200`\n`1 <= heights[i][j] <= 105`"
  },
  {
    "id": "418",
    "title": "Sentence Screen Fitting",
    "difficulty": "Medium",
    "explanation": "Given a `rows x cols` screen and a sentence represented by a list of non-empty words, find how many times the given sentence can be fitted on the screen.\n\nNote:\nA word cannot be split into two lines.\n\nThe order of words in the sentence must remain unchanged.\n\nTwo consecutive words in a line must be separated by a single space.\n\nTotal words in the sentence won't exceed 100.\n\nLength of each word is greater than 0 and won't exceed 10.\n\n1 ≤ rows, cols ≤ 20,000.",
    "examples": [
      "Input:\nrows = 2, cols = 8, sentence = [\"hello\", \"world\"]\nOutput: \n1\nExplanation:\nhello---\nworld---\nThe character '-' signifies an empty space on the screen.",
      "Input:\nrows = 3, cols = 6, sentence = [\"a\", \"bcd\", \"e\"]\nOutput: \n2\nExplanation:\na-bcd- \ne-a---\nbcd-e-\nThe character '-' signifies an empty space on the screen.",
      "Input:\nrows = 4, cols = 5, sentence = [\"I\", \"had\", \"apple\", \"pie\"]\nOutput: \n1\nExplanation:\nI-had\napple\npie-I\nhad--\nThe character '-' signifies an empty space on the screen."
    ],
    "constraints": ""
  },
  {
    "id": "419",
    "title": "Battleships in a Board",
    "difficulty": "Medium",
    "explanation": "Given an 2D board, count how many battleships are in it. The battleships are represented with `'X'`s, empty slots are represented with `'.'`s. You may assume the following rules:\nYou receive a valid board, made of only battleships or empty slots.\n\nBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape `1xN` (1 row, N columns) or `Nx1` (N rows, 1 column), where N can be of any size.\n\nAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n\n\nExample:\nX..X\n...X\n...X\nIn the above board there are 2 battleships.\n\n\nInvalid Example:\n...X\nXXXX\n...X\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n\nFollow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "420",
    "title": "Strong Password Checker",
    "difficulty": "Hard",
    "explanation": "A password is considered strong if the below conditions are all met:\nIt has at least `6` characters and at most `20` characters.\n\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\n\nIt does not contain three repeating characters in a row (i.e., `\"...aaa...\"` is weak, but `\"...aa...a...\"` is strong, assuming other conditions are met).\n\nGiven a string `password`, return the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`.\n\nIn one step, you can:\nInsert one character to `password`,\nDelete one character from `password`, or\nReplace one character of `password` with another character.",
    "examples": [
      "Input: password = \"a\"\nOutput: 5",
      "Input: password = \"aA1\"\nOutput: 3",
      "Input: password = \"1337C0d3\"\nOutput: 0"
    ],
    "constraints": "`1 <= password.length <= 50`\n`password` consists of letters, digits, dot `'.'` or exclamation mark `'!'`."
  },
  {
    "id": "421",
    "title": "Maximum XOR of Two Numbers in an Array",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, return the maximum result of `nums[i] XOR nums[j]`, where `0 ≤ i ≤ j < n`.\n\nFollow up: Could you do this in `O(n)` runtime?",
    "examples": [
      "Input: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.",
      "Input: nums = [0]\nOutput: 0",
      "Input: nums = [2,4]\nOutput: 6",
      "Input: nums = [8,10,2]\nOutput: 10",
      "Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\nOutput: 127"
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`0 <= nums[i] <= 231 - 1`"
  },
  {
    "id": "422",
    "title": "Valid Word Square",
    "difficulty": "Easy",
    "explanation": "Given a sequence of words, check whether it forms a valid word square.\n\nA sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).\n\nNote:\nThe number of words given is at least 1 and does not exceed 500.\n\nWord length will be at least 1 and does not exceed 500.\n\nEach word contains only lowercase English alphabet `a-z`.",
    "examples": [
      "Input:\n[\n  \"abcd\",\n  \"bnrt\",\n  \"crmy\",\n  \"dtye\"\n]\nOutput:\ntrue\nExplanation:\nThe first row and first column both read \"abcd\".\n\nThe second row and second column both read \"bnrt\".\n\nThe third row and third column both read \"crmy\".\n\nThe fourth row and fourth column both read \"dtye\".\n\nTherefore, it is a valid word square.",
      "Input:\n[\n  \"abcd\",\n  \"bnrt\",\n  \"crm\",\n  \"dt\"\n]\nOutput:\ntrue\nExplanation:\nThe first row and first column both read \"abcd\".\n\nThe second row and second column both read \"bnrt\".\n\nThe third row and third column both read \"crm\".\n\nThe fourth row and fourth column both read \"dt\".\n\nTherefore, it is a valid word square.",
      "Input:\n[\n  \"ball\",\n  \"area\",\n  \"read\",\n  \"lady\"\n]\nOutput:\nfalse\nExplanation:\nThe third row reads \"read\" while the third column reads \"lead\".\n\nTherefore, it is NOT a valid word square."
    ],
    "constraints": ""
  },
  {
    "id": "423",
    "title": "Reconstruct Original Digits from English",
    "difficulty": "Medium",
    "explanation": "Given a string `s` containing an out-of-order English representation of digits `0-9`, return the digits in ascending order.",
    "examples": [
      "Input: s = \"owoztneoer\"\nOutput: \"012\"",
      "Input: s = \"fviefuro\"\nOutput: \"45\""
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is one of the characters `[\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"]`.\n\n`s` is guaranteed to be valid."
  },
  {
    "id": "424",
    "title": "Longest Repeating Character Replacement",
    "difficulty": "Medium",
    "explanation": "Given a string `s` that consists of only uppercase English letters, you can perform at most `k` operations on that string.\n\nIn one operation, you can choose any character of the string and change it to any other uppercase English character.\n\nFind the length of the longest sub-string containing all repeating letters you can get after performing the above operations.\n\nNote:\nBoth the string's length and k will not exceed 104.",
    "examples": [
      "Input:\ns = \"ABAB\", k = 2\nOutput:\n4\nExplanation:\nReplace the two 'A's with two 'B's or vice versa.",
      "Input:\ns = \"AABABBA\", k = 1\nOutput:\n4\nExplanation:\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\n\nThe substring \"BBBB\" has the longest repeating letters, which is 4."
    ],
    "constraints": ""
  },
  {
    "id": "425",
    "title": "Word Squares",
    "difficulty": "Hard",
    "explanation": "Given a set of words (without duplicates), find all word squares you can build from them.\n\nA sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).\n\nFor example, the word sequence `[\"ball\",\"area\",\"lead\",\"lady\"]` forms a word square because each word reads the same both horizontally and vertically.\n\nb a l l\na r e a\nl e a d\nl a d y\nNote:\nThere are at least 1 and at most 1000 words.\n\nAll words will have the exact same length.\n\nWord length is at least 1 and at most 5.\n\nEach word contains only lowercase English alphabet `a-z`.",
    "examples": [
      "Input:\n[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\nOutput:\n[\n  [ \"wall\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ],\n  [ \"ball\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ]\n]\nExplanation:\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).",
      "Input:\n[\"abat\",\"baba\",\"atan\",\"atal\"]\nOutput:\n[\n  [ \"baba\",\n    \"abat\",\n    \"baba\",\n    \"atan\"\n  ],\n  [ \"baba\",\n    \"abat\",\n    \"baba\",\n    \"atal\"\n  ]\n]\nExplanation:\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters)."
    ],
    "constraints": ""
  },
  {
    "id": "426",
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "difficulty": "Medium",
    "explanation": "Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.\n\nYou can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.\n\nWe want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.",
    "examples": [
      "Input: root = [4,2,5,1,3]\nOutput: [1,2,3,4,5]\nExplanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.",
      "Input: root = [2,1,3]\nOutput: [1,2,3]",
      "Input: root = []\nOutput: []\nExplanation: Input is an empty tree. Output is also an empty Linked List.",
      "Input: root = [1]\nOutput: [1]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 2000]`.\n\n`-1000 <= Node.val <= 1000`\nAll the values of the tree are unique."
  },
  {
    "id": "427",
    "title": "Construct Quad Tree",
    "difficulty": "Medium",
    "explanation": "Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent the `grid` with a Quad-Tree.\n\nReturn the root of the Quad-Tree representing the `grid`.\n\nNotice that you can assign the value of a node to True or False when `isLeaf` is False, and both are accepted in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n`val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. \n`isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n\nIf the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n\nRecurse for each of the children with the proper sub-grid.\n\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\n\nQuad-Tree format:\nThe output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as 1 in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as 0.",
    "examples": [
      "Input: grid = [[0,1],[1,0]]\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\nExplanation: The explanation of this example is shown below:\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.",
      "Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\n\nThe topLeft, bottomLeft and bottomRight each has the same value.\n\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\n\nExplanation is shown in the photo below:",
      "Input: grid = [[1,1],[1,1]]\nOutput: [[1,1]]",
      "Input: grid = [[0]]\nOutput: [[1,0]]",
      "Input: grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]\nOutput: [[0,1],[1,1],[1,0],[1,0],[1,1]]"
    ],
    "constraints": "`n == grid.length == grid[i].length`\n`n == 2^x` where `0 <= x <= 6`"
  },
  {
    "id": "428",
    "title": "Serialize and Deserialize N-ary Tree",
    "difficulty": "Hard",
    "explanation": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nFor example, you may serialize the following `3-ary` tree\nas `[1 [3[5 6] 2 4]]`. Note that this is just an example, you do not necessarily need to follow this format.\n\nOr you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.\n\nFor example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\nYou do not necessarily need to follow the above suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.\n\n\nConstraints:\nThe number of nodes in the tree is in the range `[0, 104]`.\n\n`0 <= Node.val <= 104`\nThe height of the n-ary tree is less than or equal to `1000`\nDo not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "429",
    "title": "N-ary Tree Level Order Traversal",
    "difficulty": "Medium",
    "explanation": "Given an n-ary tree, return the level order traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).",
    "examples": [
      "Input: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]",
      "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]"
    ],
    "constraints": "The height of the n-ary tree is less than or equal to `1000`\nThe total number of nodes is between `[0, 104]`"
  },
  {
    "id": "430",
    "title": "Flatten a Multilevel Doubly Linked List",
    "difficulty": "Medium",
    "explanation": "You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.\n\nFlatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.",
    "examples": [
      "Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation:\nThe multilevel linked list in the input is as follows:\nAfter flattening the multilevel linked list it becomes:",
      "Input: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation:\nThe input multilevel linked list is as follows:\n  1---2---NULL\n  |\n  3---NULL",
      "Input: head = []\nOutput: []\nHow multilevel linked list is represented in test case:\n\nWe use the multilevel linked list from Example 1 above:\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\nThe serialization of each level is as follows:\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\nTo serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\n[1,2,3,4,5,6,null]\n[null,null,7,8,9,10,null]\n[null,11,12,null]\nMerging the serialization of each level and removing trailing nulls we obtain:\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]"
    ],
    "constraints": "The number of Nodes will not exceed `1000`.\n\n`1 <= Node.val <= 105`"
  },
  {
    "id": "431",
    "title": "Encode N-ary Tree to Binary Tree",
    "difficulty": "Hard",
    "explanation": "Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example).\n\nFor example, you may encode the following `3-ary` tree to a binary tree in this way:\nInput: root = [1,null,3,2,4,null,5,6]\nNote that the above is just an example which might or might not work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n\nConstraints:\nThe height of the n-ary tree is less than or equal to `1000`\nThe total number of nodes is between `[0, 10^4]`\nDo not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "432",
    "title": "All O`one Data Structure",
    "difficulty": "Hard",
    "explanation": "Implement a data structure supporting the following operations:\nInc(Key) - Inserts a new key  with value 1. Or increments an existing key by 1. Key is guaranteed to be a non-empty string.\n\nDec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.\n\nGetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string `\"\"`.\n\nGetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string `\"\"`.\n\nChallenge: Perform all these in O(1) time complexity.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "433",
    "title": "Minimum Genetic Mutation",
    "difficulty": "Medium",
    "explanation": "A gene string can be represented by an 8-character long string, with choices from `\"A\"`, `\"C\"`, `\"G\"`, `\"T\"`.\n\nSuppose we need to investigate about a mutation (mutation from \"start\" to \"end\"), where ONE mutation is defined as ONE single character changed in the gene string.\n\nFor example, `\"AACCGGTT\"` -> `\"AACCGGTA\"` is 1 mutation.\n\nAlso, there is a given gene \"bank\", which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.\n\nNow, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from \"start\" to \"end\". If there is no such a mutation, return -1.\n\nNote:\nStarting point is assumed to be valid, so it might not be included in the bank.\n\nIf multiple mutations are needed, all mutations during in the sequence must be valid.\n\nYou may assume start and end string is not the same.",
    "examples": [
      "start: \"AACCGGTT\"\nend:   \"AACCGGTA\"\nbank: [\"AACCGGTA\"]\nreturn: 1",
      "start: \"AACCGGTT\"\nend:   \"AAACGGTA\"\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\nreturn: 2",
      "start: \"AAAAACCC\"\nend:   \"AACCCCCC\"\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\nreturn: 3"
    ],
    "constraints": ""
  },
  {
    "id": "434",
    "title": "Number of Segments in a String",
    "difficulty": "Easy",
    "explanation": "You are given a string `s`, return the number of segments in the string. \nA segment is defined to be a contiguous sequence of non-space characters.",
    "examples": [
      "Input: s = \"Hello, my name is John\"\nOutput: 5\nExplanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]",
      "Input: s = \"Hello\"\nOutput: 1",
      "Input: s = \"love live! mu'sic forever\"\nOutput: 4",
      "Input: s = \"\"\nOutput: 0"
    ],
    "constraints": "`0 <= s.length <= 300`\n`s` consists of lower-case and upper-case English letters, digits or one of the following characters `\"!@#$%^&*()_+-=',.:\"`.\n\nThe only space character in `s` is `' '`."
  },
  {
    "id": "435",
    "title": "Non-overlapping Intervals",
    "difficulty": "Medium",
    "explanation": "Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
    "examples": [
      "Input: [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of intervals are non-overlapping.",
      "Input: [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.",
      "Input: [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n\nNote:\nYou may assume the interval's end point is always bigger than its start point.\n\nIntervals like [1,2] and [2,3] have borders \"touching\" but they don't overlap each other."
    ],
    "constraints": ""
  },
  {
    "id": "436",
    "title": "Find Right Interval",
    "difficulty": "Medium",
    "explanation": "You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is unique.\n\nThe right interval for an interval `i` is an interval `j` such that `startj`` >= endi` and `startj` is minimized.\n\nReturn an array of right interval indices for each interval `i`. If no right interval exists for interval `i`, then put `-1` at index `i`.",
    "examples": [
      "Input: intervals = [[1,2]]\nOutput: [-1]\nExplanation: There is only one interval in the collection, so it outputs -1.",
      "Input: intervals = [[3,4],[2,3],[1,2]]\nOutput: [-1,0,1]\nExplanation: There is no right interval for [3,4].\n\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\n\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.",
      "Input: intervals = [[1,4],[2,3],[3,4]]\nOutput: [-1,2,-1]\nExplanation: There is no right interval for [1,4] and [3,4].\n\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3."
    ],
    "constraints": "`1 <= intervals.length <= 2 * 104`\n`intervals[i].length == 2`\n`-106 <= starti <= endi <= 106`\nThe start point of each interval is unique."
  },
  {
    "id": "437",
    "title": "Path Sum III",
    "difficulty": "Medium",
    "explanation": "You are given a binary tree in which each node contains an integer value.\n\nFind the number of paths that sum to a given value.\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards\n(traveling only from parent nodes to child nodes).\n\nThe tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n\n\nExample:\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\nReturn 3. The paths that sum to 8 are:\n1.  5 -> 3\n2.  5 -> 2 -> 1\n3. -3 -> 11",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "438",
    "title": "Find All Anagrams in a String",
    "difficulty": "Medium",
    "explanation": "Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\n\nThe order of output does not matter.",
    "examples": [
      "Input:\ns: \"cbaebabacd\" p: \"abc\"\nOutput:\n[0, 6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\n\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".",
      "Input:\ns: \"abab\" p: \"ab\"\nOutput:\n[0, 1, 2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\n\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\n\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\"."
    ],
    "constraints": ""
  },
  {
    "id": "439",
    "title": "Ternary Expression Parser",
    "difficulty": "Medium",
    "explanation": "Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits `0-9`, `?`, `:`, `T` and `F` (`T` and `F` represent True and False respectively).\n\nNote:\nThe length of the given string is ≤ 10000.\n\nEach number will contain only one digit.\n\nThe conditional expressions group right-to-left (as usual in most languages).\n\nThe condition will always be either `T` or `F`. That is, the condition will never be a digit.\n\nThe result of the expression will always evaluate to either a digit `0-9`, `T` or `F`.",
    "examples": [
      "Input: \"T?2:3\"\nOutput: \"2\"\nExplanation: If true, then result is 2; otherwise result is 3.",
      "Input: \"F?1:T?4:5\"\nOutput: \"4\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n             \"(F ? 1 : (T ? 4 : 5))\"                   \"(F ? 1 : (T ? 4 : 5))\"\n          -> \"(F ? 1 : 4)\"                 or       -> \"(T ? 4 : 5)\"\n          -> \"4\"                                    -> \"4\"",
      "Input: \"T?T?F:5:3\"\nOutput: \"F\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n             \"(T ? (T ? F : 5) : 3)\"                   \"(T ? (T ? F : 5) : 3)\"\n          -> \"(T ? F : 3)\"                 or       -> \"(T ? F : 5)\"\n          -> \"F\"                                    -> \"F\""
    ],
    "constraints": ""
  },
  {
    "id": "440",
    "title": "K-th Smallest in Lexicographical Order",
    "difficulty": "Hard",
    "explanation": "Given integers `n` and `k`, find the lexicographically k-th smallest integer in the range from `1` to `n`.\n\nNote: 1 ≤ k ≤ n ≤ 109.\n\n\nExample:\nInput:\nn: 13   k: 2\nOutput:\n10\nExplanation:\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "441",
    "title": "Arranging Coins",
    "difficulty": "Easy",
    "explanation": "You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.\n\nGiven n, find the total number of full staircase rows that can be formed.\n\nn is a non-negative integer and fits within the range of a 32-bit signed integer.",
    "examples": [
      "n = 5\nThe coins can form the following rows:\n¤\n¤ ¤\n¤ ¤\nBecause the 3rd row is incomplete, we return 2.",
      "n = 8\nThe coins can form the following rows:\n¤\n¤ ¤\n¤ ¤ ¤\n¤ ¤\nBecause the 4th row is incomplete, we return 3."
    ],
    "constraints": ""
  },
  {
    "id": "442",
    "title": "Find All Duplicates in an Array",
    "difficulty": "Medium",
    "explanation": "Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.\n\nFind all the elements that appear twice in this array.\n\nCould you do it without extra space and in O(n) runtime?\n\nExample:\nInput:\n[4,3,2,7,8,2,3,1]\nOutput:\n[2,3]",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "443",
    "title": "String Compression",
    "difficulty": "Medium",
    "explanation": "Given an array of characters `chars`, compress it using the following algorithm:\nBegin with an empty string `s`. For each group of consecutive repeating characters in `chars`:\nIf the group's length is 1, append the character to `s`.\n\nOtherwise, append the character followed by the group's length.\n\nThe compressed string `s` should not be returned separately, but instead be stored in the input character array `chars`. Note that group lengths that are 10 or longer will be split into multiple characters in `chars`.\n\nAfter you are done modifying the input array, return the new length of the array.\n\nFollow up:\nCould you solve it using only `O(1)` extra space?",
    "examples": [
      "Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".",
      "Input: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.",
      "Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".",
      "Input: chars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"].\nExplanation: The groups are \"aaa\", \"bb\", and \"aa\". This compresses to \"a3b2a2\". Note that each group is independent even if two groups have the same character."
    ],
    "constraints": "`1 <= chars.length <= 2000`\n`chars[i]` is a lower-case English letter, upper-case English letter, digit, or symbol."
  },
  {
    "id": "444",
    "title": "Sequence Reconstruction",
    "difficulty": "Medium",
    "explanation": "Check whether the original sequence `org` can be uniquely reconstructed from the sequences in `seqs`. The `org` sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in `seqs` (i.e., a shortest sequence so that all sequences in `seqs` are subsequences of it). Determine whether there is only one sequence that can be reconstructed from `seqs` and it is the `org` sequence.",
    "examples": [
      "Input: org = [1,2,3], seqs = [[1,2],[1,3]]\nOutput: false\nExplanation: [1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.",
      "Input: org = [1,2,3], seqs = [[1,2]]\nOutput: false\nExplanation: The reconstructed sequence can only be [1,2].",
      "Input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]\nOutput: true\nExplanation: The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].",
      "Input: org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]\nOutput: true"
    ],
    "constraints": "`1 <= n <= 10^4`\n`org` is a permutation of {1,2,...,n}.\n\n`1 <= segs[i].length <= 10^5`\n`seqs[i][j]` fits in a 32-bit signed integer.\n\nUPDATE (2017/1/8):\nThe seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes."
  },
  {
    "id": "445",
    "title": "Add Two Numbers II",
    "difficulty": "Medium",
    "explanation": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nFollow up:\nWhat if you cannot modify the input lists? In other words, reversing the lists is not allowed.\n\n\nExample:\nInput: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 8 -> 0 -> 7",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "446",
    "title": "Arithmetic Slices II - Subsequence",
    "difficulty": "Hard",
    "explanation": "A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, these are arithmetic sequences:\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\nThe following sequence is not arithmetic.\n\n1, 1, 2, 5, 7\nA zero-indexed array A consisting of N numbers is given. A subsequence slice of that array is any sequence of integers (P0, P1, ..., Pk) such that 0 ≤ P0 < P1 < ... < Pk < N.\n\nA subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic. In particular, this means that k ≥ 2.\n\nThe function should return the number of arithmetic subsequence slices in the array A.\n\nThe input contains N integers. Every integer is in the range of -231 and 231-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 231-1.\n\n\nExample:\nInput: [2, 4, 6, 8, 10]\nOutput: 7\nExplanation:\nAll arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "447",
    "title": "Number of Boomerangs",
    "difficulty": "Medium",
    "explanation": "You are given `n` `points` in the plane that are all distinct, where `points[i] = [xi, yi]`. A boomerang is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` (the order of the tuple matters).\n\nReturn the number of boomerangs.",
    "examples": [
      "Input: points = [[0,0],[1,0],[2,0]]\nOutput: 2\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].",
      "Input: points = [[1,1],[2,2],[3,3]]\nOutput: 2",
      "Input: points = [[1,1]]\nOutput: 0"
    ],
    "constraints": "`n == points.length`\n`1 <= n <= 500`\n`points[i].length == 2`\n`-104 <= xi, yi <= 104`\nAll the points are unique."
  },
  {
    "id": "448",
    "title": "Find All Numbers Disappeared in an Array",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.",
    "examples": [
      "Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]",
      "Input: nums = [1,1]\nOutput: [2]"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 105`\n`1 <= nums[i] <= n`\nFollow up: Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space."
  },
  {
    "id": "449",
    "title": "Serialize and Deserialize BST",
    "difficulty": "Medium",
    "explanation": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n\nThe encoded string should be as compact as possible.",
    "examples": [
      "Input: root = [2,1,3]\nOutput: [2,1,3]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`0 <= Node.val <= 104`\nThe input tree is guaranteed to be a binary search tree."
  },
  {
    "id": "450",
    "title": "Delete Node in a BST",
    "difficulty": "Medium",
    "explanation": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n\nBasically, the deletion can be divided into two stages:\nSearch for a node to remove.\n\nIf the node is found, delete the node.\n\nFollow up: Can you solve it with time complexity `O(height of tree)`?",
    "examples": [
      "Input: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\n\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\n\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.",
      "Input: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.",
      "Input: root = [], key = 0\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-105 <= Node.val <= 105`\nEach node has a unique value.\n\n`root` is a valid binary search tree.\n\n`-105 <= key <= 105`"
  },
  {
    "id": "451",
    "title": "Sort Characters By Frequency",
    "difficulty": "Medium",
    "explanation": "Given a string, sort it in decreasing order based on the frequency of characters.",
    "examples": [
      "Input:\n\"tree\"\nOutput:\n\"eert\"\nExplanation:\n'e' appears twice while 'r' and 't' both appear once.\n\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.",
      "Input:\n\"cccaaa\"\nOutput:\n\"cccaaa\"\nExplanation:\nBoth 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.\n\nNote that \"cacaca\" is incorrect, as the same characters must be together.",
      "Input:\n\"Aabb\"\nOutput:\n\"bbAa\"\nExplanation:\n\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\n\nNote that 'A' and 'a' are treated as two different characters."
    ],
    "constraints": ""
  },
  {
    "id": "452",
    "title": "Minimum Number of Arrows to Burst Balloons",
    "difficulty": "Medium",
    "explanation": "There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.\n\nAn arrow can be shot up exactly vertically from different points along the x-axis. A balloon with `xstart` and `xend` bursts by an arrow shot at `x` if `xstart ≤ x ≤ xend`. There is no limit to the number of arrows that can be shot. An arrow once shot keeps traveling up infinitely.\n\nGiven an array `points` where `points[i] = [xstart, xend]`, return the minimum number of arrows that must be shot to burst all balloons.",
    "examples": [
      "Input: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).",
      "Input: points = [[1,2],[3,4],[5,6],[7,8]]\nOutput: 4",
      "Input: points = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2"
    ],
    "constraints": "`0 <= points.length <= 104`\n`points[i].length == 2`\n`-231 <= xstart < xend <= 231 - 1`"
  },
  {
    "id": "453",
    "title": "Minimum Moves to Equal Array Elements",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums` of size `n`, return the minimum number of moves required to make all array elements equal.\n\nIn one move, you can increment `n - 1` elements of the array by `1`.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: 3\nExplanation: Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]",
      "Input: nums = [1,1,1]\nOutput: 0"
    ],
    "constraints": "`n == nums.length`\n`1 <= nums.length <= 104`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "454",
    "title": "4Sum II",
    "difficulty": "Medium",
    "explanation": "Given four lists A, B, C, D of integer values, compute how many tuples `(i, j, k, l)` there are such that `A[i] + B[j] + C[k] + D[l]` is zero.\n\nTo make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.\n\n\nExample:\nInput:\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\nOutput:\n2\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "455",
    "title": "Assign Cookies",
    "difficulty": "Easy",
    "explanation": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n\nEach child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.",
    "examples": [
      "Input: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\n\nYou need to output 1.",
      "Input: g = [1,2], s = [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2."
    ],
    "constraints": "`1 <= g.length <= 3 * 104`\n`0 <= s.length <= 3 * 104`\n`1 <= g[i], s[j] <= 231 - 1`"
  },
  {
    "id": "456",
    "title": "132 Pattern",
    "difficulty": "Medium",
    "explanation": "Given an array of `n` integers `nums`, a 132 pattern is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.\n\nReturn `true` if there is a 132 pattern in `nums`, otherwise, return `false`.\n\nFollow up: The `O(n^2)` is trivial, could you come up with the `O(n logn)` or the `O(n)` solution?",
    "examples": [
      "Input: nums = [1,2,3,4]\nOutput: false\nExplanation: There is no 132 pattern in the sequence.",
      "Input: nums = [3,1,4,2]\nOutput: true\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].",
      "Input: nums = [-1,3,2,0]\nOutput: true\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]."
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 104`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "457",
    "title": "Circular Array Loop",
    "difficulty": "Medium",
    "explanation": "You are playing a game involving a circular array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:\nIf `nums[i]` is positive, move `nums[i]` steps forward, and\nIf `nums[i]` is negative, move `nums[i]` steps backward.\n\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n\nA cycle in the array consists of a sequence of indices `seq` of length `k` where:\nFollowing the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\nEvery `nums[seq[j]]` is either all positive or all negative.\n\n`k > 1`\nReturn `true` if there is a cycle in `nums`, or `false` otherwise.",
    "examples": [
      "Input: nums = [2,-1,1,2,2]\nOutput: true\nExplanation:\nThere is a cycle from index 0 -> 2 -> 3 -> 0 -> ...\n\nThe cycle's length is 3.",
      "Input: nums = [-1,2]\nOutput: false\nExplanation:\nThe sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.\n\nBy definition the sequence's length must be strictly greater than 1 to be a cycle.",
      "Input: nums = [-2,1,-1,-2,-2]\nOutput: false\nExplanation:\nThe sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.\n\nEvery nums[seq[j]] must be either all positive or all negative."
    ],
    "constraints": "`1 <= nums.length <= 5000`\n`-1000 <= nums[i] <= 1000`\n`nums[i] != 0`\nFollow up: Could you solve it in `O(n)` time complexity and `O(1)` extra space complexity?"
  },
  {
    "id": "458",
    "title": "Poor Pigs",
    "difficulty": "Hard",
    "explanation": "There are `buckets` buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\nChoose some live pigs to feed.\n\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.\n\nWait for `minutesToDie` minutes. You may not feed any other pigs during this time.\n\nAfter `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n\nRepeat this process until you run out of time.\n\nGiven `buckets`, `minutesToDie`, and `minutesToTest`, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.",
    "examples": [
      "Input: buckets = 1000, minutesToDie = 15, minutesToTest = 60\nOutput: 5",
      "Input: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2",
      "Input: buckets = 4, minutesToDie = 15, minutesToTest = 30\nOutput: 2"
    ],
    "constraints": "`1 <= buckets <= 1000`\n`1 <= minutesToDie <= minutesToTest <= 100`"
  },
  {
    "id": "459",
    "title": "Repeated Substring Pattern",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.",
    "examples": [
      "Input: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.",
      "Input: s = \"aba\"\nOutput: false",
      "Input: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice."
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of lowercase English letters."
  },
  {
    "id": "460",
    "title": "LFU Cache",
    "difficulty": "Hard",
    "explanation": "Design and implement a data structure for a Least Frequently Used (LFU) cache.\n\nImplement the `LFUCache` class:\n`LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.\n\n`int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.\n\n`void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used `key` would be invalidated.\n\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\n\nWhen a key is first inserted into the cache, its use counter is set to `1` (due to the `put` operation). The use counter for a key in the cache is incremented either a `get` or `put` operation is called on it.",
    "examples": [
      "Input\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n\n                 // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[3,4], cnt(4)=2, cnt(3)=3"
    ],
    "constraints": "`0 <= capacity, key, value <= 104`\nAt most `105` calls will be made to `get` and `put`.\n\nFollow up: Could you do both operations in `O(1)` time complexity?"
  },
  {
    "id": "461",
    "title": "Hamming Distance",
    "difficulty": "Easy",
    "explanation": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n\nGiven two integers `x` and `y`, calculate the Hamming distance.\n\nNote:\n0 ≤ `x`, `y` < 231.\n\n\nExample:\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "462",
    "title": "Minimum Moves to Equal Array Elements II",
    "difficulty": "Medium",
    "explanation": "Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.\n\nYou may assume the array's length is at most 10,000.\n\n\nExample:\nInput:\n[1,2,3]\nOutput:\n2\nExplanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "463",
    "title": "Island Perimeter",
    "difficulty": "Easy",
    "explanation": "You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.\n\nGrid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.",
    "examples": [
      "Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.",
      "Input: grid = [[1]]\nOutput: 4",
      "Input: grid = [[1,0]]\nOutput: 4"
    ],
    "constraints": "`row == grid.length`\n`col == grid[i].length`\n`1 <= row, col <= 100`\n`grid[i][j]` is `0` or `1`."
  },
  {
    "id": "464",
    "title": "Can I Win",
    "difficulty": "Medium",
    "explanation": "In the \"100 game\" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to reach or exceed 100 wins.\n\nWhat if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n\nGiven two integers maxChoosableInteger and desiredTotal, return `true` if the first player to move can force a win, otherwise return `false`. Assume both players play optimally.",
    "examples": [
      "Input: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\n\nThe first player can choose an integer from 1 up to 10.\n\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\n\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n\nSame with other integers chosen by the first player, the second player will always win.",
      "Input: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true",
      "Input: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true"
    ],
    "constraints": "`1 <= maxChoosableInteger <= 20`\n`0 <= desiredTotal <= 300`"
  },
  {
    "id": "465",
    "title": "Optimal Account Balancing",
    "difficulty": "Hard",
    "explanation": "A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as `[[0, 1, 10], [2, 0, 5]]`.\n\nGiven a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.\n\nNote:\nA transaction will be given as a tuple (x, y, z). Note that `x ≠ y` and `z > 0`.\n\nPerson's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.",
    "examples": [
      "Input:\n[[0,1,10], [2,0,5]]\nOutput:\n2\nExplanation:\nPerson #0 gave person #1 $10.\n\nPerson #2 gave person #0 $5.\n\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.",
      "Input:\n[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]\nOutput:\n1\nExplanation:\nPerson #0 gave person #1 $10.\n\nPerson #1 gave person #0 $1.\n\nPerson #1 gave person #2 $5.\n\nPerson #2 gave person #0 $5.\n\nTherefore, person #1 only need to give person #0 $4, and all debt is settled."
    ],
    "constraints": ""
  },
  {
    "id": "466",
    "title": "Count The Repetitions",
    "difficulty": "Hard",
    "explanation": "Define `S = [s,n]` as the string S which consists of n connected strings s. For example, `[\"abc\", 3]` =\"abcabcabc\". \nOn the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.\n\nYou are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where `S1=[s1,n1]` and `S2=[s2,n2]`. Find the maximum integer M such that `[S2,M]` can be obtained from `S1`.\n\n\nExample:\nInput:\ns1=\"acb\", n1=4\ns2=\"ab\", n2=2\nReturn:\n2",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "467",
    "title": "Unique Substrings in Wraparound String",
    "difficulty": "Medium",
    "explanation": "Consider the string `s` to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so `s` will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n\nNow we have another string `p`. Your job is to find out how many unique non-empty substrings of `p` are present in `s`. In particular, your input is the string `p` and you need to output the number of different non-empty substrings of `p` in the string `s`.\n\nNote: `p` consists of only lowercase English letters and the size of p might be over 10000.",
    "examples": [
      "Input: \"a\"\nOutput: 1\nExplanation: Only the substring \"a\" of string \"a\" is in the string s.",
      "Input: \"cac\"\nOutput: 2\nExplanation: There are two substrings \"a\", \"c\" of string \"cac\" in the string s.",
      "Input: \"zab\"\nOutput: 6\nExplanation: There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s."
    ],
    "constraints": ""
  },
  {
    "id": "468",
    "title": "Validate IP Address",
    "difficulty": "Medium",
    "explanation": "Given a string `IP`, return `\"IPv4\"` if IP is a valid IPv4 address, `\"IPv6\"` if IP is a valid IPv6 address or `\"Neither\"` if IP is not a correct IP of any type.\n\nA valid IPv4 address is an IP in the form `\"x1.x2.x3.x4\"` where `0 <= xi <= 255` and `xi` cannot contain leading zeros. For example, `\"192.168.1.1\"` and `\"192.168.1.0\"` are valid IPv4 addresses but `\"192.168.01.1\"`, while `\"192.168.1.00\"` and `\"192.168@1.1\"` are invalid IPv4 addresses.\n\nA valid IPv6 address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8\"` where:\n`1 <= xi.length <= 4`\n`xi` is a hexadecimal string which may contain digits, lower-case English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).\n\nLeading zeros are allowed in `xi`.\n\nFor example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334\"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334\"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334\"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334\"` are invalid IPv6 addresses.",
    "examples": [
      "Input: IP = \"172.16.254.1\"\nOutput: \"IPv4\"\nExplanation: This is a valid IPv4 address, return \"IPv4\".",
      "Input: IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\nOutput: \"IPv6\"\nExplanation: This is a valid IPv6 address, return \"IPv6\".",
      "Input: IP = \"256.256.256.256\"\nOutput: \"Neither\"\nExplanation: This is neither a IPv4 address nor a IPv6 address.",
      "Input: IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334:\"\nOutput: \"Neither\"",
      "Input: IP = \"1e1.4.5.6\"\nOutput: \"Neither\""
    ],
    "constraints": "`IP` consists only of English letters, digits and the characters `'.'` and `':'`."
  },
  {
    "id": "469",
    "title": "Convex Polygon",
    "difficulty": "Medium",
    "explanation": "Given a list of points that form a polygon when joined sequentially, find if this polygon is convex (Convex polygon definition).\n\nNote:\nThere are at least 3 and at most 10,000 points.\n\nCoordinates are in the range -10,000 to 10,000.\n\nYou may assume the polygon formed by given points is always a simple polygon (Simple polygon definition). In other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise don't intersect each other.",
    "examples": [
      "[[0,0],[0,1],[1,1],[1,0]]\nAnswer: True\nExplanation:",
      "[[0,0],[0,10],[10,10],[10,0],[5,5]]\nAnswer: False\nExplanation:"
    ],
    "constraints": ""
  },
  {
    "id": "470",
    "title": "Implement Rand10() Using Rand7()",
    "difficulty": "Medium",
    "explanation": "Given the API `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please do not use a language's built-in random API.\n\nEach test case will have one internal argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is not an argument passed to `rand10()`.\n\nFollow up:\nWhat is the expected value for the number of calls to `rand7()` function?\nCould you minimize the number of calls to `rand7()`?",
    "examples": [
      "Input: n = 1\nOutput: [2]",
      "Input: n = 2\nOutput: [2,8]",
      "Input: n = 3\nOutput: [3,8,10]"
    ],
    "constraints": "`1 <= n <= 105`"
  },
  {
    "id": "471",
    "title": "Encode String with Shortest Length",
    "difficulty": "Hard",
    "explanation": "Given a non-empty string, encode the string such that its encoded length is the shortest.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times.\n\nNote:\n`k` will be a positive integer.\n\nIf an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.",
    "examples": [
      "Input: s = \"aaa\"\nOutput: \"aaa\"\nExplanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.",
      "Input: s = \"aaaaa\"\nOutput: \"5[a]\"\nExplanation: \"5[a]\" is shorter than \"aaaaa\" by 1 character.",
      "Input: s = \"aaaaaaaaaa\"\nOutput: \"10[a]\"\nExplanation: \"a9[a]\" or \"9[a]a\" are also valid solutions, both of them have the same length = 5, which is the same as \"10[a]\".",
      "Input: s = \"aabcaabcd\"\nOutput: \"2[aabc]d\"\nExplanation: \"aabc\" occurs twice, so one answer can be \"2[aabc]d\".",
      "Input: s = \"abbbabbbcabbbabbbc\"\nOutput: \"2[2[abbb]c]\"\nExplanation: \"abbbabbbc\" occurs twice, but \"abbbabbbc\" can also be encoded to \"2[abbb]c\", so one answer can be \"2[2[abbb]c]\"."
    ],
    "constraints": "`1 <= s.length <= 150`\n`s` consists of only lowercase English letters."
  },
  {
    "id": "472",
    "title": "Concatenated Words",
    "difficulty": "Hard",
    "explanation": "Given an array of strings `words` (without duplicates), return all the concatenated words in the given list of `words`.\n\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.",
    "examples": [
      "Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\nOutput: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".",
      "Input: words = [\"cat\",\"dog\",\"catdog\"]\nOutput: [\"catdog\"]"
    ],
    "constraints": "`1 <= words.length <= 104`\n`0 <= words[i].length <= 1000`\n`words[i]` consists of only lowercase English letters.\n\n`0 <= sum(words[i].length) <= 6 * 105`"
  },
  {
    "id": "473",
    "title": "Matchsticks to Square",
    "difficulty": "Medium",
    "explanation": "Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n\n Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.",
    "examples": [
      "Input: [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.",
      "Input: [3,3,3,3,4]\nOutput: false\nExplanation: You cannot find a way to form a square with all the matchsticks.\n\nNote:\nThe length sum of the given matchsticks is in the range of `0` to `10^9`.\n\nThe length of the given matchstick array will not exceed `15`."
    ],
    "constraints": ""
  },
  {
    "id": "474",
    "title": "Ones and Zeroes",
    "difficulty": "Medium",
    "explanation": "You are given an array of binary strings `strs` and two integers `m` and `n`.\n\nReturn the size of the largest subset of `strs` such that there are at most `m` `0`'s and `n` `1`'s in the subset.\n\nA set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.",
    "examples": [
      "Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\nOutput: 4\nExplanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\n\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.",
      "Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\nOutput: 2\nExplanation: The largest subset is {\"0\", \"1\"}, so the answer is 2."
    ],
    "constraints": "`1 <= strs.length <= 600`\n`1 <= strs[i].length <= 100`\n`strs[i]` consists only of digits `'0'` and `'1'`.\n\n`1 <= m, n <= 100`"
  },
  {
    "id": "475",
    "title": "Heaters",
    "difficulty": "Medium",
    "explanation": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n\nEvery house can be warmed, as long as the house is within the heater's warm radius range. \nGiven the positions of `houses` and `heaters` on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n\nNotice that all the `heaters` follow your radius standard, and the warm radius will the same.",
    "examples": [
      "Input: houses = [1,2,3], heaters = [2]\nOutput: 1\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.",
      "Input: houses = [1,2,3,4], heaters = [1,4]\nOutput: 1\nExplanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.",
      "Input: houses = [1,5], heaters = [2]\nOutput: 3"
    ],
    "constraints": "`1 <= houses.length, heaters.length <= 3 * 104`\n`1 <= houses[i], heaters[i] <= 109`"
  },
  {
    "id": "476",
    "title": "Number Complement",
    "difficulty": "Easy",
    "explanation": "Given a positive integer `num`, output its complement number. The complement strategy is to flip the bits of its binary representation.",
    "examples": [
      "Input: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.",
      "Input: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
    ],
    "constraints": "The given integer `num` is guaranteed to fit within the range of a 32-bit signed integer.\n\n`num >= 1`\nYou could assume no leading zero bit in the integer’s binary representation.\n\nThis question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/"
  },
  {
    "id": "477",
    "title": "Total Hamming Distance",
    "difficulty": "Medium",
    "explanation": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n\nNow your job is to find the total Hamming distance between all pairs of the given numbers.\n\n\nExample:\nInput: 4, 14, 2\nOutput: 6\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case). So the answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n\nNote:\nElements of the given array are in the range of `0 ` to `10^9`\nLength of the array will not exceed `10^4`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "478",
    "title": "Generate Random Point in a Circle",
    "difficulty": "Medium",
    "explanation": "Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.\n\nImplement the `Solution` class:\n`Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.\n\n`randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.",
    "examples": [
      "Input\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]"
    ],
    "constraints": "`0 < radius <= 108`\n`-107 <= x_center, y_center <= 107`\nAt most `3 * 104` calls will be made to `randPoint`."
  },
  {
    "id": "479",
    "title": "Largest Palindrome Product",
    "difficulty": "Hard",
    "explanation": "Find the largest palindrome made from the product of two n-digit numbers.\n\nSince the result could be very large, you should return the largest palindrome mod 1337.\n\n\nExample:\nInput: 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\nNote:\nThe range of n is [1,8].",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "480",
    "title": "Sliding Window Median",
    "difficulty": "Hard",
    "explanation": "Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.\n\n\nExamples:\n`[2,3,4]` , the median is `3`\n`[2,3]`, the median is `(2 + 3) / 2 = 2.5`\nGiven an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.\n\nFor example,\nGiven nums = `[1,3,-1,-3,5,3,6,7]`, and k = 3.\n\nWindow position                Median\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\nTherefore, return the median sliding window as `[1,-1,-1,3,5,6]`.\n\nNote: \nYou may assume `k` is always valid, ie: `k` is always smaller than input array's size for non-empty array.\n\nAnswers within `10^-5` of the actual value will be accepted as correct.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "481",
    "title": "Magical String",
    "difficulty": "Medium",
    "explanation": "A magical string S consists of only '1' and '2' and obeys the following rules:\nThe string S is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string S itself.\n\nThe first few elements of string S is the following:\nS = \"1221121221221121122......\"\nIf we group the consecutive '1's and '2's in S, it will be:\n1   22  11  2  1  22  1  22  11  2  11  22 ......\n\nand the occurrences of '1's or '2's in each group are:\n1   2\t   2    1   1    2     1    2     2    1    2    2 ......\n\nYou can see that the occurrence sequence above is the S itself. \nGiven an integer N as input, return the number of '1's in the first N number in the magical string S.\n\nNote:\nN will not exceed 100,000.",
    "examples": [
      "Input: 6\nOutput: 3\nExplanation: The first 6 elements of magical string S is \"12211\" and it contains three 1's, so return 3."
    ],
    "constraints": ""
  },
  {
    "id": "482",
    "title": "License Key Formatting",
    "difficulty": "Easy",
    "explanation": "You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\n\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.\n\nGiven a non-empty string S and a number K, format the string according to the rules described above.",
    "examples": [
      "Input: S = \"5F3Z-2e-9-w\", K = 4\nOutput: \"5F3Z-2E9W\"\nExplanation: The string S has been split into two parts, each part has 4 characters.\n\nNote that the two extra dashes are not needed and can be removed.",
      "Input: S = \"2-5g-3-J\", K = 2\nOutput: \"2-5G-3J\"\nExplanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n\nNote:\nThe length of string S will not exceed 12,000, and K is a positive integer.\n\nString S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\n\nString S is non-empty."
    ],
    "constraints": ""
  },
  {
    "id": "483",
    "title": "Smallest Good Base",
    "difficulty": "Hard",
    "explanation": "For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.\n\nNow given a string representing n, you should return the smallest good base of n in string format.",
    "examples": [
      "Input: \"13\"\nOutput: \"3\"\nExplanation: 13 base 3 is 111.",
      "Input: \"4681\"\nOutput: \"8\"\nExplanation: 4681 base 8 is 11111.",
      "Input: \"1000000000000000000\"\nOutput: \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\n\nNote:\nThe range of n is [3, 10^18].\n\nThe string representing n is always valid and will not have leading zeros."
    ],
    "constraints": ""
  },
  {
    "id": "484",
    "title": "Find Permutation",
    "difficulty": "Medium",
    "explanation": "By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature \"DI\" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the \"DI\" secret signature.\n\nOn the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.",
    "examples": [
      "Input: \"I\"\nOutput: [1,2]\nExplanation: [1,2] is the only legal initial spectial string can construct secret signature \"I\", where the number 1 and 2 construct an increasing relationship.",
      "Input: \"DI\"\nOutput: [2,1,3]\nExplanation: Both [2,1,3] and [3,1,2] can construct the secret signature \"DI\", but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]\nNote:\nThe input string will only contain the character 'D' and 'I'.\n\nThe length of input string is a positive integer and will not exceed 10,000"
    ],
    "constraints": ""
  },
  {
    "id": "485",
    "title": "Max Consecutive Ones",
    "difficulty": "Easy",
    "explanation": "Given a binary array, find the maximum number of consecutive 1s in this array.",
    "examples": [
      "Input: [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s.\n\n    The maximum number of consecutive 1s is 3.\n\nNote:\nThe input array will only contain `0` and `1`.\n\nThe length of input array is a positive integer and will not exceed 10,000"
    ],
    "constraints": ""
  },
  {
    "id": "486",
    "title": "Predict the Winner",
    "difficulty": "Medium",
    "explanation": "Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.\n\nGiven an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.",
    "examples": [
      "Input: [1, 5, 2]\nOutput: False\nExplanation: Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return False.",
      "Input: [1, 5, 233, 7]\nOutput: True\nExplanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\n\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win."
    ],
    "constraints": "1 <= length of the array <= 20.\n\nAny scores in the given array are non-negative integers and will not exceed 10,000,000.\n\nIf the scores of both players are equal, then player 1 is still the winner."
  },
  {
    "id": "487",
    "title": "Max Consecutive Ones II",
    "difficulty": "Medium",
    "explanation": "Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.",
    "examples": [
      "Input: [1,0,1,1,0]\nOutput: 4\nExplanation: Flip the first zero will get the the maximum number of consecutive 1s.\n\n    After flipping, the maximum number of consecutive 1s is 4.\n\nNote:\nThe input array will only contain `0` and `1`.\n\nThe length of input array is a positive integer and will not exceed 10,000\nFollow up:\nWhat if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?"
    ],
    "constraints": ""
  },
  {
    "id": "488",
    "title": "Zuma Game",
    "difficulty": "Hard",
    "explanation": "Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.\n\nEach time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.\n\nFind the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.",
    "examples": [
      "Input: board = \"WRRBBW\", hand = \"RB\"\nOutput: -1\nExplanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW",
      "Input: board = \"WWRRBBWW\", hand = \"WRBRW\"\nOutput: 2\nExplanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty",
      "Input: board = \"G\", hand = \"GGGGG\"\nOutput: 2\nExplanation: G -> G[G] -> GG[G] -> empty",
      "Input: board = \"RBYYBBRRB\", hand = \"YRBGB\"\nOutput: 3\nExplanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty"
    ],
    "constraints": "You may assume that the initial row of balls on the table won’t have any 3 or more consecutive balls with the same color.\n\n`1 <= board.length <= 16`\n`1 <= hand.length <= 5`\nBoth input strings will be non-empty and only contain characters 'R','Y','B','G','W'."
  },
  {
    "id": "489",
    "title": "Robot Room Cleaner",
    "difficulty": "Hard",
    "explanation": "Given a robot cleaner in a room modeled as a grid.\n\nEach cell in the grid can be empty or blocked.\n\nThe robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.\n\nWhen it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.\n\nDesign an algorithm to clean the entire room using only the 4 given APIs shown below.\n\ninterface Robot {\n  // returns true if next cell is open and robot moves into the cell.\n\n  // returns false if next cell is obstacle and robot stays on the current cell.\n\n  boolean move();\n  // Robot will stay on the same cell after calling turnLeft/turnRight.\n\n  // Each turn will be 90 degrees.\n\n  void turnLeft();\n  void turnRight();\n  // Clean the current cell.\n\n  void clean();\n}\n\nExample:\nInput:\nroom = [\n  [1,1,1,1,1,0,1,1],\n  [1,1,1,1,1,0,1,1],\n  [1,0,1,1,1,1,1,1],\n  [0,0,0,1,0,0,0,0],\n  [1,1,1,1,1,1,1,1]\n],\nrow = 1,\ncol = 3\nExplanation:\nAll grids in the room are marked by either 0 or 1.\n\n0 means the cell is blocked, while 1 means the cell is accessible.\n\nThe robot initially starts at the position of row=1, col=3.\n\nFrom the top left corner, its position is one row below and three columns right.\n\nNotes:\nThe input is only given to initialize the room and the robot's position internally. You must solve this problem \"blindfolded\". In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot's position.\n\nThe robot's initial position will always be in an accessible cell.\n\nThe initial direction of the robot will be facing up.\n\nAll accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.\n\nAssume all four edges of the grid are all surrounded by wall.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "490",
    "title": "The Maze",
    "difficulty": "Medium",
    "explanation": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`.\n\nYou may assume that the borders of the maze are all walls (see examples).",
    "examples": [
      "Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]\nOutput: true\nExplanation: One possible way is : left -> down -> left -> down -> right -> down -> right.",
      "Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]\nOutput: false\nExplanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.",
      "Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]\nOutput: false"
    ],
    "constraints": "`m == maze.length`\n`n == maze[i].length`\n`1 <= m, n <= 100`\n`maze[i][j]` is `0` or `1`.\n\n`start.length == 2`\n`destination.length == 2`\n`0 <= startrow, destinationrow <= m`\n`0 <= startcol, destinationcol <= n`\nBoth the ball and the destination exist in an empty space, and they will not be in the same position initially.\n\nThe maze contains at least 2 empty spaces."
  },
  {
    "id": "491",
    "title": "Increasing Subsequences",
    "difficulty": "Medium",
    "explanation": "Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.\n\n\nExample:\nInput: [4, 6, 7, 7]\nOutput: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n\nConstraints:\nThe length of the given array will not exceed 15.\n\nThe range of integer in the given array is [-100,100].\n\nThe given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "492",
    "title": "Construct the Rectangle",
    "difficulty": "Easy",
    "explanation": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\nThe area of the rectangular web page you designed must equal to the given target area.\n\nThe width `W` should not be larger than the length `L`, which means `L >= W`.\n\nThe difference between length `L` and width `W` should be as small as possible.\n\nReturn an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence.",
    "examples": [
      "Input: area = 4\nOutput: [2,2]\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.",
      "Input: area = 37\nOutput: [37,1]",
      "Input: area = 122122\nOutput: [427,286]"
    ],
    "constraints": "`1 <= area <= 107`"
  },
  {
    "id": "493",
    "title": "Reverse Pairs",
    "difficulty": "Hard",
    "explanation": "Given an array `nums`, we call `(i, j)` an important reverse pair if `i < j` and `nums[i] > 2*nums[j]`.\n\nYou need to return the number of important reverse pairs in the given array.\n\n\nExample1:\nInput: [1,3,2,3,1]\nOutput: 2\n\nExample2:\nInput: [2,4,3,5,1]\nOutput: 3\nNote:\nThe length of the given array will not exceed `50,000`.\n\nAll the numbers in the input array are in the range of 32-bit integer.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "494",
    "title": "Target Sum",
    "difficulty": "Medium",
    "explanation": "You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols `+` and `-`. For each integer, you should choose one from `+` and `-` as its new symbol.\n\nFind out how many ways to assign symbols to make sum of integers equal to target S.",
    "examples": [
      "Input: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\nThere are 5 ways to assign symbols to make the sum of nums be target 3."
    ],
    "constraints": "The length of the given array is positive and will not exceed 20.\n\nThe sum of elements in the given array will not exceed 1000.\n\nYour output answer is guaranteed to be fitted in a 32-bit integer."
  },
  {
    "id": "495",
    "title": "Teemo Attacking",
    "difficulty": "Medium",
    "explanation": "In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.\n\nYou may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.",
    "examples": [
      "Input: [1,4], 2\nOutput: 4\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. \nThis poisoned status will last 2 seconds until the end of time point 2. \nAnd at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. \nSo you finally need to output 4.",
      "Input: [1,2], 2\nOutput: 3\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. \nThis poisoned status will last 2 seconds until the end of time point 2. \nHowever, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. \nSince the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. \nSo you finally need to output 3.\n\nNote:\nYou may assume the length of given time series array won't exceed 10000.\n\nYou may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000."
    ],
    "constraints": ""
  },
  {
    "id": "496",
    "title": "Next Greater Element I",
    "difficulty": "Easy",
    "explanation": "You are given two integer arrays `nums1` and `nums2` both of unique elements, where `nums1` is a subset of `nums2`.\n\nFind all the next greater numbers for `nums1`'s elements in the corresponding places of `nums2`.\n\nThe Next Greater Number of a number `x` in `nums1` is the first greater number to its right in `nums2`. If it does not exist, return `-1` for this number.",
    "examples": [
      "Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation:\nFor number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\n\nFor number 1 in the first array, the next greater number for it in the second array is 3.\n\nFor number 2 in the first array, there is no next greater number for it in the second array, so output -1.",
      "Input: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation:\nFor number 2 in the first array, the next greater number for it in the second array is 3.\n\nFor number 4 in the first array, there is no next greater number for it in the second array, so output -1."
    ],
    "constraints": "`1 <= nums1.length <= nums2.length <= 1000`\n`0 <= nums1[i], nums2[i] <= 104`\nAll integers in `nums1` and `nums2` are unique.\n\nAll the integers of `nums1` also appear in `nums2`.\n\nFollow up: Could you find an `O(nums1.length + nums2.length)` solution?"
  },
  {
    "id": "497",
    "title": "Random Point in Non-overlapping Rectangles",
    "difficulty": "Medium",
    "explanation": "Given a list of non-overlapping axis-aligned rectangles `rects`, write a function `pick` which randomly and uniformily picks an integer point in the space covered by the rectangles.\n\nNote:\nAn integer point is a point that has integer coordinates. \nA point on the perimeter of a rectangle is included in the space covered by the rectangles. \n`i`th rectangle = `rects[i]` = `[x1,y1,x2,y2]`, where `[x1, y1]` are the integer coordinates of the bottom-left corner, and `[x2, y2]` are the integer coordinates of the top-right corner.\n\nlength and width of each rectangle does not exceed `2000`.\n\n`1 <= rects.length <= 100`\n`pick` return a point as an array of integer coordinates `[p_x, p_y]`\n`pick` is called at most `10000` times.",
    "examples": [
      "Input: \n[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[[[1,1,5,5]]],[],[],[]]\nOutput: \n[null,[4,1],[4,1],[3,3]]",
      "Input: \n[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\nOutput: \n[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]\nExplanation of Input Syntax:\nThe input is two lists: the subroutines called and their arguments. `Solution`'s constructor has one argument, the array of rectangles `rects`. `pick` has no arguments. Arguments are always wrapped with a list, even if there aren't any."
    ],
    "constraints": ""
  },
  {
    "id": "498",
    "title": "Diagonal Traverse",
    "difficulty": "Medium",
    "explanation": "Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.\n\n\nExample:\nInput:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput:  [1,2,4,7,5,3,6,8,9]\nExplanation:\nNote:\nThe total number of elements of the given matrix will not exceed 10,000.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "499",
    "title": "The Maze III",
    "difficulty": "Hard",
    "explanation": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.\n\nGiven the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return a string `instructions` of all the instructions that the ball should follow to drop in the hole with the shortest distance possible. If there are multiple valid instructions, return the lexicographically minimum one. If the ball can't drop in the hole, return `\"impossible\"`.\n\nIf there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right).\n\nThe distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that the borders of the maze are all walls (see examples).",
    "examples": [
      "Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]\nOutput: \"lul\"\nExplanation: There are two shortest ways for the ball to drop into the hole.\n\nThe first way is left -> up -> left, represented by \"lul\".\n\nThe second way is up -> left, represented by 'ul'.\n\nBoth ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is \"lul\".",
      "Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]\nOutput: \"impossible\"\nExplanation: The ball cannot reach the hole.",
      "Input: maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]\nOutput: \"dldr\""
    ],
    "constraints": "`m == maze.length`\n`n == maze[i].length`\n`1 <= m, n <= 100`\n`maze[i][j]` is `0` or `1`.\n\n`ball.length == 2`\n`hole.length == 2`\n`0 <= ballrow, holerow <= m`\n`0 <= ballcol, holecol <= n`\nBoth the ball and the hole exist in an empty space, and they will not be in the same position initially.\n\nThe maze contains at least 2 empty spaces."
  },
  {
    "id": "500",
    "title": "Keyboard Row",
    "difficulty": "Easy",
    "explanation": "Given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\n\nIn the American keyboard:\nthe first row consists of the characters `\"qwertyuiop\"`,\nthe second row consists of the characters `\"asdfghjkl\"`, and\nthe third row consists of the characters `\"zxcvbnm\"`.",
    "examples": [
      "Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nOutput: [\"Alaska\",\"Dad\"]",
      "Input: words = [\"omk\"]\nOutput: []",
      "Input: words = [\"adsdf\",\"sfd\"]\nOutput: [\"adsdf\",\"sfd\"]"
    ],
    "constraints": "`1 <= words.length <= 20`\n`1 <= words[i].length <= 100`\n`words[i]` consists of English letters (both lowercase and uppercase)."
  },
  {
    "id": "501",
    "title": "Find Mode in Binary Search Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\n\nIf the tree has more than one mode, return them in any order.\n\nAssume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\n\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n\nBoth the left and right subtrees must also be binary search trees.",
    "examples": [
      "Input: root = [1,null,2,2]\nOutput: [2]",
      "Input: root = [0]\nOutput: [0]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-105 <= Node.val <= 105`\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."
  },
  {
    "id": "502",
    "title": "IPO",
    "difficulty": "Hard",
    "explanation": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects. \nYou are given several projects. For each project i, it has a pure profit Pi and a minimum capital of Ci is needed to start the corresponding project. Initially, you have W capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n\nTo sum up, pick a list of at most k distinct projects from given projects to maximize your final capital, and output your final maximized capital.",
    "examples": [
      "Input: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\nOutput: 4\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\n\n             After finishing it you will obtain profit 1 and your capital becomes 1.\n\n             With capital 1, you can either start the project indexed 1 or the project indexed 2.\n\n             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\n\n             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n\nNote:\nYou may assume all numbers in the input are non-negative integers.\n\nThe length of Profits array and Capital array will not exceed 50,000.\n\nThe answer is guaranteed to fit in a 32-bit signed integer."
    ],
    "constraints": ""
  },
  {
    "id": "503",
    "title": "Next Greater Element II",
    "difficulty": "Medium",
    "explanation": "Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return the next greater number for every element in `nums`.\n\nThe next greater number of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.",
    "examples": [
      "Input: nums = [1,2,1]\nOutput: [2,-1,2]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number. \nThe second 1's next greater number needs to search circularly, which is also 2.",
      "Input: nums = [1,2,3,4,3]\nOutput: [2,3,4,-1,4]"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "504",
    "title": "Base 7",
    "difficulty": "Easy",
    "explanation": "Given an integer, return its base 7 string representation.",
    "examples": [
      "Input: 100\nOutput: \"202\"",
      "Input: -7\nOutput: \"-10\"\nNote:\nThe input will be in range of [-1e7, 1e7]."
    ],
    "constraints": ""
  },
  {
    "id": "505",
    "title": "The Maze II",
    "difficulty": "Medium",
    "explanation": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return the shortest distance for the ball to stop at the destination. If the ball cannot stop at `destination`, return `-1`.\n\nThe distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that the borders of the maze are all walls (see examples).",
    "examples": [
      "Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]\nOutput: 12\nExplanation: One possible way is : left -> down -> left -> down -> right -> down -> right.\n\nThe length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.",
      "Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]\nOutput: -1\nExplanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.",
      "Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]\nOutput: -1"
    ],
    "constraints": "`m == maze.length`\n`n == maze[i].length`\n`1 <= m, n <= 100`\n`maze[i][j]` is `0` or `1`.\n\n`start.length == 2`\n`destination.length == 2`\n`0 <= startrow, destinationrow <= m`\n`0 <= startcol, destinationcol <= n`\nBoth the ball and the destination exist in an empty space, and they will not be in the same position initially.\n\nThe maze contains at least 2 empty spaces."
  },
  {
    "id": "506",
    "title": "Relative Ranks",
    "difficulty": "Easy",
    "explanation": "You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be unique.\n\nThe athletes are placed based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:\nThe `1st` place athlete's rank is `\"Gold Medal\"`.\n\nThe `2nd` place athlete's rank is `\"Silver Medal\"`.\n\nThe `3rd` place athlete's rank is `\"Bronze Medal\"`.\n\nFor the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x\"`).\n\nReturn an array `answer` of size `n` where `answer[i]` is the rank of the `ith` athlete.",
    "examples": [
      "Input: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].",
      "Input: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th]."
    ],
    "constraints": "`n == score.length`\n`1 <= n <= 104`\n`0 <= score[i] <= 106`\nAll the values in `score` are unique."
  },
  {
    "id": "507",
    "title": "Perfect Number",
    "difficulty": "Easy",
    "explanation": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer `x` is an integer that can divide `x` evenly.\n\nGiven an integer `n`, return `true` if `n` is a perfect number, otherwise return `false`.",
    "examples": [
      "Input: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.",
      "Input: num = 6\nOutput: true",
      "Input: num = 496\nOutput: true",
      "Input: num = 8128\nOutput: true",
      "Input: num = 2\nOutput: false"
    ],
    "constraints": "`1 <= num <= 108`"
  },
  {
    "id": "508",
    "title": "Most Frequent Subtree Sum",
    "difficulty": "Medium",
    "explanation": "Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.\n\n\nExamples 1\nInput:\n  5\n /  \\\n2   -3\nreturn [2, -3, 4], since all the values happen only once, return all of them in any order.\n\n\nExamples 2\nInput:\n  5\n /  \\\n2   -5\nreturn [2], since 2 happens twice, however -5 only occur once.\n\nNote:\nYou may assume the sum of values in any subtree is in the range of 32-bit signed integer.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "509",
    "title": "Fibonacci Number",
    "difficulty": "Easy",
    "explanation": "The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\nGiven `n`, calculate `F(n)`.",
    "examples": [
      "Input: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.",
      "Input: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.",
      "Input: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3."
    ],
    "constraints": "`0 <= n <= 30`"
  },
  {
    "id": "510",
    "title": "Inorder Successor in BST II",
    "difficulty": "Medium",
    "explanation": "Given a `node` in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return `null`.\n\nThe successor of a `node` is the node with the smallest key greater than `node.val`.\n\nYou will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}",
    "examples": [
      "Input: tree = [2,1,3], node = 1\nOutput: 2\nExplanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.",
      "Input: tree = [5,3,6,2,4,null,null,1], node = 6\nOutput: null\nExplanation: There is no in-order successor of the current node, so the answer is null.",
      "Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15\nOutput: 17",
      "Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13\nOutput: 15",
      "Input: tree = [0], node = 0\nOutput: null"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-105 <= Node.val <= 105`\nAll Nodes will have unique values.\n\nFollow up: Could you solve it without looking up any of the node's values?"
  },
  {
    "id": "511",
    "title": "Game Play Analysis I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "512",
    "title": "Game Play Analysis II",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "513",
    "title": "Find Bottom Left Tree Value",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the leftmost value in the last row of the tree.",
    "examples": [
      "Input: root = [2,1,3]\nOutput: 1",
      "Input: root = [1,2,3,4,null,5,6,null,null,7]\nOutput: 7"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-231 <= Node.val <= 231 - 1`"
  },
  {
    "id": "514",
    "title": "Freedom Trail",
    "difficulty": "Hard",
    "explanation": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\", and use the dial to spell a specific keyword in order to open the door.\n\nGiven a string ring, which represents the code engraved on the outer ring and another string key, which represents the keyword needs to be spelled. You need to find the minimum number of steps in order to spell all the characters in the keyword.\n\nInitially, the first character of the ring is aligned at 12:00 direction. You need to spell all the characters in the string key one by one by rotating the ring clockwise or anticlockwise to make each character of the string key aligned at 12:00 direction and then by pressing the center button.\n\nAt the stage of rotating the ring to spell the key character key[i]:\nYou can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. The final purpose of the rotation is to align one of the string ring's characters at the 12:00 direction, where this character must equal to the character key[i].\n\nIf the character key[i] has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you've finished all the spelling.\n\n\nExample:\nInput: ring = \"godding\", key = \"gd\"\nOutput: 4\nExplanation:\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\n\nAlso, we need 1 more step for spelling.\n\nSo the final output is 4.\n\nNote:\nLength of both ring and key will be in range 1 to 100.\n\nThere are only lowercase letters in both strings and might be some duplcate characters in both strings.\n\nIt's guaranteed that string key could always be spelled by rotating the string ring.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "515",
    "title": "Find Largest Value in Each Tree Row",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).",
    "examples": [
      "Input: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]",
      "Input: root = [1,2,3]\nOutput: [1,3]",
      "Input: root = [1]\nOutput: [1]",
      "Input: root = [1,null,2]\nOutput: [1,2]",
      "Input: root = []\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree will be in the range `[0, 104]`.\n\n`-231 <= Node.val <= 231 - 1`"
  },
  {
    "id": "516",
    "title": "Longest Palindromic Subsequence",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, find the longest palindromic subsequence's length in `s`.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      "Input: s = \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence is \"bbbb\".",
      "Input: s = \"cbbd\"\nOutput: 2\nExplanation: One possible longest palindromic subsequence is \"bb\"."
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consists only of lowercase English letters."
  },
  {
    "id": "517",
    "title": "Super Washing Machines",
    "difficulty": "Hard",
    "explanation": "You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. \nFor each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines  at the same time .  \nGiven an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\n\n\nExample1\nInput: [1,0,5]\nOutput: 3\nExplanation: \n1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3    \n3rd move:    2     1 <-- 3    =>    2     2     2   \n\nExample2\nInput: [0,3,0]\nOutput: 2\nExplanation: \n1st move:    0 <-- 3     0    =>    1     2     0    \n2nd move:    1     2 --> 0    =>    1     1     1     \n\nExample3\nInput: [0,2,0]\nOutput: -1\nExplanation: \nIt's impossible to make all the three washing machines have the same number of dresses. \nNote:\nThe range of n is [1, 10000].\n\nThe range of dresses number in a super washing machine is [0, 1e5].",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "518",
    "title": "Coin Change 2",
    "difficulty": "Medium",
    "explanation": "You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.",
    "examples": [
      "Input: amount = 5, coins = [1, 2, 5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1",
      "Input: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.",
      "Input: amount = 10, coins = [10] \nOutput: 1\nNote:\nYou can assume that\n0 <= amount <= 5000\n1 <= coin <= 5000\nthe number of coins is less than 500\nthe answer is guaranteed to fit into signed 32-bit integer"
    ],
    "constraints": ""
  },
  {
    "id": "519",
    "title": "Random Flip Matrix",
    "difficulty": "Medium",
    "explanation": "You are given the number of rows `n_rows` and number of columns `n_cols` of a 2D binary matrix where all values are initially 0. Write a function `flip` which chooses a 0 value uniformly at random, changes it to 1, and then returns the position `[row.id, col.id]` of that value. Also, write a function `reset` which sets all values back to 0. Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.\n\nNote:\n`1 <= n_rows, n_cols <= 10000`\n`0 <= row.id < n_rows` and `0 <= col.id < n_cols`\n`flip` will not be called when the matrix has no 0 values left.\n\nthe total number of calls to `flip` and `reset` will not exceed 1000.",
    "examples": [
      "Input: \n[\"Solution\",\"flip\",\"flip\",\"flip\",\"flip\"]\n[[2,3],[],[],[],[]]\nOutput: [null,[0,1],[1,2],[1,0],[1,1]]",
      "Input: \n[\"Solution\",\"flip\",\"flip\",\"reset\",\"flip\"]\n[[1,2],[],[],[],[]]\nOutput: [null,[0,0],[0,1],null,[0,0]]\nExplanation of Input Syntax:\nThe input is two lists: the subroutines called and their arguments. `Solution`'s constructor has two arguments, `n_rows` and `n_cols`. `flip` and `reset` have no arguments. Arguments are always wrapped with a list, even if there aren't any."
    ],
    "constraints": ""
  },
  {
    "id": "520",
    "title": "Detect Capital",
    "difficulty": "Easy",
    "explanation": "Given a word, you need to judge whether the usage of capitals in it is right or not.\n\nWe define the usage of capitals in a word to be right when one of the following cases holds:\nAll letters in this word are capitals, like \"USA\".\n\nAll letters in this word are not capitals, like \"leetcode\".\n\nOnly the first letter in this word is capital, like \"Google\".\n\nOtherwise, we define that this word doesn't use capitals in a right way.",
    "examples": [
      "Input: \"USA\"\nOutput: True",
      "Input: \"FlaG\"\nOutput: False\nNote: The input will be a non-empty word consisting of uppercase and lowercase latin letters."
    ],
    "constraints": ""
  },
  {
    "id": "521",
    "title": "Longest Uncommon Subsequence I",
    "difficulty": "Easy",
    "explanation": "Given two strings `a` and `b`, find the length of the longest uncommon subsequence between them.\n\nA subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`. For example, `\"abc\"` is a subsequence of `\"aebdc\"` because you can delete the underlined characters in `\"aebdc\"` to get `\"abc\"`. Other subsequences of `\"aebdc\"` include `\"aebdc\"`, `\"aeb\"`, and `\"\"` (empty string).\n\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\n\nReturn the length of the longest uncommon subsequence between `a` and `b`. If the longest uncommon subsequence doesn't exist, return `-1`.",
    "examples": [
      "Input: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\n\nNote that \"cdc\" is also a longest uncommon subsequence.",
      "Input: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".",
      "Input: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."
    ],
    "constraints": "`1 <= a.length, b.length <= 100`\n`a` and `b` consist of lower-case English letters."
  },
  {
    "id": "522",
    "title": "Longest Uncommon Subsequence II",
    "difficulty": "Medium",
    "explanation": "Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n\nA subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.",
    "examples": [
      "Input: \"aba\", \"cdc\", \"eae\"\nOutput: 3\nNote:\nAll the given strings' lengths will not exceed 10.\n\nThe length of the given list will be in the range of [2, 50]."
    ],
    "constraints": ""
  },
  {
    "id": "523",
    "title": "Continuous Subarray Sum",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` and an integer `k`, return `true` if `nums` has a continuous subarray of size at least two whose elements sum up to a multiple of `k`, or `false` otherwise.\n\nAn integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is always a multiple of `k`.",
    "examples": [
      "Input: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.",
      "Input: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.",
      "Input: nums = [23,2,6,4,7], k = 13\nOutput: false"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`0 <= nums[i] <= 109`\n`0 <= sum(nums[i]) <= 231 - 1`\n`1 <= k <= 231 - 1`"
  },
  {
    "id": "524",
    "title": "Longest Word in Dictionary through Deleting",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and a string array `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.",
    "examples": [
      "Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\nOutput: \"apple\"",
      "Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\nOutput: \"a\""
    ],
    "constraints": "`1 <= s.length <= 1000`\n`1 <= dictionary.length <= 1000`\n`1 <= dictionary[i].length <= 1000`\n`s` and `dictionary[i]` consist of lowercase English letters."
  },
  {
    "id": "525",
    "title": "Contiguous Array",
    "difficulty": "Medium",
    "explanation": "Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.",
    "examples": [
      "Input: [0,1]\nOutput: 2\nExplanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.",
      "Input: [0,1,0]\nOutput: 2\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n\nNote:\nThe length of the given binary array will not exceed 50,000."
    ],
    "constraints": ""
  },
  {
    "id": "526",
    "title": "Beautiful Arrangement",
    "difficulty": "Medium",
    "explanation": "Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (1-indexed) is considered a beautiful arrangement if for every `i` (`1 <= i <= n`), either of the following is true:\n`perm[i]` is divisible by `i`.\n\n`i` is divisible by `perm[i]`.\n\nGiven an integer `n`, return the number of the beautiful arrangements that you can construct.",
    "examples": [
      "Input: n = 2\nOutput: 2\nExplanation: \nThe first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1",
      "Input: n = 1\nOutput: 1"
    ],
    "constraints": "`1 <= n <= 15`"
  },
  {
    "id": "527",
    "title": "Word Abbreviation",
    "difficulty": "Hard",
    "explanation": "Given an array of n distinct non-empty strings, you need to generate minimal possible abbreviations for every word following rules below.\n\nBegin with the first character and then the number of characters abbreviated, which followed by the last character.\n\nIf there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.\n\n If the abbreviation doesn't make the word shorter, then keep it as original.\n\n\nExample:\nInput: [\"like\", \"god\", \"internal\", \"me\", \"internet\", \"interval\", \"intension\", \"face\", \"intrusion\"]\nOutput: [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\nNote:\n Both n and the length of each word will not exceed 400.\n\n The length of each word is greater than 1.\n\n The words consist of lowercase English letters only.\n\n The return answers should be in the same order as the original array.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "528",
    "title": "Random Pick with Weight",
    "difficulty": "Medium",
    "explanation": "You are given an array of positive integers `w` where `w[i]` describes the weight of `i``th` index (0-indexed).\n\nWe need to call the function `pickIndex()` which randomly returns an integer in the range `[0, w.length - 1]`. `pickIndex()` should return the integer proportional to its weight in the `w` array. For example, for `w = [1, 3]`, the probability of picking the index `0` is `1 / (1 + 3) = 0.25` (i.e 25%) while the probability of picking the index `1` is `3 / (1 + 3) = 0.75` (i.e 75%).\n\nMore formally, the probability of picking index `i` is `w[i] / sum(w)`.",
    "examples": [
      "Input\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput\n[null,0]\nExplanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.",
      "Input\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput\n[null,1,1,1,1,0]\nExplanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.\n\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\n\nand so on."
    ],
    "constraints": "`1 <= w.length <= 10000`\n`1 <= w[i] <= 10^5`\n`pickIndex` will be called at most `10000` times."
  },
  {
    "id": "529",
    "title": "Minesweeper",
    "difficulty": "Medium",
    "explanation": "Let's play the minesweeper game (Wikipedia, online game)!\nYou are given a 2D char matrix representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'X' represents a revealed mine.\n\nNow given the next click position (row and column indices) among all the unrevealed squares ('M' or 'E'), return the board after revealing this position according to the following rules:\nIf a mine ('M') is revealed, then the game is over - change it to 'X'.\n\nIf an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its adjacent unrevealed squares should be revealed recursively.\n\nIf an empty square ('E') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\n\nReturn the board when no more squares will be revealed.",
    "examples": [
      "Input: \n[['E', 'E', 'E', 'E', 'E'],\n ['E', 'E', 'M', 'E', 'E'],\n ['E', 'E', 'E', 'E', 'E'],\n ['E', 'E', 'E', 'E', 'E']]\nClick : [3,0]\nOutput: \n[['B', '1', 'E', '1', 'B'],\n ['B', '1', 'M', '1', 'B'],\n ['B', '1', '1', '1', 'B'],\n ['B', 'B', 'B', 'B', 'B']]\nExplanation:",
      "Input: \n[['B', '1', 'E', '1', 'B'],\n ['B', '1', 'M', '1', 'B'],\n ['B', '1', '1', '1', 'B'],\n ['B', 'B', 'B', 'B', 'B']]\nClick : [1,2]\nOutput: \n[['B', '1', 'E', '1', 'B'],\n ['B', '1', 'X', '1', 'B'],\n ['B', '1', '1', '1', 'B'],\n ['B', 'B', 'B', 'B', 'B']]\nExplanation:\nNote:\nThe range of the input matrix's height and width is [1,50].\n\nThe click position will only be an unrevealed square ('M' or 'E'), which also means the input board contains at least one clickable square.\n\nThe input board won't be a stage when game is over (some mines have been revealed).\n\nFor simplicity, not mentioned rules should be ignored in this problem. For example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares."
    ],
    "constraints": ""
  },
  {
    "id": "530",
    "title": "Minimum Absolute Difference in BST",
    "difficulty": "Easy",
    "explanation": "Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.\n\n\nExample:\nInput:\n   1\n    \\\n     3\n    /\n   2\nOutput:\n1\nExplanation:\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\n\nNote:\nThere are at least two nodes in this BST.\n\nThis question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "531",
    "title": "Lonely Pixel I",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return the number of black lonely pixels.\n\nA black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have any other black pixels.",
    "examples": [
      "Input: picture = [[\"W\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"W\"]]\nOutput: 3\nExplanation: All the three 'B's are black lonely pixels.",
      "Input: picture = [[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"B\"],[\"B\",\"B\",\"B\"]]\nOutput: 0"
    ],
    "constraints": "`m == picture.length`\n`n == picture[i].length`\n`1 <= m, n <= 500`\n`picture[i][j]` is `'W'` or `'B'`."
  },
  {
    "id": "532",
    "title": "K-diff Pairs in an Array",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array.\n\nA k-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n`0 <= i, j < nums.length`\n`i != j`\n`|nums[i] - nums[j]| == k`\nNotice that `|val|` denotes the absolute value of `val`.",
    "examples": [
      "Input: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\n\nAlthough we have two 1s in the input, we should only return the number of unique pairs.",
      "Input: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).",
      "Input: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).",
      "Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3\nOutput: 2",
      "Input: nums = [-1,-2,-3], k = 1\nOutput: 2"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-107 <= nums[i] <= 107`\n`0 <= k <= 107`"
  },
  {
    "id": "533",
    "title": "Lonely Pixel II",
    "difficulty": "Medium",
    "explanation": "Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:\n Row R and column C both contain exactly N black pixels.\n\n For all rows that have a black pixel at column C, they should be exactly the same as row R\nThe picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. \n\nExample:\nInput:                                            \n[['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'W', 'B', 'W', 'B', 'W']] \nN = 3\nOutput: 6\nExplanation: All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).\n\n        0    1    2    3    4    5         column index                                            \n0    [['W', 'B', 'W', 'B', 'B', 'W'],    \n1     ['W', 'B', 'W', 'B', 'B', 'W'],    \n2     ['W', 'B', 'W', 'B', 'B', 'W'],    \n3     ['W', 'W', 'B', 'W', 'B', 'W']]    \nrow index\nTake 'B' at row R = 0 and column C = 1 as an example:\nRule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels. \nRule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.\n\nNote:\nThe range of width and height of the input 2D array is [1,200].",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "534",
    "title": "Game Play Analysis III",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "535",
    "title": "Encode and Decode TinyURL",
    "difficulty": "Medium",
    "explanation": "Note: This is a companion problem to the System Design problem: Design TinyURL.\n\nTinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`.\n\nDesign the `encode` and `decode` methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "536",
    "title": "Construct Binary Tree from String",
    "difficulty": "Medium",
    "explanation": "You need to construct a binary tree from a string consisting of parenthesis and integers.\n\nThe whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.\n\nYou always start to construct the left child node of the parent first if it exists.",
    "examples": [
      "Input: s = \"4(2(3)(1))(6(5))\"\nOutput: [4,2,6,3,1,5]",
      "Input: s = \"4(2(3)(1))(6(5)(7))\"\nOutput: [4,2,6,3,1,5,7]",
      "Input: s = \"-4(2(3)(1))(6(5)(7))\"\nOutput: [-4,2,6,3,1,5,7]"
    ],
    "constraints": "`0 <= s.length <= 3 * 104`\n`s` consists of digits, `'('`, `')'`, and `'-'` only."
  },
  {
    "id": "537",
    "title": "Complex Number Multiplication",
    "difficulty": "Medium",
    "explanation": "Given two strings representing two complex numbers.\n\nYou need to return a string representing their multiplication. Note i2 = -1 according to the definition.",
    "examples": [
      "Input: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.",
      "Input: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n\nNote:\nThe input strings will not have extra blank.\n\nThe input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form."
    ],
    "constraints": ""
  },
  {
    "id": "538",
    "title": "Convert BST to Greater Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\n\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node's key.\n\nThe right subtree of a node contains only nodes with keys greater than the node's key.\n\nBoth the left and right subtrees must also be binary search trees.\n\nNote: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/",
    "examples": [
      "Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
      "Input: root = [0,null,1]\nOutput: [1,null,1]",
      "Input: root = [1,0,2]\nOutput: [3,3,2]",
      "Input: root = [3,2,4,1]\nOutput: [7,9,4,10]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-104 <= Node.val <= 104`\nAll the values in the tree are unique.\n\n`root` is guaranteed to be a valid binary search tree."
  },
  {
    "id": "539",
    "title": "Minimum Time Difference",
    "difficulty": "Medium",
    "explanation": "Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.",
    "examples": [
      "Input: timePoints = [\"23:59\",\"00:00\"]\nOutput: 1",
      "Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\nOutput: 0"
    ],
    "constraints": "`2 <= timePoints <= 2 * 104`\n`timePoints[i]` is in the format \"HH:MM\"."
  },
  {
    "id": "540",
    "title": "Single Element in a Sorted Array",
    "difficulty": "Medium",
    "explanation": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.\n\nFollow up: Your solution should run in O(log n) time and O(1) space.",
    "examples": [
      "Input: nums = [1,1,2,3,3,4,4,8,8]\nOutput: 2",
      "Input: nums = [3,3,7,7,10,11,11]\nOutput: 10"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`0 <= nums[i] <= 10^5`"
  },
  {
    "id": "541",
    "title": "Reverse String II",
    "difficulty": "Easy",
    "explanation": "Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.\n\nIf there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and left the other as original.",
    "examples": [
      "Input: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"",
      "Input: s = \"abcd\", k = 2\nOutput: \"bacd\""
    ],
    "constraints": "`1 <= s.length <= 104`\n`s` consists of only lowercase English letters.\n\n`1 <= k <= 104`"
  },
  {
    "id": "542",
    "title": "01 Matrix",
    "difficulty": "Medium",
    "explanation": "Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\n\nThe distance between two adjacent cells is 1.\n\n\nExample 1: \nInput:\n[[0,0,0],\n [0,1,0],\n [0,0,0]]\nOutput:\n[[0,0,0],\n [0,1,0],\n [0,0,0]]\n\nExample 2: \nInput:\n[[0,0,0],\n [0,1,0],\n [1,1,1]]\nOutput:\n[[0,0,0],\n [0,1,0],\n [1,2,1]]\nNote:\nThe number of elements of the given matrix will not exceed 10,000.\n\nThere are at least one 0 in the given matrix.\n\nThe cells are adjacent in only four directions: up, down, left and right.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "543",
    "title": "Diameter of Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, return the length of the diameter of the tree.\n\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\nThe length of a path between two nodes is represented by the number of edges between them.",
    "examples": [
      "Input: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].",
      "Input: root = [1,2]\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-100 <= Node.val <= 100`"
  },
  {
    "id": "544",
    "title": "Output Contest Matches",
    "difficulty": "Medium",
    "explanation": "During the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. Now, you're given n teams, you need to output their final contest matches in the form of a string.\n\nThe n teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.",
    "examples": [
      "Input: 2\nOutput: (1,2)\nExplanation: \nInitially, we have the team 1 and the team 2, placed like: 1,2.\n\nThen we pair the team (1,2) together with '(', ')' and ',', which is the final answer.",
      "Input: 4\nOutput: ((1,4),(2,3))\nExplanation: \nIn the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.\n\nAnd we got (1,4),(2,3).\n\nIn the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.\n\nAnd we got the final answer ((1,4),(2,3)).",
      "Input: 8\nOutput: (((1,8),(4,5)),((2,7),(3,6)))\nExplanation: \nFirst round: (1,8),(2,7),(3,6),(4,5)\nSecond round: ((1,8),(4,5)),((2,7),(3,6))\nThird round: (((1,8),(4,5)),((2,7),(3,6)))\nSince the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).\n\nNote:\nThe n is in range [2, 212].\n\nWe ensure that the input n can be converted into the form 2k, where k is a positive integer."
    ],
    "constraints": ""
  },
  {
    "id": "545",
    "title": "Boundary of Binary Tree",
    "difficulty": "Medium",
    "explanation": "The boundary of a binary tree is the concatenation of the root, the left boundary, the leaves ordered from left-to-right, and the reverse order of the right boundary.\n\nThe left boundary is the set of nodes defined by the following:\nThe root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is empty.\n\nIf a node in the left boundary and has a left child, then the left child is in the left boundary.\n\nIf a node is in the left boundary, has no left child, but has a right child, then the right child is in the left boundary.\n\nThe leftmost leaf is not in the left boundary.\n\nThe right boundary is similar to the left boundary, except it is the right side of the root's right subtree. Again, the leaf is not part of the right boundary, and the right boundary is empty if the root does not have a right child.\n\nThe leaves are nodes that do not have any children. For this problem, the root is not a leaf.\n\nGiven the `root` of a binary tree, return the values of its boundary.",
    "examples": [
      "Input: root = [1,null,2,3,4]\nOutput: [1,3,4,2]\nExplanation:\n- The left boundary is empty because the root does not have a left child.\n\n- The right boundary follows the path starting from the root's right child 2 -> 4.\n\n  4 is a leaf, so the right boundary is [2].\n\n- The leaves from left to right are [3,4].\n\nConcatenating everything results in [1] + [] + [3,4] + [2] = [1,3,4,2].",
      "Input: root = [1,2,3,4,5,6,null,null,null,7,8,9,10]\nOutput: [1,2,4,7,8,9,10,6,3]\nExplanation:\n- The left boundary follows the path starting from the root's left child 2 -> 4.\n\n  4 is a leaf, so the left boundary is [2].\n\n- The right boundary follows the path starting from the root's right child 3 -> 6 -> 10.\n\n  10 is a leaf, so the right boundary is [3,6], and in reverse order is [6,3].\n\n- The leaves from left to right are [4,7,8,9,10].\n\nConcatenating everything results in [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3]."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "546",
    "title": "Remove Boxes",
    "difficulty": "Hard",
    "explanation": "You are given several `boxes` with different colors represented by different positive numbers.\n\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points.\n\nReturn the maximum points you can get.",
    "examples": [
      "Input: boxes = [1,3,2,2,2,3,4,3,1]\nOutput: 23\nExplanation:\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----> [1, 3, 3, 3, 1] (1*1=1 points) \n----> [1, 1] (3*3=9 points) \n----> [] (2*2=4 points)",
      "Input: boxes = [1,1,1]\nOutput: 9",
      "Input: boxes = [1]\nOutput: 1"
    ],
    "constraints": "`1 <= boxes.length <= 100`\n`1 <= boxes[i] <= 100`"
  },
  {
    "id": "547",
    "title": "Number of Provinces",
    "difficulty": "Medium",
    "explanation": "There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.\n\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\n\nYou are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.\n\nReturn the total number of provinces.",
    "examples": [
      "Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2",
      "Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3"
    ],
    "constraints": "`1 <= n <= 200`\n`n == isConnected.length`\n`n == isConnected[i].length`\n`isConnected[i][j]` is `1` or `0`.\n\n`isConnected[i][i] == 1`\n`isConnected[i][j] == isConnected[j][i]`"
  },
  {
    "id": "548",
    "title": "Split Array with Equal Sum",
    "difficulty": "Medium",
    "explanation": "Given an array with n integers, you need to find if there are triplets  (i, j, k) which satisfies following conditions:\n 0 < i, i + 1 < j, j + 1 < k < n - 1 \n Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. \nwhere we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.\n\n\nExample:\nInput: [1,2,1,2,1,2,1]\nOutput: True\nExplanation:\ni = 1, j = 3, k = 5. \nsum(0, i - 1) = sum(0, 0) = 1\nsum(i + 1, j - 1) = sum(2, 2) = 1\nsum(j + 1, k - 1) = sum(4, 4) = 1\nsum(k + 1, n - 1) = sum(6, 6) = 1\nNote:\n 1 <= n <= 2000. \n Elements in the given array will be in range [-1,000,000, 1,000,000].",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "549",
    "title": "Binary Tree Longest Consecutive Sequence II",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the length of the longest consecutive path in the tree.\n\nThis path can be either increasing or decreasing.\n\nFor example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid.\n\nOn the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.",
    "examples": [
      "Input: root = [1,2,3]\nOutput: 2\nExplanation: The longest consecutive path is [1, 2] or [2, 1].",
      "Input: root = [2,1,3]\nOutput: 3\nExplanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1]."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 3 * 104]`.\n\n`-3 * 104 <= Node.val <= 3 * 104`"
  },
  {
    "id": "550",
    "title": "Game Play Analysis IV",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "551",
    "title": "Student Attendance Record I",
    "difficulty": "Easy",
    "explanation": "You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n`'A'`: Absent.\n\n`'L'`: Late.\n\n`'P'`: Present.\n\nThe student is eligible for an attendance award if they meet both of the following criteria:\nThe student was absent (`'A'`) for strictly fewer than 2 days total.\n\nThe student was never late (`'L'`) for 3 or more consecutive days.\n\nReturn `true` if the student is eligible for an attendance award, or `false` otherwise.",
    "examples": [
      "Input: s = \"PPALLP\"\nOutput: true\nExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.",
      "Input: s = \"PPALLL\"\nOutput: false\nExplanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s[i]` is either `'A'`, `'L'`, or `'P'`."
  },
  {
    "id": "552",
    "title": "Student Attendance Record II",
    "difficulty": "Hard",
    "explanation": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n`'A'`: Absent.\n\n`'L'`: Late.\n\n`'P'`: Present.\n\nAny student is eligible for an attendance award if they meet both of the following criteria:\nThe student was absent (`'A'`) for strictly fewer than 2 days total.\n\nThe student was never late (`'L'`) for 3 or more consecutive days.\n\nGiven an integer `n`, return the number of possible attendance records of length `n` that make a student eligible for an attendance award. The answer may be very large, so return it modulo `109 + 7`.",
    "examples": [
      "Input: n = 2\nOutput: 8\nExplanation: There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).",
      "Input: n = 1\nOutput: 3",
      "Input: n = 10101\nOutput: 183236316"
    ],
    "constraints": "`1 <= n <= 105`"
  },
  {
    "id": "553",
    "title": "Optimal Division",
    "difficulty": "Medium",
    "explanation": "Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.\n\n\nExample:\nInput: [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation:\n1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\". \nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\nNote:\nThe length of the input array is [1, 10].\n\nElements in the given array will be in range [2, 1000].\n\nThere is only one optimal division for each test case.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "554",
    "title": "Brick Wall",
    "difficulty": "Medium",
    "explanation": "There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.\n\nThe brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.\n\nIf your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.\n\nYou cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. \n\nExample:\nInput: [[1,2,2,1],\n        [3,1,2],\n        [1,3,2],\n        [2,4],\n        [3,1,2],\n        [1,3,1,1]]\nOutput: 2\nExplanation: \nNote:\nThe width sum of bricks in different rows are the same and won't exceed INT_MAX.\n\nThe number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "555",
    "title": "Split Concatenated Strings",
    "difficulty": "Medium",
    "explanation": "Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.\n\nSpecifically, to find the lexicographically biggest string, you need to experience two phases: \nConcatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\n\nCut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. \nAnd your job is to find the lexicographically biggest one among all the possible regular strings.\n\n\nExample:\nInput: \"abc\", \"xyz\"\nOutput: \"zyxcba\"\nExplanation: You can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", where '-' represents the looped status. The answer string came from the fourth looped one, where you could cut from the middle character 'a' and get \"zyxcba\".\n\nNote:\nThe input strings will only contain lowercase letters.\n\nThe total length of all the strings will not over 1,000.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "556",
    "title": "Next Greater Element III",
    "difficulty": "Medium",
    "explanation": "Given a positive integer `n`, find the smallest integer which has exactly the same digits existing in the integer `n` and is greater in value than `n`. If no such positive integer exists, return `-1`.\n\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return `-1`.",
    "examples": [
      "Input: n = 12\nOutput: 21",
      "Input: n = 21\nOutput: -1"
    ],
    "constraints": "`1 <= n <= 231 - 1`"
  },
  {
    "id": "557",
    "title": "Reverse Words in a String III",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
    "examples": [
      "Input: s = \"Let's take LeetCode contest\"\nOutput: \"s'teL ekat edoCteeL tsetnoc\"",
      "Input: s = \"God Ding\"\nOutput: \"doG gniD\""
    ],
    "constraints": "`1 <= s.length <= 5 * 104`\n`s` contains printable ASCII characters.\n\n`s` does not contain any leading or trailing spaces.\n\nThere is at least one word in `s`.\n\nAll the words in `s` are separated by a single space."
  },
  {
    "id": "558",
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "difficulty": "Medium",
    "explanation": "A Binary Matrix is a matrix in which all the elements are either 0 or 1.\n\nGiven `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix. \nReturn a Quad-Tree representing the `n * n` binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by `quadTree1` and `quadTree2`.\n\nNotice that you can assign the value of a node to True or False when `isLeaf` is False, and both are accepted in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n`val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. \n`isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n\nIf the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n\nRecurse for each of the children with the proper sub-grid.\n\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\n\nQuad-Tree format:\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as 1 in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as 0.",
    "examples": [
      "Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\n\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\n\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.",
      "Input: quadTree1 = [[1,0]]\n, quadTree2 = [[1,0]]\nOutput: [[1,0]]\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\n\nThe resulting matrix is of size 1*1 with also zero.",
      "Input: quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]\nOutput: [[1,1]]",
      "Input: quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\nOutput: [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]",
      "Input: quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]"
    ],
    "constraints": "`quadTree1` and `quadTree2` are both valid Quad-Trees each representing a `n * n` grid.\n\n`n == 2^x` where `0 <= x <= 9`."
  },
  {
    "id": "559",
    "title": "Maximum Depth of N-ary Tree",
    "difficulty": "Easy",
    "explanation": "Given a n-ary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).",
    "examples": [
      "Input: root = [1,null,3,2,4,null,5,6]\nOutput: 3",
      "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5"
    ],
    "constraints": "The depth of the n-ary tree is less than or equal to `1000`.\n\nThe total number of nodes is between `[0, 104]`."
  },
  {
    "id": "560",
    "title": "Subarray Sum Equals K",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`.",
    "examples": [
      "Input: nums = [1,1,1], k = 2\nOutput: 2",
      "Input: nums = [1,2,3], k = 3\nOutput: 2"
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`-1000 <= nums[i] <= 1000`\n`-107 <= k <= 107`"
  },
  {
    "id": "561",
    "title": "Array Partition I",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.",
    "examples": [
      "Input: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.",
      "Input: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
    ],
    "constraints": "`1 <= n <= 104`\n`nums.length == 2 * n`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "562",
    "title": "Longest Line of Consecutive One in Matrix",
    "difficulty": "Medium",
    "explanation": "Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.\n\n\nExample:\nInput:\n[[0,1,1,0],\n [0,1,1,0],\n [0,0,0,1]]\nOutput: 3\nHint:\nThe number of elements in the given matrix will not exceed 10,000.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "563",
    "title": "Binary Tree Tilt",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, return the sum of every tree node's tilt.\n\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as `0`. The rule is similar if there the node does not have a right child.",
    "examples": [
      "Input: root = [1,2,3]\nOutput: 1\nExplanation: \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1",
      "Input: root = [4,2,9,3,5,null,7]\nOutput: 15\nExplanation: \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15",
      "Input: root = [21,7,14,1,1,2,2,3,3]\nOutput: 9"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-1000 <= Node.val <= 1000`"
  },
  {
    "id": "564",
    "title": "Find the Closest Palindrome",
    "difficulty": "Hard",
    "explanation": "Given an integer n, find the closest integer (not including itself), which is a palindrome. \nThe 'closest' is defined as absolute difference minimized between two integers.",
    "examples": [
      "Input: \"123\"\nOutput: \"121\"\nNote:\nThe input n is a positive integer represented by string, whose length will not exceed 18.\n\nIf there is a tie, return the smaller one as answer."
    ],
    "constraints": ""
  },
  {
    "id": "565",
    "title": "Array Nesting",
    "difficulty": "Medium",
    "explanation": "A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\n\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]... By that analogy, we stop adding right before a duplicate element occurs in S.",
    "examples": [
      "Input: A = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation: \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\nOne of the longest S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\nNote:\nN is an integer within the range [1, 20,000].\n\nThe elements of A are all distinct.\n\nEach element of A is an integer within the range [0, N-1]."
    ],
    "constraints": ""
  },
  {
    "id": "566",
    "title": "Reshape the Matrix",
    "difficulty": "Easy",
    "explanation": "In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.\n\nYou're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.\n\nThe reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.\n\nIf the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.",
    "examples": [
      "Input: \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\nOutput: \n[[1,2,3,4]]\nExplanation:The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.",
      "Input: \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\nOutput: \n[[1,2],\n [3,4]]\nExplanation:There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\n\nNote:\nThe height and width of the given matrix is in range [1, 100].\n\nThe given r and c are all positive."
    ],
    "constraints": ""
  },
  {
    "id": "567",
    "title": "Permutation in String",
    "difficulty": "Medium",
    "explanation": "Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.",
    "examples": [
      "Input: s1 = \"ab\" s2 = \"eidbaooo\"\nOutput: True\nExplanation: s2 contains one permutation of s1 (\"ba\").",
      "Input:s1= \"ab\" s2 = \"eidboaoo\"\nOutput: False"
    ],
    "constraints": "The input strings only contain lower case letters.\n\nThe length of both given strings is in range [1, 10,000]."
  },
  {
    "id": "568",
    "title": "Maximum Vacation Days",
    "difficulty": "Hard",
    "explanation": "LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n\nRules and restrictions:\nYou can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.\n\nThe cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.\n\nYou totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we don't consider the impact of flight time.\n\nFor each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.\n\nYou're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.",
    "examples": [
      "Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\nOutput: 12\nExplanation: Ans = 6 + 3 + 3 = 12. \nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. (Although you start at city 0, we could also fly to and start at other cities since it is Monday.) \n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n\n3rd week : stay at city 2, and play 3 days and work 4 days.",
      "Input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\nOutput: 3\nExplanation: Ans = 1 + 1 + 1 = 3. \nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. For each week, you only have one day to play and six days to work. So the maximum number of vacation days is 3.",
      "Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\nOutput: 21\nExplanation:Ans = 7 + 7 + 7 = 21\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days. \n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\n\nNote:\nN and K are positive integers, which are in the range of [1, 100].\n\nIn the matrix flights, all the values are integers in the range of [0, 1].\n\nIn the matrix days, all the values are integers in the range [0, 7].\n\nYou could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days.\n\nIf you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\n\nWe don't consider the impact of flight hours towards the calculation of vacation days."
    ],
    "constraints": ""
  },
  {
    "id": "569",
    "title": "Median Employee Salary",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "570",
    "title": "Managers with at Least 5 Direct Reports",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "571",
    "title": "Find Median Given Frequency of Numbers",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "572",
    "title": "Subtree of Another Tree",
    "difficulty": "Easy",
    "explanation": "Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.",
    "examples": [
      "Given tree s:\n     3\n    / \\\n   4   5\n  / \\\n 1   2\nGiven tree t:\n   4 \n  / \\\n 1   2\nReturn true, because t has the same structure and node values with a subtree of s.",
      "Given tree s:\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\nGiven tree t:\n   4\n  / \\\n 1   2\nReturn false."
    ],
    "constraints": ""
  },
  {
    "id": "573",
    "title": "Squirrel Simulation",
    "difficulty": "Medium",
    "explanation": "There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most one nut at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.",
    "examples": [
      "Input: \nHeight : 5\nWidth : 7\nTree position : [2,2]\nSquirrel : [4,4]\nNuts : [[3,0], [2,5]]\nOutput: 12\nExplanation:\n​​​​​\nNote:\nAll given positions won't overlap.\n\nThe squirrel can take at most one nut at one time.\n\nThe given positions of nuts have no order.\n\nHeight and width are positive integers. 3 <= height * width <= 10,000.\n\nThe given positions contain at least one nut, only one tree and one squirrel."
    ],
    "constraints": ""
  },
  {
    "id": "574",
    "title": "Winning Candidate",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "575",
    "title": "Distribute Candies",
    "difficulty": "Easy",
    "explanation": "Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.\n\nThe doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n\nGiven the integer array `candyType` of length `n`, return the maximum number of different types of candies she can eat if she only eats `n / 2` of them.",
    "examples": [
      "Input: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.",
      "Input: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.",
      "Input: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
    ],
    "constraints": "`n == candyType.length`\n`2 <= n <= 104`\n`n` is even.\n\n`-105 <= candyType[i] <= 105`"
  },
  {
    "id": "576",
    "title": "Out of Boundary Paths",
    "difficulty": "Medium",
    "explanation": "There is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.",
    "examples": [
      "Input: m = 2, n = 2, N = 2, i = 0, j = 0\nOutput: 6\nExplanation:",
      "Input: m = 1, n = 3, N = 3, i = 0, j = 1\nOutput: 12\nExplanation:\nNote:\nOnce you move the ball out of boundary, you cannot move it back.\n\nThe length and height of the grid is in range [1,50].\n\nN is in range [0,50]."
    ],
    "constraints": ""
  },
  {
    "id": "577",
    "title": "Employee Bonus",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "578",
    "title": "Get Highest Answer Rate Question",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "579",
    "title": "Find Cumulative Salary of an Employee",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "580",
    "title": "Count Student Number in Departments",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "581",
    "title": "Shortest Unsorted Continuous Subarray",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\n\nReturn the shortest such subarray and output its length.",
    "examples": [
      "Input: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.",
      "Input: nums = [1,2,3,4]\nOutput: 0",
      "Input: nums = [1]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-105 <= nums[i] <= 105`\nFollow up: Can you solve it in `O(n)` time complexity?"
  },
  {
    "id": "582",
    "title": "Kill Process",
    "difficulty": "Medium",
    "explanation": "You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process.\n\nEach process has only one parent process but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has no parent process (the root of the tree).\n\nWhen a process is killed, all of its children processes will also be killed.\n\nGiven an integer `kill` representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.",
    "examples": [
      "Input: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5\nOutput: [5,10]\nExplanation: The processes colored in red are the processes that should be killed.",
      "Input: pid = [1], ppid = [0], kill = 1\nOutput: [1]"
    ],
    "constraints": "`n == pid.length`\n`n == ppid.length`\n`1 <= n <= 5 * 104`\n`1 <= pid[i] <= 5 * 104`\n`0 <= ppid[i] <= 5 * 104`\nOnly one process has no parent.\n\nAll the values of `pid` are unique.\n\n`kill` is guaranteed to be in `pid`."
  },
  {
    "id": "583",
    "title": "Delete Operation for Two Strings",
    "difficulty": "Medium",
    "explanation": "Given two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same.\n\nIn one step, you can delete exactly one character in either string.",
    "examples": [
      "Input: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".",
      "Input: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4"
    ],
    "constraints": "`1 <= word1.length, word2.length <= 500`\n`word1` and `word2` consist of only lowercase English letters."
  },
  {
    "id": "584",
    "title": "Find Customer Referee",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "585",
    "title": "Investments in 2016",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "586",
    "title": "Customer Placing the Largest Number of Orders",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "587",
    "title": "Erect the Fence",
    "difficulty": "Hard",
    "explanation": "There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.",
    "examples": [
      "Input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\nExplanation:",
      "Input: [[1,2],[2,2],[4,2]]\nOutput: [[1,2],[2,2],[4,2]]\nExplanation:\nEven you only have trees in a line, you need to use rope to enclose them. \nNote:\nAll trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.\n\nAll input integers will range from 0 to 100.\n\nThe garden has at least one tree.\n\nAll coordinates are distinct.\n\nInput points have NO order. No order required for output.\ninput types have been changed on April 15, 2019. Please reset to default code definition to get new method signature."
    ],
    "constraints": ""
  },
  {
    "id": "588",
    "title": "Design In-Memory File System",
    "difficulty": "Hard",
    "explanation": "Design an in-memory file system to simulate the following functions:\n`ls`: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names in this directory. Your output (file and directory names together) should in lexicographic order.\n\n`mkdir`: Given a directory path that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type.\n\n`addContentToFile`: Given a file path and file content in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to append given content to original content. This function has void return type.\n\n`readContentFromFile`: Given a file path, return its content in string format.\n\n\nExample:\nInput: \n[\"FileSystem\",\"ls\",\"mkdir\",\"addContentToFile\",\"ls\",\"readContentFromFile\"]\n[[],[\"/\"],[\"/a/b/c\"],[\"/a/b/c/d\",\"hello\"],[\"/\"],[\"/a/b/c/d\"]]\nOutput:\n[null,[],null,null,[\"a\"],\"hello\"]\nExplanation:\nNote:\nYou can assume all file or directory paths are absolute paths which begin with `/` and do not end with `/` except that the path is just `\"/\"`.\n\nYou can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.\n\nYou can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "589",
    "title": "N-ary Tree Preorder Traversal",
    "difficulty": "Easy",
    "explanation": "Given the `root` of an n-ary tree, return the preorder traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",
    "examples": [
      "Input: root = [1,null,3,2,4,null,5,6]\nOutput: [1,3,5,6,2,4]",
      "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`0 <= Node.val <= 104`\nThe height of the n-ary tree is less than or equal to `1000`.\n\nFollow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "id": "590",
    "title": "N-ary Tree Postorder Traversal",
    "difficulty": "Easy",
    "explanation": "Given the `root` of an n-ary tree, return the postorder traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",
    "examples": [
      "Input: root = [1,null,3,2,4,null,5,6]\nOutput: [5,6,3,2,4,1]",
      "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`0 <= Node.val <= 104`\nThe height of the n-ary tree is less than or equal to `1000`.\n\nFollow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "id": "591",
    "title": "Tag Validator",
    "difficulty": "Hard",
    "explanation": "Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\n\nA closed tag (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\n\nA valid `TAG_NAME` only contain upper-case letters, and has length in range [1,9]. Otherwise, the `TAG_NAME` is invalid.\n\nA valid `TAG_CONTENT` may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is invalid.\n\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n\nA `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME  (not necessarily valid).\n\nThe cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the first subsequent `]]>`. \n`CDATA_CONTENT` may contain any characters. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. \n\nValid Code Examples:\nInput: \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\nOutput: True\nExplanation: \nThe code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.\n\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n\nInput: \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\nOutput: True\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\n\nstart_tag -> \"<DIV>\"\nend_tag -> \"</DIV>\"\ntag_content could also be separated into : text1|cdata|text2.\n\ntext1 -> \">>  ![cdata[]] \"\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\n\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\n\n\nInvalid Code Examples:\nInput: \"<A>  <B> </A>   </B>\"\nOutput: False\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n\nInput: \"<DIV>  div tag is not closed  <DIV>\"\nOutput: False\nInput: \"<DIV>  unmatched <  </DIV>\"\nOutput: False\nInput: \"<DIV> closed tags with invalid tag name  <b>123</b> </DIV>\"\nOutput: False\nInput: \"<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>\"\nOutput: False\nInput: \"<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>\"\nOutput: False\nNote:\nFor simplicity, you could assume the input code (including the any characters mentioned above) only contain `letters`, `digits`, `'<'`,`'>'`,`'/'`,`'!'`,`'['`,`']'` and `' '`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "592",
    "title": "Fraction Addition and Subtraction",
    "difficulty": "Medium",
    "explanation": "Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be irreducible fraction. If your final result is an integer, say `2`, you need to change it to the format of fraction that has denominator `1`. So in this case, `2` should be converted to `2/1`.",
    "examples": [
      "Input:\"-1/2+1/2\"\nOutput: \"0/1\"",
      "Input:\"-1/2+1/2+1/3\"\nOutput: \"1/3\"",
      "Input:\"1/3-1/2\"\nOutput: \"-1/6\"",
      "Input:\"5/3+1/3\"\nOutput: \"2/1\"\nNote:\nThe input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. So does the output.\n\nEach fraction (input and output) has format `±numerator/denominator`. If the first input fraction or the output is positive, then `'+'` will be omitted.\n\nThe input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.\n\nThe number of given fractions will be in the range [1,10].\n\nThe numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int."
    ],
    "constraints": ""
  },
  {
    "id": "593",
    "title": "Valid Square",
    "difficulty": "Medium",
    "explanation": "Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` if the four points construct a square.\n\nThe coordinate of a point `pi` is represented as `[xi, yi]`. The input is not given in any order.\n\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).",
    "examples": [
      "Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: true",
      "Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\nOutput: false",
      "Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\nOutput: true"
    ],
    "constraints": "`p1.length == p2.length == p3.length == p4.length == 2`\n`-104 <= xi, yi <= 104`"
  },
  {
    "id": "594",
    "title": "Longest Harmonious Subsequence",
    "difficulty": "Easy",
    "explanation": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly `1`.\n\nGiven an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences.\n\nA subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      "Input: nums = [1,3,2,2,5,2,3,7]\nOutput: 5\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].",
      "Input: nums = [1,2,3,4]\nOutput: 2",
      "Input: nums = [1,1,1,1]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "595",
    "title": "Big Countries",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "596",
    "title": "Classes More Than 5 Students",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "597",
    "title": "Friend Requests I: Overall Acceptance Rate",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "598",
    "title": "Range Addition II",
    "difficulty": "Easy",
    "explanation": "You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.\n\nCount and return the number of maximum integers in the matrix after performing all the operations.",
    "examples": [
      "Input: m = 3, n = 3, ops = [[2,2],[3,3]]\nOutput: 4\nExplanation: The maximum integer in M is 2, and there are four of it in M. So return 4.",
      "Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\nOutput: 4",
      "Input: m = 3, n = 3, ops = []\nOutput: 9"
    ],
    "constraints": "`1 <= m, n <= 4 * 104`\n`1 <= ops.length <= 104`\n`ops[i].length == 2`\n`1 <= ai <= m`\n`1 <= bi <= n`"
  },
  {
    "id": "599",
    "title": "Minimum Index Sum of Two Lists",
    "difficulty": "Easy",
    "explanation": "Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.\n\nYou need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.",
    "examples": [
      "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\nOutput: [\"Shogun\"]\nExplanation: The only restaurant they both like is \"Shogun\".",
      "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\nOutput: [\"Shogun\"]\nExplanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).",
      "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\nOutput: [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
      "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KNN\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\nOutput: [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
      "Input: list1 = [\"KFC\"], list2 = [\"KFC\"]\nOutput: [\"KFC\"]"
    ],
    "constraints": "`1 <= list1.length, list2.length <= 1000`\n`1 <= list1[i].length, list2[i].length <= 30`\n`list1[i]` and `list2[i]` consist of spaces `' '` and English letters.\n\nAll the stings of `list1` are unique.\n\nAll the stings of `list2` are unique."
  },
  {
    "id": "600",
    "title": "Non-negative Integers without Consecutive Ones",
    "difficulty": "Hard",
    "explanation": "Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.",
    "examples": [
      "Input: 5\nOutput: 5\nExplanation: \nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \nNote:\n1 <= n <= 109"
    ],
    "constraints": ""
  },
  {
    "id": "601",
    "title": "Human Traffic of Stadium",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "602",
    "title": "Friend Requests II: Who Has the Most Friends",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "603",
    "title": "Consecutive Available Seats",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "604",
    "title": "Design Compressed String Iterator",
    "difficulty": "Easy",
    "explanation": "Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n\nImplement the StringIterator class:\n`next()` Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.\n\n`hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.",
    "examples": [
      "Input\n[\"StringIterator\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"L1e2t1C1o1d1e1\"], [], [], [], [], [], [], [], [], []]\nOutput\n[null, \"L\", \"e\", \"e\", \"t\", \"C\", \"o\", true, \"d\", true]\nExplanation\nStringIterator stringIterator = new StringIterator(\"L1e2t1C1o1d1e1\");\nstringIterator.next(); // return \"L\"\nstringIterator.next(); // return \"e\"\nstringIterator.next(); // return \"e\"\nstringIterator.next(); // return \"t\"\nstringIterator.next(); // return \"C\"\nstringIterator.next(); // return \"o\"\nstringIterator.hasNext(); // return True\nstringIterator.next(); // return \"d\"\nstringIterator.hasNext(); // return True"
    ],
    "constraints": "`1 <= compressedString.length <= 1000`\n`compressedString` consists of lower-case an upper-case English letters and digits.\n\nThe number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`\nAt most `100` calls will be made to `next` and `hasNext`."
  },
  {
    "id": "605",
    "title": "Can Place Flowers",
    "difficulty": "Easy",
    "explanation": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\n\nGiven an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule.",
    "examples": [
      "Input: flowerbed = [1,0,0,0,1], n = 1\nOutput: true",
      "Input: flowerbed = [1,0,0,0,1], n = 2\nOutput: false"
    ],
    "constraints": "`1 <= flowerbed.length <= 2 * 104`\n`flowerbed[i]` is `0` or `1`.\n\nThere are no two adjacent flowers in `flowerbed`.\n\n`0 <= n <= flowerbed.length`"
  },
  {
    "id": "606",
    "title": "Construct String from Binary Tree",
    "difficulty": "Easy",
    "explanation": "You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.\n\nThe null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.",
    "examples": [
      "Input: Binary tree: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \nOutput: \"1(2(4))(3)\"\nExplanation: Originallay it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\".",
      "Input: Binary tree: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \nOutput: \"1(2()(4))(3)\"\nExplanation: Almost the same as the first example, except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output."
    ],
    "constraints": ""
  },
  {
    "id": "607",
    "title": "Sales Person",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "608",
    "title": "Tree Node",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "609",
    "title": "Find Duplicate File in System",
    "difficulty": "Medium",
    "explanation": "Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.\n\nA group of duplicate files consists of at least two files that have the same content.\n\nA single directory info string in the input list has the following format:\n`\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"`\nIt means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm\"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.\n\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n`\"directory_path/file_name.txt\"`",
    "examples": [
      "Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]",
      "Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]"
    ],
    "constraints": "`1 <= paths.length <= 2 * 104`\n`1 <= paths[i].length <= 3000`\n`1 <= sum(paths[i].length) <= 5 * 105`\n`paths[i]` consist of English letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`.\n\nYou may assume no files or directories share the same name in the same directory.\n\nYou may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.\n\nFollow up:\nImagine you are given a real file system, how will you search files? DFS or BFS?\nIf the file content is very large (GB level), how will you modify your solution?\nIf you can only read the file by 1kb each time, how will you modify your solution?\nWhat is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?\nHow to make sure the duplicated files you find are not false positive?"
  },
  {
    "id": "610",
    "title": "Triangle Judgement",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "611",
    "title": "Valid Triangle Number",
    "difficulty": "Medium",
    "explanation": "Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.",
    "examples": [
      "Input: [2,2,3,4]\nOutput: 3\nExplanation:\nValid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\nNote:\nThe length of the given array won't exceed 1000.\n\nThe integers in the given array are in the range of [0, 1000]."
    ],
    "constraints": ""
  },
  {
    "id": "612",
    "title": "Shortest Distance in a Plane",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "613",
    "title": "Shortest Distance in a Line",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "614",
    "title": "Second Degree Follower",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "615",
    "title": "Average Salary: Departments VS Company",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "616",
    "title": "Add Bold Tag in String",
    "difficulty": "Medium",
    "explanation": "Given a string s and a list of strings dict, you need to add a closed pair of bold tag `<b>` and `</b>` to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.",
    "examples": [
      "Input: \ns = \"abcxyz123\"\ndict = [\"abc\",\"123\"]\nOutput:\n\"<b>abc</b>xyz<b>123</b>\"",
      "Input: \ns = \"aaabbcc\"\ndict = [\"aaa\",\"aab\",\"bc\"]\nOutput:\n\"<b>aaabbc</b>c\""
    ],
    "constraints": "The given dict won't contain duplicates, and its length won't exceed 100.\n\nAll the strings in input have length in range [1, 1000].\n\nNote: This question is the same as 758: https://leetcode.com/problems/bold-words-in-string/"
  },
  {
    "id": "617",
    "title": "Merge Two Binary Trees",
    "difficulty": "Easy",
    "explanation": "You are given two binary trees `root1` and `root2`.\n\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\n\nReturn the merged tree.\n\nNote: The merging process must start from the root nodes of both trees.",
    "examples": [
      "Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]",
      "Input: root1 = [1], root2 = [1,2]\nOutput: [2,2]"
    ],
    "constraints": "The number of nodes in both trees is in the range `[0, 2000]`.\n\n`-104 <= Node.val <= 104`"
  },
  {
    "id": "618",
    "title": "Students Report By Geography",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "619",
    "title": "Biggest Single Number",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "620",
    "title": "Not Boring Movies",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "621",
    "title": "Task Scheduler",
    "difficulty": "Medium",
    "explanation": "Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\n\nHowever, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.\n\nReturn the least number of units of times that the CPU will take to finish all the given tasks.",
    "examples": [
      "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: \nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.",
      "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\n\nAnd so on.",
      "Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation: \nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A"
    ],
    "constraints": "`1 <= task.length <= 104`\n`tasks[i]` is upper-case English letter.\n\nThe integer `n` is in the range `[0, 100]`."
  },
  {
    "id": "622",
    "title": "Design Circular Queue",
    "difficulty": "Medium",
    "explanation": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\nImplementation the `MyCircularQueue` class:\n`MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.\n\n`int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.\n\n`int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.\n\n`boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.\n\n`boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.\n\n`boolean isEmpty()` Checks whether the circular queue is empty or not.\n\n`boolean isFull()` Checks whether the circular queue is full or not.",
    "examples": [
      "Input\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 3, true, true, true, 4]\nExplanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4"
    ],
    "constraints": "`1 <= k <= 1000`\n`0 <= value <= 1000`\nAt most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.\n\nFollow up: Could you solve the problem without using the built-in queue?"
  },
  {
    "id": "623",
    "title": "Add One Row to Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.\n\nNote that the `root` node is at depth `1`.\n\nThe adding rule is:\nGiven the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.\n\n`cur`'s original left subtree should be the left subtree of the new left subtree root.\n\n`cur`'s original right subtree should be the right subtree of the new right subtree root.\n\nIf `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.",
    "examples": [
      "Input: root = [4,2,6,3,1,5], val = 1, depth = 2\nOutput: [4,1,1,2,null,null,6,3,1,5]",
      "Input: root = [4,2,null,3,1], val = 1, depth = 3\nOutput: [4,2,null,1,1,3,null,null,1]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\nThe depth of the tree is in the range `[1, 104]`.\n\n`-100 <= Node.val <= 100`\n`-105 <= val <= 105`\n`1 <= depth <= the depth of tree + 1`"
  },
  {
    "id": "624",
    "title": "Maximum Distance in Arrays",
    "difficulty": "Medium",
    "explanation": "You are given `m` `arrays`, where each array is sorted in ascending order.\n\nYou can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.\n\nReturn the maximum distance.",
    "examples": [
      "Input: arrays = [[1,2,3],[4,5],[1,2,3]]\nOutput: 4\nExplanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.",
      "Input: arrays = [[1],[1]]\nOutput: 0",
      "Input: arrays = [[1],[2]]\nOutput: 1",
      "Input: arrays = [[1,4],[0,5]]\nOutput: 4"
    ],
    "constraints": "`m == arrays.length`\n`2 <= m <= 105`\n`1 <= arrays[i].length <= 500`\n`-104 <= arrays[i][j] <= 104`\n`arrays[i]` is sorted in ascending order.\n\nThere will be at most `105` integers in all the arrays."
  },
  {
    "id": "625",
    "title": "Minimum Factorization",
    "difficulty": "Medium",
    "explanation": "Given a positive integer `a`, find the smallest positive integer `b` whose multiplication of each digit equals to `a`. \nIf there is no answer or the answer is not fit in 32-bit signed integer, then return 0.\n\n\nExample 1\nInput:\n48 \nOutput:\n68\n\nExample 2\nInput: \n15\nOutput:\n35",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "626",
    "title": "Exchange Seats",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "627",
    "title": "Swap Salary",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "628",
    "title": "Maximum Product of Three Numbers",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums`, find three numbers whose product is maximum and return the maximum product.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: 6",
      "Input: nums = [1,2,3,4]\nOutput: 24",
      "Input: nums = [-1,-2,-3]\nOutput: -6"
    ],
    "constraints": "`3 <= nums.length <= 104`\n`-1000 <= nums[i] <= 1000`"
  },
  {
    "id": "629",
    "title": "K Inverse Pairs Array",
    "difficulty": "Hard",
    "explanation": "Given two integers `n` and `k`, find how many different arrays consist of numbers from `1` to `n` such that there are exactly `k` inverse pairs.\n\nWe define an inverse pair as following: For `ith` and `jth` element in the array, if `i` < `j` and `a[i]` > `a[j]` then it's an inverse pair; Otherwise, it's not.\n\nSince the answer may be very large, the answer should be modulo 109 + 7.",
    "examples": [
      "Input: n = 3, k = 0\nOutput: 1\nExplanation: \nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.",
      "Input: n = 3, k = 1\nOutput: 2\nExplanation: \nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n\nNote:\nThe integer `n` is in the range [1, 1000] and `k` is in the range [0, 1000]."
    ],
    "constraints": ""
  },
  {
    "id": "630",
    "title": "Course Schedule III",
    "difficulty": "Hard",
    "explanation": "There are `n` different online courses numbered from `1` to `n`. Each course has some duration(course length) `t` and closed on `dth` day. A course should be taken continuously for `t` days and must be finished before or on the `dth` day. You will start at the `1st` day.\n\nGiven `n` online courses represented by pairs `(t,d)`, your task is to find the maximal number of courses that can be taken.\n\n\nExample:\nInput: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\nOutput: 3\nExplanation: \nThere're totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\n\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n\nNote:\nThe integer 1 <= d, t, n <= 10,000.\n\nYou can't take two courses simultaneously.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "631",
    "title": "Design Excel Sum Formula",
    "difficulty": "Hard",
    "explanation": "Your task is to design the basic function of Excel and implement the function of sum formula.  Specifically, you need to implement the following functions:\n`Excel(int H, char W):` This is the constructor. The inputs represents the height and width of the Excel form. H is a positive integer, range from 1 to 26. It represents the height. W is a character range from 'A' to 'Z'. It represents that the width is the number of characters from 'A' to W. The Excel form content is represented by a height * width 2D integer array `C`, it should be initialized to zero. You should assume that the first row of `C` starts from 1, and the first column of `C` starts from 'A'.\n\n`void Set(int row, char column, int val):` Change the value at `C(row, column)` to be val.\n\n`int Get(int row, char column):` Return the value at `C(row, column)`.\n\n`int Sum(int row, char column, List of Strings : numbers):` This function calculate and set the value at `C(row, column)`, where the value should be the sum of cells represented by `numbers`. This function return the sum result at `C(row, column)`. This sum formula should exist until this cell is overlapped by another value or another sum formula.\n\n`numbers` is a list of strings that each string represent a cell or a range of cells. If the string represent a single cell, then it has the following format : `ColRow`. For example, \"F7\" represents the cell at (7, F). \nIf the string represent a range of cells, then it has the following format : `ColRow1:ColRow2`. The range will always be a rectangle, and ColRow1 represent the position of the top-left cell, and ColRow2 represents the position of the bottom-right cell.",
    "examples": [
      "Excel(3,\"C\"); \n// construct a 3*3 2D array with all zero.\n\n//   A B C\n// 1 0 0 0\n// 2 0 0 0\n// 3 0 0 0\nSet(1, \"A\", 2);\n// set C(1,\"A\") to be 2.\n\n//   A B C\n// 1 2 0 0\n// 2 0 0 0\n// 3 0 0 0\nSum(3, \"C\", [\"A1\", \"A1:B2\"]);\n// set C(3,\"C\") to be the sum of value at C(1,\"A\") and the values sum of the rectangle range whose top-left cell is C(1,\"A\") and bottom-right cell is C(2,\"B\"). Return 4. \n//   A B C\n// 1 2 0 0\n// 2 0 0 0\n// 3 0 0 4\nSet(2, \"B\", 2);\n// set C(2,\"B\") to be 2. Note C(3, \"C\") should also be changed.\n\n//   A B C\n// 1 2 0 0\n// 2 0 2 0\n// 3 0 0 6\nNote:\nYou could assume that there won't be any circular sum reference. For example, A1 = sum(B1) and B1 = sum(A1).\n\n The test cases are using double-quotes to represent a character.\n\nPlease remember to RESET your class variables declared in class Excel, as static/class variables are persisted across multiple test cases. Please see here for more details."
    ],
    "constraints": ""
  },
  {
    "id": "632",
    "title": "Smallest Range Covering Elements from K Lists",
    "difficulty": "Hard",
    "explanation": "You have `k` lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the `k` lists.\n\nWe define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` or `a < c` if `b - a == d - c`.",
    "examples": [
      "Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\nOutput: [20,24]\nExplanation: \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\n\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\n\nList 3: [5, 18, 22, 30], 22 is in range [20,24].",
      "Input: nums = [[1,2,3],[1,2,3],[1,2,3]]\nOutput: [1,1]",
      "Input: nums = [[10,10],[11,11]]\nOutput: [10,11]",
      "Input: nums = [[10],[11]]\nOutput: [10,11]",
      "Input: nums = [[1],[2],[3],[4],[5],[6],[7]]\nOutput: [1,7]"
    ],
    "constraints": "`nums.length == k`\n`1 <= k <= 3500`\n`1 <= nums[i].length <= 50`\n`-105 <= nums[i][j] <= 105`\n`nums[i]` is sorted in non-decreasing order."
  },
  {
    "id": "633",
    "title": "Sum of Square Numbers",
    "difficulty": "Medium",
    "explanation": "Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.",
    "examples": [
      "Input: c = 5\nOutput: true\nExplanation: 1 * 1 + 2 * 2 = 5",
      "Input: c = 3\nOutput: false",
      "Input: c = 4\nOutput: true",
      "Input: c = 2\nOutput: true",
      "Input: c = 1\nOutput: true"
    ],
    "constraints": "`0 <= c <= 231 - 1`"
  },
  {
    "id": "634",
    "title": "Find the Derangement of An Array",
    "difficulty": "Medium",
    "explanation": "In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\n\nThere's originally an array consisting of `n` integers from 1 to `n` in ascending order, you need to find the number of derangement it can generate.\n\nAlso, since the answer may be very large, you should return the output mod 109 + 7.",
    "examples": [
      "Input: 3\nOutput: 2\nExplanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\n\nNote:\n`n` is in the range of [1, 106]."
    ],
    "constraints": ""
  },
  {
    "id": "635",
    "title": "Design Log Storage System",
    "difficulty": "Medium",
    "explanation": "You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers.\n\nImplement the `LogSystem` class:\n`LogSystem()` Initializes the `LogSystem` object.\n\n`void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system.\n\n`int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = \"2017:01:01:23:59:59\"`, `end = \"2017:01:02:23:59:59\"`, and `granularity = \"Day\"` means that we need to find the logs within the inclusive range from Jan. 1st 2017 to Jan. 2nd 2017, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.",
    "examples": [
      "Input\n[\"LogSystem\", \"put\", \"put\", \"put\", \"retrieve\", \"retrieve\"]\n[[], [1, \"2017:01:01:23:59:59\"], [2, \"2017:01:01:22:59:59\"], [3, \"2016:01:01:00:00:00\"], [\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Year\"], [\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Hour\"]]\nOutput\n[null, null, null, null, [3, 2, 1], [2, 1]]\nExplanation\nLogSystem logSystem = new LogSystem();\nlogSystem.put(1, \"2017:01:01:23:59:59\");\nlogSystem.put(2, \"2017:01:01:22:59:59\");\nlogSystem.put(3, \"2016:01:01:00:00:00\");\n// return [3,2,1], because you need to return all logs between 2016 and 2017.\n\nlogSystem.retrieve(\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Year\");\n// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.\n\n// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.\n\nlogSystem.retrieve(\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Hour\");"
    ],
    "constraints": "`1 <= id <= 500`\n`2000 <= Year <= 2017`\n`1 <= Month <= 12`\n`1 <= Day <= 31`\n`0 <= Hour <= 23`\n`0 <= Minute, Second <= 59`\n`granularity` is one of the values `[\"Year\", \"Month\", \"Day\", \"Hour\", \"Minute\", \"Second\"]`.\n\nAt most `500` calls will be made to `put` and `retrieve`."
  },
  {
    "id": "636",
    "title": "Exclusive Time of Functions",
    "difficulty": "Medium",
    "explanation": "On a single-threaded CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.\n\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\n\nYou are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"`. For example, `\"0:start:3\"` means a function call with function ID `0` started at the beginning of timestamp `3`, and `\"1:end:2\"` means a function call with function ID `1` ended at the end of timestamp `2`. Note that a function can be called multiple times, possibly recursively.\n\nA function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the exclusive time is `2 + 1 = 3`.\n\nReturn the exclusive time of each function in an array, where the value at the `ith` index represents the exclusive time for the function with ID `i`.",
    "examples": [
      "Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\nOutput: [3,4]\nExplanation:\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\n\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\n\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\n\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.",
      "Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\nOutput: [8]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\n\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\n\nFunction 0 (initial call) resumes execution then immediately calls itself again.\n\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\n\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\n\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.",
      "Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\nOutput: [7,1]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\n\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\n\nFunction 0 (initial call) resumes execution then immediately calls function 1.\n\nFunction 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.\n\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\n\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.",
      "Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:7\",\"1:end:7\",\"0:end:8\"]\nOutput: [8,1]",
      "Input: n = 1, logs = [\"0:start:0\",\"0:end:0\"]\nOutput: [1]"
    ],
    "constraints": "`1 <= n <= 100`\n`1 <= logs.length <= 500`\n`0 <= function_id < n`\n`0 <= timestamp <= 109`\nNo two start events will happen at the same timestamp.\n\nNo two end events will happen at the same timestamp.\n\nEach function has an `\"end\"` log for each `\"start\"` log."
  },
  {
    "id": "637",
    "title": "Average of Levels in Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      "Input: root = [3,9,20,null,15,7]\nOutput: [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\n\nHence return [3, 14.5, 11].",
      "Input: root = [3,9,20,15,7]\nOutput: [3.00000,14.50000,11.00000]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-231 <= Node.val <= 231 - 1`"
  },
  {
    "id": "638",
    "title": "Shopping Offers",
    "difficulty": "Medium",
    "explanation": "In LeetCode Store, there are some kinds of items to sell. Each item has a price.\n\nHowever, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n\nYou are given the each item's price, a set of special offers, and the number we need to buy for each item.\n\nThe job is to output the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers.\n\nEach special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.\n\nYou could use any of special offers as many times as you want.",
    "examples": [
      "Input: [2,5], [[3,0,5],[1,2,10]], [3,2]\nOutput: 14\nExplanation: \nThere are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.",
      "Input: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\nOutput: 11\nExplanation: \nThe price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n\nNote:\nThere are at most 6 kinds of items, 100 special offers.\n\nFor each item, you need to buy at most 6 of them.\n\nYou are not allowed to buy more items than you want, even if that would lower the overall price."
    ],
    "constraints": ""
  },
  {
    "id": "639",
    "title": "Decode Ways II",
    "difficulty": "Hard",
    "explanation": "A message containing letters from `A-Z` can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n`\"AAJF\"` with the grouping `(1 1 10 6)`\n`\"KJF\"` with the grouping `(11 10 6)`\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\nIn addition to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `\"1*\"` may represent any of the encoded messages `\"11\"`, `\"12\"`, `\"13\"`, `\"14\"`, `\"15\"`, `\"16\"`, `\"17\"`, `\"18\"`, or `\"19\"`. Decoding `\"1*\"` is equivalent to decoding any of the encoded messages it can represent.\n\nGiven a string `s` containing digits and the `'*'` character, return the number of ways to decode it.\n\nSince the answer may be very large, return it modulo `109 + 7`.",
    "examples": [
      "Input: s = \"*\"\nOutput: 9\nExplanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\n\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\n\nHence, there are a total of 9 ways to decode \"*\".",
      "Input: s = \"1*\"\nOutput: 18\nExplanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\n\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\n\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".",
      "Input: s = \"2*\"\nOutput: 15\nExplanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\n\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\"."
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is a digit or `'*'`."
  },
  {
    "id": "640",
    "title": "Solve the Equation",
    "difficulty": "Medium",
    "explanation": "Solve a given equation and return the value of `x` in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable `x` and its coefficient.\n\nIf there is no solution for the equation, return \"No solution\".\n\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\n\nIf there is exactly one solution for the equation, we ensure that the value of `x` is an integer.",
    "examples": [
      "Input: \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"",
      "Input: \"x=x\"\nOutput: \"Infinite solutions\"",
      "Input: \"2x=x\"\nOutput: \"x=0\"",
      "Input: \"2x+3x-6x=x+2\"\nOutput: \"x=-1\"",
      "Input: \"x=x+2\"\nOutput: \"No solution\""
    ],
    "constraints": ""
  },
  {
    "id": "641",
    "title": "Design Circular Deque",
    "difficulty": "Medium",
    "explanation": "Design your implementation of the circular double-ended queue (deque).\n\nYour implementation should support following operations:\n`MyCircularDeque(k)`: Constructor, set the size of the deque to be k.\n\n`insertFront()`: Adds an item at the front of Deque. Return true if the operation is successful.\n\n`insertLast()`: Adds an item at the rear of Deque. Return true if the operation is successful.\n\n`deleteFront()`: Deletes an item from the front of Deque. Return true if the operation is successful.\n\n`deleteLast()`: Deletes an item from the rear of Deque. Return true if the operation is successful.\n\n`getFront()`: Gets the front item from the Deque. If the deque is empty, return -1.\n\n`getRear()`: Gets the last item from Deque. If the deque is empty, return -1.\n\n`isEmpty()`: Checks whether Deque is empty or not. \n`isFull()`: Checks whether Deque is full or not.\n\n\nExample:\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\ncircularDeque.insertLast(1);\t\t\t// return true\ncircularDeque.insertLast(2);\t\t\t// return true\ncircularDeque.insertFront(3);\t\t\t// return true\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\ncircularDeque.getRear();  \t\t\t// return 2\ncircularDeque.isFull();\t\t\t\t// return true\ncircularDeque.deleteLast();\t\t\t// return true\ncircularDeque.insertFront(4);\t\t\t// return true\ncircularDeque.getFront();\t\t\t// return 4\nNote:\nAll values will be in the range of [0, 1000].\n\nThe number of operations will be in the range of [1, 1000].\n\nPlease do not use the built-in Deque library.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "642",
    "title": "Design Search Autocomplete System",
    "difficulty": "Hard",
    "explanation": "Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character `'#'`). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:\nThe hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.\n\nThe returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).\n\nIf less than 3 hot sentences exist, then just return as many as you can.\n\nWhen the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.\n\nYour job is to implement the following functions:\nThe constructor function:\n`AutocompleteSystem(String[] sentences, int[] times):` This is the constructor. The input is historical data. `Sentences` is a string array consists of previously typed sentences. `Times` is the corresponding times a sentence has been typed. Your system should record these historical data.\n\nNow, the user wants to input a new sentence. The following function will provide the next character the user types:\n`List<String> input(char c):` The input `c` is the next character typed by the user. The character will only be lower-case letters (`'a'` to `'z'`), blank space (`' '`) or a special character (`'#'`). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.\n\n\nExample:\nOperation: AutocompleteSystem([\"i love you\", \"island\",\"ironman\", \"i love leetcode\"], [5,3,2,2])\nThe system have already tracked down the following sentences and their corresponding times:\n`\"i love you\"` : `5` times\n`\"island\"` : `3` times\n`\"ironman\"` : `2` times\n`\"i love leetcode\"` : `2` times\nNow, the user begins another search:\nOperation: input('i')\nOutput: [\"i love you\", \"island\",\"i love leetcode\"]\nExplanation:\nThere are four sentences that have prefix `\"i\"`. Among them, \"ironman\" and \"i love leetcode\" have same hot degree. Since `' '` has ASCII code 32 and `'r'` has ASCII code 114, \"i love leetcode\" should be in front of \"ironman\". Also we only need to output top 3 hot sentences, so \"ironman\" will be ignored.\n\nOperation: input(' ')\nOutput: [\"i love you\",\"i love leetcode\"]\nExplanation:\nThere are only two sentences that have prefix `\"i \"`.\n\nOperation: input('a')\nOutput: []\nExplanation:\nThere are no sentences that have prefix `\"i a\"`.\n\nOperation: input('#')\nOutput: []\nExplanation:\nThe user finished the input, the sentence `\"i a\"` should be saved as a historical sentence in system. And the following input will be counted as a new search.\n\nNote:\nThe input sentence will always start with a letter and end with '#', and only one blank space will exist between two words.\n\nThe number of complete sentences that to be searched won't exceed 100. The length of each sentence including those in the historical data won't exceed 100.\n\nPlease use double-quote instead of single-quote when you write test cases even for a character input.\n\nPlease remember to RESET your class variables declared in class AutocompleteSystem, as static/class variables are persisted across multiple test cases. Please see here for more details.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "643",
    "title": "Maximum Average Subarray I",
    "difficulty": "Easy",
    "explanation": "Given an array consisting of `n` integers, find the contiguous subarray of given length `k` that has the maximum average value. And you need to output the maximum average value.",
    "examples": [
      "Input: [1,12,-5,-6,50,3], k = 4\nOutput: 12.75\nExplanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\nNote:\n1 <= `k` <= `n` <= 30,000.\n\nElements of the given array will be in the range [-10,000, 10,000]."
    ],
    "constraints": ""
  },
  {
    "id": "644",
    "title": "Maximum Average Subarray II",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\nFind a contiguous subarray whose length is greater than or equal to `k` that has the maximum average value and return this value. Any answer with a calculation error less than `10-5` will be accepted.",
    "examples": [
      "Input: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation:\n- When the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75\n- When the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8\n- When the length is 6, averages are [9.16667] and the maximum average is 9.16667\nThe maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75\nNote that we do not consider the subarrays of length < 4.",
      "Input: nums = [5], k = 1\nOutput: 5.00000"
    ],
    "constraints": "`n == nums.length`\n`1 <= k <= n <= 104`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "645",
    "title": "Set Mismatch",
    "difficulty": "Easy",
    "explanation": "You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in repetition of one number and loss of another number.\n\nYou are given an integer array `nums` representing the data status of this set after the error.\n\nFind the number that occurs twice and the number that is missing and return them in the form of an array.",
    "examples": [
      "Input: nums = [1,2,2,4]\nOutput: [2,3]",
      "Input: nums = [1,1]\nOutput: [1,2]"
    ],
    "constraints": "`2 <= nums.length <= 104`\n`1 <= nums[i] <= 104`"
  },
  {
    "id": "646",
    "title": "Maximum Length of Pair Chain",
    "difficulty": "Medium",
    "explanation": "You are given `n` pairs of numbers. In every pair, the first number is always smaller than the second number.\n\nNow, we define a pair `(c, d)` can follow another pair `(a, b)` if and only if `b < c`. Chain of pairs can be formed in this fashion. \nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.",
    "examples": [
      "Input: [[1,2], [2,3], [3,4]]\nOutput: 2\nExplanation: The longest chain is [1,2] -> [3,4]\nNote:\nThe number of given pairs will be in the range [1, 1000]."
    ],
    "constraints": ""
  },
  {
    "id": "647",
    "title": "Palindromic Substrings",
    "difficulty": "Medium",
    "explanation": "Given a string, your task is to count how many palindromic substrings in this string.\n\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.",
    "examples": [
      "Input: \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".",
      "Input: \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\nNote:\nThe input string length won't exceed 1000."
    ],
    "constraints": ""
  },
  {
    "id": "648",
    "title": "Replace Words",
    "difficulty": "Medium",
    "explanation": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root `\"an\"` is followed by the successor word `\"other\"`, we can form a new word `\"another\"`.\n\nGiven a `dictionary` consisting of many roots and a `sentence` consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.\n\nReturn the `sentence` after the replacement.",
    "examples": [
      "Input: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\nOutput: \"the cat was rat by the bat\"",
      "Input: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\nOutput: \"a a b c\"",
      "Input: dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"\nOutput: \"a a a a a a a a bbb baba a\"",
      "Input: dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\nOutput: \"the cat was rat by the bat\"",
      "Input: dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"\nOutput: \"it is ab that this solution is ac\""
    ],
    "constraints": "`1 <= dictionary.length <= 1000`\n`1 <= dictionary[i].length <= 100`\n`dictionary[i]` consists of only lower-case letters.\n\n`1 <= sentence.length <= 10^6`\n`sentence` consists of only lower-case letters and spaces.\n\nThe number of words in `sentence` is in the range `[1, 1000]`\nThe length of each word in `sentence` is in the range `[1, 1000]`\nEach two consecutive words in `sentence` will be separated by exactly one space.\n\n`sentence` does not have leading or trailing spaces."
  },
  {
    "id": "649",
    "title": "Dota2 Senate",
    "difficulty": "Medium",
    "explanation": "In the world of Dota2, there are two parties: the `Radiant` and the `Dire`.\n\nThe Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise `one` of the two rights:\n`Ban one senator's right`:\n\tA senator can make another senator lose all his rights in this and all the following rounds.\n\n`Announce the victory`:\n\tIf this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.\n\nGiven a string representing each senator's party belonging. The character 'R' and 'D' represent the `Radiant` party and the `Dire` party respectively. Then if there are `n` senators, the size of the given string will be `n`.\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\nSuppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be `Radiant` or `Dire`.",
    "examples": [
      "Input: \"RD\"\nOutput: \"Radiant\"\nExplanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. \nAnd the second senator can't exercise any rights any more since his right has been banned. \nAnd in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.",
      "Input: \"RDD\"\nOutput: \"Dire\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in the round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in the round 1. \nAnd in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\nNote:\nThe length of the given string will in the range [1, 10,000]."
    ],
    "constraints": ""
  },
  {
    "id": "650",
    "title": "2 Keys Keyboard",
    "difficulty": "Medium",
    "explanation": "Initially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step:\n`Copy All`: You can copy all the characters present on the notepad (partial copy is not allowed).\n\n`Paste`: You can paste the characters which are copied last time.\n\nGiven a number `n`. You have to get exactly `n` 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get `n` 'A'.",
    "examples": [
      "Input: 3\nOutput: 3\nExplanation:\nIntitally, we have one character 'A'.\n\nIn step 1, we use Copy All operation.\n\nIn step 2, we use Paste operation to get 'AA'.\n\nIn step 3, we use Paste operation to get 'AAA'.\n\nNote:\nThe `n` will be in the range [1, 1000]."
    ],
    "constraints": ""
  },
  {
    "id": "651",
    "title": "4 Keys Keyboard",
    "difficulty": "Medium",
    "explanation": "Imagine you have a special keyboard with the following keys: \n`Key 1: (A)`:  Print one 'A' on screen.\n\n`Key 2: (Ctrl-A)`: Select the whole screen.\n\n`Key 3: (Ctrl-C)`: Copy selection to buffer.\n\n`Key 4: (Ctrl-V)`: Print buffer on screen appending it after what has already been printed. \nNow, you can only press the keyboard for N times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.",
    "examples": [
      "Input: N = 3\nOutput: 3\nExplanation: \nWe can at most get 3 A's on screen by pressing following key sequence:\nA, A, A",
      "Input: N = 7\nOutput: 9\nExplanation: \nWe can at most get 9 A's on screen by pressing following key sequence:\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\nNote:\n1 <= N <= 50 \nAnswers will be in the range of 32-bit signed integer."
    ],
    "constraints": ""
  },
  {
    "id": "652",
    "title": "Find Duplicate Subtrees",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return all duplicate subtrees.\n\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\n\nTwo trees are duplicate if they have the same structure with the same node values.",
    "examples": [
      "Input: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]",
      "Input: root = [2,1,1]\nOutput: [[1]]",
      "Input: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]"
    ],
    "constraints": "The number of the nodes in the tree will be in the range `[1, 10^4]`\n`-200 <= Node.val <= 200`"
  },
  {
    "id": "653",
    "title": "Two Sum IV - Input is a BST",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a Binary Search Tree and a target number `k`, return `true` if there exist two elements in the BST such that their sum is equal to the given target.",
    "examples": [
      "Input: root = [5,3,6,2,4,null,7], k = 9\nOutput: true",
      "Input: root = [5,3,6,2,4,null,7], k = 28\nOutput: false",
      "Input: root = [2,1,3], k = 4\nOutput: true",
      "Input: root = [2,1,3], k = 1\nOutput: false",
      "Input: root = [2,1,3], k = 3\nOutput: true"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-104 <= Node.val <= 104`\n`root` is guaranteed to be a valid binary search tree.\n\n`-105 <= k <= 105`"
  },
  {
    "id": "654",
    "title": "Maximum Binary Tree",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` with no duplicates. A maximum binary tree can be built recursively from `nums` using the following algorithm:\nCreate a root node whose value is the maximum value in `nums`.\n\nRecursively build the left subtree on the subarray prefix to the left of the maximum value.\n\nRecursively build the right subtree on the subarray suffix to the right of the maximum value.\n\nReturn the maximum binary tree built from `nums`.",
    "examples": [
      "Input: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\nExplanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n\n        - Empty array, so no child.\n\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n\n            - Empty array, so no child.\n\n            - Only one element, so child is a node with value 1.\n\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n\n        - Only one element, so child is a node with value 0.\n\n        - Empty array, so no child.",
      "Input: nums = [3,2,1]\nOutput: [3,null,2,null,1]"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`0 <= nums[i] <= 1000`\nAll integers in `nums` are unique."
  },
  {
    "id": "655",
    "title": "Print Binary Tree",
    "difficulty": "Medium",
    "explanation": "Print a binary tree in an m*n 2D string array following these rules: \nThe row number `m` should be equal to the height of the given binary tree.\n\nThe column number `n` should always be an odd number.\n\nThe root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them. \nEach unused space should contain an empty string `\"\"`.\n\nPrint the subtrees following the same rules.",
    "examples": [
      "Input:\n     1\n    /\n   2\nOutput:\n[[\"\", \"1\", \"\"],\n [\"2\", \"\", \"\"]]",
      "Input:\n     1\n    / \\\n   2   3\n    \\\n     4\nOutput:\n[[\"\", \"\", \"\", \"1\", \"\", \"\", \"\"],\n [\"\", \"2\", \"\", \"\", \"\", \"3\", \"\"],\n [\"\", \"\", \"4\", \"\", \"\", \"\", \"\"]]",
      "Input:\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \nOutput:\n[[\"\",  \"\",  \"\", \"\",  \"\", \"\", \"\", \"1\", \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\n [\"\",  \"\",  \"\", \"2\", \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"5\", \"\", \"\", \"\"]\n [\"\",  \"3\", \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\n [\"4\", \"\",  \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]]\nNote:\nThe height of binary tree is in the range of [1, 10]."
    ],
    "constraints": ""
  },
  {
    "id": "656",
    "title": "Coin Path",
    "difficulty": "Hard",
    "explanation": "Given an array `A` (index starts at `1`) consisting of N integers: A1, A2, ..., AN and an integer `B`. The integer `B` denotes that from any place (suppose the index is `i`) in the array `A`, you can jump to any one of the place in the array `A` indexed `i+1`, `i+2`, ..., `i+B` if this place can be jumped to. Also, if you step on the index `i`, you have to pay Ai coins. If Ai is -1, it means you can’t jump to the place indexed `i` in the array.\n\nNow, you start from the place indexed `1` in the array `A`, and your aim is to reach the place indexed `N` using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed `N` using minimum coins.\n\nIf there are multiple paths with the same cost, return the lexicographically smallest such path.\n\nIf it's not possible to reach the place indexed N then you need to return an empty array.",
    "examples": [
      "Input: [1,2,4,-1,2], 2\nOutput: [1,3,5]",
      "Input: [1,2,4,-1,2], 1\nOutput: []\nNote:\nPath Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first `i` where Pai and Pbi differ, Pai < Pbi; when no such `i` exists, then `n` < `m`.\n\nA1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].\n\nLength of A is in the range of [1, 1000].\n\nB is in the range of [1, 100]."
    ],
    "constraints": ""
  },
  {
    "id": "657",
    "title": "Robot Return to Origin",
    "difficulty": "Easy",
    "explanation": "There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\n\nThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\n\nNote: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.",
    "examples": [
      "Input: moves = \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.",
      "Input: moves = \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.",
      "Input: moves = \"RRDD\"\nOutput: false",
      "Input: moves = \"LDRRLRUULR\"\nOutput: false"
    ],
    "constraints": "`1 <= moves.length <= 2 * 104`\n`moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`."
  },
  {
    "id": "658",
    "title": "Find K Closest Elements",
    "difficulty": "Medium",
    "explanation": "Given a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.\n\nAn integer `a` is closer to `x` than an integer `b` if:\n`|a - x| < |b - x|`, or\n`|a - x| == |b - x|` and `a < b`",
    "examples": [
      "Input: arr = [1,2,3,4,5], k = 4, x = 3\nOutput: [1,2,3,4]",
      "Input: arr = [1,2,3,4,5], k = 4, x = -1\nOutput: [1,2,3,4]"
    ],
    "constraints": "`1 <= k <= arr.length`\n`1 <= arr.length <= 104`\n`arr` is sorted in ascending order.\n\n`-104 <= arr[i], x <= 104`"
  },
  {
    "id": "659",
    "title": "Split Array into Consecutive Subsequences",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` that is sorted in ascending order, return `true` if and only if you can split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least `3`.",
    "examples": [
      "Input: nums = [1,2,3,3,4,5]\nOutput: true\nExplanation:\nYou can split them into two consecutive subsequences : \n1, 2, 3\n3, 4, 5",
      "Input: nums = [1,2,3,3,4,4,5,5]\nOutput: true\nExplanation:\nYou can split them into two consecutive subsequences : \n1, 2, 3, 4, 5\n3, 4, 5",
      "Input: nums = [1,2,3,4,4,5]\nOutput: false"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-1000 <= nums[i] <= 1000`\n`nums` is sorted in an ascending order."
  },
  {
    "id": "660",
    "title": "Remove 9",
    "difficulty": "Hard",
    "explanation": "Start from integer 1, remove any integer that contains 9 such as 9, 19, 29...\n\nSo now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...\n\nGiven a positive integer `n`, you need to return the n-th integer after removing. Note that 1 will be the first integer.",
    "examples": [
      "Input: n = 9\nOutput: 10"
    ],
    "constraints": "`1 <= n <= 8 x 10^8`"
  },
  {
    "id": "661",
    "title": "Image Smoother",
    "difficulty": "Easy",
    "explanation": "Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.",
    "examples": [
      "Input:\n[[1,1,1],\n [1,0,1],\n [1,1,1]]\nOutput:\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\nExplanation:\nFor the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\nNote:\nThe value in the given matrix is in the range of [0, 255].\n\nThe length and width of the given matrix are in the range of [1, 150]."
    ],
    "constraints": ""
  },
  {
    "id": "662",
    "title": "Maximum Width of Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.\n\nThe width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the `null` nodes between the end-nodes are also counted into the length calculation.\n\nIt is guaranteed that the answer will in the range of 32-bit signed integer.",
    "examples": [
      "Input: \n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \nOutput: 4\nExplanation: The maximum width existing in the third level with the length 4 (5,3,null,9).",
      "Input: \n          1\n         /  \n        3    \n       / \\       \n      5   3     \nOutput: 2\nExplanation: The maximum width existing in the third level with the length 2 (5,3).",
      "Input: \n          1\n         / \\\n        3   2 \n       /        \n      5      \nOutput: 2\nExplanation: The maximum width existing in the second level with the length 2 (3,2).",
      "Input: \n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\nOutput: 8\nExplanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7)."
    ],
    "constraints": "The given binary tree will have between `1` and `3000` nodes."
  },
  {
    "id": "663",
    "title": "Equal Tree Partition",
    "difficulty": "Medium",
    "explanation": "Given a binary tree with `n` nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing exactly one edge on the original tree.",
    "examples": [
      "Input:     \n    5\n   / \\\n  10 10\n    /  \\\n   2   3\nOutput: True\nExplanation: \n    5\n   / \n  10\n      \nSum: 15\n   10\n  /  \\\n 2    3\nSum: 15",
      "Input:     \n    1\n   / \\\n  2  10\n    /  \\\n   2   20\nOutput: False\nExplanation: You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.\n\nNote:\nThe range of tree node value is in the range of [-100000, 100000].\n\n1 <= n <= 10000"
    ],
    "constraints": ""
  },
  {
    "id": "664",
    "title": "Strange Printer",
    "difficulty": "Hard",
    "explanation": "There is a strange printer with the following two special requirements:\nThe printer can only print a sequence of the same character each time.\n\nAt each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\n\nGiven a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.",
    "examples": [
      "Input: \"aaabbb\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"bbb\".",
      "Input: \"aba\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\n\nHint: Length of the given string will not exceed 100."
    ],
    "constraints": ""
  },
  {
    "id": "665",
    "title": "Non-decreasing Array",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying at most one element.\n\nWe define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (0-based) such that (`0 <= i <= n - 2`).",
    "examples": [
      "Input: nums = [4,2,3]\nOutput: true\nExplanation: You could modify the first `4` to `1` to get a non-decreasing array.",
      "Input: nums = [4,2,1]\nOutput: false\nExplanation: You can't get a non-decreasing array by modify at most one element."
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 104`\n`-105 <= nums[i] <= 105`"
  },
  {
    "id": "666",
    "title": "Path Sum IV",
    "difficulty": "Medium",
    "explanation": "If the depth of a tree is smaller than `5`, then this tree can be represented by a list of three-digits integers.\n\nFor each integer in this list:\nThe hundreds digit represents the depth `D` of this node, `1 <= D <= 4.`\nThe tens digit represents the position `P` of this node in the level it belongs to, `1 <= P <= 8`. The position is the same as that in a full binary tree.\n\nThe units digit represents the value `V` of this node, `0 <= V <= 9.`\nGiven a list of `ascending` three-digits integers representing a binary tree with the depth smaller than 5, you need to return the sum of all paths from the root towards the leaves.\n\nIt's guaranteed that the given list represents a valid connected binary tree.",
    "examples": [
      "Input: [113, 215, 221]\nOutput: 12\nExplanation: \nThe tree that the list represents is:\n    3\n   / \\\n  5   1\nThe path sum is (3 + 5) + (3 + 1) = 12.",
      "Input: [113, 221]\nOutput: 4\nExplanation: \nThe tree that the list represents is: \n    3\n     \\\n      1\nThe path sum is (3 + 1) = 4."
    ],
    "constraints": ""
  },
  {
    "id": "667",
    "title": "Beautiful Arrangement II",
    "difficulty": "Medium",
    "explanation": "Given two integers `n` and `k`, you need to construct a list which contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: \nSuppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly `k` distinct integers.\n\nIf there are multiple answers, print any of them.",
    "examples": [
      "Input: n = 3, k = 1\nOutput: [1, 2, 3]\nExplanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.",
      "Input: n = 3, k = 2\nOutput: [1, 3, 2]\nExplanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.\n\nNote:\nThe `n` and `k` are in the range 1 <= k < n <= 104."
    ],
    "constraints": ""
  },
  {
    "id": "668",
    "title": "Kth Smallest Number in Multiplication Table",
    "difficulty": "Hard",
    "explanation": "Nearly every one have used the Multiplication Table. But could you find out the `k-th` smallest number quickly from the multiplication table?\nGiven the height `m` and the length `n` of a `m * n` Multiplication Table, and a positive integer `k`, you need to return the `k-th` smallest number in this table.",
    "examples": [
      "Input: m = 3, n = 3, k = 5\nOutput: \nExplanation: \nThe Multiplication Table:\n1\t2\t3\n2\t4\t6\n3\t6\t9\nThe 5-th smallest number is 3 (1, 2, 2, 3, 3).",
      "Input: m = 2, n = 3, k = 6\nOutput: \nExplanation: \nThe Multiplication Table:\n1\t2\t3\n2\t4\t6\nThe 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).\n\nNote:\nThe `m` and `n` will be in the range [1, 30000].\n\nThe `k` will be in the range [1, m * n]"
    ],
    "constraints": ""
  },
  {
    "id": "669",
    "title": "Trim a Binary Search Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\n\nReturn the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.",
    "examples": [
      "Input: root = [1,0,2], low = 1, high = 2\nOutput: [1,null,2]",
      "Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\nOutput: [3,2,null,1]",
      "Input: root = [1], low = 1, high = 2\nOutput: [1]",
      "Input: root = [1,null,2], low = 1, high = 3\nOutput: [1,null,2]",
      "Input: root = [1,null,2], low = 2, high = 4\nOutput: [2]"
    ],
    "constraints": "The number of nodes in the tree in the range `[1, 104]`.\n\n`0 <= Node.val <= 104`\nThe value of each node in the tree is unique.\n\n`root` is guaranteed to be a valid binary search tree.\n\n`0 <= low <= high <= 104`"
  },
  {
    "id": "670",
    "title": "Maximum Swap",
    "difficulty": "Medium",
    "explanation": "Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.",
    "examples": [
      "Input: 2736\nOutput: 7236\nExplanation: Swap the number 2 and the number 7.",
      "Input: 9973\nOutput: 9973\nExplanation: No swap.\n\nNote:\nThe given number is in the range [0, 108]"
    ],
    "constraints": ""
  },
  {
    "id": "671",
    "title": "Second Minimum Node In a Binary Tree",
    "difficulty": "Easy",
    "explanation": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds.\n\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.",
    "examples": [
      "Input: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.",
      "Input: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 25]`.\n\n`1 <= Node.val <= 231 - 1`\n`root.val == min(root.left.val, root.right.val)` for each internal node of the tree."
  },
  {
    "id": "672",
    "title": "Bulb Switcher II",
    "difficulty": "Medium",
    "explanation": "There is a room with `n` lights which are turned on initially and 4 buttons on the wall. After performing exactly `m` unknown operations towards buttons, you need to return how many different kinds of status of the `n` lights could be.\n\nSuppose `n` lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:\nFlip all the lights.\n\nFlip lights with even numbers.\n\nFlip lights with odd numbers.\n\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...",
    "examples": [
      "Input: n = 1, m = 1.\nOutput: 2\nExplanation: Status can be: [on], [off]",
      "Input: n = 2, m = 1.\nOutput: 3\nExplanation: Status can be: [on, off], [off, on], [off, off]",
      "Input: n = 3, m = 1.\nOutput: 4\nExplanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\n\nNote: `n` and `m` both fit in range [0, 1000]."
    ],
    "constraints": ""
  },
  {
    "id": "673",
    "title": "Number of Longest Increasing Subsequence",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, return the number of longest increasing subsequences.\n\nNotice that the sequence has to be strictly increasing.",
    "examples": [
      "Input: nums = [1,3,5,4,7]\nOutput: 2\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].",
      "Input: nums = [2,2,2,2,2]\nOutput: 5\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5."
    ],
    "constraints": "`1 <= nums.length <= 2000`\n`-106 <= nums[i] <= 106`"
  },
  {
    "id": "674",
    "title": "Longest Continuous Increasing Subsequence",
    "difficulty": "Easy",
    "explanation": "Given an unsorted array of integers `nums`, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\n\nA continuous increasing subsequence is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.",
    "examples": [
      "Input: nums = [1,3,5,4,7]\nOutput: 3\nExplanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\n\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.",
      "Input: nums = [2,2,2,2,2]\nOutput: 1\nExplanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing."
    ],
    "constraints": "`0 <= nums.length <= 104`\n`-109 <= nums[i] <= 109`"
  },
  {
    "id": "675",
    "title": "Cut Off Trees for Golf Event",
    "difficulty": "Hard",
    "explanation": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:\n`0` means the cell cannot be walked through.\n\n`1` represents an empty cell that can be walked through.\n\nA number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).\n\nStarting from the point `(0, 0)`, return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return `-1`.\n\nYou are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.",
    "examples": [
      "Input: forest = [[1,2,3],[0,0,4],[7,6,5]]\nOutput: 6\nExplanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.",
      "Input: forest = [[1,2,3],[0,0,0],[7,6,5]]\nOutput: -1\nExplanation: The trees in the bottom row cannot be accessed as the middle row is blocked.",
      "Input: forest = [[2,3,4],[0,0,5],[8,7,6]]\nOutput: 6\n\nExplanation: You can follow the same path as Example 1 to cut off all the trees.\n\nNote that you can cut off the first tree at (0, 0) before making any steps."
    ],
    "constraints": "`m == forest.length`\n`n == forest[i].length`\n`1 <= m, n <= 50`\n`0 <= forest[i][j] <= 109`"
  },
  {
    "id": "676",
    "title": "Implement Magic Dictionary",
    "difficulty": "Medium",
    "explanation": "Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n\nImplement the `MagicDictionary` class:\n`MagicDictionary()` Initializes the object.\n\n`void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.\n\n`bool search(String searchWord)` Returns `true` if you can change exactly one character in `searchWord` to match any string in the data structure, otherwise returns `false`.",
    "examples": [
      "Input\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\nOutput\n[null, null, false, true, false, false]\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False"
    ],
    "constraints": "`1 <= dictionary.length <= 100`\n`1 <= dictionary[i].length <= 100`\n`dictionary[i]` consists of only lower-case English letters.\n\nAll the strings in `dictionary` are distinct.\n\n`1 <= searchWord.length <= 100`\n`searchWord` consists of only lower-case English letters.\n\n`buildDict` will be called only once before `search`.\n\nAt most `100` calls will be made to `search`."
  },
  {
    "id": "677",
    "title": "Map Sum Pairs",
    "difficulty": "Medium",
    "explanation": "Implement the `MapSum` class:\n`MapSum()` Initializes the `MapSum` object.\n\n`void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.\n\n`int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.",
    "examples": [
      "Input\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\nOutput\n[null, null, 3, null, 5]\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)"
    ],
    "constraints": "`1 <= key.length, prefix.length <= 50`\n`key` and `prefix` consist of only lowercase English letters.\n\n`1 <= val <= 1000`\nAt most `50` calls will be made to `insert` and `sum`."
  },
  {
    "id": "678",
    "title": "Valid Parenthesis String",
    "difficulty": "Medium",
    "explanation": "Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` if `s` is valid.\n\nThe following rules define a valid string:\nAny left parenthesis `'('` must have a corresponding right parenthesis `')'`.\n\nAny right parenthesis `')'` must have a corresponding left parenthesis `'('`.\n\nLeft parenthesis `'('` must go before the corresponding right parenthesis `')'`.\n\n`'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\"\"`.",
    "examples": [
      "Input: s = \"()\"\nOutput: true",
      "Input: s = \"(*)\"\nOutput: true",
      "Input: s = \"(*))\"\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 100`\n`s[i]` is `'('`, `')'` or `'*'`."
  },
  {
    "id": "679",
    "title": "24 Game",
    "difficulty": "Hard",
    "explanation": "You have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through `*`, `/`, `+`, `-`, `(`, `)` to get the value of 24.",
    "examples": [
      "Input: [4, 1, 8, 7]\nOutput: True\nExplanation: (8-4) * (7-1) = 24",
      "Input: [1, 2, 1, 2]\nOutput: False\nNote:\nThe division operator `/` represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.\n\nEvery operation done is between two numbers.  In particular, we cannot use `-` as a unary operator.  For example, with `[1, 1, 1, 1]` as input, the expression `-1 - 1 - 1 - 1` is not allowed.\n\nYou cannot concatenate numbers together.  For example, if the input is `[1, 2, 1, 2]`, we cannot write this as 12 + 12."
    ],
    "constraints": ""
  },
  {
    "id": "680",
    "title": "Valid Palindrome II",
    "difficulty": "Easy",
    "explanation": "Given a non-empty string `s`, you may delete at most one character.  Judge whether you can make it a palindrome.",
    "examples": [
      "Input: \"aba\"\nOutput: True",
      "Input: \"abca\"\nOutput: True\nExplanation: You could delete the character 'c'.\n\nNote:\nThe string will only contain lowercase characters a-z.\n\nThe maximum length of the string is 50000."
    ],
    "constraints": ""
  },
  {
    "id": "681",
    "title": "Next Closest Time",
    "difficulty": "Medium",
    "explanation": "Given a `time` represented in the format `\"HH:MM\"`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\n\nYou may assume the given input string is always valid. For example, `\"01:34\"`, `\"12:09\"` are all valid. `\"1:34\"`, `\"12:9\"` are all invalid.",
    "examples": [
      "Input: time = \"19:34\"\nOutput: \"19:39\"\nExplanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.\n\nIt is not 19:33, because this occurs 23 hours and 59 minutes later.",
      "Input: time = \"23:59\"\nOutput: \"22:22\"\nExplanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.\n\nIt may be assumed that the returned time is next day's time since it is smaller than the input time numerically."
    ],
    "constraints": "`time.length == 5`\n`time` is a valid time in the form `\"HH:MM\"`.\n\n`0 <= HH < 24`\n`0 <= MM < 60`"
  },
  {
    "id": "682",
    "title": "Baseball Game",
    "difficulty": "Easy",
    "explanation": "You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.\n\nAt the beginning of the game, you start with an empty record. You are given a list of strings `ops`, where `ops[i]` is the `ith` operation you must apply to the record and is one of the following:\nAn integer `x` - Record a new score of `x`.\n\n`\"+\"` - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\n\n`\"D\"` - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\n\n`\"C\"` - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\n\nReturn the sum of all the scores on the record.",
    "examples": [
      "Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\n\"2\" - Add 2 to the record, record is now [5, 2].\n\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\n\nThe total sum is 5 + 10 + 15 = 30.",
      "Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\n\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.",
      "Input: ops = [\"1\"]\nOutput: 1"
    ],
    "constraints": "`1 <= ops.length <= 1000`\n`ops[i]` is `\"C\"`, `\"D\"`, `\"+\"`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.\n\nFor operation `\"+\"`, there will always be at least two previous scores on the record.\n\nFor operations `\"C\"` and `\"D\"`, there will always be at least one previous score on the record."
  },
  {
    "id": "683",
    "title": "K Empty Slots",
    "difficulty": "Hard",
    "explanation": "You have `n` bulbs in a row numbered from `1` to `n`. Initially, all the bulbs are turned off. We turn on exactly one bulb every day until all bulbs are on after `n` days.\n\nYou are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is 0-indexed and `x` is 1-indexed.\n\nGiven an integer `k`, return the minimum day number such that there exists two turned on bulbs that have exactly `k` bulbs between them that are all turned off. If there isn't such day, return `-1`.",
    "examples": [
      "Input: bulbs = [1,3,2], k = 1\nOutput: 2\nExplanation:\nOn the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]\nOn the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]\nOn the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]\nWe return 2 because on the second day, there were two on bulbs with one off bulb between them.",
      "Input: bulbs = [1,2,3], k = 1\nOutput: -1"
    ],
    "constraints": "`n == bulbs.length`\n`1 <= n <= 2 * 104`\n`1 <= bulbs[i] <= n`\n`bulbs` is a permutation of numbers from `1` to `n`.\n\n`0 <= k <= 2 * 104`"
  },
  {
    "id": "684",
    "title": "Redundant Connection",
    "difficulty": "Medium",
    "explanation": "In this problem, a tree is an undirected graph that is connected and has no cycles.\n\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of `edges`.  Each element of `edges` is a pair `[u, v]` with `u < v`, that represents an undirected edge connecting nodes `u` and `v`.\n\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge `[u, v]` should be in the same format, with `u < v`.",
    "examples": [
      "Input: [[1,2], [1,3], [2,3]]\nOutput: [2,3]\nExplanation: The given undirected graph will be like this:\n  1\n / \\\n2 - 3",
      "Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]\nOutput: [1,4]\nExplanation: The given undirected graph will be like this:\n5 - 1 - 2\n    |   |\n    4 - 3\nNote:\nThe size of the input 2D-array will be between 3 and 1000.\n\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.\n\nUpdate (2017-09-26):\nWe have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused."
    ],
    "constraints": ""
  },
  {
    "id": "685",
    "title": "Redundant Connection II",
    "difficulty": "Hard",
    "explanation": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n\nThe given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a directed edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`.\n\nReturn an edge that can be removed so that the resulting graph is a rooted tree of `n` nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.",
    "examples": [
      "Input: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]",
      "Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\nOutput: [4,1]"
    ],
    "constraints": "`n == edges.length`\n`3 <= n <= 1000`\n`edges[i].length == 2`\n`1 <= ui, vi <= n`"
  },
  {
    "id": "686",
    "title": "Repeated String Match",
    "difficulty": "Medium",
    "explanation": "Given two strings `a` and `b`, return the minimum number of times you should repeat string `a` so that string `b` is a substring of it. If it is impossible for `b`​​​​​​ to be a substring of `a` after repeating it, return `-1`.\n\nNotice: string `\"abc\"` repeated 0 times is `\"\"`,  repeated 1 time is `\"abc\"` and repeated 2 times is `\"abcabc\"`.",
    "examples": [
      "Input: a = \"abcd\", b = \"cdabcdab\"\nOutput: 3\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.",
      "Input: a = \"a\", b = \"aa\"\nOutput: 2",
      "Input: a = \"a\", b = \"a\"\nOutput: 1",
      "Input: a = \"abc\", b = \"wxyz\"\nOutput: -1"
    ],
    "constraints": "`1 <= a.length <= 104`\n`1 <= b.length <= 104`\n`a` and `b` consist of lower-case English letters."
  },
  {
    "id": "687",
    "title": "Longest Univalue Path",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\n\nThe length of the path between two nodes is represented by the number of edges between them.",
    "examples": [
      "Input: root = [5,4,5,1,1,5]\nOutput: 2",
      "Input: root = [1,4,5,4,4,5]\nOutput: 2"
    ],
    "constraints": "The number of nodes in the tree is in the range `[0, 104]`.\n\n`-1000 <= Node.val <= 1000`\nThe depth of the tree will not exceed `1000`."
  },
  {
    "id": "688",
    "title": "Knight Probability in Chessboard",
    "difficulty": "Medium",
    "explanation": "On an `N`x`N` chessboard, a knight starts at the `r`-th row and `c`-th column and attempts to make exactly `K` moves. The rows and columns are 0 indexed, so the top-left square is `(0, 0)`, and the bottom-right square is `(N-1, N-1)`.\n\nA chess knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.\n\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\n\nThe knight continues moving until it has made exactly `K` moves or has moved off the chessboard. Return the probability that the knight remains on the board after it has stopped moving.\n\n\nExample:\nInput: 3, 2, 0, 0\nOutput: 0.0625\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\n\nFrom each of those positions, there are also two moves that will keep the knight on the board.\n\nThe total probability the knight stays on the board is 0.0625.\n\nNote:\n`N` will be between 1 and 25.\n\n`K` will be between 0 and 100.\n\nThe knight always initially starts on the board.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "689",
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "difficulty": "Hard",
    "explanation": "In a given array `nums` of positive integers, find three non-overlapping subarrays with maximum sum.\n\nEach subarray will be of size `k`, and we want to maximize the sum of all `3*k` entries.\n\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\n\n\nExample:\nInput: [1,2,1,2,6,7,5,1], 2\nOutput: [0, 3, 5]\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\n\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n\nNote:\n`nums.length` will be between 1 and 20000.\n\n`nums[i]` will be between 1 and 65535.\n\n`k` will be between 1 and floor(nums.length / 3).",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "690",
    "title": "Employee Importance",
    "difficulty": "Easy",
    "explanation": "You are given a data structure of employee information, which includes the employee's unique id, their importance value and their direct subordinates' id.\n\nFor example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.\n\nNow given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their subordinates.",
    "examples": [
      "Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\nOutput: 11\nExplanation:\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\n\nNote:\nOne employee has at most one direct leader and may have several subordinates.\n\nThe maximum number of employees won't exceed 2000."
    ],
    "constraints": ""
  },
  {
    "id": "691",
    "title": "Stickers to Spell Word",
    "difficulty": "Hard",
    "explanation": "We are given N different types of stickers.  Each sticker has a lowercase English word on it.\n\nYou would like to spell out the given `target` string by cutting individual letters from your collection of stickers and rearranging them.\n\nYou can use each sticker more than once if you want, and you have infinite quantities of each sticker.\n\nWhat is the minimum number of stickers that you need to spell out the `target`?  If the task is impossible, return -1.",
    "examples": [
      "Input:[\"with\", \"example\", \"science\"], \"thehat\"\nOutput:3\nExplanation:We can use 2 \"with\" stickers, and 1 \"example\" sticker.\n\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\n\nAlso, this is the minimum number of stickers necessary to form the target string.",
      "Input:[\"notice\", \"possible\"], \"basicbasic\"\nOutput:-1\nExplanation:We can't form the target \"basicbasic\" from cutting letters from the given stickers.\n\nNote:\n`stickers` has length in the range `[1, 50]`.\n\n`stickers` consists of lowercase English words (without apostrophes).\n\n`target` has length in the range `[1, 15]`, and consists of lowercase English letters.\n\nIn all test cases, all words were chosen randomly from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.\n\nThe time limit may be more challenging than usual.  It is expected that a 50 sticker test case can be solved within 35ms on average."
    ],
    "constraints": ""
  },
  {
    "id": "692",
    "title": "Top K Frequent Words",
    "difficulty": "Medium",
    "explanation": "Given a non-empty list of words, return the k most frequent elements.\n\nYour answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.",
    "examples": [
      "Input: [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\nOutput: [\"i\", \"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\n\n    Note that \"i\" comes before \"love\" due to a lower alphabetical order.",
      "Input: [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\nOutput: [\"the\", \"is\", \"sunny\", \"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\n\nNote:\nYou may assume k is always valid, 1 ≤ k ≤ number of unique elements.\n\nInput words contain only lowercase letters.\nFollow up:\nTry to solve it in O(n log k) time and O(n) extra space."
    ],
    "constraints": ""
  },
  {
    "id": "693",
    "title": "Binary Number with Alternating Bits",
    "difficulty": "Easy",
    "explanation": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.",
    "examples": [
      "Input: n = 5\nOutput: true\nExplanation: The binary representation of 5 is: 101",
      "Input: n = 7\nOutput: false\nExplanation: The binary representation of 7 is: 111.",
      "Input: n = 11\nOutput: false\nExplanation: The binary representation of 11 is: 1011.",
      "Input: n = 10\nOutput: true\nExplanation: The binary representation of 10 is: 1010.",
      "Input: n = 3\nOutput: false"
    ],
    "constraints": "`1 <= n <= 231 - 1`"
  },
  {
    "id": "694",
    "title": "Number of Distinct Islands",
    "difficulty": "Medium",
    "explanation": "Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.\n\nCount the number of distinct islands.  An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.",
    "examples": [
      "11000\n11000\n00011\n00011\nGiven the above grid map, return `1`.",
      "11011\n10000\n00001\n11011\nGiven the above grid map, return `3`.\n\nNotice that:\n11\n1\nand\n 1\n11\nare considered different island shapes, because we do not consider reflection / rotation.\n\nNote:\nThe length of each dimension in the given `grid` does not exceed 50."
    ],
    "constraints": ""
  },
  {
    "id": "695",
    "title": "Max Area of Island",
    "difficulty": "Medium",
    "explanation": "Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)",
    "examples": [
      "[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\nGiven the above grid, return `6`. Note the answer is not 11, because the island must be connected 4-directionally.",
      "[[0,0,0,0,0,0,0,0]]\nGiven the above grid, return `0`.\n\nNote: The length of each dimension in the given `grid` does not exceed 50."
    ],
    "constraints": ""
  },
  {
    "id": "696",
    "title": "Count Binary Substrings",
    "difficulty": "Easy",
    "explanation": "Give a string `s`, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. \nSubstrings that occur multiple times are counted the number of times they occur.",
    "examples": [
      "Input: \"00110011\"\nOutput: 6\nExplanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\n\nNotice that some of these substrings repeat and are counted the number of times they occur.\n\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.",
      "Input: \"10101\"\nOutput: 4\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\n\nNote:\n`s.length` will be between 1 and 50,000.\n\n`s` will only consist of \"0\" or \"1\" characters."
    ],
    "constraints": ""
  },
  {
    "id": "697",
    "title": "Degree of an Array",
    "difficulty": "Easy",
    "explanation": "Given a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements.\n\nYour task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.",
    "examples": [
      "Input: nums = [1,2,2,3,1]\nOutput: 2\nExplanation: \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\n\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.",
      "Input: nums = [1,2,2,3,1,4,2]\nOutput: 6\nExplanation: \nThe degree is 3 because the element 2 is repeated 3 times.\n\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6."
    ],
    "constraints": "`nums.length` will be between 1 and 50,000.\n\n`nums[i]` will be an integer between 0 and 49,999."
  },
  {
    "id": "698",
    "title": "Partition to K Equal Sum Subsets",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into `k` non-empty subsets whose sums are all equal.",
    "examples": [
      "Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4\nOutput: True\nExplanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\nNote:\n`1 <= k <= len(nums) <= 16`.\n\n`0 < nums[i] < 10000`."
    ],
    "constraints": ""
  },
  {
    "id": "699",
    "title": "Falling Squares",
    "difficulty": "Hard",
    "explanation": "On an infinite number line (x-axis), we drop given squares in the order they are given.\n\nThe `i`-th square dropped (`positions[i] = (left, side_length)`) is a square with the left-most point being `positions[i][0]` and sidelength `positions[i][1]`.\n\nThe square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.\n\nThe squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.\n\nReturn a list `ans` of heights. Each height `ans[i]` represents the current highest height of any square we have dropped, after dropping squares represented by `positions[0], positions[1], ..., positions[i]`.",
    "examples": [
      "Input: [[1, 2], [2, 3], [6, 1]]\nOutput: [2, 5, 5]\nExplanation:\nAfter the first drop of `positions[0] = [1, 2]: _aa _aa ------- `The maximum height of any square is 2.\n\nAfter the second drop of `positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- `The maximum height of any square is 5. The larger square stays on top of the smaller square despite where its center of gravity is, because squares are infinitely sticky on their bottom edge.\n\nAfter the third drop of `positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- `The maximum height of any square is still 5. Thus, we return an answer of `[2, 5, 5]`.",
      "Input: [[100, 100], [200, 100]]\nOutput: [100, 100]\nExplanation: Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.\n\nNote:\n`1 <= positions.length <= 1000`.\n\n`1 <= positions[i][0] <= 10^8`.\n\n`1 <= positions[i][1] <= 10^6`."
    ],
    "constraints": ""
  },
  {
    "id": "700",
    "title": "Search in a Binary Search Tree",
    "difficulty": "Easy",
    "explanation": "You are given the `root` of a binary search tree (BST) and an integer `val`.\n\nFind the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.",
    "examples": [
      "Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]",
      "Input: root = [4,2,7,1,3], val = 5\nOutput: []"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 5000]`.\n\n`1 <= Node.val <= 107`\n`root` is a binary search tree.\n\n`1 <= val <= 107`"
  },
  {
    "id": "701",
    "title": "Insert into a Binary Search Tree",
    "difficulty": "Medium",
    "explanation": "You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\n\nNotice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.",
    "examples": [
      "Input: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:",
      "Input: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40,20,60,10,30,50,70,null,null,25]",
      "Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4,2,7,1,3,5]"
    ],
    "constraints": "The number of nodes in the tree will be in the range `[0, 104]`.\n\n`-108 <= Node.val <= 108`\nAll the values `Node.val` are unique.\n\n`-108 <= val <= 108`\nIt's guaranteed that `val` does not exist in the original BST."
  },
  {
    "id": "702",
    "title": "Search in a Sorted Array of Unknown Size",
    "difficulty": "Medium",
    "explanation": "Given an integer array sorted in ascending order, write a function to search `target` in `nums`.  If `target` exists, then return its index, otherwise return `-1`. However, the array size is unknown to you. You may only access the array using an `ArrayReader` interface, where `ArrayReader.get(k)` returns the element of the array at index `k` (0-indexed).\n\nYou may assume all integers in the array are less than `10000`, and if you access the array out of bounds, `ArrayReader.get` will return `2147483647`.",
    "examples": [
      "Input: `array` = [-1,0,3,5,9,12], `target` = 9\nOutput: 4\nExplanation: 9 exists in `nums` and its index is 4",
      "Input: `array` = [-1,0,3,5,9,12], `target` = 2\nOutput: -1\nExplanation: 2 does not exist in `nums` so return -1"
    ],
    "constraints": "You may assume that all elements in the array are unique.\n\nThe value of each element in the array will be in the range `[-9999, 9999]`.\n\nThe length of the array will be in the range `[1, 10^4]`."
  },
  {
    "id": "703",
    "title": "Kth Largest Element in a Stream",
    "difficulty": "Easy",
    "explanation": "Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\nImplement `KthLargest` class:\n`KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.\n\n`int add(int val)` Returns the element representing the `kth` largest element in the stream.",
    "examples": [
      "Input\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
    ],
    "constraints": "`1 <= k <= 104`\n`0 <= nums.length <= 104`\n`-104 <= nums[i] <= 104`\n`-104 <= val <= 104`\nAt most `104` calls will be made to `add`.\n\nIt is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element."
  },
  {
    "id": "704",
    "title": "Binary Search",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.",
    "examples": [
      "Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4",
      "Input: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-9999 <= nums[i], target <= 9999`\nAll the integers in `nums` are unique.\n\n`nums` is sorted in an ascending order."
  },
  {
    "id": "705",
    "title": "Design HashSet",
    "difficulty": "Easy",
    "explanation": "Design a HashSet without using any built-in hash table libraries.\n\nImplement `MyHashSet` class:\n`void add(key)` Inserts the value `key` into the HashSet.\n\n`bool contains(key)` Returns whether the value `key` exists in the HashSet or not.\n\n`void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.",
    "examples": [
      "Input\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)"
    ],
    "constraints": "`0 <= key <= 106`\nAt most `104` calls will be made to `add`, `remove`, and `contains`.\n\nFollow up: Could you solve the problem without using the built-in HashSet library?"
  },
  {
    "id": "706",
    "title": "Design HashMap",
    "difficulty": "Easy",
    "explanation": "Design a HashMap without using any built-in hash table libraries.\n\nImplement the `MyHashMap` class:\n`MyHashMap()` initializes the object with an empty map.\n\n`void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.\n\n`int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n\n`void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.",
    "examples": [
      "Input\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]"
    ],
    "constraints": "`0 <= key, value <= 106`\nAt most `104` calls will be made to `put`, `get`, and `remove`.\n\nFollow up: Please do not use the built-in HashMap library."
  },
  {
    "id": "707",
    "title": "Design Linked List",
    "difficulty": "Medium",
    "explanation": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\n\nA node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.\n\nIf you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n\nImplement the `MyLinkedList` class:\n`MyLinkedList()` Initializes the `MyLinkedList` object.\n\n`int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.\n\n`void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n\n`void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.\n\n`void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node will not be inserted.\n\n`void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.",
    "examples": [
      "Input\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]\nOutput\n[null, null, null, null, 2, null, 3]\nExplanation\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\nmyLinkedList.get(1);              // return 3"
    ],
    "constraints": "`0 <= index, val <= 1000`\nPlease do not use the built-in LinkedList library.\n\nAt most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`."
  },
  {
    "id": "708",
    "title": "Insert into a Sorted Circular Linked List",
    "difficulty": "Medium",
    "explanation": "Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.\n\nIf there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.\n\nIf the list is empty (i.e., given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.",
    "examples": [
      "Input: head = [3,4,1], insertVal = 2\nOutput: [3,4,1,2]\nExplanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.",
      "Input: head = [], insertVal = 1\nOutput: [1]\nExplanation: The list is empty (given head is `null`). We create a new single circular list and return the reference to that single node.",
      "Input: head = [1], insertVal = 0\nOutput: [1,0]"
    ],
    "constraints": "`0 <= Number of Nodes <= 5 * 10^4`\n`-10^6 <= Node.val <= 10^6`\n`-10^6 <= insertVal <= 10^6`"
  },
  {
    "id": "709",
    "title": "To Lower Case",
    "difficulty": "Easy",
    "explanation": "Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.",
    "examples": [
      "Input: \"Hello\"\nOutput: \"hello\"",
      "Input: \"here\"\nOutput: \"here\"",
      "Input: \"LOVELY\"\nOutput: \"lovely\""
    ],
    "constraints": ""
  },
  {
    "id": "710",
    "title": "Random Pick with Blacklist",
    "difficulty": "Hard",
    "explanation": "Given a blacklist `B` containing unique integers from `[0, N)`, write a function to return a uniform random integer from `[0, N)` which is NOT in `B`.\n\nOptimize it such that it minimizes the call to system’s `Math.random()`.\n\nNote:\n`1 <= N <= 1000000000`\n`0 <= B.length < min(100000, N)`\n`[0, N)` does NOT include N. See interval notation.",
    "examples": [
      "Input: \n[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[1,[]],[],[],[]]\nOutput: [null,0,0,0]",
      "Input: \n[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[2,[]],[],[],[]]\nOutput: [null,1,1,1]",
      "Input: \n[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[3,[1]],[],[],[]]\nOutput: [null,0,0,2]",
      "Input: \n[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[4,[2]],[],[],[]]\nOutput: [null,1,3,1]\nExplanation of Input Syntax:\nThe input is two lists: the subroutines called and their arguments. `Solution`'s constructor has two arguments, `N` and the blacklist `B`. `pick` has no arguments. Arguments are always wrapped with a list, even if there aren't any."
    ],
    "constraints": ""
  },
  {
    "id": "711",
    "title": "Number of Distinct Islands II",
    "difficulty": "Hard",
    "explanation": "Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.\n\nCount the number of distinct islands.  An island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).",
    "examples": [
      "11000\n10000\n00001\n00011\nGiven the above grid map, return `1`.\n\nNotice that:\n11\n1\nand\n 1\n11\nare considered same island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.",
      "11100\n10001\n01001\n01110\nGiven the above grid map, return `2`.\n\nHere are the two distinct islands:\n111\n1\nand\n1\n1\nNotice that:\n111\n1\nand\n1\n111\nare considered same island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.\n\nNote:\nThe length of each dimension in the given `grid` does not exceed 50."
    ],
    "constraints": ""
  },
  {
    "id": "712",
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "difficulty": "Medium",
    "explanation": "Given two strings `s1, s2`, find the lowest ASCII sum of deleted characters to make two strings equal.",
    "examples": [
      "Input: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\n\nDeleting \"t\" from \"eat\" adds 116 to the sum.\n\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.",
      "Input: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\n\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\n\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n\nNote:\n`0 < s1.length, s2.length <= 1000`.\n\nAll elements of each string will have an ASCII value in `[97, 122]`."
    ],
    "constraints": ""
  },
  {
    "id": "713",
    "title": "Subarray Product Less Than K",
    "difficulty": "Medium",
    "explanation": "Your are given an array of positive integers `nums`.\n\nCount and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than `k`.",
    "examples": [
      "Input: nums = [10, 5, 2, 6], k = 100\nOutput: 8\nExplanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].\n\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n\nNote:\n`0 < nums.length <= 50000`.\n\n`0 < nums[i] < 1000`.\n\n`0 <= k < 10^6`."
    ],
    "constraints": ""
  },
  {
    "id": "714",
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "difficulty": "Medium",
    "explanation": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "examples": [
      "Input: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.",
      "Input: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6"
    ],
    "constraints": "`1 <= prices.length <= 5 * 104`\n`1 <= prices[i] < 5 * 104`\n`0 <= fee < 5 * 104`"
  },
  {
    "id": "715",
    "title": "Range Module",
    "difficulty": "Hard",
    "explanation": "A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.\n\n`addRange(int left, int right)` Adds the half-open interval `[left, right)`, tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked.\n\n`queryRange(int left, int right)` Returns true if and only if every real number in the interval `[left, right)`\n is currently being tracked.\n\n`removeRange(int left, int right)` Stops tracking every real number currently being tracked in the interval `[left, right)`.",
    "examples": [
      "addRange(10, 20): null\nremoveRange(14, 16): null\nqueryRange(10, 14): true (Every number in [10, 14) is being tracked)\nqueryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nqueryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)\nNote:\nA half open interval `[left, right)` denotes all real numbers `left <= x < right`.\n\n`0 < left < right < 10^9` in all calls to `addRange, queryRange, removeRange`.\n\nThe total number of calls to `addRange` in a single test case is at most `1000`.\n\nThe total number of calls to `queryRange` in a single test case is at most `5000`.\n\nThe total number of calls to `removeRange` in a single test case is at most `1000`."
    ],
    "constraints": ""
  },
  {
    "id": "716",
    "title": "Max Stack",
    "difficulty": "Easy",
    "explanation": "Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.\n\nImplement the `MaxStack` class:\n`MaxStack()` Initializes the stack object.\n\n`void push(int x)` Pushes element `x` onto the stack.\n\n`int pop()` Removes the element on top of the stack and returns it.\n\n`int top()` Gets the element on the top of the stack without removing it.\n\n`int peekMax()` Retrieves the maximum element in the stack without removing it.\n\n`int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the top-most one.",
    "examples": [
      "Input\n[\"MaxStack\", \"push\", \"push\", \"push\", \"top\", \"popMax\", \"top\", \"peekMax\", \"pop\", \"top\"]\n[[], [5], [1], [5], [], [], [], [], [], []]\nOutput\n[null, null, null, null, 5, 5, 1, 5, 1, 5]\nExplanation\nMaxStack stk = new MaxStack();\nstk.push(5);   // [5] the top of the stack and the maximum number is 5.\n\nstk.push(1);   // [5, 1] the top of the stack is 1, but the maximum is 5.\n\nstk.push(5);   // [5, 1, 5] the top of the stack is 5, which is also the maximum, because it is the top most one.\n\nstk.top();     // return 5, [5, 1, 5] the stack did not change.\n\nstk.popMax();  // return 5, [5, 1] the stack is changed now, and the top is different from the max.\n\nstk.top();     // return 1, [5, 1] the stack did not change.\n\nstk.peekMax(); // return 5, [5, 1] the stack did not change.\n\nstk.pop();     // return 1, [5] the top of the stack and the max element is now 5.\n\nstk.top();     // return 5, [5] the stack did not change."
    ],
    "constraints": "`-107 <= x <= 107`\nAt most `104` calls will be made to `push`, `pop`, `top`, `peekMax`, and `popMax`.\n\nThere will be at least one element in the stack when `pop`, `top`, `peekMax`, or `popMax` is called.\n\nFollow up: Could you come up with a solution that supports `O(1)` for each `top` call and `O(logn)` for each other call?"
  },
  {
    "id": "717",
    "title": "1-bit and 2-bit Characters",
    "difficulty": "Easy",
    "explanation": "We have two special characters. The first character can be represented by one bit `0`. The second character can be represented by two bits (`10` or `11`).  \nNow given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.",
    "examples": [
      "Input: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.",
      "Input: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\nNote:\n`1 <= len(bits) <= 1000`.\n\n`bits[i]` is always `0` or `1`."
    ],
    "constraints": ""
  },
  {
    "id": "718",
    "title": "Maximum Length of Repeated Subarray",
    "difficulty": "Medium",
    "explanation": "Given two integer arrays `A` and `B`, return the maximum length of an subarray that appears in both arrays.",
    "examples": [
      "Input:\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\nOutput: 3\nExplanation: \nThe repeated subarray with maximum length is [3, 2, 1].\n\nNote:\n1 <= len(A), len(B) <= 1000\n0 <= A[i], B[i] < 100"
    ],
    "constraints": ""
  },
  {
    "id": "719",
    "title": "Find K-th Smallest Pair Distance",
    "difficulty": "Hard",
    "explanation": "Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.",
    "examples": [
      "Input:\nnums = [1,3,1]\nk = 1\nOutput: 0 \nExplanation:\nHere are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\n\nNote:\n`2 <= len(nums) <= 10000`.\n\n`0 <= nums[i] < 1000000`.\n\n`1 <= k <= len(nums) * (len(nums) - 1) / 2`."
    ],
    "constraints": ""
  },
  {
    "id": "720",
    "title": "Longest Word in Dictionary",
    "difficulty": "Easy",
    "explanation": "Given an array of strings `words` representing an English Dictionary, return the longest word in `words` that can be built one character at a time by other words in `words`.\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.",
    "examples": [
      "Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\nOutput: \"world\"\nExplanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".",
      "Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\nOutput: \"apple\"\nExplanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\"."
    ],
    "constraints": "`1 <= words.length <= 1000`\n`1 <= words[i].length <= 30`\n`words[i]` consists of lowercase English letters."
  },
  {
    "id": "721",
    "title": "Accounts Merge",
    "difficulty": "Medium",
    "explanation": "Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are emails representing emails of the account.\n\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\n\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.",
    "examples": [
      "Input: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nOutput: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nExplanation:\nThe first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\n\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\n\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.",
      "Input: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\nOutput: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]"
    ],
    "constraints": "`1 <= accounts.length <= 1000`\n`2 <= accounts[i].length <= 10`\n`1 <= accounts[i][j] <= 30`\n`accounts[i][0]` consists of English letters.\n\n`accounts[i][j] (for j > 0)` is a valid email."
  },
  {
    "id": "722",
    "title": "Remove Comments",
    "difficulty": "Medium",
    "explanation": "Given a C++ program, remove comments from it. The program `source` is an array where `source[i]` is the `i`-th line of the source code.  This represents the result of splitting the original source code string by the newline character `\\n`.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\nThe string `//` denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\n\nThe string `/*` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `*/` should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string `/*/` does not yet end the block comment, as the ending would be overlapping the beginning.\n\nThe first effective comment takes precedence over others: if the string `//` occurs in a block comment, it is ignored. Similarly, if the string `/*` occurs in a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n\nThere will be no control characters, single quote, or double quote characters.  For example, `source = \"string s = \"/* Not a comment. */\";\"` will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\nIt is guaranteed that every open block comment will eventually be closed, so `/*` outside of a line or block comment always starts a new comment.\n\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\n\nAfter removing the comments from the source code, return the source code in the same format.",
    "examples": [
      "Input: \nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\nThe line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\nOutput: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\nThe line by line code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\nExplanation: \nThe string `/*` denotes a block comment, including line 1 and lines 6-9. The string `//` denotes line 4 as comments.",
      "Input: \nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\nOutput: [\"ab\"]\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\n\nNote:\nThe length of `source` is in the range `[1, 100]`.\n\nThe length of `source[i]` is in the range `[0, 80]`.\n\nEvery open block comment is eventually closed.\n\nThere are no single-quote, double-quote, or control characters in the source code."
    ],
    "constraints": ""
  },
  {
    "id": "723",
    "title": "Candy Crush",
    "difficulty": "Medium",
    "explanation": "This question is about implementing a basic elimination algorithm for Candy Crush.\n\nGiven a 2D integer array `board` representing the grid of candy, different positive integers `board[i][j]` represent different types of candies. A value of `board[i][j] = 0` represents that the cell at position `(i, j)` is empty. The given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:\nIf three or more candies of the same type are adjacent vertically or horizontally, \"crush\" them all at the same time - these positions become empty.\n\nAfter crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)\nAfter the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.\n\nIf there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.\n\nYou need to perform the above rules until the board becomes stable, then return the current board.\n\n\nExample:\nInput:\nboard = \n[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]\nOutput:\n[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]\nExplanation: \nNote:\nThe length of `board` will be in the range [3, 50].\n\nThe length of `board[i]` will be in the range [3, 50].\n\nEach `board[i][j]` will initially start as an integer in the range [1, 2000].",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "724",
    "title": "Find Pivot Index",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums`, calculate the pivot index of this array.\n\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\n\nIf the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.\n\nReturn the leftmost pivot index. If no such index exists, return -1.",
    "examples": [
      "Input: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\n\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11",
      "Input: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.",
      "Input: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\n\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-1000 <= nums[i] <= 1000`"
  },
  {
    "id": "725",
    "title": "Split Linked List in Parts",
    "difficulty": "Medium",
    "explanation": "Given a (singly) linked list with head node `root`, write a function to split the linked list into `k` consecutive linked list \"parts\".\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.\n\nThe parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.\n\nReturn a List of ListNode's representing the linked list parts that are formed.\n\n\nExamples\n1->2->3->4, k = 5 // 5 equal parts\n[ [1], \n[2],\n[3],\n[4],\nnull ]",
    "examples": [
      "Input: \nroot = [1, 2, 3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe input and each element of the output are ListNodes, not arrays.\n\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\n\nThe first element output[0] has output[0].val = 1, output[0].next = null.\n\nThe last element output[4] is null, but it's string representation as a ListNode is [].",
      "Input: \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\nOutput: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n\nNote:\nThe length of `root` will be in the range `[0, 1000]`.\n\nEach value of a node in the input will be an integer in the range `[0, 999]`.\n\n`k` will be an integer in the range `[1, 50]`."
    ],
    "constraints": ""
  },
  {
    "id": "726",
    "title": "Number of Atoms",
    "difficulty": "Hard",
    "explanation": "Given a chemical `formula` (given as a string), return the count of each atom.\n\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\n\nOne or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.\n\nTwo formulas concatenated together to produce another formula. For example, H2O2He3Mg4 is also a formula.\n\nA formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.\n\nGiven a `formula`, return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.",
    "examples": [
      "Input: formula = \"H2O\"\nOutput: \"H2O\"\nExplanation: The count of elements are {'H': 2, 'O': 1}.",
      "Input: formula = \"Mg(OH)2\"\nOutput: \"H2MgO2\"\nExplanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.",
      "Input: formula = \"K4(ON(SO3)2)2\"\nOutput: \"K4N2O14S4\"\nExplanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.",
      "Input: formula = \"Be32\"\nOutput: \"Be32\""
    ],
    "constraints": "`1 <= formula.length <= 1000`\n`formula` consists of English letters, digits, `'('`, and `')'`.\n\n`formula` is always valid."
  },
  {
    "id": "727",
    "title": "Minimum Window Subsequence",
    "difficulty": "Hard",
    "explanation": "Given strings `S` and `T`, find the minimum (contiguous) substring `W` of `S`, so that `T` is a subsequence of `W`.\n\nIf there is no such window in `S` that covers all characters in `T`, return the empty string `\"\"`. If there are multiple such minimum-length windows, return the one with the left-most starting index.",
    "examples": [
      "Input: \nS = \"abcdebdde\", T = \"bde\"\nOutput: \"bcde\"\nExplanation: \n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\n\n\"deb\" is not a smaller window because the elements of T in the window must occur in order.\n\nNote:\nAll the strings in the input will only contain lowercase letters.\n\nThe length of `S` will be in the range `[1, 20000]`.\n\nThe length of `T` will be in the range `[1, 100]`."
    ],
    "constraints": ""
  },
  {
    "id": "728",
    "title": "Self Dividing Numbers",
    "difficulty": "Easy",
    "explanation": "A self-dividing number is a number that is divisible by every digit it contains.\n\nFor example, 128 is a self-dividing number because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`.\n\nAlso, a self-dividing number is not allowed to contain the digit zero.\n\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.",
    "examples": [
      "Input: \nleft = 1, right = 22\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nNote:\nThe boundaries of each input argument are `1 <= left <= right <= 10000`."
    ],
    "constraints": ""
  },
  {
    "id": "729",
    "title": "My Calendar I",
    "difficulty": "Medium",
    "explanation": "Implement a `MyCalendar` class to store your events. A new event can be added if adding the event will not cause a double booking.\n\nYour class will have the method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\nA double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)\nFor each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a double booking. Otherwise, return `false` and do not add the event to the calendar.\n\nYour class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`",
    "examples": [
      "MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\nExplanation: \nThe first event can be booked.  The second can't because time 15 is already booked by another event.\n\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\n\nNote:\nThe number of calls to `MyCalendar.book` per test case will be at most `1000`.\n\nIn calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`."
    ],
    "constraints": ""
  },
  {
    "id": "730",
    "title": "Count Different Palindromic Subsequences",
    "difficulty": "Hard",
    "explanation": "Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo `10^9 + 7`.\n\nA subsequence of a string S is obtained by deleting 0 or more characters from S.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences `A_1, A_2, ...` and `B_1, B_2, ...` are different if there is some `i` for which `A_i != B_i`.",
    "examples": [
      "Input: \nS = 'bccb'\nOutput: 6\nExplanation: \nThe 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\n\nNote that 'bcb' is counted only once, even though it occurs twice.",
      "Input: \nS = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'\nOutput: 104860361\nExplanation: \nThere are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.\n\nNote:\nThe length of `S` will be in the range `[1, 1000]`.\n\nEach character `S[i]` will be in the set `{'a', 'b', 'c', 'd'}`."
    ],
    "constraints": ""
  },
  {
    "id": "731",
    "title": "My Calendar II",
    "difficulty": "Medium",
    "explanation": "Implement a `MyCalendarTwo` class to store your events. A new event can be added if adding the event will not cause a triple booking.\n\nYour class will have one method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\nA triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.)\nFor each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return `false` and do not add the event to the calendar.\n\nYour class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`",
    "examples": [
      "MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(50, 60); // returns true\nMyCalendar.book(10, 40); // returns true\nMyCalendar.book(5, 15); // returns false\nMyCalendar.book(5, 10); // returns true\nMyCalendar.book(25, 55); // returns true\nExplanation: \nThe first two events can be booked.  The third event can be double booked.\n\nThe fourth event (5, 15) can't be booked, because it would result in a triple booking.\n\nThe fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.\n\nThe sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;\nthe time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\n\nNote:\nThe number of calls to `MyCalendar.book` per test case will be at most `1000`.\n\nIn calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`."
    ],
    "constraints": ""
  },
  {
    "id": "732",
    "title": "My Calendar III",
    "difficulty": "Hard",
    "explanation": "A `k`-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.)\nYou are given some events `[start, end)`, after each given event, return an integer `k` representing the maximum `k`-booking between all the previous events.\n\nImplement the `MyCalendarThree` class:\n`MyCalendarThree()` Initializes the object.\n\n`int book(int start, int end)` Returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar.",
    "examples": [
      "Input\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, 1, 1, 2, 3, 3, 3]\nExplanation\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\n\nmyCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\n\nmyCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\n\nmyCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\n\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3"
    ],
    "constraints": "`0 <= start < end <= 109`\nAt most `400` calls will be made to `book`."
  },
  {
    "id": "733",
    "title": "Flood Fill",
    "difficulty": "Easy",
    "explanation": "An `image` is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\n\nGiven a coordinate `(sr, sc)` representing the starting pixel (row and column) of the flood fill, and a pixel value `newColor`, \"flood fill\" the image.\n\nTo perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.  Replace the color of all of the aforementioned pixels with the newColor.\n\nAt the end, return the modified image.",
    "examples": [
      "Input: \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: \nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels connected \nby a path of the same color as the starting pixel are colored with the new color.\n\nNote the bottom corner is not colored 2, because it is not 4-directionally connected\nto the starting pixel.\n\nNote:\nThe length of `image` and `image[0]` will be in the range `[1, 50]`.\n\nThe given starting pixel will satisfy `0 <= sr < image.length` and `0 <= sc < image[0].length`.\n\nThe value of each color in `image[i][j]` and `newColor` will be an integer in `[0, 65535]`."
    ],
    "constraints": ""
  },
  {
    "id": "734",
    "title": "Sentence Similarity",
    "difficulty": "Easy",
    "explanation": "We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode\"` can be represented as `arr = [\"I\",\"am\",happy\",\"with\",\"leetcode\"]`.\n\nGiven two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.\n\nReturn `true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar.\n\nTwo sentences are similar if:\nThey have the same length (i.e. the same number of words)\n`sentence1[i]` and `sentence2[i]` are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar and the words `b` and `c` are similar, `a` and `c` are not necessarily similar.",
    "examples": [
      "Input: sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]\nOutput: true\nExplanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.",
      "Input: sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = []\nOutput: true\nExplanation: A word is similar to itself.",
      "Input: sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]]\nOutput: false\nExplanation: As they don't have the same length, we return false."
    ],
    "constraints": "`1 <= sentence1.length, sentence2.length <= 1000`\n`1 <= sentence1[i].length, sentence2[i].length <= 20`\n`sentence1[i]` and `sentence2[i]` consist of lower-case and upper-case English letters.\n\n`0 <= similarPairs.length <= 1000`\n`similarPairs[i].length == 2`\n`1 <= xi.length, yi.length <= 20`\n`xi` and `yi` consist of lower-case and upper-case English letters.\n\nAll the pairs `(xi, yi)` are distinct."
  },
  {
    "id": "735",
    "title": "Asteroid Collision",
    "difficulty": "Medium",
    "explanation": "We are given an array `asteroids` of integers representing asteroids in a row.\n\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.",
    "examples": [
      "Input: asteroids = [5,10,-5]\nOutput: [5,10]\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.",
      "Input: asteroids = [8,-8]\nOutput: []\nExplanation: The 8 and -8 collide exploding each other.",
      "Input: asteroids = [10,2,-5]\nOutput: [10]\nExplanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.",
      "Input: asteroids = [-2,-1,1,2]\nOutput: [-2,-1,1,2]\nExplanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other."
    ],
    "constraints": "`2 <= asteroids.length <= 104`\n`-1000 <= asteroids[i] <= 1000`\n`asteroids[i] != 0`"
  },
  {
    "id": "736",
    "title": "Parse Lisp Expression",
    "difficulty": "Hard",
    "explanation": "You are given a string `expression` representing a Lisp-like expression to return the integer value of.\n\nThe syntax for these expressions is given as follows.\n\nAn expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.\n\n(An integer could be positive or negative.)\nA let-expression takes the form `(let v1 e1 v2 e2 ... vn en expr)`, where `let` is always the string `\"let\"`, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let-expression is the value of the expression `expr`.\n\nAn add-expression takes the form `(add e1 e2)` where `add` is always the string `\"add\"`, there are always two expressions `e1, e2`, and this expression evaluates to the addition of the evaluation of `e1` and the evaluation of `e2`.\n\nA mult-expression takes the form `(mult e1 e2)` where `mult` is always the string `\"mult\"`, there are always two expressions `e1, e2`, and this expression evaluates to the multiplication of the evaluation of `e1` and the evaluation of `e2`.\n\nFor the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.\n\nFinally, there is the concept of scope.  When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.\n\n\nEvaluation Examples:\nInput: (add 1 2)\nOutput: 3\nInput: (mult 3 (add 2 3))\nOutput: 15\nInput: (let x 2 (mult x 5))\nOutput: 10\nInput: (let x 2 (mult x (let x 3 y 4 (add x y))))\nOutput: 14\nExplanation: In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\n\nSince x = 3 is found first, the value of x is 3.\n\nInput: (let x 3 x 2 x)\nOutput: 2\nExplanation: Assignment in let statements is processed sequentially.\n\nInput: (let x 1 y 2 x (add x y) (add x y))\nOutput: 5\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\n\nThe second (add x y) evaluates as 3+2 = 5.\n\nInput: (let x 2 (add (let x 3 (let x 4 x)) x))\nOutput: 6\nExplanation: Even though (let x 4 x) has a deeper scope, it is outside the context\nof the final x in the add-expression.  That final x will equal 2.\n\nInput: (let a1 3 b2 (add a1 1) b2) \nOutput 4\nExplanation: Variable names can contain digits after the first character.\n\nNote:\nThe given string `expression` is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.\n\nThe length of `expression` is at most 2000.  (It is also non-empty, as that would not be a legal expression.)\nThe answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "737",
    "title": "Sentence Similarity II",
    "difficulty": "Medium",
    "explanation": "Given two sentences `words1, words2` (each represented as an array of strings), and a list of similar word pairs `pairs`, determine if two sentences are similar.\n\nFor example, `words1 = [\"great\", \"acting\", \"skills\"]` and `words2 = [\"fine\", \"drama\", \"talent\"]` are similar, if the similar word pairs are `pairs = [[\"great\", \"good\"], [\"fine\", \"good\"], [\"acting\",\"drama\"], [\"skills\",\"talent\"]]`.\n\nNote that the similarity relation is transitive. For example, if \"great\" and \"good\" are similar, and \"fine\" and \"good\" are similar, then \"great\" and \"fine\" are similar.\n\nSimilarity is also symmetric. For example, \"great\" and \"fine\" being similar is the same as \"fine\" and \"great\" being similar.\n\nAlso, a word is always similar with itself. For example, the sentences `words1 = [\"great\"], words2 = [\"great\"], pairs = []` are similar, even though there are no specified similar word pairs.\n\nFinally, sentences can only be similar if they have the same number of words. So a sentence like `words1 = [\"great\"]` can never be similar to `words2 = [\"doubleplus\",\"good\"]`.\n\nNote:\nThe length of `words1` and `words2` will not exceed `1000`.\n\nThe length of `pairs` will not exceed `2000`.\n\nThe length of each `pairs[i]` will be `2`.\n\nThe length of each `words[i]` and `pairs[i][j]` will be in the range `[1, 20]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "738",
    "title": "Monotone Increasing Digits",
    "difficulty": "Medium",
    "explanation": "Given a non-negative integer `N`, find the largest number that is less than or equal to `N` with monotone increasing digits.\n\n(Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.)",
    "examples": [
      "Input: N = 10\nOutput: 9",
      "Input: N = 1234\nOutput: 1234",
      "Input: N = 332\nOutput: 299\nNote:\n`N` is an integer in the range `[0, 10^9]`."
    ],
    "constraints": ""
  },
  {
    "id": "739",
    "title": "Daily Temperatures",
    "difficulty": "Medium",
    "explanation": "Given a list of daily temperatures `T`, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put `0` instead.\n\nFor example, given the list of temperatures `T = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`.\n\nNote:\nThe length of `temperatures` will be in the range `[1, 30000]`.\n\nEach temperature will be an integer in the range `[30, 100]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "740",
    "title": "Delete and Earn",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of integers, you can perform operations on the array.\n\nIn each operation, you pick any `nums[i]` and delete it to earn `nums[i]` points. After, you must delete every element equal to `nums[i] - 1` or `nums[i] + 1`.\n\nYou start with `0` points. Return the maximum number of points you can earn by applying such operations.",
    "examples": [
      "Input: nums = [3,4,2]\nOutput: 6\nExplanation: Delete 4 to earn 4 points, consequently 3 is also deleted.\n\nThen, delete 2 to earn 2 points.\n\n6 total points are earned.",
      "Input: nums = [2,2,3,3,3,4]\nOutput: 9\nExplanation: Delete 3 to earn 3 points, deleting both 2's and the 4.\n\nThen, delete 3 again to earn 3 points, and 3 again to earn 3 points.\n\n9 total points are earned."
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`1 <= nums[i] <= 104`"
  },
  {
    "id": "741",
    "title": "Cherry Pickup",
    "difficulty": "Hard",
    "explanation": "You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.\n\n`0` means the cell is empty, so you can pass through,\n`1` means the cell contains a cherry that you can pick up and pass through, or\n`-1` means the cell contains a thorn that blocks your way.\n\nReturn the maximum number of cherries you can collect by following the rules below:\nStarting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).\n\nAfter reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.\n\nWhen passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.\n\nIf there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.",
    "examples": [
      "Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\nOutput: 5\nExplanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\n\nThen, the player went left, up, up, left to return home, picking up one more cherry.\n\nThe total number of cherries picked up is 5, and this is the maximum possible.",
      "Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\nOutput: 0"
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 50`\n`grid[i][j]` is `-1`, `0`, or `1`.\n\n`grid[0][0] != -1`\n`grid[n - 1][n - 1] != -1`"
  },
  {
    "id": "742",
    "title": "Closest Leaf in a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree where every node has a unique value, and a target key `k`, find the value of the nearest leaf node to target `k` in the tree.\n\nHere, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree.  Also, a node is called a leaf if it has no children.\n\nIn the following examples, the input tree is represented in flattened form row by row.\n\nThe actual `root` tree given will be a TreeNode object.",
    "examples": [
      "Input:\nroot = [1, 3, 2], k = 1\nDiagram of binary tree:\n          1\n         / \\\n        3   2\nOutput: 2 (or 3)\nExplanation: Either 2 or 3 is the nearest leaf node to the target of 1.",
      "Input:\nroot = [1], k = 1\nOutput: 1\nExplanation: The nearest leaf node is the root node itself.",
      "Input:\nroot = [1,2,3,4,null,null,null,5,null,6], k = 2\nDiagram of binary tree:\n             1\n            / \\\n           2   3\n          /\n         4\n        /\n       5\n      /\n     6\nOutput: 3\nExplanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.\n\nNote:\n`root` represents a binary tree with at least `1` node and at most `1000` nodes.\n\nEvery node has a unique `node.val` in range `[1, 1000]`.\n\nThere exists some node in the given binary tree for which `node.val == k`."
    ],
    "constraints": ""
  },
  {
    "id": "743",
    "title": "Network Delay Time",
    "difficulty": "Medium",
    "explanation": "You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node `k`. Return the time it takes for all the `n` nodes to receive the signal. If it is impossible for all the `n` nodes to receive the signal, return `-1`.",
    "examples": [
      "Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\nOutput: 2",
      "Input: times = [[1,2,1]], n = 2, k = 1\nOutput: 1",
      "Input: times = [[1,2,1]], n = 2, k = 2\nOutput: -1"
    ],
    "constraints": "`1 <= k <= n <= 100`\n`1 <= times.length <= 6000`\n`times[i].length == 3`\n`1 <= ui, vi <= n`\n`ui != vi`\n`0 <= wi <= 100`\nAll the pairs `(ui, vi)` are unique. (i.e., no multiple edges.)"
  },
  {
    "id": "744",
    "title": "Find Smallest Letter Greater Than Target",
    "difficulty": "Easy",
    "explanation": "Given a list of sorted characters `letters` containing only lowercase letters, and given a target letter `target`, find the smallest element in the list that is larger than the given target.\n\nLetters also wrap around.  For example, if the target is `target = 'z'` and `letters = ['a', 'b']`, the answer is `'a'`.\n\n\nExamples:\nInput:\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"a\"\nOutput: \"c\"\nInput:\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"c\"\nOutput: \"f\"\nInput:\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"d\"\nOutput: \"f\"\nInput:\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"g\"\nOutput: \"j\"\nInput:\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"j\"\nOutput: \"c\"\nInput:\nletters = [\"c\", \"f\", \"j\"]\ntarget = \"k\"\nOutput: \"c\"\nNote:\n`letters` has a length in range `[2, 10000]`.\n\n`letters` consists of lowercase letters, and contains at least 2 unique letters.\n\n`target` is a lowercase letter.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "745",
    "title": "Prefix and Suffix Search",
    "difficulty": "Hard",
    "explanation": "Design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix.\n\nImplement the `WordFilter` class:\n`WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.\n\n`f(string prefix, string suffix)` Returns the index of the word in the dictionary which has the prefix `prefix` and the suffix `suffix`. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return `-1`.",
    "examples": [
      "Input\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]\nOutput\n[null, 0]\nExplanation\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = 'e\"."
    ],
    "constraints": "`1 <= words.length <= 15000`\n`1 <= words[i].length <= 10`\n`1 <= prefix.length, suffix.length <= 10`\n`words[i]`, `prefix` and `suffix` consist of lower-case English letters only.\n\nAt most `15000` calls will be made to the function `f`."
  },
  {
    "id": "746",
    "title": "Min Cost Climbing Stairs",
    "difficulty": "Easy",
    "explanation": "You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index `0`, or the step with index `1`.\n\nReturn the minimum cost to reach the top of the floor.",
    "examples": [
      "Input: cost = [10,15,20]\nOutput: 15\nExplanation: Cheapest is: start on cost[1], pay that cost, and go to the top.",
      "Input: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3]."
    ],
    "constraints": "`2 <= cost.length <= 1000`\n`0 <= cost[i] <= 999`"
  },
  {
    "id": "747",
    "title": "Largest Number At Least Twice of Others",
    "difficulty": "Easy",
    "explanation": "In a given integer array `nums`, there is always exactly one largest element.\n\nFind whether the largest element in the array is at least twice as much as every other number in the array.\n\nIf it is, return the index of the largest element, otherwise return -1.",
    "examples": [
      "Input: nums = [3, 6, 1, 0]\nOutput: 1\nExplanation: 6 is the largest integer, and for every other number in the array x,\n6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.",
      "Input: nums = [1, 2, 3, 4]\nOutput: -1\nExplanation: 4 isn't at least as big as twice the value of 3, so we return -1.\n\nNote:\n`nums` will have a length in the range `[1, 50]`.\n\nEvery `nums[i]` will be an integer in the range `[0, 99]`."
    ],
    "constraints": ""
  },
  {
    "id": "748",
    "title": "Shortest Completing Word",
    "difficulty": "Easy",
    "explanation": "Given a string `licensePlate` and an array of strings `words`, find the shortest completing word in `words`.\n\nA completing word is a word that contains all the letters in `licensePlate`. Ignore numbers and spaces in `licensePlate`, and treat letters as case insensitive. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.\n\nFor example, if `licensePlate`` = \"aBc 12c\"`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible completing words are `\"abccdef\"`, `\"caaacab\"`, and `\"cbca\"`.\n\nReturn the shortest completing word in `words`. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in `words`.",
    "examples": [
      "Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\nOutput: \"steps\"\nExplanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\n\"steps\" contains 't', 'p', and both 's' characters.\n\n\"stripe\" is missing an 's'.\n\n\"stepple\" is missing an 's'.\n\nSince \"steps\" is the only word containing all the letters, that is the answer.",
      "Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\nOutput: \"pest\"\nExplanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.",
      "Input: licensePlate = \"Ah71752\", words = [\"suggest\",\"letter\",\"of\",\"husband\",\"easy\",\"education\",\"drug\",\"prevent\",\"writer\",\"old\"]\nOutput: \"husband\"",
      "Input: licensePlate = \"OgEu755\", words = [\"enough\",\"these\",\"play\",\"wide\",\"wonder\",\"box\",\"arrive\",\"money\",\"tax\",\"thus\"]\nOutput: \"enough\"",
      "Input: licensePlate = \"iMSlpe4\", words = [\"claim\",\"consumer\",\"student\",\"camera\",\"public\",\"never\",\"wonder\",\"simple\",\"thought\",\"use\"]\nOutput: \"simple\""
    ],
    "constraints": "`1 <= licensePlate.length <= 7`\n`licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.\n\n`1 <= words.length <= 1000`\n`1 <= words[i].length <= 15`\n`words[i]` consists of lower case English letters."
  },
  {
    "id": "749",
    "title": "Contain Virus",
    "difficulty": "Hard",
    "explanation": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\n\nThe world is modeled as a 2-D array of cells, where `0` represents uninfected cells, and `1` represents cells contaminated with the virus.  A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\n\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.\n\nResources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.\n\nCan you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.",
    "examples": [
      "Input: grid = \n[[0,1,0,0,0,0,0,1],\n [0,1,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,0]]\nOutput: 10\nExplanation:\nThere are 2 contaminated regions.\n\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n[[0,1,0,0,0,0,1,1],\n [0,1,0,0,0,0,1,1],\n [0,0,0,0,0,0,1,1],\n [0,0,0,0,0,0,0,1]]\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.",
      "Input: grid = \n[[1,1,1],\n [1,0,1],\n [1,1,1]]\nOutput: 4\nExplanation: Even though there is only one cell saved, there are 4 walls built.\n\nNotice that walls are only built on the shared boundary of two different cells.",
      "Input: grid = \n[[1,1,1,0,0,0,0,0,0],\n [1,0,1,0,1,1,1,1,1],\n [1,1,1,0,0,0,0,0,0]]\nOutput: 13\nExplanation: The region on the left only builds two new walls.\n\nNote:\nThe number of rows and columns of `grid` will each be in the range `[1, 50]`.\n\nEach `grid[i][j]` will be either `0` or `1`.\n\nThroughout the described process, there is always a contiguous viral region that will infect strictly more uncontaminated squares in the next round."
    ],
    "constraints": ""
  },
  {
    "id": "750",
    "title": "Number Of Corner Rectangles",
    "difficulty": "Medium",
    "explanation": "Given a grid where each entry is only 0 or 1, find the number of corner rectangles.\n\nA corner rectangle is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.",
    "examples": [
      "Input: grid = \n[[1, 0, 0, 1, 0],\n [0, 0, 1, 0, 1],\n [0, 0, 0, 1, 0],\n [1, 0, 1, 0, 1]]\nOutput: 1\nExplanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].",
      "Input: grid = \n[[1, 1, 1],\n [1, 1, 1],\n [1, 1, 1]]\nOutput: 9\nExplanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.",
      "Input: grid = \n[[1, 1, 1, 1]]\nOutput: 0\nExplanation: Rectangles must have four distinct corners.\n\nNote:\nThe number of rows and columns of `grid` will each be in the range `[1, 200]`.\n\nEach `grid[i][j]` will be either `0` or `1`.\n\nThe number of `1`s in the grid will be at most `6000`."
    ],
    "constraints": ""
  },
  {
    "id": "751",
    "title": "IP to CIDR",
    "difficulty": "Medium",
    "explanation": "Given a start IP address `ip` and a number of ips we need to cover `n`, return a representation of the range as a list (of smallest possible length) of CIDR blocks.\n\nA CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: \"123.45.67.89/20\".  That prefix length \"20\" represents the number of common prefix bits in the specified range.",
    "examples": [
      "Input: ip = \"255.0.0.7\", n = 10\nOutput: [\"255.0.0.7/32\",\"255.0.0.8/29\",\"255.0.0.16/32\"]\nExplanation:\nThe initial ip address, when converted to binary, looks like this (spaces added for clarity):\n255.0.0.7 -> 11111111 00000000 00000000 00000111\nThe address \"255.0.0.7/32\" specifies all addresses with a common prefix of 32 bits to the given address,\nie. just this one address.\n\nThe address \"255.0.0.8/29\" specifies all addresses with a common prefix of 29 bits to the given address:\n255.0.0.8 -> 11111111 00000000 00000000 00001000\nAddresses with common prefix of 29 bits are:\n11111111 00000000 00000000 00001000\n11111111 00000000 00000000 00001001\n11111111 00000000 00000000 00001010\n11111111 00000000 00000000 00001011\n11111111 00000000 00000000 00001100\n11111111 00000000 00000000 00001101\n11111111 00000000 00000000 00001110\n11111111 00000000 00000000 00001111\nThe address \"255.0.0.16/32\" specifies all addresses with a common prefix of 32 bits to the given address,\nie. just 11111111 00000000 00000000 00010000.\n\nIn total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .\n\nThere were other representations, such as:\n[\"255.0.0.7/32\",\"255.0.0.8/30\", \"255.0.0.12/30\", \"255.0.0.16/32\"],\nbut our answer was the shortest possible.\n\nAlso note that a representation beginning with say, \"255.0.0.7/30\" would be incorrect,\nbecause it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 \nthat are outside the specified range.\n\nNote:\n`ip` will be a valid IPv4 address.\n\nEvery implied address `ip + x` (for `x < n`) will be a valid IPv4 address.\n\n`n` will be an integer in the range `[1, 1000]`."
    ],
    "constraints": ""
  },
  {
    "id": "752",
    "title": "Open the Lock",
    "difficulty": "Medium",
    "explanation": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.",
    "examples": [
      "Input: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\nOutput: 6\nExplanation:\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\n\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".",
      "Input: deadends = [\"8888\"], target = \"0009\"\nOutput: 1\nExplanation:\nWe can turn the last wheel in reverse to move from \"0000\" -> \"0009\".",
      "Input: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\nOutput: -1\nExplanation:\nWe can't reach the target without getting stuck.",
      "Input: deadends = [\"0000\"], target = \"8888\"\nOutput: -1"
    ],
    "constraints": "`1 <= deadends.length <= 500`\n`deadends[i].length == 4`\n`target.length == 4`\ntarget will not be in the list `deadends`.\n\n`target` and `deadends[i]` consist of digits only."
  },
  {
    "id": "753",
    "title": "Cracking the Safe",
    "difficulty": "Hard",
    "explanation": "There is a box protected by a password. The password is a sequence of `n` digits where each digit can be one of the first `k` digits `0, 1, ..., k-1`.\n\nWhile entering a password, the last `n` digits entered will automatically be matched against the correct password.\n\nFor example, assuming the correct password is `\"345\"`, if you type `\"012345\"`, the box will open because the correct password matches the suffix of the entered password.\n\nReturn any password of minimum length that is guaranteed to open the box at some point of entering it.",
    "examples": [
      "Input: n = 1, k = 2\nOutput: \"01\"\nNote: \"10\" will be accepted too.",
      "Input: n = 2, k = 2\nOutput: \"00110\"\nNote: \"01100\", \"10011\", \"11001\" will be accepted too.\n\nNote:\n`n` will be in the range `[1, 4]`.\n\n`k` will be in the range `[1, 10]`.\n\n`k^n` will be at most `4096`."
    ],
    "constraints": ""
  },
  {
    "id": "754",
    "title": "Reach a Number",
    "difficulty": "Medium",
    "explanation": "You are standing at position `0` on an infinite number line.  There is a goal at position `target`.\n\nOn each move, you can either go left or right.  During the n-th move (starting from 1), you take n steps.\n\nReturn the minimum number of steps required to reach the destination.",
    "examples": [
      "Input: target = 3\nOutput: 2\nExplanation:\nOn the first move we step from 0 to 1.\n\nOn the second step we step from 1 to 3.",
      "Input: target = 2\nOutput: 3\nExplanation:\nOn the first move we step from 0 to 1.\n\nOn the second move we step  from 1 to -1.\n\nOn the third move we step from -1 to 2.\n\nNote:\n`target` will be a non-zero integer in the range `[-10^9, 10^9]`."
    ],
    "constraints": ""
  },
  {
    "id": "755",
    "title": "Pour Water",
    "difficulty": "Medium",
    "explanation": "We are given an elevation map, `heights[i]` representing the height of the terrain at that index.  The width at each index is 1.  After `V` units of water fall at index `K`, how much water is at each index?\nWater first drops at index `K` and rests on top of the highest terrain or water at that index.  Then, it flows according to the following rules:\nIf the droplet would eventually fall by moving left, then move left.\n\nOtherwise, if the droplet would eventually fall by moving right, then move right.\n\nOtherwise, rise at it's current position.\n\nHere, \"eventually fall\" means that the droplet will eventually be at a lower level if it moves in that direction.\n\nAlso, \"level\" means the height of the terrain plus any water in that column.\n\nWe can assume there's infinitely high terrain on the two sides out of bounds of the array.  Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.",
    "examples": [
      "Input: heights = [2,1,1,2,1,2,2], V = 4, K = 3\nOutput: [2,2,2,3,2,2,2]\nExplanation:\n#       #\n#       #\n##  # ###\n#########\n 0123456    <- index\nThe first drop of water lands at index K = 3:\n#       #\n#   w   #\n##  # ###\n#########\n 0123456    \nWhen moving left or right, the water can only move to the same level or a lower level.\n\n(By level, we mean the total height of the terrain plus any water in that column.)\nSince moving left will eventually make it fall, it moves left.\n\n(A droplet \"made to fall\" means go to a lower height than it was at previously.)\n#       #\n#       #\n## w# ###\n#########\n 0123456    \nSince moving left will not make it fall, it stays in place.  The next droplet falls:\n#       #\n#   w   #\n## w# ###\n#########\n 0123456  \nSince the new droplet moving left will eventually make it fall, it moves left.\n\nNotice that the droplet still preferred to move left,\neven though it could move right (and moving right makes it fall quicker.)\n#       #\n#  w    #\n## w# ###\n#########\n 0123456  \n#       #\n#       #\n##ww# ###\n#########\n 0123456  \nAfter those steps, the third droplet falls.\n\nSince moving left would not eventually make it fall, it tries to move right.\n\nSince moving right would eventually make it fall, it moves right.\n\n#       #\n#   w   #\n##ww# ###\n#########\n 0123456  \n#       #\n#       #\n##ww#w###\n#########\n 0123456  \nFinally, the fourth droplet falls.\n\nSince moving left would not eventually make it fall, it tries to move right.\n\nSince moving right would not eventually make it fall, it stays in place:\n#       #\n#   w   #\n##ww#w###\n#########\n 0123456  \nThe final answer is [2,2,2,3,2,2,2]:\n    #    \n ####### \n ####### \n 0123456",
      "Input: heights = [1,2,3,4], V = 2, K = 2\nOutput: [2,3,3,4]\nExplanation:\nThe last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.",
      "Input: heights = [3,1,3], V = 5, K = 1\nOutput: [4,4,4]\nNote:\n`heights` will have length in `[1, 100]` and contain integers in `[0, 99]`.\n\n`V` will be in range `[0, 2000]`.\n\n`K` will be in range `[0, heights.length - 1]`."
    ],
    "constraints": ""
  },
  {
    "id": "756",
    "title": "Pyramid Transition Matrix",
    "difficulty": "Medium",
    "explanation": "We are stacking blocks to form a pyramid. Each block has a color which is a one-letter string.\n\nWe are allowed to place any color block `C` on top of two adjacent blocks of colors `A` and `B`, if and only if `ABC` is an allowed triple.\n\nWe start with a bottom row of `bottom`, represented as a single string. We also start with a list of allowed triples `allowed`. Each allowed triple is represented as a string of length `3`.\n\nReturn `true` if we can build the pyramid all the way to the top, otherwise `false`.",
    "examples": [
      "Input: bottom = \"BCD\", allowed = [\"BCG\",\"CDE\",\"GEA\",\"FFF\"]\nOutput: true\nExplanation:\nWe can stack the pyramid like this:\n    A\n   / \\\n  G   E\n / \\ / \\\nB   C   D\nWe are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.",
      "Input: bottom = \"AABA\", allowed = [\"AAA\",\"AAB\",\"ABA\",\"ABB\",\"BAC\"]\nOutput: false\nExplanation:\nWe cannot stack the pyramid to the top.\n\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D."
    ],
    "constraints": "`2 <= bottom.length <= 8`\n`0 <= allowed.length <= 200`\n`allowed[i].length == 3`\nThe letters in all input strings are from the set `{'A', 'B', 'C', 'D', 'E', 'F', 'G'}`."
  },
  {
    "id": "757",
    "title": "Set Intersection Size At Least Two",
    "difficulty": "Hard",
    "explanation": "An integer interval `[a, b]` (for integers `a < b`) is a set of all consecutive integers from `a` to `b`, including `a` and `b`.\n\nFind the minimum size of a set S such that for every integer interval A in `intervals`, the intersection of S with A has a size of at least two.",
    "examples": [
      "Input: intervals = [[1,3],[1,4],[2,5],[3,5]]\nOutput: 3\nExplanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\n\nAlso, there isn't a smaller size set that fulfills the above condition.\n\nThus, we output the size of this set, which is 3.",
      "Input: intervals = [[1,2],[2,3],[2,4],[4,5]]\nOutput: 5\nExplanation: An example of a minimum sized set is {1, 2, 3, 4, 5}."
    ],
    "constraints": "`1 <= intervals.length <= 3000`\n`intervals[i].length == 2`\n`0 <= ai < bi <= 108`"
  },
  {
    "id": "758",
    "title": "Bold Words in String",
    "difficulty": "Easy",
    "explanation": "Given a set of keywords `words` and a string `S`, make all appearances of all keywords in `S` bold. Any letters between `<b>` and `</b>` tags become bold.\n\nThe returned string should use the least number of tags possible, and of course the tags should form a valid combination.\n\nFor example, given that `words = [\"ab\", \"bc\"]` and `S = \"aabcd\"`, we should return `\"a<b>abc</b>d\"`. Note that returning `\"a<b>a<b>b</b>c</b>d\"` would use more tags, so it is incorrect.\n\n\nConstraints:\n`words` has length in range `[0, 50]`.\n\n`words[i]` has length in range `[1, 10]`.\n\n`S` has length in range `[0, 500]`.\n\nAll characters in `words[i]` and `S` are lowercase letters.\n\nNote: This question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "759",
    "title": "Employee Free Time",
    "difficulty": "Hard",
    "explanation": "We are given a list `schedule` of employees, which represents the working time for each employee.\n\nEach employee has a list of non-overlapping `Intervals`, and these intervals are in sorted order.\n\nReturn the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.\n\n(Even though we are representing `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.",
    "examples": [
      "Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\nOutput: [[3,4]]\nExplanation: There are a total of three employees, and all common\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\n\nWe discard any intervals that contain inf as they aren't finite.",
      "Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\nOutput: [[5,6],[7,9]]"
    ],
    "constraints": "`1 <= schedule.length , schedule[i].length <= 50`\n`0 <= schedule[i].start < schedule[i].end <= 10^8`"
  },
  {
    "id": "760",
    "title": "Find Anagram Mappings",
    "difficulty": "Easy",
    "explanation": "Given two lists `A`and `B`, and `B` is an anagram of `A`. `B` is an anagram of `A` means `B` is made by randomizing the order of the elements in `A`.\n\nWe want to find an index mapping `P`, from `A` to `B`. A mapping `P[i] = j` means the `i`th element in `A` appears in `B` at index `j`.\n\nThese lists `A` and `B` may contain duplicates.  If there are multiple answers, output any of them.\n\nFor example, given\nA = [12, 28, 46, 32, 50]\nB = [50, 12, 32, 46, 28]\nWe should return\n[1, 4, 3, 2, 0]\nas `P[0] = 1` because the `0`th element of `A` appears at `B[1]`,\nand `P[1] = 4` because the `1`st element of `A` appears at `B[4]`,\nand so on.\n\nNote:\n`A, B` have equal lengths in range `[1, 100]`.\n\n`A[i], B[i]` are integers in range `[0, 10^5]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "761",
    "title": "Special Binary String",
    "difficulty": "Hard",
    "explanation": "Special binary strings are binary strings with the following two properties:\nThe number of 0's is equal to the number of 1's.\n\nEvery prefix of the binary string has at least as many 1's as 0's.\n\nGiven a special string `S`, a move consists of choosing two consecutive, non-empty, special substrings of `S`, and swapping them.  (Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)\nAt the end of any number of moves, what is the lexicographically largest resulting string possible?",
    "examples": [
      "Input: S = \"11011000\"\nOutput: \"11100100\"\nExplanation:\nThe strings \"10\" [occuring at S[1]] and \"1100\" [at S[3]] are swapped.\n\nThis is the lexicographically largest string possible after some number of swaps.\n\nNote:\n`S` has length at most `50`.\n\n`S` is guaranteed to be a special binary string as defined above."
    ],
    "constraints": ""
  },
  {
    "id": "762",
    "title": "Prime Number of Set Bits in Binary Representation",
    "difficulty": "Easy",
    "explanation": "Given two integers `L` and `R`, find the count of numbers in the range `[L, R]` (inclusive) having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of `1`s present when written in binary.  For example, `21` written in binary is `10101` which has 3 set bits.  Also, 1 is not a prime.)\n\nExample 1:Input: L = 6, R = 10\nOutput: 4\nExplanation:\n6 -> 110 (2 set bits, 2 is prime)\n7 -> 111 (3 set bits, 3 is prime)\n9 -> 1001 (2 set bits , 2 is prime)\n10->1010 (2 set bits , 2 is prime)\n\nExample 2:Input: L = 10, R = 15\nOutput: 5\nExplanation:\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\nNote:\n`L, R` will be integers `L <= R` in the range `[1, 10^6]`.\n\n`R - L` will be at most 10000.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "763",
    "title": "Partition Labels",
    "difficulty": "Medium",
    "explanation": "A string `S` of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.",
    "examples": [
      "Input: S = \"ababcbacadefegdehijhklij\"\nOutput: [9,7,8]\nExplanation:\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\n\nThis is a partition so that each letter appears in at most one part.\n\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts.\n\nNote:\n`S` will have length in range `[1, 500]`.\n\n`S` will consist of lowercase English letters (`'a'` to `'z'`) only."
    ],
    "constraints": ""
  },
  {
    "id": "764",
    "title": "Largest Plus Sign",
    "difficulty": "Medium",
    "explanation": "In a 2D `grid` from (0, 0) to (N-1, N-1), every cell contains a `1`, except those cells in the given list `mines` which are `0`.  What is the largest axis-aligned plus sign of `1`s contained in the grid?  Return the order of the plus sign.  If there is none, return 0.\n\nAn \"axis-aligned plus sign of `1`s of order k\" has some center `grid[x][y] = 1` along with 4 arms of length `k-1` going up, down, left, and right, and made of `1`s.  This is demonstrated in the diagrams below.  Note that there could be `0`s or `1`s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.\n\n\nExamples of Axis-Aligned Plus Signs of Order k:Order 1:\n000\n010\n000\nOrder 2:\n00000\n00100\n01110\n00100\n00000\nOrder 3:\n0000000\n0001000\n0001000\n0111110\n0001000\n0001000\n0000000\n\nExample 1:Input: N = 5, mines = [[4, 2]]\nOutput: 2\nExplanation:\n11111\n11111\n11111\n11111\n11011\nIn the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.\n\n\nExample 2:Input: N = 2, mines = []\nOutput: 1\nExplanation:\nThere is no plus sign of order 2, but there is of order 1.\n\n\nExample 3:Input: N = 1, mines = [[0, 0]]\nOutput: 0\nExplanation:\nThere is no plus sign, so return 0.\n\nNote:\n`N` will be an integer in the range `[1, 500]`.\n\n`mines` will have length at most `5000`.\n\n`mines[i]` will be length 2 and consist of integers in the range `[0, N-1]`.\n\n(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "765",
    "title": "Couples Holding Hands",
    "difficulty": "Hard",
    "explanation": "N couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A swap consists of choosing any two people, then they stand up and switch seats. \nThe people and seats are represented by an integer from `0` to `2N-1`, the couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2N-2, 2N-1)`.\n\nThe couples' initial seating is given by `row[i]` being the value of the person who is initially sitting in the i-th seat.\n\n\nExample 1:Input: row = [0, 2, 1, 3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\n\n\nExample 2:Input: row = [3, 2, 0, 1]\nOutput: 0\nExplanation: All couples are already seated side by side.\n\nNote:\n `len(row)` is even and in the range of `[4, 60]`.\n\n `row` is guaranteed to be a permutation of `0...len(row)-1`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "766",
    "title": "Toeplitz Matrix",
    "difficulty": "Easy",
    "explanation": "Given an `m x n` `matrix`, return `true` if the matrix is Toeplitz. Otherwise, return `false`.\n\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.",
    "examples": [
      "Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\nOutput: true\nExplanation:\nIn the above grid, the diagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\n\nIn each diagonal all elements are the same, so the answer is True.",
      "Input: matrix = [[1,2],[2,2]]\nOutput: false\nExplanation:\nThe diagonal \"[1, 2]\" has different elements."
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 20`\n`0 <= matrix[i][j] <= 99`\nFollow up:\nWhat if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\nWhat if the `matrix` is so large that you can only load up a partial row into the memory at once?"
  },
  {
    "id": "767",
    "title": "Reorganize String",
    "difficulty": "Medium",
    "explanation": "Given a string `S`, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.\n\nIf possible, output any possible result.  If not possible, return the empty string.",
    "examples": [
      "Input: S = \"aab\"\nOutput: \"aba\"",
      "Input: S = \"aaab\"\nOutput: \"\"\nNote:\n`S` will consist of lowercase letters and have length in range `[1, 500]`."
    ],
    "constraints": ""
  },
  {
    "id": "768",
    "title": "Max Chunks To Make Sorted II",
    "difficulty": "Hard",
    "explanation": "This question is the same as \"Max Chunks to Make Sorted\" except the integers of the given array are not necessarily distinct, the input array could be up to length `2000`, and the elements could be up to `10**8`.\n\nGiven an array `arr` of integers (not necessarily distinct), we split the array into some number of \"chunks\" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.\n\nWhat is the most number of chunks we could have made?",
    "examples": [
      "Input: arr = [5,4,3,2,1]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\n\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.",
      "Input: arr = [2,1,3,4,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\n\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n\nNote:\n`arr` will have length in range `[1, 2000]`.\n\n`arr[i]` will be an integer in range `[0, 10**8]`."
    ],
    "constraints": ""
  },
  {
    "id": "769",
    "title": "Max Chunks To Make Sorted",
    "difficulty": "Medium",
    "explanation": "Given an array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`, we split the array into some number of \"chunks\" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.\n\nWhat is the most number of chunks we could have made?",
    "examples": [
      "Input: arr = [4,3,2,1,0]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\n\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.",
      "Input: arr = [1,0,2,3,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\n\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n\nNote:\n`arr` will have length in range `[1, 10]`.\n\n`arr[i]` will be a permutation of `[0, 1, ..., arr.length - 1]`."
    ],
    "constraints": ""
  },
  {
    "id": "770",
    "title": "Basic Calculator IV",
    "difficulty": "Hard",
    "explanation": "Given an `expression` such as `expression = \"e + 8 - a + 5\"` and an evaluation map such as `{\"e\": 1}` (given in terms of `evalvars = [\"e\"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[\"-1*a\",\"14\"]`\nAn expression alternates chunks and symbols, with a space separating each chunk and symbol.\n\nA chunk is either an expression in parentheses, a variable, or a non-negative integer.\n\nA variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x\"` or `\"-x\"`.\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, `expression = \"1 + 2 * 3\"` has an answer of `[\"7\"]`.\n\nThe format of the output is as follows:\nFor each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like `\"b*a*c\"`, only `\"a*b*c\"`.\n\nTerms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, `\"a*a*b*c\"` has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\nThe leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.\n\nAn example of a well formatted answer is `[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]` \nTerms (including constant terms) with coefficient 0 are not included.  For example, an expression of \"0\" has an output of [].\n\n\nExamples:\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\nOutput: [\"-1*a\",\"14\"]\nInput: expression = \"e - 8 + temperature - pressure\",\nevalvars = [\"e\", \"temperature\"], evalints = [1, 12]\nOutput: [\"-1*pressure\",\"5\"]\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\nOutput: [\"1*e*e\",\"-64\"]\nInput: expression = \"7 - 7\", evalvars = [], evalints = []\nOutput: []\nInput: expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []\nOutput: [\"5*a*b*c\"]\nInput: expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\",\nevalvars = [], evalints = []\nOutput: [\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]\nNote:\n`expression` will have length in range `[1, 250]`.\n\n`evalvars, evalints` will have equal lengths in range `[0, 100]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "771",
    "title": "Jewels and Stones",
    "difficulty": "Easy",
    "explanation": "You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.\n\nLetters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`.",
    "examples": [
      "Input: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3",
      "Input: jewels = \"z\", stones = \"ZZ\"\nOutput: 0"
    ],
    "constraints": "`1 <= jewels.length, stones.length <= 50`\n`jewels` and `stones` consist of only English letters.\n\nAll the characters of `jewels` are unique."
  },
  {
    "id": "772",
    "title": "Basic Calculator III",
    "difficulty": "Hard",
    "explanation": "Implement a basic calculator to evaluate a simple expression string.\n\nThe expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. The integer division should truncate toward zero.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.",
    "examples": [
      "Input: s = \"1+1\"\nOutput: 2",
      "Input: s = \"6-4/2\"\nOutput: 4",
      "Input: s = \"2*(5+5*2)/3+(6/2+8)\"\nOutput: 21",
      "Input: s = \"(2+6*3+5-(3*14/7+2)*5)+3\"\nOutput: -12",
      "Input: s = \"0\"\nOutput: 0"
    ],
    "constraints": "`1 <= s <= 104`\n`s` consists of digits, `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n\n`s` is a valid expression.\n\nFollow up: Could you solve the problem without using built-in library functions?"
  },
  {
    "id": "773",
    "title": "Sliding Puzzle",
    "difficulty": "Hard",
    "explanation": "On a 2x3 `board`, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.\n\nA move consists of choosing `0` and a 4-directionally adjacent number and swapping it.\n\nThe state of the board is solved if and only if the `board` is `[[1,2,3],[4,5,0]].`\nGiven a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\n\n\nExamples:\nInput: board = [[1,2,3],[4,0,5]]\nOutput: 1\nExplanation: Swap the 0 and the 5 in one move.\n\nInput: board = [[1,2,3],[5,4,0]]\nOutput: -1\nExplanation: No number of moves will make the board solved.\n\nInput: board = [[4,1,2],[5,0,3]]\nOutput: 5\nExplanation: 5 is the smallest number of moves that solves the board.\n\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]\nInput: board = [[3,2,4],[1,5,0]]\nOutput: 14\nNote:\n`board` will be a 2 x 3 array as described above.\n\n`board[i][j]` will be a permutation of `[0, 1, 2, 3, 4, 5]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "774",
    "title": "Minimize Max Distance to Gas Station",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `stations` that represents the positions of the gas stations on the x-axis. You are also given an integer `k`.\n\nYou should add `k` new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.\n\nLet `penalty()` be the maximum distance between adjacent gas stations after adding the `k` new stations.\n\nReturn the smallest possible value of `penalty()`. Answers within `10-6` of the actual answer will be accepted.",
    "examples": [
      "Input: stations = [1,2,3,4,5,6,7,8,9,10], k = 9\nOutput: 0.50000",
      "Input: stations = [23,24,36,39,46,56,57,65,84,98], k = 1\nOutput: 14.00000"
    ],
    "constraints": "`10 <= stations.length <= 2000`\n`0 <= stations[i] <= 108`\n`stations` is sorted in a strictly increasing order.\n\n`1 <= k <= 106`"
  },
  {
    "id": "775",
    "title": "Global and Local Inversions",
    "difficulty": "Medium",
    "explanation": "We have some permutation `A` of `[0, 1, ..., N - 1]`, where `N` is the length of `A`.\n\nThe number of (global) inversions is the number of `i < j` with `0 <= i < j < N` and `A[i] > A[j]`.\n\nThe number of local inversions is the number of `i` with `0 <= i < N` and `A[i] > A[i+1]`.\n\nReturn `true` if and only if the number of global inversions is equal to the number of local inversions.",
    "examples": [
      "Input: A = [1,0,2]\nOutput: true\nExplanation: There is 1 global inversion, and 1 local inversion.",
      "Input: A = [1,2,0]\nOutput: false\nExplanation: There are 2 global inversions, and 1 local inversion.\n\nNote:\n`A` will be a permutation of `[0, 1, ..., A.length - 1]`.\n\n`A` will have length in range `[1, 5000]`.\n\nThe time limit for this problem has been reduced."
    ],
    "constraints": ""
  },
  {
    "id": "776",
    "title": "Split BST",
    "difficulty": "Medium",
    "explanation": "Given a Binary Search Tree (BST) with root node `root`, and a target value `V`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.  It's not necessarily the case that the tree contains a node with value `V`.\n\nAdditionally, most of the structure of the original tree should remain.  Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.\n\nYou should output the root TreeNode of both subtrees after splitting, in any order.",
    "examples": [
      "Input: root = [4,2,6,1,3,5,7], V = 2\nOutput: [[2,1],[4,3,6,null,null,5,7]]\nExplanation:\nNote that root, output[0], and output[1] are TreeNode objects, not arrays.\n\nThe given tree [4,2,6,1,3,5,7] is represented by the following diagram:\n          4\n        /   \\\n      2      6\n     / \\    / \\\n    1   3  5   7\nwhile the diagrams for the outputs are:\n          4\n        /   \\\n      3      6      and    2\n            / \\           /\n           5   7         1\nNote:\nThe size of the BST will not exceed `50`.\n\nThe BST is always valid and each node's value is different."
    ],
    "constraints": ""
  },
  {
    "id": "777",
    "title": "Swap Adjacent in LR String",
    "difficulty": "Medium",
    "explanation": "In a string composed of `'L'`, `'R'`, and `'X'` characters, like `\"RXXLRXRXL\"`, a move consists of either replacing one occurrence of `\"XL\"` with `\"LX\"`, or replacing one occurrence of `\"RX\"` with `\"XR\"`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.",
    "examples": [
      "Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\nOutput: true\nExplanation: We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX",
      "Input: start = \"X\", end = \"L\"\nOutput: false",
      "Input: start = \"LLR\", end = \"RRL\"\nOutput: false",
      "Input: start = \"XL\", end = \"LX\"\nOutput: true",
      "Input: start = \"XLLR\", end = \"LXLX\"\nOutput: false"
    ],
    "constraints": "`1 <= start.length <= 104`\n`start.length == end.length`\nBoth `start` and `end` will only consist of characters in `'L'`, `'R'`, and `'X'`."
  },
  {
    "id": "778",
    "title": "Swim in Rising Water",
    "difficulty": "Hard",
    "explanation": "On an N x N `grid`, each square `grid[i][j]` represents the elevation at that point `(i,j)`.\n\nNow rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nYou start at the top left square `(0, 0)`. What is the least time until you can reach the bottom right square `(N-1, N-1)`?",
    "examples": [
      "Input: [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time `0`, you are in grid location `(0, 0)`.\n\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\n\nYou cannot reach point `(1, 1)` until time `3`.\n\nWhen the depth of water is `3`, we can swim anywhere inside the grid.",
      "Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation:\n 0  1  2  3  4\n24 23 22 21  5\n12 13 14 15 16\n11 17 18 19 20\n10  9  8  7  6\nThe final route is marked in bold.\n\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\nNote:\n`2 <= N <= 50`.\n\ngrid[i][j] is a permutation of [0, ..., N*N - 1]."
    ],
    "constraints": ""
  },
  {
    "id": "779",
    "title": "K-th Symbol in Grammar",
    "difficulty": "Medium",
    "explanation": "On the first row, we write a `0`. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.\n\nGiven row `N` and index `K`, return the `K`-th indexed symbol in row `N`. (The values of `K` are 1-indexed.) (1 indexed).\n\n\nExamples:\nInput: N = 1, K = 1\nOutput: 0\nInput: N = 2, K = 1\nOutput: 0\nInput: N = 2, K = 2\nOutput: 1\nInput: N = 4, K = 5\nOutput: 1\nExplanation:\nrow 1: 0\nrow 2: 01\nrow 3: 0110\nrow 4: 01101001\nNote:\n`N` will be an integer in the range `[1, 30]`.\n\n`K` will be an integer in the range `[1, 2^(N-1)]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "780",
    "title": "Reaching Points",
    "difficulty": "Hard",
    "explanation": "A move consists of taking a point `(x, y)` and transforming it to either `(x, x+y)` or `(x+y, y)`.\n\nGiven a starting point `(sx, sy)` and a target point `(tx, ty)`, return `True` if and only if a sequence of moves exists to transform the point `(sx, sy)` to `(tx, ty)`. Otherwise, return `False`.\n\n\nExamples:\nInput: sx = 1, sy = 1, tx = 3, ty = 5\nOutput: True\nExplanation:\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)\nInput: sx = 1, sy = 1, tx = 2, ty = 2\nOutput: False\nInput: sx = 1, sy = 1, tx = 1, ty = 1\nOutput: True\nNote:\n`sx, sy, tx, ty` will all be integers in the range `[1, 10^9]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "781",
    "title": "Rabbits in Forest",
    "difficulty": "Medium",
    "explanation": "In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those `answers` are placed in an array.\n\nReturn the minimum number of rabbits that could be in the forest.\n\n\nExamples:\nInput: answers = [1, 1, 2]\nOutput: 5\nExplanation:\nThe two rabbits that answered \"1\" could both be the same color, say red.\n\nThe rabbit than answered \"2\" can't be red or the answers would be inconsistent.\n\nSay the rabbit that answered \"2\" was blue.\n\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\n\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\n\nInput: answers = [10, 10, 10]\nOutput: 11\nInput: answers = []\nOutput: 0\nNote:\n`answers` will have length at most `1000`.\n\nEach `answers[i]` will be an integer in the range `[0, 999]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "782",
    "title": "Transform to Chessboard",
    "difficulty": "Hard",
    "explanation": "An N x N `board` contains only `0`s and `1`s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.\n\nWhat is the minimum number of moves to transform the board into a \"chessboard\" - a board where no `0`s and no `1`s are 4-directionally adjacent? If the task is impossible, return -1.\n\n\nExamples:\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\nOutput: 2\nExplanation:\nOne potential sequence of moves is shown below, from left to right:\n0110     1010     1010\n0110 --> 1010 --> 0101\n1001     0101     1010\n1001     0101     0101\nThe first move swaps the first and second column.\n\nThe second move swaps the second and third row.\n\nInput: board = [[0, 1], [1, 0]]\nOutput: 0\nExplanation:\nAlso note that the board with 0 in the top left corner,\n01\n10\nis also a valid chessboard.\n\nInput: board = [[1, 0], [1, 0]]\nOutput: -1\nExplanation:\nNo matter what sequence of moves you make, you cannot end with a valid chessboard.\n\nNote:\n`board` will have the same number of rows and columns, a number in the range `[2, 30]`.\n\n`board[i][j]` will be only `0`s or `1`s.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "783",
    "title": "Minimum Distance Between BST Nodes",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n\nNote: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/",
    "examples": [
      "Input: root = [4,2,6,1,3]\nOutput: 1",
      "Input: root = [1,0,48,null,null,12,49]\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 100]`.\n\n`0 <= Node.val <= 105`"
  },
  {
    "id": "784",
    "title": "Letter Case Permutation",
    "difficulty": "Medium",
    "explanation": "Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.\n\nReturn a list of all possible strings we could create. You can return the output in any order.",
    "examples": [
      "Input: S = \"a1b2\"\nOutput: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
      "Input: S = \"3z4\"\nOutput: [\"3z4\",\"3Z4\"]",
      "Input: S = \"12345\"\nOutput: [\"12345\"]",
      "Input: S = \"0\"\nOutput: [\"0\"]"
    ],
    "constraints": "`S` will be a string with length between `1` and `12`.\n\n`S` will consist only of letters or digits."
  },
  {
    "id": "785",
    "title": "Is Graph Bipartite?",
    "difficulty": "Medium",
    "explanation": "There is an undirected graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:\nThere are no self-edges (`graph[u]` does not contain `u`).\n\nThere are no parallel edges (`graph[u]` does not contain duplicate values).\n\nIf `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).\n\nThe graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.\n\nA graph is bipartite if the nodes can be partitioned into two independent sets `A` and `B` such that every edge in the graph connects a node in set `A` and a node in set `B`.\n\nReturn `true` if and only if it is bipartite.",
    "examples": [
      "Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.",
      "Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}."
    ],
    "constraints": "`graph.length == n`\n`1 <= n <= 100`\n`0 <= graph[u].length < n`\n`0 <= graph[u][i] <= n - 1`\n`graph[u]` does not contain `u`.\n\nAll the values of `graph[u]` are unique.\n\nIf `graph[u]` contains `v`, then `graph[v]` contains `u`."
  },
  {
    "id": "786",
    "title": "K-th Smallest Prime Fraction",
    "difficulty": "Hard",
    "explanation": "You are given a sorted integer array `arr` containing `1` and prime numbers, where all the integers of `arr` are unique. You are also given an integer `k`.\n\nFor every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.\n\nReturn the `kth` smallest fraction considered. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.",
    "examples": [
      "Input: arr = [1,2,3,5], k = 3\nOutput: [2,5]\nExplanation: The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\n\nThe third fraction is 2/5.",
      "Input: arr = [1,7], k = 1\nOutput: [1,7]"
    ],
    "constraints": "`2 <= arr.length <= 1000`\n`1 <= arr[i] <= 3 * 104`\n`arr[0] == 1`\n`arr[i]` is a prime number for `i > 0`.\n\nAll the numbers of `arr` are unique and sorted in strictly increasing order.\n\n`1 <= k <= arr.length * (arr.length - 1) / 2`"
  },
  {
    "id": "787",
    "title": "Cheapest Flights Within K Stops",
    "difficulty": "Medium",
    "explanation": "There are `n` cities connected by `m` flights. Each flight starts from city `u` and arrives at `v` with a price `w`.\n\nNow given all the cities and flights, together with starting city `src` and the destination `dst`, your task is to find the cheapest price from `src` to `dst` with up to `k` stops. If there is no such route, output `-1`.",
    "examples": [
      "Input: \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\nOutput: 200\nExplanation: \nThe graph looks like this:\nThe cheapest price from city `0` to city `2` with at most 1 stop costs 200, as marked red in the picture.",
      "Input: \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\nOutput: 500\nExplanation: \nThe graph looks like this:\nThe cheapest price from city `0` to city `2` with at most 0 stop costs 500, as marked blue in the picture."
    ],
    "constraints": "The number of nodes `n` will be in range `[1, 100]`, with nodes labeled from `0` to `n`` - 1`.\n\nThe size of `flights` will be in range `[0, n * (n - 1) / 2]`.\n\nThe format of each flight will be `(src, ``dst``, price)`.\n\nThe price of each flight will be in the range `[1, 10000]`.\n\n`k` is in the range of `[0, n - 1]`.\n\nThere will not be any duplicated flights or self cycles."
  },
  {
    "id": "788",
    "title": "Rotated Digits",
    "difficulty": "Easy",
    "explanation": "X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.\n\nA number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.\n\nNow given a positive number `N`, how many numbers X from `1` to `N` are good?\n\nExample:\nInput: 10\nOutput: 4\nExplanation: \nThere are four good numbers in the range [1, 10] : 2, 5, 6, 9.\n\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n\nNote:\nN  will be in range `[1, 10000]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "789",
    "title": "Escape The Ghosts",
    "difficulty": "Medium",
    "explanation": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]`, which you are trying to get to. There are several ghosts on the map with their starting positions given as an array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are integral coordinates.\n\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still. All actions happen simultaneously.\n\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\n\nReturn `true` if it is possible to escape, otherwise return `false`.",
    "examples": [
      "Input: ghosts = [[1,0],[0,3]], target = [0,1]\nOutput: true\nExplanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.",
      "Input: ghosts = [[1,0]], target = [2,0]\nOutput: false\nExplanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.",
      "Input: ghosts = [[2,0]], target = [1,0]\nOutput: false\nExplanation: The ghost can reach the target at the same time as you.",
      "Input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]\nOutput: false",
      "Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]\nOutput: true"
    ],
    "constraints": "`1 <= ghosts.length <= 100`\n`ghosts[i].length == 2`\n`-104 <= xi, yi <= 104`\nThere can be multiple ghosts in the same location.\n\n`target.length == 2`\n`-104 <= xtarget, ytarget <= 104`"
  },
  {
    "id": "790",
    "title": "Domino and Tromino Tiling",
    "difficulty": "Medium",
    "explanation": "We have two types of tiles: a 2x1 domino shape, and an \"L\" tromino shape. These shapes may be rotated.\n\nXX  <- domino\nXX  <- \"L\" tromino\nX\nGiven N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.\n\n(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)\n\nExample:\nInput: 3\nOutput: 5\nExplanation: \nThe five different ways are listed below, different letters indicates different tiles:\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY\nNote:\nN  will be in range `[1, 1000]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "791",
    "title": "Custom Sort String",
    "difficulty": "Medium",
    "explanation": "`S` and `T` are strings composed of lowercase letters. In `S`, no letter occurs more than once.\n\n`S` was sorted in some custom order previously. We want to permute the characters of `T` so that they match the order that `S` was sorted. More specifically, if `x` occurs before `y` in `S`, then `x` should occur before `y` in the returned string.\n\nReturn any permutation of `T` (as a string) that satisfies this property.\n\n\nExample :\nInput: \nS = \"cba\"\nT = \"abcd\"\nOutput: \"cbad\"\nExplanation: \n\"a\", \"b\", \"c\" appear in S, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". \nSince \"d\" does not appear in S, it can be at any position in T. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n\nNote:\n`S` has length at most `26`, and no character is repeated in `S`.\n\n`T` has length at most `200`.\n\n`S` and `T` consist of lowercase letters only.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "792",
    "title": "Number of Matching Subsequences",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and an array of strings `words`, return the number of `words[i]` that is a subsequence of `s`.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, `\"ace\"` is a subsequence of `\"abcde\"`.",
    "examples": [
      "Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\nOutput: 3\nExplanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".",
      "Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\nOutput: 2"
    ],
    "constraints": "`1 <= s.length <= 5 * 104`\n`1 <= words.length <= 5000`\n`1 <= words[i].length <= 50`\n`s` and `words[i]` consist of only lowercase English letters."
  },
  {
    "id": "793",
    "title": "Preimage Size of Factorial Zeroes Function",
    "difficulty": "Hard",
    "explanation": "Let `f(x)` be the number of zeroes at the end of `x!`. (Recall that `x! = 1 * 2 * 3 * ... * x`, and by convention, `0! = 1`.)\nFor example, `f(3) = 0` because 3! = 6 has no zeroes at the end, while `f(11) = 2` because 11! = 39916800 has 2 zeroes at the end. Given `K`, find how many non-negative integers `x` have the property that `f(x) = K`.",
    "examples": [
      "Input: K = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.",
      "Input: K = 5\nOutput: 0\nExplanation: There is no x such that x! ends in K = 5 zeroes.\n\nNote:\n`K` will be an integer in the range `[0, 10^9]`."
    ],
    "constraints": ""
  },
  {
    "id": "794",
    "title": "Valid Tic-Tac-Toe State",
    "difficulty": "Medium",
    "explanation": "A Tic-Tac-Toe board is given as a string array `board`. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\n\nThe `board` is a 3 x 3 array, and consists of characters `\" \"`, `\"X\"`, and `\"O\"`.  The \" \" character represents an empty square.\n\nHere are the rules of Tic-Tac-Toe:\nPlayers take turns placing characters into empty squares (\" \").\n\nThe first player always places \"X\" characters, while the second player always places \"O\" characters.\n\n\"X\" and \"O\" characters are always placed into empty squares, never filled ones.\n\nThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\n\nThe game also ends if all squares are non-empty.\n\nNo more moves can be played if the game is over.",
    "examples": [
      "Input: board = [\"O  \", \"   \", \"   \"]\nOutput: false\nExplanation: The first player always plays \"X\".",
      "Input: board = [\"XOX\", \" X \", \"   \"]\nOutput: false\nExplanation: Players take turns making moves.",
      "Input: board = [\"XXX\", \"   \", \"OOO\"]\nOutput: false",
      "Input: board = [\"XOX\", \"O O\", \"XOX\"]\nOutput: true\nNote:\n`board` is a length-3 array of strings, where each string `board[i]` has length 3.\n\nEach `board[i][j]` is a character in the set `{\" \", \"X\", \"O\"}`."
    ],
    "constraints": ""
  },
  {
    "id": "795",
    "title": "Number of Subarrays with Bounded Maximum",
    "difficulty": "Medium",
    "explanation": "We are given an array `A` of positive integers, and two positive integers `L` and `R` (`L <= R`).\n\nReturn the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least `L` and at most `R`.\n\n\nExample :\nInput: \nA = [2, 1, 4, 3]\nL = 2\nR = 3\nOutput: 3\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\n\nNote:\nL, R  and `A[i]` will be an integer in the range `[0, 10^9]`.\n\nThe length of `A` will be in the range of `[1, 50000]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "796",
    "title": "Rotate String",
    "difficulty": "Easy",
    "explanation": "We are given two strings, `A` and `B`.\n\nA shift on `A` consists of taking string `A` and moving the leftmost character to the rightmost position. For example, if `A = 'abcde'`, then it will be `'bcdea'` after one shift on `A`. Return `True` if and only if `A` can become `B` after some number of shifts on `A`.",
    "examples": [
      "Input: A = 'abcde', B = 'cdeab'\nOutput: true",
      "Input: A = 'abcde', B = 'abced'\nOutput: false\nNote:\n`A` and `B` will have length at most `100`."
    ],
    "constraints": ""
  },
  {
    "id": "797",
    "title": "All Paths From Source to Target",
    "difficulty": "Medium",
    "explanation": "Given a directed acyclic graph (DAG) of `n` nodes labeled from 0 to n - 1, find all possible paths from node `0` to node `n - 1`, and return them in any order.\n\nThe graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).",
    "examples": [
      "Input: graph = [[1,2],[3],[3],[]]\nOutput: [[0,1,3],[0,2,3]]\nExplanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.",
      "Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]\nOutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]",
      "Input: graph = [[1],[]]\nOutput: [[0,1]]",
      "Input: graph = [[1,2,3],[2],[3],[]]\nOutput: [[0,1,2,3],[0,2,3],[0,3]]",
      "Input: graph = [[1,3],[2],[3],[]]\nOutput: [[0,1,2,3],[0,3]]"
    ],
    "constraints": "`n == graph.length`\n`2 <= n <= 15`\n`0 <= graph[i][j] < n`\n`graph[i][j] != i` (i.e., there will be no self-loops).\n\nThe input graph is guaranteed to be a DAG."
  },
  {
    "id": "798",
    "title": "Smallest Rotation with Highest Score",
    "difficulty": "Hard",
    "explanation": "Given an array `A`, we may rotate it by a non-negative integer `K` so that the array becomes `A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]`.  Afterward, any entries that are less than or equal to their index are worth 1 point. \nFor example, if we have `[2, 4, 1, 3, 0]`, and we rotate by `K = 2`, it becomes `[1, 3, 0, 2, 4]`.  This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\n\nOver all possible rotations, return the rotation index K that corresponds to the highest score we could receive.  If there are multiple answers, return the smallest such index K.",
    "examples": [
      "Input: [2, 3, 1, 4, 0]\nOutput: 3\nExplanation:  \nScores for each K are listed below: \nK = 0,  A = [2,3,1,4,0],    score 2\nK = 1,  A = [3,1,4,0,2],    score 3\nK = 2,  A = [1,4,0,2,3],    score 3\nK = 3,  A = [4,0,2,3,1],    score 4\nK = 4,  A = [0,2,3,1,4],    score 3\nSo we should choose K = 3, which has the highest score.",
      "Input: [1, 3, 0, 2, 4]\nOutput: 0\nExplanation:  A will always have 3 points no matter how it shifts.\n\nSo we will choose the smallest K, which is 0.\n\nNote:\n`A` will have length at most `20000`.\n\n`A[i]` will be in the range `[0, A.length]`."
    ],
    "constraints": ""
  },
  {
    "id": "799",
    "title": "Champagne Tower",
    "difficulty": "Medium",
    "explanation": "We stack glasses in a pyramid, where the first row has `1` glass, the second row has `2` glasses, and so on until the 100th row.  Each glass holds one cup of champagne.\n\nThen, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)\nFor example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\nNow after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)",
    "examples": [
      "Input: poured = 1, query_row = 1, query_glass = 1\nOutput: 0.00000\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.",
      "Input: poured = 2, query_row = 1, query_glass = 1\nOutput: 0.50000\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.",
      "Input: poured = 100000009, query_row = 33, query_glass = 17\nOutput: 1.00000"
    ],
    "constraints": "`0 <= poured <= 109`\n`0 <= query_glass <= query_row < 100`"
  },
  {
    "id": "800",
    "title": "Similar RGB Color",
    "difficulty": "Easy",
    "explanation": "In the following, every capital letter represents some hexadecimal digit from `0` to `f`.\n\nThe red-green-blue color `\"#AABBCC\"` can be written as `\"#ABC\"` in shorthand.  For example, `\"#15c\"` is shorthand for the color `\"#1155cc\"`.\n\nNow, say the similarity between two colors `\"#ABCDEF\"` and `\"#UVWXYZ\"` is `-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2`.\n\nGiven the color `\"#ABCDEF\"`, return a 7 character color that is most similar to `#ABCDEF`, and has a shorthand (that is, it can be represented as some `\"#XYZ\"`",
    "examples": [
      "Input: color = \"#09f166\"\nOutput: \"#11ee66\"\nExplanation:  \nThe similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.\n\nThis is the highest among any shorthand color.\n\nNote:\n`color` is a string of length `7`.\n\n`color` is a valid RGB color: for `i > 0`, `color[i]` is a hexadecimal digit from `0` to `f`\nAny answer which has the same (highest) similarity as the best answer will be accepted.\n\nAll inputs and outputs should use lowercase letters, and the output is 7 characters."
    ],
    "constraints": ""
  },
  {
    "id": "801",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "difficulty": "Medium",
    "explanation": "We have two integer sequences `A` and `B` of the same non-zero length.\n\nWe are allowed to swap elements `A[i]` and `B[i]`.  Note that both elements are in the same index position in their respective sequences.\n\nAt the end of some number of swaps, `A` and `B` are both strictly increasing.  (A sequence is strictly increasing if and only if `A[0] < A[1] < A[2] < ... < A[A.length - 1]`.)\nGiven A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.\n\n\nExample:\nInput: A = [1,3,5,4], B = [1,2,3,7]\nOutput: 1\nExplanation: \nSwap A[3] and B[3].  Then the sequences are:\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\nwhich are both strictly increasing.\n\nNote:\n`A, B` are arrays with the same length, and that length will be in the range `[1, 1000]`.\n\n`A[i], B[i]` are integer values in the range `[0, 2000]`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "802",
    "title": "Find Eventual Safe States",
    "difficulty": "Medium",
    "explanation": "We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.\n\nWe define a starting node to be safe if we must eventually walk to a terminal node. More specifically, there is a natural number `k`, so that we must have stopped at a terminal node in less than `k` steps for any choice of where to walk.\n\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\n\nThe directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is the length of `graph`. The graph is given in the following form: `graph[i]` is a list of labels `j` such that `(i, j)` is a directed edge of the graph, going from node `i` to node `j`.",
    "examples": [
      "Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\nOutput: [2,4,5,6]\nExplanation: The given graph is shown above.",
      "Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\nOutput: [4]"
    ],
    "constraints": "`n == graph.length`\n`1 <= n <= 104`\n`0 <= graph[i].legnth <= n`\n`graph[i]` is sorted in a strictly increasing order.\n\nThe graph may contain self-loops.\n\nThe number of edges in the graph will be in the range `[1, 4 * 104]`."
  },
  {
    "id": "803",
    "title": "Bricks Falling When Hit",
    "difficulty": "Hard",
    "explanation": "You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is stable if:\nIt is directly connected to the top of the grid, or\nAt least one other brick in its four adjacent cells is stable.\n\nYou are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the `grid` (i.e., it does not land on other stable bricks).\n\nReturn an array `result`, where each `result[i]` is the number of bricks that will fall after the `ith` erasure is applied.\n\nNote that an erasure may refer to a location with no brick, and if it does, no bricks drop.",
    "examples": [
      "Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\nOutput: [2]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n [1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2].",
      "Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\nOutput: [0,0]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n [1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\n\nHence the result is [0,0]."
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 200`\n`grid[i][j]` is `0` or `1`.\n\n`1 <= hits.length <= 4 * 104`\n`hits[i].length == 2`\n`0 <= xi <= m - 1`\n`0 <= yi <= n - 1`\nAll `(xi, yi)` are unique."
  },
  {
    "id": "804",
    "title": "Unique Morse Code Words",
    "difficulty": "Easy",
    "explanation": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `\"a\"` maps to `\".-\"`, `\"b\"` maps to `\"-...\"`, `\"c\"` maps to `\"-.-.\"`, and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \".-\" + \"`-...`\"). We'll call such a concatenation, the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n\n\nExample:\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\nOutput: 2\nExplanation: \nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\n\nNote:\nThe length of `words` will be at most `100`.\n\nEach `words[i]` will have length in range `[1, 12]`.\n\n`words[i]` will only consist of lowercase letters.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "805",
    "title": "Split Array With Same Average",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `nums`.\n\nYou should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.\n\nReturn `true` if it is possible to achieve that and `false` otherwise.\n\nNote that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.",
    "examples": [
      "Input: nums = [1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.",
      "Input: nums = [3,1]\nOutput: false"
    ],
    "constraints": "`1 <= nums.length <= 30`\n`0 <= nums[i] <= 104`"
  },
  {
    "id": "806",
    "title": "Number of Lines To Write String",
    "difficulty": "Easy",
    "explanation": "You are given a string `s` of lowercase English letters and an array `widths` denoting how many pixels wide each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on.\n\nYou are trying to write `s` across several lines, where each line is no longer than `100` pixels. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`.\n\nReturn an array `result` of length 2 where:\n`result[0]` is the total number of lines.\n\n`result[1]` is the width of the last line in pixels.",
    "examples": [
      "Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.",
      "Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide."
    ],
    "constraints": "`widths.length == 26`\n`2 <= widths[i] <= 10`\n`1 <= s.length <= 1000`\n`s` contains only lowercase English letters."
  },
  {
    "id": "807",
    "title": "Max Increase to Keep City Skyline",
    "difficulty": "Medium",
    "explanation": "In a 2 dimensional array `grid`, each value `grid[i][j]` represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. \nAt the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.\n\nWhat is the maximum total sum that the height of the buildings can be increased?\n\nExample:\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\nOutput: 35\nExplanation: \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from left or right is: [8, 7, 9, 3]\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\nNotes: \n`1 < grid.length = grid[0].length <= 50`.\n\nAll heights `grid[i][j]` are in the range `[0, 100]`.\n\nAll buildings in `grid[i][j]` occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "808",
    "title": "Soup Servings",
    "difficulty": "Medium",
    "explanation": "There are two types of soup: type A and type B. Initially we have `N` ml of each type of soup. There are four kinds of operations:\nServe 100 ml of soup A and 0 ml of soup B\nServe 75 ml of soup A and 25 ml of soup B\nServe 50 ml of soup A and 50 ml of soup B\nServe 25 ml of soup A and 75 ml of soup B\nWhen we serve some soup, we give it to someone and we no longer have it.  Each turn, we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as we can.  We stop once we no longer have some quantity of both types of soup.\n\nNote that we do not have the operation where all 100 ml's of soup B are used first.  \nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.\n\n\nExample:\nInput: N = 50\nOutput: 0.625\nExplanation: \nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n\nNotes: \n`0 <= N <= 10^9`. \nAnswers within `10^-6` of the true value will be accepted as correct.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "809",
    "title": "Expressive Words",
    "difficulty": "Medium",
    "explanation": "Sometimes people repeat letters to represent extra feeling, such as \"hello\" -> \"heeellooo\", \"hi\" -> \"hiiii\".  In these strings like \"heeellooo\", we have groups of adjacent letters that are all the same:  \"h\", \"eee\", \"ll\", \"ooo\".\n\nFor some given string `S`, a query word is stretchy if it can be made to be equal to `S` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is 3 or more.\n\nFor example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has size less than 3.  Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\".  If `S = \"helllllooo\"`, then the query word \"hello\" would be stretchy because of these two extension operations: `query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = S`.\n\nGiven a list of query words, return the number of words that are stretchy. \n\nExample:\nInput: \nS = \"heeellooo\"\nwords = [\"hello\", \"hi\", \"helo\"]\nOutput: 1\nExplanation: \nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\n\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.\n\n\nConstraints:\n`0 <= len(S) <= 100`.\n\n`0 <= len(words) <= 100`.\n\n`0 <= len(words[i]) <= 100`.\n\n`S` and all words in `words` consist only of lowercase letters",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "810",
    "title": "Chalkboard XOR Game",
    "difficulty": "Hard",
    "explanation": "We are given non-negative integers nums[i] which are written on a chalkboard.  Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.  If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses.  (Also, we'll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\n\nReturn True if and only if Alice wins the game, assuming both players play optimally.\n\n\nExample:\nInput: nums = [1, 1, 2]\nOutput: false\nExplanation: \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n\nNotes: \n`1 <= N <= 1000`. \n`0 <= nums[i] <= 2^16`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "811",
    "title": "Subdomain Visit Count",
    "difficulty": "Easy",
    "explanation": "A website domain like \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\", and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.\n\nNow, call a \"count-paired domain\" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be \"9001 discuss.leetcode.com\".\n\nWe are given a list `cpdomains` of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.",
    "examples": [
      "Input: \n[\"9001 discuss.leetcode.com\"]\nOutput: \n[\"9001 discuss.leetcode.com\", \"9001 leetcode.com\", \"9001 com\"]\nExplanation: \nWe only have one website domain: \"discuss.leetcode.com\". As discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.",
      "Input: \n[\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\nOutput: \n[\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\nExplanation: \nWe will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times. For the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\n\nNotes: \nThe length of `cpdomains` will not exceed `100`. \nThe length of each domain name will not exceed `100`.\n\nEach address will have either 1 or 2 \".\" characters.\n\nThe input count in any count-paired domain will not exceed `10000`.\n\nThe answer output can be returned in any order."
    ],
    "constraints": ""
  },
  {
    "id": "812",
    "title": "Largest Triangle Area",
    "difficulty": "Easy",
    "explanation": "You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.\n\n\nExample:\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2\nExplanation: \nThe five points are show in the figure below. The red triangle is the largest.\n\nNotes: \n`3 <= points.length <= 50`.\n\nNo points will be duplicated.\n\n `-50 <= points[i][j] <= 50`.\n\nAnswers within `10^-6` of the true value will be accepted as correct.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "813",
    "title": "Largest Sum of Averages",
    "difficulty": "Medium",
    "explanation": "We partition a row of numbers `A` into at most `K` adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?\nNote that our partition must use every number in A, and that scores are not necessarily integers.\n\n\nExample:\nInput: \nA = [9,1,2,3,9]\nK = 3\nOutput: 20\nExplanation: \nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\n\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\n\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n\nNote: \n`1 <= A.length <= 100`.\n\n`1 <= A[i] <= 10000`.\n\n`1 <= K <= A.length`.\n\nAnswers within `10^-6` of the correct answer will be accepted as correct.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "814",
    "title": "Binary Tree Pruning",
    "difficulty": "Medium",
    "explanation": "We are given the head node `root` of a binary tree, where additionally every node's value is either a 0 or a 1.\n\nReturn the same tree where every subtree (of the given tree) not containing a 1 has been removed.\n\n(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)",
    "examples": [
      "Input: [1,null,0,0,1]\nOutput: [1,null,0,null,1]\nExplanation: \nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\n\nThe diagram on the right represents the answer.",
      "Input: [1,0,1,0,0,0,1]\nOutput: [1,null,1,null,1]",
      "Input: [1,1,0,1,1,0,1,0]\nOutput: [1,1,0,1,1,null,1]\nNote: \nThe binary tree will have at most `200 nodes`.\n\nThe value of each node will only be `0` or `1`."
    ],
    "constraints": ""
  },
  {
    "id": "815",
    "title": "Bus Routes",
    "difficulty": "Hard",
    "explanation": "You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\nFor example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\nReturn the least number of buses you must take to travel from `source` to `target`. Return `-1` if it is not possible.",
    "examples": [
      "Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\nOutput: 2\nExplanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.",
      "Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\nOutput: -1"
    ],
    "constraints": "`1 <= routes.length <= 500`.\n\n`1 <= routes[i].length <= 105`\nAll the values of `routes[i]` are unique.\n\n`sum(routes[i].length) <= 105`\n`0 <= routes[i][j] < 106`\n`0 <= source, target < 106`"
  },
  {
    "id": "816",
    "title": "Ambiguous Coordinates",
    "difficulty": "Medium",
    "explanation": "We had some 2-dimensional coordinates, like `\"(1, 3)\"` or `\"(2, 0.5)\"`.  Then, we removed all commas, decimal points, and spaces, and ended up with the string `S`.  Return a list of strings representing all possibilities for what our original coordinates could have been.\n\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with less digits.  Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like \".1\".\n\nThe final answer list can be returned in any order.  Also note that all coordinates in the final answer have exactly one space between them (occurring after the comma.)",
    "examples": [
      "Input: \"(123)\"\nOutput: [\"(1, 23)\", \"(12, 3)\", \"(1.2, 3)\", \"(1, 2.3)\"]",
      "Input: \"(00011)\"\nOutput:  [\"(0.001, 1)\", \"(0, 0.011)\"]\nExplanation: \n0.0, 00, 0001 or 00.01 are not allowed.",
      "Input: \"(0123)\"\nOutput: [\"(0, 123)\", \"(0, 12.3)\", \"(0, 1.23)\", \"(0.1, 23)\", \"(0.1, 2.3)\", \"(0.12, 3)\"]",
      "Input: \"(100)\"\nOutput: [(10, 0)]\nExplanation: \n1.0 is not allowed.\n\nNote: \n`4 <= S.length <= 12`.\n\n`S[0]` = \"(\", `S[S.length - 1]` = \")\", and the other elements in `S` are digits."
    ],
    "constraints": ""
  },
  {
    "id": "817",
    "title": "Linked List Components",
    "difficulty": "Medium",
    "explanation": "We are given `head`, the head node of a linked list containing unique integer values.\n\nWe are also given the list `G`, a subset of the values in the linked list.\n\nReturn the number of connected components in `G`, where two values are connected if they appear consecutively in the linked list.",
    "examples": [
      "Input: \nhead: 0->1->2->3\nG = [0, 1, 3]\nOutput: 2\nExplanation: \n0 and 1 are connected, so [0, 1] and [3] are the two connected components.",
      "Input: \nhead: 0->1->2->3->4\nG = [0, 3, 1, 4]\nOutput: 2\nExplanation: \n0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n\nNote: \nIf `N` is the length of the linked list given by `head`, `1 <= N <= 10000`.\n\nThe value of each node in the linked list will be in the range` [0, N - 1]`.\n\n`1 <= G.length <= 10000`.\n\n`G` is a subset of all values in the linked list."
    ],
    "constraints": ""
  },
  {
    "id": "818",
    "title": "Race Car",
    "difficulty": "Hard",
    "explanation": "Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)\nYour car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).\n\nWhen you get an instruction \"A\", your car does the following: `position += speed, speed *= 2`.\n\nWhen you get an instruction \"R\", your car does the following: if your speed is positive then `speed = -1` , otherwise `speed = 1`.  (Your position stays the same.)\nFor example, after commands \"AAR\", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.\n\nNow for some target position, say the length of the shortest sequence of instructions to get there.",
    "examples": [
      "Input: \ntarget = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\n\nYour position goes from 0->1->3.",
      "Input: \ntarget = 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\n\nYour position goes from 0->1->3->7->7->6.\n\nNote: \n`1 <= target <= 10000`."
    ],
    "constraints": ""
  },
  {
    "id": "819",
    "title": "Most Common Word",
    "difficulty": "Easy",
    "explanation": "Given a string `paragraph` and a string array of the banned words `banned`, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\n\nThe words in `paragraph` are case-insensitive and the answer should be returned in lowercase.",
    "examples": [
      "Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\nOutput: \"ball\"\nExplanation: \n\"hit\" occurs 3 times, but it is a banned word.\n\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is banned.",
      "Input: paragraph = \"a.\", banned = []\nOutput: \"a\""
    ],
    "constraints": "`1 <= paragraph.length <= 1000`\nparagraph consists of English letters, space `' '`, or one of the symbols: `\"!?',;.\"`.\n\n`0 <= banned.length <= 100`\n`1 <= banned[i].length <= 10`\n`banned[i]` consists of only lowercase English letters."
  },
  {
    "id": "820",
    "title": "Short Encoding of Words",
    "difficulty": "Medium",
    "explanation": "A valid encoding of an array of `words` is any reference string `s` and array of indices `indices` such that:\n`words.length == indices.length`\nThe reference string `s` ends with the `'#'` character.\n\nFor each index `indices[i]`, the substring of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.\n\nGiven an array of `words`, return the length of the shortest reference string `s` possible of any valid encoding of `words`.",
    "examples": [
      "Input: words = [\"time\", \"me\", \"bell\"]\nOutput: 10\nExplanation: A valid encoding would be s = `\"time#bell#\" and indices = [0, 2, 5`].\n\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"",
      "Input: words = [\"t\"]\nOutput: 2\nExplanation: A valid encoding would be s = \"t#\" and indices = [0]."
    ],
    "constraints": "`1 <= words.length <= 2000`\n`1 <= words[i].length <= 7`\n`words[i]` consists of only lowercase letters."
  },
  {
    "id": "821",
    "title": "Shortest Distance to a Character",
    "difficulty": "Easy",
    "explanation": "Given a string `s` and a character `c` that occurs in `s`, return an array of integers `answer` where `answer.length == s.length` and `answer[i]` is the distance from index `i` to the closest occurrence of character `c` in `s`.\n\nThe distance between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.",
    "examples": [
      "Input: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\nExplanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\n\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\n\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 3.\n\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\n\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.",
      "Input: s = \"aaab\", c = \"b\"\nOutput: [3,2,1,0]"
    ],
    "constraints": "`1 <= s.length <= 104`\n`s[i]` and `c` are lowercase English letters.\n\nIt is guaranteed that `c` occurs at least once in `s`."
  },
  {
    "id": "822",
    "title": "Card Flipping Game",
    "difficulty": "Medium",
    "explanation": "On a table are `N` cards, with a positive integer printed on the front and back of each card (possibly different).\n\nWe flip any number of cards, and after we choose one card. \nIf the number `X` on the back of the chosen card is not on the front of any card, then this number X is good.\n\nWhat is the smallest number that is good?  If no number is good, output `0`.\n\nHere, `fronts[i]` and `backs[i]` represent the number on the front and back of card `i`. \nA flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.\n\n\nExample:\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\nOutput: `2`\nExplanation: If we flip the second card, the fronts are `[1,3,4,4,7]` and the backs are `[1,2,4,1,3]`.\n\nWe choose the second card, which has number 2 on the back, and it isn't on the front of any card, so `2` is good.\n\nNote:\n`1 <= fronts.length == backs.length <= 1000`.\n\n`1 <= fronts[i] <= 2000`.\n\n`1 <= backs[i] <= 2000`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "823",
    "title": "Binary Trees With Factors",
    "difficulty": "Medium",
    "explanation": "Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.\n\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo `109 + 7`.",
    "examples": [
      "Input: arr = [2,4]\nOutput: 3\nExplanation: We can make these trees: `[2], [4], [4, 2, 2]`",
      "Input: arr = [2,4,5,10]\nOutput: 7\nExplanation: We can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`."
    ],
    "constraints": "`1 <= arr.length <= 1000`\n`2 <= arr[i] <= 109`\nAll the values of `arr` are unique."
  },
  {
    "id": "824",
    "title": "Goat Latin",
    "difficulty": "Easy",
    "explanation": "A sentence `S` is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.\n\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.)\nThe rules of Goat Latin are as follows:\nIf a word begins with a vowel (a, e, i, o, or u), append `\"ma\"` to the end of the word.\n\n\tFor example, the word 'apple' becomes 'applema'.\n\n\t \nIf a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add `\"ma\"`.\n\n\tFor example, the word `\"goat\"` becomes `\"oatgma\"`.\n\n\t \nAdd one letter `'a'` to the end of each word per its word index in the sentence, starting with 1.\n\n\tFor example, the first word gets `\"a\"` added to the end, the second word gets `\"aa\"` added to the end and so on.\n\nReturn the final sentence representing the conversion from `S` to Goat Latin.",
    "examples": [
      "Input: \"I speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
      "Input: \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\nNotes:\n`S` contains only uppercase, lowercase and spaces. Exactly one space between each word.\n\n`1 <= S.length <= 150`."
    ],
    "constraints": ""
  },
  {
    "id": "825",
    "title": "Friends Of Appropriate Ages",
    "difficulty": "Medium",
    "explanation": "Some people will make friend requests. The list of their ages is given and `ages[i]` is the age of the ith person. \nPerson A will NOT friend request person B (B != A) if any of the following conditions are true:\n`age[B] <= 0.5 * age[A] + 7`\n`age[B] > age[A]`\n`age[B] > 100 && age[A] < 100`\nOtherwise, A will friend request B.\n\nNote that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.\n\nHow many total friend requests are made?",
    "examples": [
      "Input: [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.",
      "Input: [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.",
      "Input: [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\nNotes:\n`1 <= ages.length <= 20000`.\n\n`1 <= ages[i] <= 120`."
    ],
    "constraints": ""
  },
  {
    "id": "826",
    "title": "Most Profit Assigning Work",
    "difficulty": "Medium",
    "explanation": "We have jobs: `difficulty[i]` is the difficulty of the `i`th job, and `profit[i]` is the profit of the `i`th job. \nNow we have some workers. `worker[i]` is the ability of the `i`th worker, which means that this worker can only complete a job with difficulty at most `worker[i]`. \nEvery worker can be assigned at most one job, but one job can be completed multiple times.\n\nFor example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.\n\nWhat is the most profit we can make?",
    "examples": [
      "Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\nOutput: 100 \nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.\n\nNotes:\n`1 <= difficulty.length = profit.length <= 10000`\n`1 <= worker.length <= 10000`\n`difficulty[i], profit[i], worker[i]`  are in range `[1, 10^5]`"
    ],
    "constraints": ""
  },
  {
    "id": "827",
    "title": "Making A Large Island",
    "difficulty": "Hard",
    "explanation": "You are given an `n x n` binary matrix `grid`. You are allowed to change at most one `0` to be `1`.\n\nReturn the size of the largest island in `grid` after applying this operation.\n\nAn island is a 4-directionally connected group of `1`s.",
    "examples": [
      "Input: grid = [[1,0],[0,1]]\nOutput: 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.",
      "Input: grid = [[1,1],[1,0]]\nOutput: 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.",
      "Input: grid = [[1,1],[1,1]]\nOutput: 4\nExplanation: Can't change any 0 to 1, only one island with area = 4."
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 500`\n`grid[i][j]` is either `0` or `1`."
  },
  {
    "id": "828",
    "title": "Count Unique Characters of All Substrings of a Given String",
    "difficulty": "Hard",
    "explanation": "Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`, for example if `s = \"LEETCODE\"` then `\"L\"`, `\"T\"`,`\"C\"`,`\"O\"`,`\"D\"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.\n\nOn this problem given a string `s` we need to return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.\n\nSince the answer can be very large, return the answer modulo `10 ^ 9 + 7`.",
    "examples": [
      "Input: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\n\nEvey substring is composed with only unique letters.\n\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10",
      "Input: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except `countUniqueChars`(\"ABA\") = 1.",
      "Input: s = \"LEETCODE\"\nOutput: 92"
    ],
    "constraints": "`0 <= s.length <= 10^4`\n`s` contain upper-case English letters only."
  },
  {
    "id": "829",
    "title": "Consecutive Numbers Sum",
    "difficulty": "Hard",
    "explanation": "Given a positive integer `N`, how many ways can we write it as a sum of consecutive positive integers?",
    "examples": [
      "Input: 5\nOutput: 2\nExplanation: 5 = 5 = 2 + 3",
      "Input: 9\nOutput: 3\nExplanation: 9 = 9 = 4 + 5 = 2 + 3 + 4",
      "Input: 15\nOutput: 4\nExplanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\nNote: `1 <= N <= 10 ^ 9`."
    ],
    "constraints": ""
  },
  {
    "id": "830",
    "title": "Positions of Large Groups",
    "difficulty": "Easy",
    "explanation": "In a string `s` of lowercase letters, these letters form consecutive groups of the same character.\n\nFor example, a string like `s = \"abbxxxxzyy\"` has the groups `\"a\"`, `\"bb\"`, `\"xxxx\"`, `\"z\"`, and `\"yy\"`.\n\nA group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `\"xxxx\"` has the interval `[3,6]`.\n\nA group is considered large if it has 3 or more characters.\n\nReturn the intervals of every large group sorted in increasing order by start index.",
    "examples": [
      "Input: s = \"abbxxxxzzy\"\nOutput: [[3,6]]\nExplanation: `\"xxxx\" is the only `large group with start index 3 and end index 6.",
      "Input: s = \"abc\"\nOutput: []\nExplanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.",
      "Input: s = \"abcdddeeeeaabbbcd\"\nOutput: [[3,5],[6,9],[12,14]]\nExplanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".",
      "Input: s = \"aba\"\nOutput: []"
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` contains lower-case English letters only."
  },
  {
    "id": "831",
    "title": "Masking Personal Information",
    "difficulty": "Medium",
    "explanation": "We are given a personal information string `S`, which may represent either an email address or a phone number.\n\nWe would like to mask this personal information according to the following rules:\n1. Email address:\nWe define a name to be a string of `length ≥ 2` consisting of only lowercase letters `a-z` or uppercase letters `A-Z`.\n\nAn email address starts with a name, followed by the symbol `'@'`, followed by a name, followed by the dot `'.'` and followed by a name. \nAll email addresses are guaranteed to be valid and in the format of `\"name1@name2.name3\".`\nTo mask an email, all names must be converted to lowercase and all letters between the first and last letter of the first name must be replaced by 5 asterisks `'*'`.\n\n2. Phone number:\nA phone number is a string consisting of only the digits `0-9` or the characters from the set `{'+', '-', '(', ')', ' '}.` You may assume a phone number contains 10 to 13 digits.\n\nThe last 10 digits make up the local number, while the digits before those make up the country code. Note that the country code is optional. We want to expose only the last 4 digits and mask all other digits.\n\nThe local number should be formatted and masked as `\"***-***-1111\", `where `1` represents the exposed digits.\n\nTo mask a phone number with country code like `\"+111 111 111 1111\"`, we write it in the form `\"+***-***-***-1111\".`  The `'+'` sign and the first `'-'` sign before the local number should only exist if there is a country code.  For example, a 12 digit phone number mask should start with `\"+**-\"`.\n\nNote that extraneous characters like `\"(\", \")\", \" \"`, as well as extra dashes or plus signs not part of the above formatting scheme should be removed.\n\nReturn the correct \"mask\" of the information provided.",
    "examples": [
      "Input: \"LeetCode@LeetCode.com\"\nOutput: \"l*****e@leetcode.com\"\nExplanation: All names are converted to lowercase, and the letters between the\n             first and last letter of the first name is replaced by 5 asterisks.\n\n             Therefore, \"leetcode\" -> \"l*****e\".",
      "Input: \"AB@qq.com\"\nOutput: \"a*****b@qq.com\"\nExplanation: There must be 5 asterisks between the first and last letter \n             of the first name \"ab\". Therefore, \"ab\" -> \"a*****b\".",
      "Input: \"1(234)567-890\"\nOutput: \"***-***-7890\"\nExplanation: 10 digits in the phone number, which means all digits make up the local number.",
      "Input: \"86-(10)12345678\"\nOutput: \"+**-***-***-5678\"\nExplanation: 12 digits, 2 digits for country code and 10 digits for local number. \nNotes:\n`S.length <= 40`.\n\nEmails have length at least 8.\n\nPhone numbers have length at least 10."
    ],
    "constraints": ""
  },
  {
    "id": "832",
    "title": "Flipping an Image",
    "difficulty": "Easy",
    "explanation": "Given an `n x n` binary matrix `image`, flip the image horizontally, then invert it, and return the resulting image.\n\nTo flip an image horizontally means that each row of the image is reversed.\n\nFor example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.\n\nTo invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.\n\nFor example, inverting `[0,1,1]` results in `[1,0,0]`.",
    "examples": [
      "Input: image = [[1,1,0],[1,0,1],[0,0,0]]\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\n\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]",
      "Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\nOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\nExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\n\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]"
    ],
    "constraints": "`n == image.length`\n`n == image[i].length`\n`1 <= n <= 20`\n`images[i][j]` is either `0` or `1`."
  },
  {
    "id": "833",
    "title": "Find And Replace in String",
    "difficulty": "Medium",
    "explanation": "To some string `S`, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).\n\nEach replacement operation has `3` parameters: a starting index `i`, a source word `x` and a target word `y`.  The rule is that if `x` starts at position `i` in the original string `S`, then we will replace that occurrence of `x` with `y`.  If not, we do nothing.\n\nFor example, if we have `S = \"abcd\"` and we have some replacement operation `i = 2, x = \"cd\", y = \"ffff\"`, then because `\"cd\"` starts at position `2` in the original string `S`, we will replace it with `\"ffff\"`.\n\nUsing another example on `S = \"abcd\"`, if we have both the replacement operation `i = 0, x = \"ab\", y = \"eee\"`, as well as another replacement operation `i = 2, x = \"ec\", y = \"ffff\"`, this second operation does nothing because in the original string `S[2] = 'c'`, which doesn't match `x[0] = 'e'`.\n\nAll these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, `S = \"abc\", indexes = [0, 1], sources = [\"ab\",\"bc\"]` is not a valid test case.",
    "examples": [
      "Input: S = \"abcd\", indexes = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\nOutput: \"eeebffff\"\nExplanation:\n\"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".",
      "Input: S = \"abcd\", indexes = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation:\n\"ab\" starts at index 0 in S, so it's replaced by \"eee\".\n\n\"ec\" doesn't starts at index 2 in the original S, so we do nothing."
    ],
    "constraints": "`0 <= S.length <= 1000`\n`S` consists of only lowercase English letters.\n\n`0 <= indexes.length <= 100`\n`0 <= indexes[i] < S.length`\n`sources.length == indexes.length`\n`targets.length == indexes.length`\n`1 <= sources[i].length, targets[i].length <= 50`\n`sources[i]` and `targets[i]` consist of only lowercase English letters."
  },
  {
    "id": "834",
    "title": "Sum of Distances in Tree",
    "difficulty": "Hard",
    "explanation": "An undirected, connected tree with `N` nodes labelled `0...N-1` and `N-1` `edges` are given.\n\nThe `i`th edge connects nodes `edges[i][0] `and` edges[i][1]` together.\n\nReturn a list `ans`, where `ans[i]` is the sum of the distances between node `i` and all other nodes.",
    "examples": [
      "Input: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\nOutput: [8,12,6,10,10,10]\nExplanation: \nHere is a diagram of the given tree:\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\n\nNote: `1 <= N <= 10000`"
    ],
    "constraints": ""
  },
  {
    "id": "835",
    "title": "Image Overlap",
    "difficulty": "Medium",
    "explanation": "You are given two images `img1` and `img2` both of size `n x n`, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)\nWe translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.\n\n(Note also that a translation does not include any kind of rotation.)\nWhat is the largest possible overlap?",
    "examples": [
      "Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\nOutput: 3\nExplanation: We slide img1 to right by 1 unit and down by 1 unit.\n\nThe number of positions that have a 1 in both images is 3. (Shown in red)",
      "Input: img1 = [[1]], img2 = [[1]]\nOutput: 1",
      "Input: img1 = [[0]], img2 = [[0]]\nOutput: 0"
    ],
    "constraints": "`n == img1.length`\n`n == img1[i].length`\n`n == img2.length `\n`n == img2[i].length`\n`1 <= n <= 30`\n`img1[i][j]` is `0` or `1`.\n\n`img2[i][j]` is `0` or `1`."
  },
  {
    "id": "836",
    "title": "Rectangle Overlap",
    "difficulty": "Easy",
    "explanation": "An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\n\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\n\nGiven two axis-aligned rectangles `rec1` and `rec2`, return `true` if they overlap, otherwise return `false`.",
    "examples": [
      "Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true",
      "Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false",
      "Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false"
    ],
    "constraints": "`rect1.length == 4`\n`rect2.length == 4`\n`-109 <= rec1[i], rec2[i] <= 109`\n`rec1[0] <= rec1[2]` and `rec1[1] <= rec1[3]`\n`rec2[0] <= rec2[2]` and `rec2[1] <= rec2[3]`"
  },
  {
    "id": "837",
    "title": "New 21 Game",
    "difficulty": "Medium",
    "explanation": "Alice plays the following game, loosely based on the card game \"21\".\n\nAlice starts with `0` points, and draws numbers while she has less than `K` points.  During each draw, she gains an integer number of points randomly from the range `[1, W]`, where `W` is an integer.  Each draw is independent and the outcomes have equal probabilities.\n\nAlice stops drawing numbers when she gets `K` or more points.  What is the probability that she has `N` or less points?",
    "examples": [
      "Input: N = 10, K = 1, W = 10\nOutput: 1.00000\nExplanation:  Alice gets a single card, then stops.",
      "Input: N = 6, K = 1, W = 10\nOutput: 0.60000\nExplanation:  Alice gets a single card, then stops.\n\nIn 6 out of W = 10 possibilities, she is at or below N = 6 points.",
      "Input: N = 21, K = 17, W = 10\nOutput: 0.73278\nNote:\n`0 <= K <= N <= 10000`\n`1 <= W <= 10000`\nAnswers will be accepted as correct if they are within `10^-5` of the correct answer.\n\nThe judging time limit has been reduced for this question."
    ],
    "constraints": ""
  },
  {
    "id": "838",
    "title": "Push Dominoes",
    "difficulty": "Medium",
    "explanation": "There are `N` dominoes in a line, and we place each domino vertically upright.\n\nIn the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left.\n\nSimilarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n\nGiven a string \"S\" representing the initial state. `S[i] = 'L'`, if the i-th domino has been pushed to the left; `S[i] = 'R'`, if the i-th domino has been pushed to the right; `S[i] = '.'`, if the `i`-th domino has not been pushed.\n\nReturn a string representing the final state.",
    "examples": [
      "Input: \".L.R...LR..L..\"\nOutput: \"LL.RR.LLRRLL..\"",
      "Input: \"RR.L\"\nOutput: \"RR.L\"\nExplanation: The first domino expends no additional force on the second domino.\n\nNote:\n`0 <= N <= 10^5`\nString `dominoes` contains only `'L`', `'R'` and `'.'`"
    ],
    "constraints": ""
  },
  {
    "id": "839",
    "title": "Similar String Groups",
    "difficulty": "Hard",
    "explanation": "Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal.\n\nFor example, `\"tars\"` and `\"rats\"` are similar (swapping at positions `0` and `2`), and `\"rats\"` and `\"arts\"` are similar, but `\"star\"` is not similar to `\"tars\"`, `\"rats\"`, or `\"arts\"`.\n\nTogether, these form two connected groups by similarity: `{\"tars\", \"rats\", \"arts\"}` and `{\"star\"}`.  Notice that `\"tars\"` and `\"arts\"` are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\n\nWe are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?",
    "examples": [
      "Input: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\nOutput: 2",
      "Input: strs = [\"omv\",\"ovm\"]\nOutput: 1"
    ],
    "constraints": "`1 <= strs.length <= 300`\n`1 <= strs[i].length <= 300`\n`strs[i]` consists of lowercase letters only.\n\nAll words in `strs` have the same length and are anagrams of each other."
  },
  {
    "id": "840",
    "title": "Magic Squares In Grid",
    "difficulty": "Medium",
    "explanation": "A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers from `1` to `9` such that each row, column, and both diagonals all have the same sum.\n\nGiven a `row x col` `grid` of integers, how many `3 x 3` \"magic square\" subgrids are there?  (Each subgrid is contiguous).",
    "examples": [
      "Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\nOutput: 1\nExplanation: \nThe following subgrid is a 3 x 3 magic square:\nwhile this one is not:\nIn total, there is only one magic square inside the given grid.",
      "Input: grid = [[8]]\nOutput: 0",
      "Input: grid = [[4,4],[3,3]]\nOutput: 0",
      "Input: grid = [[4,7,8],[9,5,1],[2,3,6]]\nOutput: 0"
    ],
    "constraints": "`row == grid.length`\n`col == grid[i].length`\n`1 <= row, col <= 10`\n`0 <= grid[i][j] <= 15`"
  },
  {
    "id": "841",
    "title": "Keys and Rooms",
    "difficulty": "Medium",
    "explanation": "There are `N` rooms and you start in room `0`.  Each room has a distinct number in `0, 1, 2, ..., N-1`, and each room may have some keys to access the next room. \nFormally, each room `i` has a list of keys `rooms[i]`, and each key `rooms[i][j]` is an integer in `[0, 1, ..., N-1]` where `N = rooms.length`.  A key `rooms[i][j] = v` opens the room with number `v`.\n\nInitially, all the rooms start locked (except for room `0`). \nYou can walk back and forth between rooms freely.\n\nReturn `true` if and only if you can enter every room.",
    "examples": [
      "Input: [[1],[2],[3],[]]\nOutput: true\nExplanation:  \nWe start in room 0, and pick up key 1.\n\nWe then go to room 1, and pick up key 2.\n\nWe then go to room 2, and pick up key 3.\n\nWe then go to room 3.  Since we were able to go to every room, we return true.",
      "Input: [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can't enter the room with number 2.\n\nNote:\n`1 <= rooms.length <= 1000`\n`0 <= rooms[i].length <= 1000`\nThe number of keys in all rooms combined is at most `3000`."
    ],
    "constraints": ""
  },
  {
    "id": "842",
    "title": "Split Array into Fibonacci Sequence",
    "difficulty": "Medium",
    "explanation": "Given a string `S` of digits, such as `S = \"123456579\"`, we can split it into a Fibonacci-like sequence `[123, 456, 579].`\nFormally, a Fibonacci-like sequence is a list `F` of non-negative integers such that:\n`0 <= F[i] <= 2^31 - 1`, (that is, each integer fits a 32-bit signed integer type);\n`F.length >= 3`;\nand` F[i] + F[i+1] = F[i+2] `for all `0 <= i < F.length - 2`.\n\nAlso, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\n\nReturn any Fibonacci-like sequence split from `S`, or return `[]` if it cannot be done.",
    "examples": [
      "Input: \"123456579\"\nOutput: [123,456,579]",
      "Input: \"11235813\"\nOutput: [1,1,2,3,5,8,13]",
      "Input: \"112358130\"\nOutput: []\nExplanation: The task is impossible.",
      "Input: \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.",
      "Input: \"1101111\"\nOutput: [110, 1, 111]\nExplanation: The output [11, 0, 11, 11] would also be accepted.\n\nNote: \n`1 <= S.length <= 200`\n`S` contains only digits."
    ],
    "constraints": ""
  },
  {
    "id": "843",
    "title": "Guess the Word",
    "difficulty": "Hard",
    "explanation": "This is an interactive problem.\n\nYou are given an array of unique strings `wordlist` where `wordlist[i]` is `6` letters long, and one word in this list is chosen as `secret`.\n\nYou may call `Master.guess(word)` to guess a word. The guessed word should have type `string` and must be from the original list with `6` lowercase letters.\n\nThis function returns an `integer` type, representing the number of exact matches (value and position) of your guess to the `secret` word. Also, if your guess is not in the given wordlist, it will return `-1` instead.\n\nFor each test case, you have exactly `10` guesses to guess the word. At the end of any number of calls, if you have made `10` or fewer calls to `Master.guess` and at least one of these guesses was `secret`, then you pass the test case.",
    "examples": [
      "Input: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10\nOutput: You guessed the secret word correctly.\nExplanation:\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\n\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\n\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\n\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\n\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\n\nWe made 5 calls to master.guess and one of them was the secret, so we pass the test case.",
      "Input: secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10\nOutput: You guessed the secret word correctly."
    ],
    "constraints": "`1 <= wordlist.length <= 100`\n`wordlist[i].length == 6`\n`wordlist[i]` consist of lowercase English letters.\n\nAll the strings of `wordlist` are unique.\n\n`secret` exists in `wordlist`.\n\n`numguesses == 10`"
  },
  {
    "id": "844",
    "title": "Backspace String Compare",
    "difficulty": "Easy",
    "explanation": "Given two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `'#'` means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.",
    "examples": [
      "Input: s = \"ab#c\", t = \"ad#c\"\nOutput: true\nExplanation: Both s and t become \"ac\".",
      "Input: s = \"ab##\", t = \"c#d#\"\nOutput: true\nExplanation: Both s and t become \"\".",
      "Input: s = \"a##c\", t = \"#a#c\"\nOutput: true\nExplanation: Both s and t become \"c\".",
      "Input: s = \"a#c\", t = \"b\"\nOutput: false\nExplanation: s becomes \"c\" while t becomes \"b\"."
    ],
    "constraints": "`1 <= s.length, t.length <= 200`\n`s` and `t` only contain lowercase letters and `'#'` characters.\n\nFollow up: Can you solve it in `O(n)` time and `O(1)` space?"
  },
  {
    "id": "845",
    "title": "Longest Mountain in Array",
    "difficulty": "Medium",
    "explanation": "You may recall that an array `arr` is a mountain array if and only if:\n`arr.length >= 3`\nThere exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:\n\t\n`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\nGiven an integer array `arr`, return the length of the longest subarray, which is a mountain. Return `0` if there is no mountain subarray.",
    "examples": [
      "Input: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.",
      "Input: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain."
    ],
    "constraints": "`1 <= arr.length <= 104`\n`0 <= arr[i] <= 104`\nFollow up:\nCan you solve it using only one pass?\nCan you solve it in `O(1)` space?"
  },
  {
    "id": "846",
    "title": "Hand of Straights",
    "difficulty": "Medium",
    "explanation": "Alice has a `hand` of cards, given as an array of integers.\n\nNow she wants to rearrange the cards into groups so that each group is size `W`, and consists of `W` consecutive cards.\n\nReturn `true` if and only if she can.\n\nNote: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/",
    "examples": [
      "Input: hand = [1,2,3,6,2,3,4,7,8], W = 3\nOutput: true\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]",
      "Input: hand = [1,2,3,4,5], W = 4\nOutput: false\nExplanation: Alice's hand can't be rearranged into groups of 4."
    ],
    "constraints": "`1 <= hand.length <= 10000`\n`0 <= hand[i] <= 10^9`\n`1 <= W <= hand.length`"
  },
  {
    "id": "847",
    "title": "Shortest Path Visiting All Nodes",
    "difficulty": "Hard",
    "explanation": "An undirected, connected graph of N nodes (labeled `0, 1, 2, ..., N-1`) is given as `graph`.\n\n`graph.length = N`, and `j != i` is in the list `graph[i]` exactly once, if and only if nodes `i` and `j` are connected.\n\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.",
    "examples": [
      "Input: [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]",
      "Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]\nNote:\n`1 <= graph.length <= 12`\n`0 <= graph[i].length < graph.length`"
    ],
    "constraints": ""
  },
  {
    "id": "848",
    "title": "Shifting Letters",
    "difficulty": "Medium",
    "explanation": "We have a string `S` of lowercase letters, and an integer array `shifts`.\n\nCall the shift of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`). \nFor example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.\n\nNow for each `shifts[i] = x`, we want to shift the first `i+1` letters of `S`, `x` times.\n\nReturn the final string after all such shifts to `S` are applied.",
    "examples": [
      "Input: S = \"abc\", shifts = [3,5,9]\nOutput: \"rpl\"\nExplanation: \nWe start with \"abc\".\n\nAfter shifting the first 1 letters of S by 3, we have \"dbc\".\n\nAfter shifting the first 2 letters of S by 5, we have \"igc\".\n\nAfter shifting the first 3 letters of S by 9, we have \"rpl\", the answer.\n\nNote:\n`1 <= S.length = shifts.length <= 20000`\n`0 <= shifts[i] <= 10 ^ 9`"
    ],
    "constraints": ""
  },
  {
    "id": "849",
    "title": "Maximize Distance to Closest Person",
    "difficulty": "Medium",
    "explanation": "You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty (0-indexed).\n\nThere is at least one empty seat, and at least one person sitting.\n\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized. \nReturn that maximum distance to the closest person.",
    "examples": [
      "Input: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\n\nIf Alex sits in any other open seat, the closest person has distance 1.\n\nThus, the maximum distance to the closest person is 2.",
      "Input: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\n\nThis is the maximum distance possible, so the answer is 3.",
      "Input: seats = [0,1]\nOutput: 1"
    ],
    "constraints": "`2 <= seats.length <= 2 * 104`\n`seats[i]` is `0` or `1`.\n\nAt least one seat is empty.\n\nAt least one seat is occupied."
  },
  {
    "id": "850",
    "title": "Rectangle Area II",
    "difficulty": "Hard",
    "explanation": "We are given a list of (axis-aligned) `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2] `, where `(xi1, yi1)` are the coordinates of the bottom-left corner, and `(xi2, yi2)` are the coordinates of the top-right corner of the `ith` rectangle.\n\nFind the total area covered by all `rectangles` in the plane. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\nOutput: 6\nExplanation: As illustrated in the picture.",
      "Input: rectangles = [[0,0,1000000000,1000000000]]\nOutput: 49\nExplanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49."
    ],
    "constraints": "`1 <= rectangles.length <= 200`\n`rectanges[i].length = 4`\n`0 <= rectangles[i][j] <= 109`\nThe total area covered by all rectangles will never exceed `263 - 1` and thus will fit in a 64-bit signed integer."
  },
  {
    "id": "851",
    "title": "Loud and Rich",
    "difficulty": "Medium",
    "explanation": "In a group of N people (labelled `0, 1, 2, ..., N-1`), each person has different amounts of money, and different levels of quietness.\n\nFor convenience, we'll call the person with label `x`, simply \"person `x`\".\n\nWe'll say that `richer[i] = [x, y]` if person `x` definitely has more money than person `y`.  Note that `richer` may only be a subset of valid observations.\n\nAlso, we'll say `quiet[x] = q` if person x has quietness `q`.\n\nNow, return `answer`, where `answer[x] = y` if `y` is the least quiet person (that is, the person `y` with the smallest value of `quiet[y]`), among all people who definitely have equal to or more money than person `x`.",
    "examples": [
      "Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation: \nanswer[0] = 5.\n\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\n\nThe only person who is quieter (has lower quiet[x]) is person 7, but\nit isn't clear if they have more money than person 0.\n\nanswer[7] = 7.\n\nAmong all people that definitely have equal to or more money than person 7\n(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])\nis person 7.\n\nThe other answers can be filled out with similar reasoning.\n\nNote:\n`1 <= quiet.length = N <= 500`\n`0 <= quiet[i] < N`, all `quiet[i]` are different.\n\n`0 <= richer.length <= N * (N-1) / 2`\n`0 <= richer[i][j] < N`\n`richer[i][0] != richer[i][1]`\n`richer[i]`'s are all different.\n\nThe observations in `richer` are all logically consistent."
    ],
    "constraints": ""
  },
  {
    "id": "852",
    "title": "Peak Index in a Mountain Array",
    "difficulty": "Easy",
    "explanation": "Let's call an array `arr` a mountain if the following properties hold:\n`arr.length >= 3`\nThere exists some `i` with `0 < i < arr.length - 1` such that:\n\t\n`arr[0] < arr[1] < ... arr[i-1] < arr[i] `\n`arr[i] > arr[i+1] > ... > arr[arr.length - 1]`\nGiven an integer array `arr` that is guaranteed to be a mountain, return any `i` such that `arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.",
    "examples": [
      "Input: arr = [0,1,0]\nOutput: 1",
      "Input: arr = [0,2,1,0]\nOutput: 1",
      "Input: arr = [0,10,5,2]\nOutput: 1",
      "Input: arr = [3,4,5,1]\nOutput: 2",
      "Input: arr = [24,69,100,99,79,78,67,36,26,19]\nOutput: 2"
    ],
    "constraints": "`3 <= arr.length <= 104`\n`0 <= arr[i] <= 106`\n`arr` is guaranteed to be a mountain array.\n\nFollow up: Finding the `O(n)` is straightforward, could you find an `O(log(n))` solution?"
  },
  {
    "id": "853",
    "title": "Car Fleet",
    "difficulty": "Medium",
    "explanation": "`N` cars are going to the same destination along a one lane road.  The destination is `target` miles away.\n\nEach car `i` has a constant speed `speed[i]` (in miles per hour), and initial position `position[i]` miles towards the target along the road.\n\nA car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.\n\nThe distance between these two cars is ignored - they are assumed to have the same position.\n\nA car fleet is some non-empty set of cars driving at the same position and same speed.  Note that a single car is also a car fleet.\n\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\n\nHow many car fleets will arrive at the destination?",
    "examples": [
      "Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:\nThe cars starting at 10 and 8 become a fleet, meeting each other at 12.\n\nThe car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.\n\nThe cars starting at 5 and 3 become a fleet, meeting each other at 6.\n\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n\nNote:\n`0 <= N <= 10 ^ 4`\n`0 < target <= 10 ^ 6`\n`0 < speed[i] <= 10 ^ 6`\n`0 <= position[i] < target`\nAll initial positions are different."
    ],
    "constraints": ""
  },
  {
    "id": "854",
    "title": "K-Similar Strings",
    "difficulty": "Hard",
    "explanation": "Strings `s1` and `s2` are `k`-similar (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`.\n\nGiven two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`-similar.",
    "examples": [
      "Input: s1 = \"ab\", s2 = \"ba\"\nOutput: 1",
      "Input: s1 = \"abc\", s2 = \"bca\"\nOutput: 2",
      "Input: s1 = \"abac\", s2 = \"baca\"\nOutput: 2",
      "Input: s1 = \"aabc\", s2 = \"abca\"\nOutput: 2"
    ],
    "constraints": "`1 <= s1.length <= 20`\n`s2.length == s1.length`\n`s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`.\n\n`s2` is an anagram of `s1`."
  },
  {
    "id": "855",
    "title": "Exam Room",
    "difficulty": "Medium",
    "explanation": "In an exam room, there are `N` seats in a single row, numbered `0, 1, 2, ..., N-1`.\n\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)\nReturn a class `ExamRoom(int N)` that exposes two functions: `ExamRoom.seat()` returning an `int` representing what seat the student sat in, and `ExamRoom.leave(int p)` representing that the student in seat number `p` now leaves the room.  It is guaranteed that any calls to `ExamRoom.leave(p)` have a student sitting in seat `p`.",
    "examples": [
      "Input: [\"ExamRoom\",\"seat\",\"seat\",\"seat\",\"seat\",\"leave\",\"seat\"], [[10],[],[],[],[],[4],[]]\nOutput: [null,0,9,4,2,null,5]\nExplanation:\nExamRoom(10) -> null\nseat() -> 0, no one is in the room, then the student sits at seat number 0.\n\nseat() -> 9, the student sits at the last seat number 9.\n\nseat() -> 4, the student sits at the last seat number 4.\n\nseat() -> 2, the student sits at the last seat number 2.\n\nleave(4) -> null\nseat() -> 5, the student sits at the last seat number 5.\n\n​​​​​​​\nNote:\n`1 <= N <= 10^9`\n`ExamRoom.seat()` and `ExamRoom.leave()` will be called at most `10^4` times across all test cases.\n\nCalls to `ExamRoom.leave(p)` are guaranteed to have a student currently sitting in seat number `p`."
    ],
    "constraints": ""
  },
  {
    "id": "856",
    "title": "Score of Parentheses",
    "difficulty": "Medium",
    "explanation": "Given a balanced parentheses string `S`, compute the score of the string based on the following rule:\n`()` has score 1\n`AB` has score `A + B`, where A and B are balanced parentheses strings.\n\n`(A)` has score `2 * A`, where A is a balanced parentheses string.",
    "examples": [
      "Input: \"()\"\nOutput: 1",
      "Input: \"(())\"\nOutput: 2",
      "Input: \"()()\"\nOutput: 2",
      "Input: \"(()(()))\"\nOutput: 6\nNote:\n`S` is a balanced parentheses string, containing only `(` and `)`.\n\n`2 <= S.length <= 50`"
    ],
    "constraints": ""
  },
  {
    "id": "857",
    "title": "Minimum Cost to Hire K Workers",
    "difficulty": "Hard",
    "explanation": "There are `N` workers.  The `i`-th worker has a `quality[i]` and a minimum wage expectation `wage[i]`.\n\nNow we want to hire exactly `K` workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:\nEvery worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\n\nEvery worker in the paid group must be paid at least their minimum wage expectation.\n\nReturn the least amount of money needed to form a paid group satisfying the above conditions.",
    "examples": [
      "Input: quality = [10,20,5], wage = [70,50,30], K = 2\nOutput: 105.00000\nExplanation: We pay 70 to 0-th worker and 35 to 2-th worker.",
      "Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\nOutput: 30.66667\nExplanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. \nNote:\n`1 <= K <= N <= 10000`, where `N = quality.length = wage.length`\n`1 <= quality[i] <= 10000`\n`1 <= wage[i] <= 10000`\nAnswers within `10^-5` of the correct answer will be considered correct."
    ],
    "constraints": ""
  },
  {
    "id": "858",
    "title": "Mirror Reflection",
    "difficulty": "Medium",
    "explanation": "There is a special square room with mirrors on each of the four walls.  Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`.\n\nThe square room has walls of length `p`, and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0`th receptor.\n\nReturn the number of the receptor that the ray meets first.  (It is guaranteed that the ray will meet a receptor eventually.)",
    "examples": [
      "Input: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n\nNote:\n`1 <= p <= 1000`\n`0 <= q <= p`"
    ],
    "constraints": ""
  },
  {
    "id": "859",
    "title": "Buddy Strings",
    "difficulty": "Easy",
    "explanation": "Given two strings `a` and `b`, return `true` if you can swap two letters in `a` so the result is equal to `b`, otherwise, return `false`.\n\nSwapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `a[i]` and `b[j]`. For example, swapping at indices `0` and `2` in `\"abcd\"` results in `\"cbad\"`.",
    "examples": [
      "Input: a = \"ab\", b = \"ba\"\nOutput: true\nExplanation: You can swap a[0] = 'a' and a[1] = 'b' to get \"ba\", which is equal to b.",
      "Input: a = \"ab\", b = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are a[0] = 'a' and a[1] = 'b', which results in \"ba\" != b.",
      "Input: a = \"aa\", b = \"aa\"\nOutput: true\nExplanation: You can swap a[0] = 'a' and a[1] = 'a' to get \"aa\", which is equal to b.",
      "Input: a = \"aaaaaaabc\", b = \"aaaaaaacb\"\nOutput: true"
    ],
    "constraints": "`1 <= a.length, b.length <= 2 * 104`\n`a` and `b` consist of lowercase letters."
  },
  {
    "id": "860",
    "title": "Lemonade Change",
    "difficulty": "Easy",
    "explanation": "At a lemonade stand, each lemonade costs `$5`. \nCustomers are standing in a queue to buy from you, and order one at a time (in the order specified by `bills`).\n\nEach customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill.  You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.\n\nNote that you don't have any change in hand at first.\n\nReturn `true` if and only if you can provide every customer with correct change.",
    "examples": [
      "Input: [5,5,5,10,20]\nOutput: true\nExplanation: \nFrom the first 3 customers, we collect three $5 bills in order.\n\nFrom the fourth customer, we collect a $10 bill and give back a $5.\n\nFrom the fifth customer, we give a $10 bill and a $5 bill.\n\nSince all customers got correct change, we output true.",
      "Input: [5,5,10]\nOutput: true",
      "Input: [10,10]\nOutput: false",
      "Input: [5,5,10,10,20]\nOutput: false\nExplanation: \nFrom the first two customers in order, we collect two $5 bills.\n\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\n\nFor the last customer, we can't give change of $15 back because we only have two $10 bills.\n\nSince not every customer received correct change, the answer is false.\n\nNote:\n`0 <= bills.length <= 10000`\n`bills[i]` will be either `5`, `10`, or `20`."
    ],
    "constraints": ""
  },
  {
    "id": "861",
    "title": "Score After Flipping Matrix",
    "difficulty": "Medium",
    "explanation": "We have a two dimensional matrix `A` where each value is `0` or `1`.\n\nA move consists of choosing any row or column, and toggling each value in that row or column: changing all `0`s to `1`s, and all `1`s to `0`s.\n\nAfter making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\n\nReturn the highest possible score.",
    "examples": [
      "Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\nOutput: 39\nExplanation:\nToggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].\n\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\nNote:\n`1 <= A.length <= 20`\n`1 <= A[0].length <= 20`\n`A[i][j]` is `0` or `1`."
    ],
    "constraints": ""
  },
  {
    "id": "862",
    "title": "Shortest Subarray with Sum at Least K",
    "difficulty": "Hard",
    "explanation": "Return the length of the shortest, non-empty, contiguous subarray of `A` with sum at least `K`.\n\nIf there is no non-empty subarray with sum at least `K`, return `-1`.",
    "examples": [
      "Input: A = [1], K = 1\nOutput: 1",
      "Input: A = [1,2], K = 4\nOutput: -1",
      "Input: A = [2,-1,2], K = 3\nOutput: 3\nNote:\n`1 <= A.length <= 50000`\n`-10 ^ 5 <= A[i] <= 10 ^ 5`\n`1 <= K <= 10 ^ 9`"
    ],
    "constraints": ""
  },
  {
    "id": "863",
    "title": "All Nodes Distance K in Binary Tree",
    "difficulty": "Medium",
    "explanation": "We are given a binary tree (with root node `root`), a `target` node, and an integer value `K`.\n\nReturn a list of the values of all nodes that have a distance `K` from the `target` node.  The answer can be returned in any order.",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\nOutput: [7,4,1]\nExplanation: \nThe nodes that are a distance 2 from the target node (with value 5)\nhave values 7, 4, and 1.\n\nNote that the inputs \"root\" and \"target\" are actually TreeNodes.\n\nThe descriptions of the inputs above are just serializations of these objects.\n\nNote:\nThe given tree is non-empty.\n\nEach node in the tree has unique values `0 <= node.val <= 500`.\n\nThe `target` node is a node in the tree.\n\n`0 <= K <= 1000`."
    ],
    "constraints": ""
  },
  {
    "id": "864",
    "title": "Shortest Path to Get All Keys",
    "difficulty": "Hard",
    "explanation": "We are given a 2-dimensional `grid`. `\".\"` is an empty cell, `\"#\"` is a wall, `\"@\"` is the starting point, (`\"a\"`, `\"b\"`, ...) are keys, and (`\"A\"`, `\"B\"`, ...) are locks.\n\nWe start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.  We cannot walk outside the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can't walk over a lock unless we have the corresponding key.\n\nFor some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter of the first `K` letters of the English alphabet in the grid.  This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\n\nReturn the lowest number of moves to acquire all keys.  If it's impossible, return `-1`.",
    "examples": [
      "Input: [\"@.a.#\",\"###.#\",\"b.A.B\"]\nOutput: 8",
      "Input: [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6\nNote:\n`1 <= grid.length <= 30`\n`1 <= grid[0].length <= 30`\n`grid[i][j]` contains only` '.'`, `'#'`, `'@'`, `'a'-``'f``'` and `'A'-'F'`\nThe number of keys is in `[1, 6]`.  Each key has a different letter and opens exactly one lock."
    ],
    "constraints": ""
  },
  {
    "id": "865",
    "title": "Smallest Subtree with all the Deepest Nodes",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, the depth of each node is the shortest distance to the root.\n\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\n\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\n\nThe subtree of a node is tree consisting of that node, plus the set of all descendants of that node.\n\nNote: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\n\nThe nodes coloured in blue are the deepest nodes of the tree.\n\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.",
      "Input: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree.",
      "Input: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest."
    ],
    "constraints": "The number of nodes in the tree will be in the range `[1, 500]`.\n\n`0 <= Node.val <= 500`\nThe values of the nodes in the tree are unique."
  },
  {
    "id": "866",
    "title": "Prime Palindrome",
    "difficulty": "Medium",
    "explanation": "Find the smallest prime palindrome greater than or equal to `N`.\n\nRecall that a number is prime if it's only divisors are 1 and itself, and it is greater than 1. \nFor example, 2,3,5,7,11 and 13 are primes.\n\nRecall that a number is a palindrome if it reads the same from left to right as it does from right to left. \nFor example, 12321 is a palindrome.",
    "examples": [
      "Input: 6\nOutput: 7",
      "Input: 8\nOutput: 11",
      "Input: 13\nOutput: 101\nNote:\n`1 <= N <= 10^8`\nThe answer is guaranteed to exist and be less than `2 * 10^8`."
    ],
    "constraints": ""
  },
  {
    "id": "867",
    "title": "Transpose Matrix",
    "difficulty": "Easy",
    "explanation": "Given a 2D integer array `matrix`, return the transpose of `matrix`.\n\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.",
    "examples": [
      "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[1,4,7],[2,5,8],[3,6,9]]",
      "Input: matrix = [[1,2,3],[4,5,6]]\nOutput: [[1,4],[2,5],[3,6]]"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 1000`\n`1 <= m * n <= 105`\n`-109 <= matrix[i][j] <= 109`"
  },
  {
    "id": "868",
    "title": "Binary Gap",
    "difficulty": "Easy",
    "explanation": "Given a positive integer `n`, find and return the longest distance between any two adjacent `1`'s in the binary representation of `n`. If there are no two adjacent `1`'s, return `0`.\n\nTwo `1`'s are adjacent if there are only `0`'s separating them (possibly no `0`'s). The distance between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `\"1001\"` have a distance of 3.",
    "examples": [
      "Input: n = 22\nOutput: 2\nExplanation: 22 in binary is \"10110\".\n\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\n\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\n\nThe answer is the largest of these two distances, which is 2.\n\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.",
      "Input: n = 5\nOutput: 2\nExplanation: 5 in binary is \"101\".",
      "Input: n = 6\nOutput: 1\nExplanation: 6 in binary is \"110\".",
      "Input: n = 8\nOutput: 0\nExplanation: 8 in binary is \"1000\".\n\nThere aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.",
      "Input: n = 1\nOutput: 0"
    ],
    "constraints": "`1 <= n <= 109`"
  },
  {
    "id": "869",
    "title": "Reordered Power of 2",
    "difficulty": "Medium",
    "explanation": "You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n\nReturn `true` if and only if we can do this so that the resulting number is a power of two.",
    "examples": [
      "Input: n = 1\nOutput: true",
      "Input: n = 10\nOutput: false",
      "Input: n = 16\nOutput: true",
      "Input: n = 24\nOutput: false",
      "Input: n = 46\nOutput: true"
    ],
    "constraints": "`1 <= n <= 109`"
  },
  {
    "id": "870",
    "title": "Advantage Shuffle",
    "difficulty": "Medium",
    "explanation": "Given two arrays `A` and `B` of equal size, the advantage of `A` with respect to `B` is the number of indices `i` for which `A[i] > B[i]`.\n\nReturn any permutation of `A` that maximizes its advantage with respect to `B`.",
    "examples": [
      "Input: A = [2,7,11,15], B = [1,10,4,11]\nOutput: [2,11,7,15]",
      "Input: A = [12,24,8,32], B = [13,25,32,11]\nOutput: [24,32,8,12]\nNote:\n`1 <= A.length = B.length <= 10000`\n`0 <= A[i] <= 10^9`\n`0 <= B[i] <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "871",
    "title": "Minimum Number of Refueling Stops",
    "difficulty": "Hard",
    "explanation": "A car travels from a starting position to a destination which is `target` miles east of the starting position.\n\nAlong the way, there are gas stations.  Each `station[i]` represents a gas station that is `station[i][0]` miles east of the starting position, and has `station[i][1]` liters of gas.\n\nThe car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it.  It uses 1 liter of gas per 1 mile that it drives.\n\nWhen the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\n\nWhat is the least number of refueling stops the car must make in order to reach its destination?  If it cannot reach the destination, return `-1`.\n\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there.  If the car reaches the destination with 0 fuel left, it is still considered to have arrived.",
    "examples": [
      "Input: target = 1, startFuel = 1, stations = []\nOutput: 0\nExplanation: We can reach the target without refueling.",
      "Input: target = 100, startFuel = 1, stations = [[10,100]]\nOutput: -1\nExplanation: We can't reach the target (or even the first gas station).",
      "Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\nOutput: 2\nExplanation: \nWe start with 10 liters of fuel.\n\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\n\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\n\nWe made 2 refueling stops along the way, so we return 2.\n\nNote:\n`1 <= target, startFuel, stations[i][1] <= 10^9`\n`0 <= stations.length <= 500`\n`0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target`"
    ],
    "constraints": ""
  },
  {
    "id": "872",
    "title": "Leaf-Similar Trees",
    "difficulty": "Easy",
    "explanation": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\n\nFor example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.\n\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\n\nReturn `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.",
    "examples": [
      "Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\nOutput: true",
      "Input: root1 = [1], root2 = [1]\nOutput: true",
      "Input: root1 = [1], root2 = [2]\nOutput: false",
      "Input: root1 = [1,2], root2 = [2,2]\nOutput: true",
      "Input: root1 = [1,2,3], root2 = [1,3,2]\nOutput: false"
    ],
    "constraints": "The number of nodes in each tree will be in the range `[1, 200]`.\n\nBoth of the given trees will have values in the range `[0, 200]`."
  },
  {
    "id": "873",
    "title": "Length of Longest Fibonacci Subsequence",
    "difficulty": "Medium",
    "explanation": "A sequence `X1, X2, ..., Xn` is Fibonacci-like if:\n`n >= 3`\n`Xi + Xi+1 = Xi+2` for all `i + 2 <= n`\nGiven a strictly increasing array `arr` of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of `arr`. If one does not exist, return `0`.\n\nA subsequence is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.",
    "examples": [
      "Input: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].",
      "Input: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
    ],
    "constraints": "`3 <= arr.length <= 1000`\n`1 <= arr[i] < arr[i + 1] <= 109`"
  },
  {
    "id": "874",
    "title": "Walking Robot Simulation",
    "difficulty": "Easy",
    "explanation": "A robot on an infinite XY-plane starts at point `(0, 0)` and faces north. The robot can receive one of three possible types of `commands`:\n`-2`: turn left `90` degrees,\n`-1`: turn right `90` degrees, or\n`1 <= k <= 9`: move forward `k` units.\n\nSome of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`.\n\nIf the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)\nReturn the maximum Euclidean distance that the robot will be from the origin squared (i.e. if the distance is `5`, return `25`).\n\nNote:\nNorth means +Y direction.\n\nEast means +X direction.\n\nSouth means -Y direction.\n\nWest means -X direction.",
    "examples": [
      "Input: commands = [4,-1,3], obstacles = []\nOutput: 25\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n\n2. Turn right.\n\n3. Move east 3 units to (3, 4).\n\nThe furthest point away from the origin is (3, 4), which is 32 + 42 = 25 units away.",
      "Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\nOutput: 65\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n\n2. Turn right.\n\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n\n4. Turn left.\n\n5. Move north 4 units to (1, 8).\n\nThe furthest point away from the origin is (1, 8), which is 12 + 82 = 65 units away."
    ],
    "constraints": "`1 <= commands.length <= 104`\n`commands[i]` is one of the values in the list `[-2,-1,1,2,3,4,5,6,7,8,9]`.\n\n`0 <= obstacles.length <= 104`\n`-3 * 104 <= xi, yi <= 3 * 104`\nThe answer is guaranteed to be less than `231`."
  },
  {
    "id": "875",
    "title": "Koko Eating Bananas",
    "difficulty": "Medium",
    "explanation": "Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\nReturn the minimum integer `k` such that she can eat all the bananas within `h` hours.",
    "examples": [
      "Input: piles = [3,6,7,11], h = 8\nOutput: 4",
      "Input: piles = [30,11,23,4,20], h = 5\nOutput: 30",
      "Input: piles = [30,11,23,4,20], h = 6\nOutput: 23"
    ],
    "constraints": "`1 <= piles.length <= 104`\n`piles.length <= h <= 109`\n`1 <= piles[i] <= 109`"
  },
  {
    "id": "876",
    "title": "Middle of the Linked List",
    "difficulty": "Easy",
    "explanation": "Given a non-empty, singly linked list with head node `head`, return a middle node of linked list.\n\nIf there are two middle nodes, return the second middle node.",
    "examples": [
      "Input: [1,2,3,4,5]\nOutput: Node 3 from this list (Serialization: [3,4,5])\nThe returned node has value 3.  (The judge's serialization of this node is [3,4,5]).\n\nNote that we returned a ListNode object ans, such that:\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.",
      "Input: [1,2,3,4,5,6]\nOutput: Node 4 from this list (Serialization: [4,5,6])\nSince the list has two middle nodes with values 3 and 4, we return the second one.\n\nNote:\nThe number of nodes in the given list will be between `1` and `100`."
    ],
    "constraints": ""
  },
  {
    "id": "877",
    "title": "Stone Game",
    "difficulty": "Medium",
    "explanation": "Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.\n\nThe objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.\n\nAlex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.\n\nAssuming Alex and Lee play optimally, return `True` if and only if Alex wins the game.",
    "examples": [
      "Input: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\n\nSay he takes the first 5, so that the row becomes [3, 4, 5].\n\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\n\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\n\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true."
    ],
    "constraints": "`2 <= piles.length <= 500`\n`piles.length` is even.\n\n`1 <= piles[i] <= 500`\n`sum(piles)` is odd."
  },
  {
    "id": "878",
    "title": "Nth Magical Number",
    "difficulty": "Hard",
    "explanation": "A positive integer is magical if it is divisible by either `a` or `b`.\n\nGiven the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, return it modulo `109 + 7`.",
    "examples": [
      "Input: n = 1, a = 2, b = 3\nOutput: 2",
      "Input: n = 4, a = 2, b = 3\nOutput: 6",
      "Input: n = 5, a = 2, b = 4\nOutput: 10",
      "Input: n = 3, a = 6, b = 4\nOutput: 8"
    ],
    "constraints": "`1 <= n <= 109`\n`2 <= a, b <= 4 * 104`"
  },
  {
    "id": "879",
    "title": "Profitable Schemes",
    "difficulty": "Hard",
    "explanation": "There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime.\n\nLet's call a profitable scheme any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`.\n\nReturn the number of schemes that can be chosen. Since the answer may be very large, return it modulo `109 + 7`.",
    "examples": [
      "Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\n\nIn total, there are 2 schemes.",
      "Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\n\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2)."
    ],
    "constraints": "`1 <= n <= 100`\n`0 <= minProfit <= 100`\n`1 <= group.length <= 100`\n`1 <= group[i] <= 100`\n`profit.length == group.length`\n`0 <= profit[i] <= 100`"
  },
  {
    "id": "880",
    "title": "Decoded String at Index",
    "difficulty": "Medium",
    "explanation": "An encoded string `S` is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:\nIf the character read is a letter, that letter is written onto the tape.\n\nIf the character read is a digit (say `d`), the entire current tape is repeatedly written `d-1` more times in total.\n\nNow for some encoded string `S`, and an index `K`, find and return the `K`-th letter (1 indexed) in the decoded string.",
    "examples": [
      "Input: S = \"leet2code3\", K = 10\nOutput: \"o\"\nExplanation: \nThe decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\n\nThe 10th letter in the string is \"o\".",
      "Input: S = \"ha22\", K = 5\nOutput: \"h\"\nExplanation: \nThe decoded string is \"hahahaha\".  The 5th letter is \"h\".",
      "Input: S = \"a2345678999999999999999\", K = 1\nOutput: \"a\"\nExplanation: \nThe decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\"."
    ],
    "constraints": "`2 <= S.length <= 100`\n`S` will only contain lowercase letters and digits `2` through `9`.\n\n`S` starts with a letter.\n\n`1 <= K <= 10^9`\nIt's guaranteed that `K` is less than or equal to the length of the decoded string.\n\nThe decoded string is guaranteed to have less than `2^63` letters."
  },
  {
    "id": "881",
    "title": "Boats to Save People",
    "difficulty": "Medium",
    "explanation": "You are given an array `people` where `people[i]` is the weight of the `ith` person, and an infinite number of boats where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\nReturn the minimum number of boats to carry every given person.",
    "examples": [
      "Input: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)",
      "Input: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)",
      "Input: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)"
    ],
    "constraints": "`1 <= people.length <= 5 * 104`\n`1 <= people[i] <= limit <= 3 * 104`"
  },
  {
    "id": "882",
    "title": "Reachable Nodes In Subdivided Graph",
    "difficulty": "Hard",
    "explanation": "You are given an undirected graph (the \"original graph\") with `n` nodes labeled from `0` to `n - 1`. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\n\nThe graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will subdivide the edge into. Note that `cnti == 0` means you will not subdivide the edge.\n\nTo subdivide the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti+1, xcnti]`, `[xcnti, vi]`.\n\nIn this new graph, you want to know how many nodes are reachable from the node `0`, where a node is reachable if the distance is `maxMoves` or less.\n\nGiven the original graph and `maxMoves`, return the number of nodes that are reachable from node `0` in the new graph.",
    "examples": [
      "Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\nOutput: 13\nExplanation: The edge subdivisions are shown in the image above.\n\nThe nodes that are reachable are highlighted in yellow.",
      "Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\nOutput: 23",
      "Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\nOutput: 1\nExplanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable."
    ],
    "constraints": "`0 <= edges.length <= min(n * (n - 1) / 2, 104)`\n`edges[i].length == 3`\n`0 <= ui < vi < n`\nThere are no multiple edges in the graph.\n\n`0 <= cnti <= 104`\n`0 <= maxMoves <= 109`\n`1 <= n <= 3000`"
  },
  {
    "id": "883",
    "title": "Projection Area of 3D Shapes",
    "difficulty": "Easy",
    "explanation": "You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.\n\nEach value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.\n\nWe view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.\n\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\n\nReturn the total area of all three projections.",
    "examples": [
      "Input: grid = [[1,2],[3,4]]\nOutput: 17\nExplanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.",
      "Input: grid = [[2]]\nOutput: 5",
      "Input: grid = [[1,0],[0,2]]\nOutput: 8",
      "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 14",
      "Input: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 21"
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 50`\n`0 <= grid[i][j] <= 50`"
  },
  {
    "id": "884",
    "title": "Uncommon Words from Two Sentences",
    "difficulty": "Easy",
    "explanation": "We are given two sentences `A` and `B`.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\n\nReturn a list of all uncommon words. \nYou may return the list in any order.",
    "examples": [
      "Input: A = \"this apple is sweet\", B = \"this apple is sour\"\nOutput: [\"sweet\",\"sour\"]",
      "Input: A = \"apple apple\", B = \"banana\"\nOutput: [\"banana\"]\nNote:\n`0 <= A.length <= 200`\n`0 <= B.length <= 200`\n`A` and `B` both contain only spaces and lowercase letters."
    ],
    "constraints": ""
  },
  {
    "id": "885",
    "title": "Spiral Matrix III",
    "difficulty": "Medium",
    "explanation": "On a 2 dimensional grid with `R` rows and `C` columns, we start at `(r0, c0)` facing east.\n\nHere, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.\n\nNow, we walk in a clockwise spiral shape to visit every position in this grid. \nWhenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) \nEventually, we reach all `R * C` spaces of the grid.\n\nReturn a list of coordinates representing the positions of the grid in the order they were visited.",
    "examples": [
      "Input: R = 1, C = 4, r0 = 0, c0 = 0\nOutput: [[0,0],[0,1],[0,2],[0,3]]",
      "Input: R = 5, C = 6, r0 = 1, c0 = 4\nOutput: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\nNote:\n`1 <= R <= 100`\n`1 <= C <= 100`\n`0 <= r0 < R`\n`0 <= c0 < C`"
    ],
    "constraints": ""
  },
  {
    "id": "886",
    "title": "Possible Bipartition",
    "difficulty": "Medium",
    "explanation": "Given a set of `N` people (numbered `1, 2, ..., N`), we would like to split everyone into two groups of any size.\n\nEach person may dislike some other people, and they should not go into the same group. \nFormally, if `dislikes[i] = [a, b]`, it means it is not allowed to put the people numbered `a` and `b` into the same group.\n\nReturn `true` if and only if it is possible to split everyone into two groups in this way.",
    "examples": [
      "Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: group1 [1,4], group2 [2,3]",
      "Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false",
      "Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\nOutput: false"
    ],
    "constraints": "`1 <= N <= 2000`\n`0 <= dislikes.length <= 10000`\n`dislikes[i].length == 2`\n`1 <= dislikes[i][j] <= N`\n`dislikes[i][0] < dislikes[i][1]`\nThere does not exist `i != j` for which `dislikes[i] == dislikes[j]`."
  },
  {
    "id": "887",
    "title": "Super Egg Drop",
    "difficulty": "Hard",
    "explanation": "You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor higher than `f` will break, and any egg dropped at or below floor `f` will not break.\n\nEach move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\n\nReturn the minimum number of moves that you need to determine with certainty what the value of `f` is.",
    "examples": [
      "Input: k = 1, n = 2\nOutput: 2\nExplanation: \nDrop the egg from floor 1. If it breaks, we know that f = 0.\n\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\n\nIf it does not break, then we know f = 2.\n\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.",
      "Input: k = 2, n = 6\nOutput: 3",
      "Input: k = 3, n = 14\nOutput: 4"
    ],
    "constraints": "`1 <= k <= 100`\n`1 <= n <= 104`"
  },
  {
    "id": "888",
    "title": "Fair Candy Swap",
    "difficulty": "Easy",
    "explanation": "Alice and Bob have candy bars of different sizes: `A[i]` is the size of the `i`-th bar of candy that Alice has, and `B[j]` is the size of the `j`-th bar of candy that Bob has.\n\nSince they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy.  (The total amount of candy a person has is the sum of the sizes of candy bars they have.)\nReturn an integer array `ans` where `ans[0]` is the size of the candy bar that Alice must exchange, and `ans[1]` is the size of the candy bar that Bob must exchange.\n\nIf there are multiple answers, you may return any one of them.  It is guaranteed an answer exists.",
    "examples": [
      "Input: A = [1,1], B = [2,2]\nOutput: [1,2]",
      "Input: A = [1,2], B = [2,3]\nOutput: [1,2]",
      "Input: A = [2], B = [1,3]\nOutput: [2,3]",
      "Input: A = [1,2,5], B = [2,4]\nOutput: [5,4]\nNote:\n`1 <= A.length <= 10000`\n`1 <= B.length <= 10000`\n`1 <= A[i] <= 100000`\n`1 <= B[i] <= 100000`\nIt is guaranteed that Alice and Bob have different total amounts of candy.\n\nIt is guaranteed there exists an answer."
    ],
    "constraints": ""
  },
  {
    "id": "889",
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "difficulty": "Medium",
    "explanation": "Return any binary tree that matches the given preorder and postorder traversals.\n\nValues in the traversals `pre` and `post` are distinct positive integers.",
    "examples": [
      "Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\nOutput: [1,2,3,4,5,6,7]\nNote:\n`1 <= pre.length == post.length <= 30`\n`pre[]` and `post[]` are both permutations of `1, 2, ..., pre.length`.\n\nIt is guaranteed an answer exists. If there exists multiple answers, you can return any of them."
    ],
    "constraints": ""
  },
  {
    "id": "890",
    "title": "Find and Replace Pattern",
    "difficulty": "Medium",
    "explanation": "You have a list of `words` and a `pattern`, and you want to know which words in `words` matches the pattern.\n\nA word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word.\n\n(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)\nReturn a list of the words in `words` that match the given pattern. \nYou may return the answer in any order.",
    "examples": [
      "Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\nOutput: [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,\nsince a and b map to the same letter.\n\nNote:\n`1 <= words.length <= 50`\n`1 <= pattern.length = words[i].length <= 20`"
    ],
    "constraints": ""
  },
  {
    "id": "891",
    "title": "Sum of Subsequence Widths",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `A`, consider all non-empty subsequences of `A`.\n\nFor any sequence S, let the width of S be the difference between the maximum and minimum element of S.\n\nReturn the sum of the widths of all subsequences of A. \nAs the answer may be very large, return the answer modulo 10^9 + 7.",
    "examples": [
      "Input: [2,1,3]\nOutput: 6\nExplanation:\nSubsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\n\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\n\nThe sum of these widths is 6.\n\nNote:\n`1 <= A.length <= 20000`\n`1 <= A[i] <= 20000`"
    ],
    "constraints": ""
  },
  {
    "id": "892",
    "title": "Surface Area of 3D Shapes",
    "difficulty": "Easy",
    "explanation": "You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.\n\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\n\nReturn the total surface area of the resulting shapes.\n\nNote: The bottom face of each shape counts toward its surface area.",
    "examples": [
      "Input: grid = [[2]]\nOutput: 10",
      "Input: grid = [[1,2],[3,4]]\nOutput: 34",
      "Input: grid = [[1,0],[0,2]]\nOutput: 16",
      "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 32",
      "Input: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 46"
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 50`\n`0 <= grid[i][j] <= 50`"
  },
  {
    "id": "893",
    "title": "Groups of Special-Equivalent Strings",
    "difficulty": "Easy",
    "explanation": "You are given an array `A` of strings.\n\nA move onto `S` consists of swapping any two even indexed characters of `S`, or any two odd indexed characters of `S`.\n\nTwo strings `S` and `T` are special-equivalent if after any number of moves onto `S`, `S == T`.\n\nFor example, `S = \"zzxy\"` and `T = \"xyzz\"` are special-equivalent because we may make the moves `\"zzxy\" -> \"xzzy\" -> \"xyzz\"` that swap `S[0]` and `S[2]`, then `S[1]` and `S[3]`.\n\nNow, a group of special-equivalent strings from `A` is a non-empty subset of A such that:\nEvery pair of strings in the group are special equivalent, and;\nThe group is the largest size possible (ie., there isn't a string S not in the group such that S is special equivalent to every string in the group)\nReturn the number of groups of special-equivalent strings from `A`.",
    "examples": [
      "Input: [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\nOutput: 3\nExplanation: \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these.\n\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].  Note that in particular, \"zzxy\" is not special equivalent to \"zzyx\".",
      "Input: [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\nOutput: 3\nNote:\n`1 <= A.length <= 1000`\n`1 <= A[i].length <= 20`\nAll `A[i]` have the same length.\n\nAll `A[i]` consist of only lowercase letters."
    ],
    "constraints": ""
  },
  {
    "id": "894",
    "title": "All Possible Full Binary Trees",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return a list of all possible full binary trees with `n` nodes. Each node of each tree in the answer must have `Node.val == 0`.\n\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\n\nA full binary tree is a binary tree where each node has exactly `0` or `2` children.",
    "examples": [
      "Input: n = 7\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]",
      "Input: n = 3\nOutput: [[0,0,0]]"
    ],
    "constraints": "`1 <= n <= 20`"
  },
  {
    "id": "895",
    "title": "Maximum Frequency Stack",
    "difficulty": "Hard",
    "explanation": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n\nImplement the `FreqStack` class:\n`FreqStack()` constructs an empty frequency stack.\n\n`void push(int val)` pushes an integer `val` onto the top of the stack.\n\n`int pop()` removes and returns the most frequent element in the stack.\n\n\t\nIf there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.",
    "examples": [
      "Input\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\nOutput\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\nExplanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\n\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\n\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\n\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7]."
    ],
    "constraints": "`0 <= val <= 109`\nAt most `2 * 104` calls will be made to `push` and `pop`.\n\nIt is guaranteed that there will be at least one element in the stack before calling `pop`."
  },
  {
    "id": "896",
    "title": "Monotonic Array",
    "difficulty": "Easy",
    "explanation": "An array is monotonic if it is either monotone increasing or monotone decreasing.\n\nAn array `A` is monotone increasing if for all `i <= j`, `A[i] <= A[j]`.  An array `A` is monotone decreasing if for all `i <= j`, `A[i] >= A[j]`.\n\nReturn `true` if and only if the given array `A` is monotonic.",
    "examples": [
      "Input: [1,2,2,3]\nOutput: true",
      "Input: [6,5,4,4]\nOutput: true",
      "Input: [1,3,2]\nOutput: false",
      "Input: [1,2,4,5]\nOutput: true",
      "Input: [1,1,1]\nOutput: true\nNote:\n`1 <= A.length <= 50000`\n`-100000 <= A[i] <= 100000`"
    ],
    "constraints": ""
  },
  {
    "id": "897",
    "title": "Increasing Order Search Tree",
    "difficulty": "Easy",
    "explanation": "Given the `root` of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.",
    "examples": [
      "Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\nOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
      "Input: root = [5,1,7]\nOutput: [1,null,5,null,7]"
    ],
    "constraints": "The number of nodes in the given tree will be in the range `[1, 100]`.\n\n`0 <= Node.val <= 1000`"
  },
  {
    "id": "898",
    "title": "Bitwise ORs of Subarrays",
    "difficulty": "Medium",
    "explanation": "We have an array `arr` of non-negative integers.\n\nFor every (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]` (with `i <= j`), we take the bitwise OR of all the elements in `sub`, obtaining a result `arr[i] | arr[i + 1] | ... | arr[j]`.\n\nReturn the number of possible results. Results that occur more than once are only counted once in the final answer",
    "examples": [
      "Input: arr = [0]\nOutput: 1\nExplanation: There is only one possible result: 0.",
      "Input: arr = [1,1,2]\nOutput: 3\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\n\nThese yield the results 1, 1, 2, 1, 3, 3.\n\nThere are 3 unique values, so the answer is 3.",
      "Input: arr = [1,2,4]\nOutput: 6\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7."
    ],
    "constraints": "`1 <= nums.length <= 5 * 104`\n`0 <= nums[i] <= 109`"
  },
  {
    "id": "899",
    "title": "Orderly Queue",
    "difficulty": "Hard",
    "explanation": "A string `S` of lowercase letters is given.  Then, we may make any number of moves.\n\nIn each move, we choose one of the first `K` letters (starting from the left), remove it, and place it at the end of the string.\n\nReturn the lexicographically smallest string we could have after any number of moves.",
    "examples": [
      "Input: S = \"cba\", K = 1\nOutput: \"acb\"\nExplanation: \nIn the first move, we move the 1st character (\"c\") to the end, obtaining the string \"bac\".\n\nIn the second move, we move the 1st character (\"b\") to the end, obtaining the final result \"acb\".",
      "Input: S = \"baaca\", K = 3\nOutput: \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character (\"b\") to the end, obtaining the string \"aacab\".\n\nIn the second move, we move the 3rd character (\"c\") to the end, obtaining the final result \"aaabc\".\n\nNote:\n`1 <= K <= S.length <= 1000`\n`S` consists of lowercase letters only."
    ],
    "constraints": ""
  },
  {
    "id": "900",
    "title": "RLE Iterator",
    "difficulty": "Medium",
    "explanation": "Write an iterator that iterates through a run-length encoded sequence.\n\nThe iterator is initialized by `RLEIterator(int[] A)`, where `A` is a run-length encoding of some sequence.  More specifically, for all even `i`, `A[i]` tells us the number of times that the non-negative integer value `A[i+1]` is repeated in the sequence.\n\nThe iterator supports one function: `next(int n)`, which exhausts the next `n` elements (`n >= 1`) and returns the last element exhausted in this way.  If there is no element left to exhaust, `next` returns `-1` instead.\n\nFor example, we start with `A = [3,8,0,9,2,5]`, which is a run-length encoding of the sequence `[8,8,8,5,5]`.  This is because the sequence can be read as \"three eights, zero nines, two fives\".",
    "examples": [
      "Input: [\"RLEIterator\",\"next\",\"next\",\"next\",\"next\"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\nOutput: [null,8,8,5,-1]\nExplanation: \nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\n\nThis maps to the sequence [8,8,8,5,5].\n\nRLEIterator.next is then called 4 times:\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\n\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\n\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\n\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\n\nNote:\n`0 <= A.length <= 1000`\n`A.length` is an even integer.\n\n`0 <= A[i] <= 10^9`\nThere are at most `1000` calls to `RLEIterator.next(int n)` per test case.\n\nEach call to `RLEIterator.next(int n)` will have `1 <= n <= 10^9`."
    ],
    "constraints": ""
  },
  {
    "id": "901",
    "title": "Online Stock Span",
    "difficulty": "Medium",
    "explanation": "Write a class `StockSpanner` which collects daily price quotes for some stock, and returns the span of that stock's price for the current day.\n\nThe span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today's price.\n\nFor example, if the price of a stock over the next 7 days were `[100, 80, 60, 70, 60, 75, 85]`, then the stock spans would be `[1, 1, 1, 2, 1, 4, 6]`.",
    "examples": [
      "Input: [\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"], [[],[100],[80],[60],[70],[60],[75],[85]]\nOutput: [null,1,1,1,2,1,4,6]\nExplanation: \nFirst, S = StockSpanner() is initialized.  Then:\nS.next(100) is called and returns 1,\nS.next(80) is called and returns 1,\nS.next(60) is called and returns 1,\nS.next(70) is called and returns 2,\nS.next(60) is called and returns 1,\nS.next(75) is called and returns 4,\nS.next(85) is called and returns 6.\n\nNote that (for example) S.next(75) returned 4, because the last 4 prices\n(including today's price of 75) were less than or equal to today's price.\n\nNote:\nCalls to `StockSpanner.next(int price)` will have `1 <= price <= 10^5`.\n\nThere will be at most `10000` calls to `StockSpanner.next` per test case.\n\nThere will be at most `150000` calls to `StockSpanner.next` across all test cases.\n\nThe total time limit for this problem has been reduced by 75% for C++, and 50% for all other languages."
    ],
    "constraints": ""
  },
  {
    "id": "902",
    "title": "Numbers At Most N Given Digit Set",
    "difficulty": "Hard",
    "explanation": "Given an array of `digits` which is sorted in non-decreasing order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.\n\nReturn the number of positive integers that can be generated that are less than or equal to a given integer `n`.",
    "examples": [
      "Input: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.",
      "Input: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\n\nIn total, this is 29523 integers that can be written using the digits array.",
      "Input: digits = [\"7\"], n = 8\nOutput: 1"
    ],
    "constraints": "`1 <= digits.length <= 9`\n`digits[i].length == 1`\n`digits[i]` is a digit from `'1'` to `'9'`.\n\nAll the values in `digits` are unique.\n\n`digits` is sorted in non-decreasing order.\n\n`1 <= n <= 109`"
  },
  {
    "id": "903",
    "title": "Valid Permutations for DI Sequence",
    "difficulty": "Hard",
    "explanation": "We are given `S`, a length `n` string of characters from the set `{'D', 'I'}`. (These letters stand for \"decreasing\" and \"increasing\".)\nA valid permutation is a permutation `P[0], P[1], ..., P[n]` of integers `{0, 1, ..., n}`, such that for all `i`:\nIf `S[i] == 'D'`, then `P[i] > P[i+1]`, and;\nIf `S[i] == 'I'`, then `P[i] < P[i+1]`.\n\nHow many valid permutations are there?  Since the answer may be large, return your answer modulo `10^9 + 7`.",
    "examples": [
      "Input: \"DID\"\nOutput: 5\nExplanation: \nThe 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\nNote:\n`1 <= S.length <= 200`\n`S` consists only of characters from the set `{'D', 'I'}`."
    ],
    "constraints": ""
  },
  {
    "id": "904",
    "title": "Fruit Into Baskets",
    "difficulty": "Medium",
    "explanation": "In a row of trees, the `i`-th tree produces fruit with type `tree[i]`.\n\nYou start at any tree of your choice, then repeatedly perform the following steps:\nAdd one piece of fruit from this tree to your baskets.  If you cannot, stop.\n\nMove to the next tree to the right of the current tree.  If there is no tree to the right, stop.\n\nNote that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.\n\nYou have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.\n\nWhat is the total amount of fruit you can collect with this procedure?",
    "examples": [
      "Input: [1,2,1]\nOutput: 3\nExplanation: We can collect [1,2,1].",
      "Input: [0,1,2,2]\nOutput: 3\nExplanation: We can collect [1,2,2].\n\nIf we started at the first tree, we would only collect [0, 1].",
      "Input: [1,2,3,2,2]\nOutput: 4\nExplanation: We can collect [2,3,2,2].\n\nIf we started at the first tree, we would only collect [1, 2].",
      "Input: [3,3,3,1,2,1,1,2,3,3,4]\nOutput: 5\nExplanation: We can collect [1,2,1,1,2].\n\nIf we started at the first tree or the eighth tree, we would only collect 4 fruits.\n\nNote:\n`1 <= tree.length <= 40000`\n`0 <= tree[i] < tree.length`"
    ],
    "constraints": ""
  },
  {
    "id": "905",
    "title": "Sort Array By Parity",
    "difficulty": "Easy",
    "explanation": "Given an array `A` of non-negative integers, return an array consisting of all the even elements of `A`, followed by all the odd elements of `A`.\n\nYou may return any answer array that satisfies this condition.",
    "examples": [
      "Input: [3,1,2,4]\nOutput: [2,4,3,1]\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\nNote:\n`1 <= A.length <= 5000`\n`0 <= A[i] <= 5000`"
    ],
    "constraints": ""
  },
  {
    "id": "906",
    "title": "Super Palindromes",
    "difficulty": "Hard",
    "explanation": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\n\nGiven two positive integers `left` and `right` represented as strings, return the number of super-palindromes integers in the inclusive range `[left, right]`.",
    "examples": [
      "Input: left = \"4\", right = \"1000\"\nOutput: 4\nExplanation: 4, 9, 121, and 484 are superpalindromes.\n\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.",
      "Input: left = \"1\", right = \"2\"\nOutput: 1"
    ],
    "constraints": "`1 <= left.length, right.length <= 18`\n`left` and `right` consist of only digits.\n\n`left` and `right` cannot have leading zeros.\n\n`left` and `right` represent integers in the range `[1, 1018]`.\n\n`left` is less than or equal to `right`."
  },
  {
    "id": "907",
    "title": "Sum of Subarray Minimums",
    "difficulty": "Medium",
    "explanation": "Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer modulo `109 + 7`.",
    "examples": [
      "Input: arr = [3,1,2,4]\nOutput: 17\nExplanation: \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\n\nSum is 17.",
      "Input: arr = [11,81,94,43,3]\nOutput: 444"
    ],
    "constraints": "`1 <= arr.length <= 3 * 104`\n`1 <= arr[i] <= 3 * 104`"
  },
  {
    "id": "908",
    "title": "Smallest Range I",
    "difficulty": "Easy",
    "explanation": "Given an array `A` of integers, for each integer `A[i]` we may choose any `x` with `-K <= x <= K`, and add `x` to `A[i]`.\n\nAfter this process, we have some array `B`.\n\nReturn the smallest possible difference between the maximum value of `B` and the minimum value of `B`.",
    "examples": [
      "Input: A = [1], K = 0\nOutput: 0\nExplanation: B = [1]",
      "Input: A = [0,10], K = 2\nOutput: 6\nExplanation: B = [2,8]",
      "Input: A = [1,3,6], K = 3\nOutput: 0\nExplanation: B = [3,3,3] or B = [4,4,4]\nNote:\n`1 <= A.length <= 10000`\n`0 <= A[i] <= 10000`\n`0 <= K <= 10000`"
    ],
    "constraints": ""
  },
  {
    "id": "909",
    "title": "Snakes and Ladders",
    "difficulty": "Medium",
    "explanation": "On an N x N `board`, the numbers from `1` to `N*N` are written boustrophedonically starting from the bottom left of the board, and alternating direction each row.  For example, for a 6 x 6 board, the numbers are written as follows:\nYou start on square `1` of the board (which is always in the last row and first column).  Each move, starting from square `x`, consists of the following:\nYou choose a destination square `S` with number `x+1`, `x+2`, `x+3`, `x+4`, `x+5`, or `x+6`, provided this number is `<= N*N`.\n\n\t\n(This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.)\nIf `S` has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to `S`.\n\nA board square on row `r` and column `c` has a \"snake or ladder\" if `board[r][c] != -1`.  The destination of that snake or ladder is `board[r][c]`.\n\nNote that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving.  (For example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at `3`, because you do not continue moving to `4`.)\nReturn the least number of moves required to reach square N*N.  If it is not possible, return `-1`.",
    "examples": [
      "Input: [\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,35,-1,-1,13,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,15,-1,-1,-1,-1]]\nOutput: 4\nExplanation: \nAt the beginning, you start at square 1 [at row 5, column 0].\n\nYou decide to move to square 2, and must take the ladder to square 15.\n\nYou then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.\n\nYou then decide to move to square 14, and must take the ladder to square 35.\n\nYou then decide to move to square 36, ending the game.\n\nIt can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.\n\nNote:\n`2 <= board.length = board[0].length <= 20`\n`board[i][j]` is between `1` and `N*N` or is equal to `-1`.\n\nThe board square with number `1` has no snake or ladder.\n\nThe board square with number `N*N` has no snake or ladder."
    ],
    "constraints": ""
  },
  {
    "id": "910",
    "title": "Smallest Range II",
    "difficulty": "Medium",
    "explanation": "Given an array `A` of integers, for each integer `A[i]` we need to choose either `x = -K` or `x = K`, and add `x` to `A[i] (only once)`.\n\nAfter this process, we have some array `B`.\n\nReturn the smallest possible difference between the maximum value of `B` and the minimum value of `B`.",
    "examples": [
      "Input: A = [1], K = 0\nOutput: 0\nExplanation: B = [1]",
      "Input: A = [0,10], K = 2\nOutput: 6\nExplanation: B = [2,8]",
      "Input: A = [1,3,6], K = 3\nOutput: 3\nExplanation: B = [4,6,3]\nNote:\n`1 <= A.length <= 10000`\n`0 <= A[i] <= 10000`\n`0 <= K <= 10000`"
    ],
    "constraints": ""
  },
  {
    "id": "911",
    "title": "Online Election",
    "difficulty": "Medium",
    "explanation": "In an election, the `i`-th vote was cast for `persons[i]` at time `times[i]`.\n\nNow, we would like to implement the following query function: `TopVotedCandidate.q(int t)` will return the number of the person that was leading the election at time `t`.  \nVotes cast at time `t` will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.",
    "examples": [
      "Input: [\"TopVotedCandidate\",\"q\",\"q\",\"q\",\"q\",\"q\",\"q\"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\nOutput: [null,0,1,1,0,0,1]\nExplanation: \nAt time 3, the votes are [0], and 0 is leading.\n\nAt time 12, the votes are [0,1,1], and 1 is leading.\n\nAt time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\nThis continues for 3 more queries at time 15, 24, and 8.\n\nNote:\n`1 <= persons.length = times.length <= 5000`\n`0 <= persons[i] <= persons.length`\n`times` is a strictly increasing array with all elements in `[0, 10^9]`.\n\n`TopVotedCandidate.q` is called at most `10000` times per test case.\n\n`TopVotedCandidate.q(int t)` is always called with `t >= times[0]`."
    ],
    "constraints": ""
  },
  {
    "id": "912",
    "title": "Sort an Array",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums`, sort the array in ascending order.",
    "examples": [
      "Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]",
      "Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]"
    ],
    "constraints": "`1 <= nums.length <= 50000`\n`-50000 <= nums[i] <= 50000`"
  },
  {
    "id": "913",
    "title": "Cat and Mouse",
    "difficulty": "Hard",
    "explanation": "A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\n\nThe graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.\n\nThe mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`.\n\nDuring each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in `graph[1]`.\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\nThen, the game can end in three ways:\nIf ever the Cat occupies the same node as the Mouse, the Cat wins.\n\nIf ever the Mouse reaches the Hole, the Mouse wins.\n\nIf ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n\nGiven a `graph`, and assuming both players play optimally, return\n`1` if the mouse wins the game,\n`2` if the cat wins the game, or\n`0` if the game is a draw.",
    "examples": [
      "Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\nOutput: 0",
      "Input: graph = [[1,3],[0],[3],[0,2]]\nOutput: 1"
    ],
    "constraints": "`3 <= graph.length <= 50`\n`1 <= graph[i].length < graph.length`\n`0 <= graph[i][j] < graph.length`\n`graph[i][j] != i`\n`graph[i]` is unique.\n\nThe mouse and the cat can always move."
  },
  {
    "id": "914",
    "title": "X of a Kind in a Deck of Cards",
    "difficulty": "Easy",
    "explanation": "In a deck of cards, each card has an integer written on it.\n\nReturn `true` if and only if you can choose `X >= 2` such that it is possible to split the entire deck into 1 or more groups of cards, where:\nEach group has exactly `X` cards.\n\nAll the cards in each group have the same integer.",
    "examples": [
      "Input: deck = [1,2,3,4,4,3,2,1]\nOutput: true\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].",
      "Input: deck = [1,1,1,2,2,2,3,3]\nOutput: false\nExplanation: No possible partition.",
      "Input: deck = [1]\nOutput: false\nExplanation: No possible partition.",
      "Input: deck = [1,1]\nOutput: true\nExplanation: Possible partition [1,1].",
      "Input: deck = [1,1,2,2,2,2]\nOutput: true\nExplanation: Possible partition [1,1],[2,2],[2,2]."
    ],
    "constraints": "`1 <= deck.length <= 104`\n`0 <= deck[i] < 104`"
  },
  {
    "id": "915",
    "title": "Partition Array into Disjoint Intervals",
    "difficulty": "Medium",
    "explanation": "Given an array `A`, partition it into two (contiguous) subarrays `left` and `right` so that:\nEvery element in `left` is less than or equal to every element in `right`.\n\n`left` and `right` are non-empty.\n\n`left` has the smallest possible size.\n\nReturn the length of `left` after such a partitioning.  It is guaranteed that such a partitioning exists.",
    "examples": [
      "Input: [5,0,3,8,6]\nOutput: 3\nExplanation: left = [5,0,3], right = [8,6]",
      "Input: [1,1,1,0,6,12]\nOutput: 4\nExplanation: left = [1,1,1,0], right = [6,12]\nNote:\n`2 <= A.length <= 30000`\n`0 <= A[i] <= 10^6`\nIt is guaranteed there is at least one way to partition `A` as described."
    ],
    "constraints": ""
  },
  {
    "id": "916",
    "title": "Word Subsets",
    "difficulty": "Medium",
    "explanation": "We are given two arrays `A` and `B` of words.  Each word is a string of lowercase letters.\n\nNow, say that word `b` is a subset of word `a` if every letter in `b` occurs in `a`, including multiplicity.  For example, `\"wrr\"` is a subset of `\"warrior\"`, but is not a subset of `\"world\"`.\n\nNow say a word `a` from `A` is universal if for every `b` in `B`, `b` is a subset of `a`. \nReturn a list of all universal words in `A`.  You can return the words in any order.",
    "examples": [
      "Input: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"e\",\"o\"]\nOutput: [\"facebook\",\"google\",\"leetcode\"]",
      "Input: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"l\",\"e\"]\nOutput: [\"apple\",\"google\",\"leetcode\"]",
      "Input: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"e\",\"oo\"]\nOutput: [\"facebook\",\"google\"]",
      "Input: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"lo\",\"eo\"]\nOutput: [\"google\",\"leetcode\"]",
      "Input: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"ec\",\"oc\",\"ceo\"]\nOutput: [\"facebook\",\"leetcode\"]\nNote:\n`1 <= A.length, B.length <= 10000`\n`1 <= A[i].length, B[i].length <= 10`\n`A[i]` and `B[i]` consist only of lowercase letters.\n\nAll words in `A[i]` are unique: there isn't `i != j` with `A[i] == A[j]`."
    ],
    "constraints": ""
  },
  {
    "id": "917",
    "title": "Reverse Only Letters",
    "difficulty": "Easy",
    "explanation": "Given a string `S`, return the \"reversed\" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.",
    "examples": [
      "Input: \"ab-cd\"\nOutput: \"dc-ba\"",
      "Input: \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"",
      "Input: \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"\nNote:\n`S.length <= 100`\n`33 <= S[i].ASCIIcode <= 122` \n`S` doesn't contain `\\` or `\"`"
    ],
    "constraints": ""
  },
  {
    "id": "918",
    "title": "Maximum Sum Circular Subarray",
    "difficulty": "Medium",
    "explanation": "Given a circular array C of integers represented by `A`, find the maximum possible sum of a non-empty subarray of C.\n\nHere, a circular array means the end of the array connects to the beginning of the array.  (Formally, `C[i] = A[i]` when `0 <= i < A.length`, and `C[i+A.length] = C[i]` when `i >= 0`.)\nAlso, a subarray may only include each element of the fixed buffer `A` at most once.  (Formally, for a subarray `C[i], C[i+1], ..., C[j]`, there does not exist `i <= k1, k2 <= j` with `k1 % A.length = k2 % A.length`.)",
    "examples": [
      "Input: [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3",
      "Input: [5,-3,5]\nOutput: 10\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10",
      "Input: [3,-1,2,-1]\nOutput: 4\nExplanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4",
      "Input: [3,-2,2,-3]\nOutput: 3\nExplanation: Subarray [3] and [3,-2,2] both have maximum sum 3",
      "Input: [-2,-3,-1]\nOutput: -1\nExplanation: Subarray [-1] has maximum sum -1\nNote: \n`-30000 <= A[i] <= 30000`\n`1 <= A.length <= 30000`"
    ],
    "constraints": ""
  },
  {
    "id": "919",
    "title": "Complete Binary Tree Inserter",
    "difficulty": "Medium",
    "explanation": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\nWrite a data structure `CBTInserter` that is initialized with a complete binary tree and supports the following operations:\n`CBTInserter(TreeNode root)` initializes the data structure on a given tree with head node `root`;\n`CBTInserter.insert(int v)` will insert a `TreeNode` into the tree with value `node.val = v` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`;\n`CBTInserter.get_root()` will return the head node of the tree.",
    "examples": [
      "Input: inputs = [\"CBTInserter\",\"insert\",\"get_root\"], inputs = [[[1]],[2],[]]\nOutput: [null,1,[1,2]]",
      "Input: inputs = [\"CBTInserter\",\"insert\",\"insert\",\"get_root\"], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\nOutput: [null,3,4,[1,2,3,4,5,6,7,8]]\nNote:\nThe initial given tree is complete and contains between `1` and `1000` nodes.\n\n`CBTInserter.insert` is called at most `10000` times per test case.\n\nEvery value of a given or inserted node is between `0` and `5000`."
    ],
    "constraints": ""
  },
  {
    "id": "920",
    "title": "Number of Music Playlists",
    "difficulty": "Hard",
    "explanation": "Your music player contains `N` different songs and she wants to listen to `L` (not necessarily different) songs during your trip.  You create a playlist so that:\nEvery song is played at least once\nA song can only be played again only if `K` other songs have been played\nReturn the number of possible playlists.  As the answer can be very large, return it modulo `10^9 + 7`.",
    "examples": [
      "Input: N = 3, L = 3, K = 1\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].",
      "Input: N = 2, L = 3, K = 0\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]",
      "Input: N = 2, L = 3, K = 1\nOutput: 2\nExplanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]\nNote:\n`0 <= K < N <= L <= 100`"
    ],
    "constraints": ""
  },
  {
    "id": "921",
    "title": "Minimum Add to Make Parentheses Valid",
    "difficulty": "Medium",
    "explanation": "Given a string `S` of `'('` and `')'` parentheses, we add the minimum number of parentheses ( `'('` or `')'`, and in any positions ) so that the resulting parentheses string is valid.\n\nFormally, a parentheses string is valid if and only if:\nIt is the empty string, or\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\nIt can be written as `(A)`, where `A` is a valid string.\n\nGiven a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.",
    "examples": [
      "Input: \"())\"\nOutput: 1",
      "Input: \"(((\"\nOutput: 3",
      "Input: \"()\"\nOutput: 0",
      "Input: \"()))((\"\nOutput: 4\nNote:\n`S.length <= 1000`\n`S` only consists of `'('` and `')'` characters."
    ],
    "constraints": ""
  },
  {
    "id": "922",
    "title": "Sort Array By Parity II",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums`, half of the integers in `nums` are odd, and the other half are even.\n\nSort the array so that whenever `nums[i]` is odd, `i` is odd, and whenever `nums[i]` is even, `i` is even.\n\nReturn any answer array that satisfies this condition.",
    "examples": [
      "Input: nums = [4,2,5,7]\nOutput: [4,5,2,7]\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.",
      "Input: nums = [2,3]\nOutput: [2,3]"
    ],
    "constraints": "`2 <= nums.length <= 2 * 104`\n`nums.length` is even.\n\nHalf of the integers in `nums` are even.\n\n`0 <= nums[i] <= 1000`"
  },
  {
    "id": "923",
    "title": "3Sum With Multiplicity",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.\n\nAs the answer can be very large, return it modulo `109 + 7`.",
    "examples": [
      "Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation: \nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.",
      "Input: arr = [1,1,2,2,2,2], target = 5\nOutput: 12\nExplanation: \narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways."
    ],
    "constraints": "`3 <= arr.length <= 3000`\n`0 <= arr[i] <= 100`\n`0 <= target <= 300`"
  },
  {
    "id": "924",
    "title": "Minimize Malware Spread",
    "difficulty": "Hard",
    "explanation": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from `initial`.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with the smallest index.\n\nNote that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.",
    "examples": [
      "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0",
      "Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0",
      "Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1"
    ],
    "constraints": "`n == graph.length`\n`n == graph[i].length`\n`2 <= n <= 300`\n`graph[i][j]` is `0` or `1`.\n\n`graph[i][j] == graph[j][i]`\n`graph[i][i] == 1`\n`1 <= initial.length <= n`\n`0 <= initial[i] <= n - 1`\nAll the integers in `initial` are unique."
  },
  {
    "id": "925",
    "title": "Long Pressed Name",
    "difficulty": "Easy",
    "explanation": "Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get long pressed, and the character will be typed 1 or more times.\n\nYou examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.",
    "examples": [
      "Input: name = \"alex\", typed = \"aaleex\"\nOutput: true\nExplanation: 'a' and 'e' in 'alex' were long pressed.",
      "Input: name = \"saeed\", typed = \"ssaaedd\"\nOutput: false\nExplanation: 'e' must have been pressed twice, but it wasn't in the typed output.",
      "Input: name = \"leelee\", typed = \"lleeelee\"\nOutput: true",
      "Input: name = \"laiden\", typed = \"laiden\"\nOutput: true\nExplanation: It's not necessary to long press any character."
    ],
    "constraints": "`1 <= name.length <= 1000`\n`1 <= typed.length <= 1000`\n`name` and `typed` contain only lowercase English letters."
  },
  {
    "id": "926",
    "title": "Flip String to Monotone Increasing",
    "difficulty": "Medium",
    "explanation": "A string of `'0'`s and `'1'`s is monotone increasing if it consists of some number of `'0'`s (possibly 0), followed by some number of `'1'`s (also possibly 0.)\nWe are given a string `S` of `'0'`s and `'1'`s, and we may flip any `'0'` to a `'1'` or a `'1'` to a `'0'`.\n\nReturn the minimum number of flips to make `S` monotone increasing.",
    "examples": [
      "Input: \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.",
      "Input: \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.",
      "Input: \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.\n\nNote:\n`1 <= S.length <= 20000`\n`S` only consists of `'0'` and `'1'` characters."
    ],
    "constraints": ""
  },
  {
    "id": "927",
    "title": "Three Equal Parts",
    "difficulty": "Hard",
    "explanation": "You are given an array `arr` which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\n\nIf it is possible, return any `[i, j]` with `i + 1 < j`, such that:\n`arr[0], arr[1], ..., arr[i]` is the first part,\n`arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n`arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n\nAll three parts have equal binary values.\n\nIf it is not possible, return `[-1, -1]`.\n\nNote that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros are allowed, so `[0,1,1]` and `[1,1]` represent the same value.",
    "examples": [
      "Input: arr = [1,0,1,0,1]\nOutput: [0,3]",
      "Input: arr = [1,1,0,1,1]\nOutput: [-1,-1]",
      "Input: arr = [1,1,0,0,1]\nOutput: [0,2]"
    ],
    "constraints": "`3 <= arr.length <= 3 * 104`\n`arr[i]` is `0` or `1`"
  },
  {
    "id": "928",
    "title": "Minimize Malware Spread II",
    "difficulty": "Hard",
    "explanation": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n\nWe will remove exactly one node from `initial`, completely removing it and any connections from this node to any other node.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with the smallest index.",
    "examples": [
      "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0",
      "Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1",
      "Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1"
    ],
    "constraints": "`n == graph.length`\n`n == graph[i].length`\n`2 <= n <= 300`\n`graph[i][j]` is `0` or `1`.\n\n`graph[i][j] == graph[j][i]`\n`graph[i][i] == 1`\n`1 <= initial.length < n`\n`0 <= initial[i] <= n - 1`\nAll the integers in `initial` are unique."
  },
  {
    "id": "929",
    "title": "Unique Email Addresses",
    "difficulty": "Easy",
    "explanation": "Every valid email consists of a local name and a domain name, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.\n\nFor example, in `\"alice@leetcode.com\"`, `\"alice\"` is the local name, and `\"leetcode.com\"` is the domain name.\n\nIf you add periods `'.'` between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\n\nFor example, `\"alice.z@leetcode.com\"` and `\"alicez@leetcode.com\"` forward to the same email address.\n\nIf you add a plus `'+'` in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\n\nFor example, `\"m.y+name@email.com\"` will be forwarded to `\"my@email.com\"`.\n\nIt is possible to use both of these rules at the same time.\n\nGiven an array of strings `emails` where we send one email to each `email[i]`, return the number of different addresses that actually receive mails.",
    "examples": [
      "Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.",
      "Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\nOutput: 3"
    ],
    "constraints": "`1 <= emails.length <= 100`\n`1 <= emails[i].length <= 100`\n`email[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.\n\nEach `emails[i]` contains exactly one `'@'` character.\n\nAll local and domain names are non-empty.\n\nLocal names do not start with a `'+'` character."
  },
  {
    "id": "930",
    "title": "Binary Subarrays With Sum",
    "difficulty": "Medium",
    "explanation": "In an array `A` of `0`s and `1`s, how many non-empty subarrays have sum `S`?",
    "examples": [
      "Input: A = [1,0,1,0,1], S = 2\nOutput: 4\nExplanation: \nThe 4 subarrays are bolded below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\nNote:\n`A.length <= 30000`\n`0 <= S <= A.length`\n`A[i]` is either `0` or `1`."
    ],
    "constraints": ""
  },
  {
    "id": "931",
    "title": "Minimum Falling Path Sum",
    "difficulty": "Medium",
    "explanation": "Given an `n x n` array of integers `matrix`, return the minimum sum of any falling path through `matrix`.\n\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.",
    "examples": [
      "Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]\nOutput: 13\nExplanation: There are two falling paths with a minimum sum underlined below:\n[[2,1,3],      [[2,1,3],\n [6,5,4],       [6,5,4],\n [7,8,9]]       [7,8,9]]",
      "Input: matrix = [[-19,57],[-40,-5]]\nOutput: -59\nExplanation: The falling path with a minimum sum is underlined below:\n[[-19,57],\n [-40,-5]]",
      "Input: matrix = [[-48]]\nOutput: -48"
    ],
    "constraints": "`n == matrix.length`\n`n == matrix[i].length`\n`1 <= n <= 100`\n`-100 <= matrix[i][j] <= 100`"
  },
  {
    "id": "932",
    "title": "Beautiful Array",
    "difficulty": "Medium",
    "explanation": "For some fixed `N`, an array `A` is beautiful if it is a permutation of the integers `1, 2, ..., N`, such that:\nFor every `i < j`, there is no `k` with `i < k < j` such that `A[k] * 2 = A[i] + A[j]`.\n\nGiven `N`, return any beautiful array `A`.  (It is guaranteed that one exists.)",
    "examples": [
      "Input: 4\nOutput: [2,1,4,3]",
      "Input: 5\nOutput: [3,1,2,5,4]\nNote:\n`1 <= N <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "933",
    "title": "Number of Recent Calls",
    "difficulty": "Easy",
    "explanation": "You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.\n\nImplement the `RecentCounter` class:\n`RecentCounter()` Initializes the counter with zero recent requests.\n\n`int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.\n\nIt is guaranteed that every call to `ping` uses a strictly larger value of `t` than the previous call.",
    "examples": [
      "Input\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\nOutput\n[null, 1, 2, 3, 3]\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3"
    ],
    "constraints": "`1 <= t <= 109`\nEach test case will call `ping` with strictly increasing values of `t`.\n\nAt most `104` calls will be made to `ping`."
  },
  {
    "id": "934",
    "title": "Shortest Bridge",
    "difficulty": "Medium",
    "explanation": "In a given 2D binary array `A`, there are two islands.  (An island is a 4-directionally connected group of `1`s not connected to any other 1s.)\nNow, we may change `0`s to `1`s so as to connect the two islands together to form 1 island.\n\nReturn the smallest number of `0`s that must be flipped.  (It is guaranteed that the answer is at least 1.)",
    "examples": [
      "Input: A = [[0,1],[1,0]]\nOutput: 1",
      "Input: A = [[0,1,0],[0,0,0],[0,0,1]]\nOutput: 2",
      "Input: A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\nOutput: 1"
    ],
    "constraints": "`2 <= A.length == A[0].length <= 100`\n`A[i][j] == 0` or `A[i][j] == 1`"
  },
  {
    "id": "935",
    "title": "Knight Dialer",
    "difficulty": "Medium",
    "explanation": "The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\nA chess knight can move as indicated in the chess diagram below:\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).\n\nGiven an integer `n`, return how many distinct phone numbers of length `n` we can dial.\n\nYou are allowed to place the knight on any numeric cell initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be valid knight jumps.\n\nAs the answer may be very large, return the answer modulo `109 + 7`.",
    "examples": [
      "Input: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.",
      "Input: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]",
      "Input: n = 3\nOutput: 46",
      "Input: n = 4\nOutput: 104",
      "Input: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod."
    ],
    "constraints": "`1 <= n <= 5000`"
  },
  {
    "id": "936",
    "title": "Stamping The Sequence",
    "difficulty": "Hard",
    "explanation": "You want to form a `target` string of lowercase letters.\n\nAt the beginning, your sequence is `target.length` `'?'` marks.  You also have a `stamp` of lowercase letters.\n\nOn each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.  You can make up to `10 * target.length` turns.\n\nFor example, if the initial sequence is \"?????\", and your stamp is `\"abc\"`,  then you may make \"abc??\", \"?abc?\", \"??abc\" in the first turn.  (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)\nIf the sequence is possible to stamp, then return an array of the index of the left-most letter being stamped at each turn.  If the sequence is not possible to stamp, return an empty array.\n\nFor example, if the sequence is \"ababc\", and the stamp is `\"abc\"`, then we could return the answer `[0, 2]`, corresponding to the moves \"?????\" -> \"abc??\" -> \"ababc\".\n\nAlso, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within `10 * target.length` moves.  Any answers specifying more than this number of moves will not be accepted.",
    "examples": [
      "Input: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\n([1,0,2] would also be accepted as an answer, as well as some other answers.)",
      "Input: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\nNote:\n`1 <= stamp.length <= target.length <= 1000`\n`stamp` and `target` only contain lowercase letters."
    ],
    "constraints": ""
  },
  {
    "id": "937",
    "title": "Reorder Data in Log Files",
    "difficulty": "Easy",
    "explanation": "You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the identifier.\n\nThere are two types of logs:\nLetter-logs: All words (except the identifier) consist of lowercase English letters.\n\nDigit-logs: All words (except the identifier) consist of digits.\n\nReorder these logs so that:\nThe letter-logs come before all digit-logs.\n\nThe letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\n\nThe digit-logs maintain their relative ordering.\n\nReturn the final order of the logs.",
    "examples": [
      "Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\nOutput: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\nExplanation:\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\n\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".",
      "Input: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\nOutput: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]"
    ],
    "constraints": "`1 <= logs.length <= 100`\n`3 <= logs[i].length <= 100`\nAll the tokens of `logs[i]` are separated by a single space.\n\n`logs[i]` is guaranteed to have an identifier and at least one word after the identifier."
  },
  {
    "id": "938",
    "title": "Range Sum of BST",
    "difficulty": "Easy",
    "explanation": "Given the `root` node of a binary search tree, return the sum of values of all nodes with a value in the range `[low, high]`.",
    "examples": [
      "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32",
      "Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 2 * 104]`.\n\n`1 <= Node.val <= 105`\n`1 <= low <= high <= 105`\nAll `Node.val` are unique."
  },
  {
    "id": "939",
    "title": "Minimum Area Rectangle",
    "difficulty": "Medium",
    "explanation": "Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.\n\nIf there isn't any rectangle, return 0.",
    "examples": [
      "Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4",
      "Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2\nNote:\n`1 <= points.length <= 500`\n`0 <= points[i][0] <= 40000`\n`0 <= points[i][1] <= 40000`\nAll points are distinct."
    ],
    "constraints": ""
  },
  {
    "id": "940",
    "title": "Distinct Subsequences II",
    "difficulty": "Hard",
    "explanation": "Given a string `S`, count the number of distinct, non-empty subsequences of `S` .\n\nSince the result may be large, return the answer modulo `10^9 + 7`.",
    "examples": [
      "Input: \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".",
      "Input: \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"ba\", \"aa\" and \"aba\".",
      "Input: \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n\nNote:\n`S` contains only lowercase letters.\n\n`1 <= S.length <= 2000`"
    ],
    "constraints": ""
  },
  {
    "id": "941",
    "title": "Valid Mountain Array",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `arr`, return `true` if and only if it is a valid mountain array.\n\nRecall that arr is a mountain array if and only if:\n`arr.length >= 3`\nThere exists some `i` with `0 < i < arr.length - 1` such that:\n\t\n`arr[0] < arr[1] < ... < arr[i - 1] < arr[i] `\n`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`",
    "examples": [
      "Input: arr = [2,1]\nOutput: false",
      "Input: arr = [3,5,5]\nOutput: false",
      "Input: arr = [0,3,2,1]\nOutput: true"
    ],
    "constraints": "`1 <= arr.length <= 104`\n`0 <= arr[i] <= 104`"
  },
  {
    "id": "942",
    "title": "DI String Match",
    "difficulty": "Easy",
    "explanation": "A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:\n`s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n`s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\nGiven a string `s`, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.",
    "examples": [
      "Input: s = \"IDID\"\nOutput: [0,4,1,3,2]",
      "Input: s = \"III\"\nOutput: [0,1,2,3]",
      "Input: s = \"DDI\"\nOutput: [3,2,0,1]"
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is either `'I'` or `'D'`."
  },
  {
    "id": "943",
    "title": "Find the Shortest Superstring",
    "difficulty": "Hard",
    "explanation": "Given an array of strings `words`, return the smallest string that contains each string in `words` as a substring. If there are multiple valid strings of the smallest length, return any of them.\n\nYou may assume that no string in `words` is a substring of another string in `words`.",
    "examples": [
      "Input: words = [\"alex\",\"loves\",\"leetcode\"]\nOutput: \"alexlovesleetcode\"\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.",
      "Input: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\nOutput: \"gctaagttcatgcatc\""
    ],
    "constraints": "`1 <= words.length <= 12`\n`1 <= words[i].length <= 20`\n`words[i]` consists of lowercase English letters.\n\nAll the strings of `words` are unique."
  },
  {
    "id": "944",
    "title": "Delete Columns to Make Sorted",
    "difficulty": "Easy",
    "explanation": "You are given an array of `n` strings `strs`, all of the same length.\n\nThe strings can be arranged such that there is one on each line, making a grid. For example, `strs = [\"abc\", \"bce\", \"cae\"]` can be arranged as:\nabc\nbce\ncae\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.\n\nReturn the number of columns that you will delete.",
    "examples": [
      "Input: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.",
      "Input: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.",
      "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3."
    ],
    "constraints": "`n == strs.length`\n`1 <= n <= 100`\n`1 <= strs[i].length <= 1000`\n`strs[i]` consists of lowercase English letters."
  },
  {
    "id": "945",
    "title": "Minimum Increment to Make Array Unique",
    "difficulty": "Medium",
    "explanation": "Given an array of integers A, a move consists of choosing any `A[i]`, and incrementing it by `1`.\n\nReturn the least number of moves to make every value in `A` unique.",
    "examples": [
      "Input: [1,2,2]\nOutput: 1\nExplanation:  After 1 move, the array could be [1, 2, 3].",
      "Input: [3,2,1,2,1,7]\nOutput: 6\nExplanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\n\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n\nNote:\n`0 <= A.length <= 40000`\n`0 <= A[i] < 40000`"
    ],
    "constraints": ""
  },
  {
    "id": "946",
    "title": "Validate Stack Sequences",
    "difficulty": "Medium",
    "explanation": "Given two sequences `pushed` and `popped` with distinct values, return `true` if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.",
    "examples": [
      "Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\nOutput: true\nExplanation: We might do the following sequence:\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1",
      "Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\nOutput: false\nExplanation: 1 cannot be popped before 2."
    ],
    "constraints": "`0 <= pushed.length == popped.length <= 1000`\n`0 <= pushed[i], popped[i] < 1000`\n`pushed` is a permutation of `popped`.\n\n`pushed` and `popped` have distinct values."
  },
  {
    "id": "947",
    "title": "Most Stones Removed with Same Row or Column",
    "difficulty": "Medium",
    "explanation": "On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return the largest possible number of stones that can be removed.",
    "examples": [
      "Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\nOutput: 5\nExplanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n\n2. Remove stone [2,1] because it shares the same column as [0,1].\n\n3. Remove stone [1,2] because it shares the same row as [1,0].\n\n4. Remove stone [1,0] because it shares the same column as [0,0].\n\n5. Remove stone [0,1] because it shares the same row as [0,0].\n\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.",
      "Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\nOutput: 3\nExplanation: One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n\n2. Remove stone [2,0] because it shares the same column as [0,0].\n\n3. Remove stone [0,2] because it shares the same row as [0,0].\n\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.",
      "Input: stones = [[0,0]]\nOutput: 0\nExplanation: [0,0] is the only stone on the plane, so you cannot remove it."
    ],
    "constraints": "`1 <= stones.length <= 1000`\n`0 <= xi, yi <= 104`\nNo two stones are at the same coordinate point."
  },
  {
    "id": "948",
    "title": "Bag of Tokens",
    "difficulty": "Medium",
    "explanation": "You have an initial power of `P`, an initial score of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).\n\nYour goal is to maximize your total score by potentially playing each token in one of two ways:\nIf your current power is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` power and gaining `1` score.\n\nIf your current score is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` power and losing `1` score.\n\nEach token may be played at most once and in any order. You do not have to play all the tokens.\n\nReturn the largest possible score you can achieve after playing any number of tokens.",
    "examples": [
      "Input: tokens = [100], P = 50\nOutput: 0\nExplanation: Playing the only token in the bag is impossible because you either have too little power or too little score.",
      "Input: tokens = [100,200], P = 150\nOutput: 1\nExplanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.\n\nThere is no need to play the 1st token since you cannot play it face up to add to your score.",
      "Input: tokens = [100,200,300,400], P = 200\nOutput: 2\nExplanation: Play the tokens in this order to get a score of 2:\n1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.\n\n2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.\n\n3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.\n\n4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2."
    ],
    "constraints": "`0 <= tokens.length <= 1000`\n`0 <= tokens[i], P < 104`"
  },
  {
    "id": "949",
    "title": "Largest Time for Given Digits",
    "difficulty": "Medium",
    "explanation": "Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n\n24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\nReturn the latest 24-hour time in `\"HH:MM\"` format.  If no valid time can be made, return an empty string.",
    "examples": [
      "Input: A = [1,2,3,4]\nOutput: \"23:41\"\nExplanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.",
      "Input: A = [5,5,5,5]\nOutput: \"\"\nExplanation: There are no valid 24-hour times as \"55:55\" is not valid.",
      "Input: A = [0,0,0,0]\nOutput: \"00:00\"",
      "Input: A = [0,0,1,0]\nOutput: \"10:00\""
    ],
    "constraints": "`arr.length == 4`\n`0 <= arr[i] <= 9`"
  },
  {
    "id": "950",
    "title": "Reveal Cards In Increasing Order",
    "difficulty": "Medium",
    "explanation": "In a deck of cards, every card has a unique integer.  You can order the deck in any order you want.\n\nInitially, all the cards start face down (unrevealed) in one deck.\n\nNow, you do the following steps repeatedly, until all cards are revealed:\nTake the top card of the deck, reveal it, and take it out of the deck.\n\nIf there are still cards in the deck, put the next top card of the deck at the bottom of the deck.\n\nIf there are still unrevealed cards, go back to step 1.  Otherwise, stop.\n\nReturn an ordering of the deck that would reveal the cards in increasing order.\n\nThe first entry in the answer is considered to be the top of the deck.",
    "examples": [
      "Input: [17,13,11,2,3,5,7]\nOutput: [2,13,3,11,5,17,7]\nExplanation: \nWe get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.\n\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\n\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\n\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\n\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\n\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\n\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\n\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\n\nWe reveal 17.\n\nSince all the cards revealed are in increasing order, the answer is correct.\n\nNote:\n`1 <= A.length <= 1000`\n`1 <= A[i] <= 10^6`\n`A[i] != A[j]` for all `i != j`"
    ],
    "constraints": ""
  },
  {
    "id": "951",
    "title": "Flip Equivalent Binary Trees",
    "difficulty": "Medium",
    "explanation": "For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\n\nA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\n\nGiven the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivelent or `false` otherwise.",
    "examples": [
      "Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\nOutput: true\nExplanation: We flipped at nodes with values 1, 3, and 5.",
      "Input: root1 = [], root2 = []\nOutput: true",
      "Input: root1 = [], root2 = [1]\nOutput: false",
      "Input: root1 = [0,null,1], root2 = []\nOutput: false",
      "Input: root1 = [0,null,1], root2 = [0,1]\nOutput: true"
    ],
    "constraints": "The number of nodes in each tree is in the range `[0, 100]`.\n\nEach tree will have unique node values in the range `[0, 99]`."
  },
  {
    "id": "952",
    "title": "Largest Component Size by Common Factor",
    "difficulty": "Hard",
    "explanation": "Given a non-empty array of unique positive integers `A`, consider the following graph:\nThere are `A.length` nodes, labelled `A[0]` to `A[A.length - 1];`\nThere is an edge between `A[i]` and `A[j]` if and only if `A[i]` and `A[j]` share a common factor greater than 1.\n\nReturn the size of the largest connected component in the graph.",
    "examples": [
      "Input: [4,6,15,35]\nOutput: 4",
      "Input: [20,50,9,63]\nOutput: 2",
      "Input: [2,3,6,7,4,12,21,39]\nOutput: 8\nNote:\n`1 <= A.length <= 20000`\n`1 <= A[i] <= 100000`"
    ],
    "constraints": ""
  },
  {
    "id": "953",
    "title": "Verifying an Alien Dictionary",
    "difficulty": "Easy",
    "explanation": "In an alien language, surprisingly they also use english lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.\n\nGiven a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographicaly in this alien language.",
    "examples": [
      "Input: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\nOutput: true\nExplanation: As 'h' comes before 'l' in this language, then the sequence is sorted.",
      "Input: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\nOutput: false\nExplanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.",
      "Input: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: false\nExplanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info)."
    ],
    "constraints": "`1 <= words.length <= 100`\n`1 <= words[i].length <= 20`\n`order.length == 26`\nAll characters in `words[i]` and `order` are English lowercase letters."
  },
  {
    "id": "954",
    "title": "Array of Doubled Pairs",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr` of even length, return `true` if and only if it is possible to reorder it such that `arr[2 * i + 1] = 2 * arr[2 * i]` for every `0 <= i < len(arr) / 2`.",
    "examples": [
      "Input: arr = [3,1,3,6]\nOutput: false",
      "Input: arr = [2,1,2,6]\nOutput: false",
      "Input: arr = [4,-2,2,-4]\nOutput: true\nExplanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].",
      "Input: arr = [1,2,4,16,8,4]\nOutput: false"
    ],
    "constraints": "`0 <= arr.length <= 3 * 104`\n`arr.length` is even.\n\n`-105 <= arr[i] <= 105`"
  },
  {
    "id": "955",
    "title": "Delete Columns to Make Sorted II",
    "difficulty": "Medium",
    "explanation": "You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in lexicographic order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return the minimum possible value of `answer.length`.",
    "examples": [
      "Input: strs = [\"ca\",\"bb\",\"ac\"]\nOutput: 1\nExplanation: \nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\n\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\n\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.",
      "Input: strs = [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation: \nstrs is already in lexicographic order, so we do not need to delete anything.\n\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)",
      "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: We have to delete every column."
    ],
    "constraints": "`n == strs.length`\n`1 <= n <= 100`\n`1 <= strs[i].length <= 100`\n`strs[i]` consists of lowercase English letters."
  },
  {
    "id": "956",
    "title": "Tallest Billboard",
    "difficulty": "Hard",
    "explanation": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\n\nYou are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`.\n\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return `0`.",
    "examples": [
      "Input: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.",
      "Input: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.",
      "Input: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0."
    ],
    "constraints": "`1 <= rods.length <= 20`\n`1 <= rods[i] <= 1000`\n`sum(rods[i]) <= 5000`"
  },
  {
    "id": "957",
    "title": "Prison Cells After N Days",
    "difficulty": "Medium",
    "explanation": "There are `8` prison cells in a row and each cell is either occupied or vacant.\n\nEach day, whether the cell is occupied or vacant changes according to the following rules:\nIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\n\nOtherwise, it becomes vacant.\n\nNote that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\n\nYou are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.\n\nReturn the state of the prison after `n` days (i.e., `n` such changes described above).",
    "examples": [
      "Input: cells = [0,1,0,1,1,0,0,1], n = 7\nOutput: [0,0,1,1,0,0,0,0]\nExplanation: The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]",
      "Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000\nOutput: [0,0,1,1,1,1,1,0]"
    ],
    "constraints": "`cells.length == 8`\n`cells[i]` is either `0` or `1`.\n\n`1 <= n <= 109`"
  },
  {
    "id": "958",
    "title": "Check Completeness of a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, determine if it is a complete binary tree.\n\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.",
    "examples": [
      "Input: root = [1,2,3,4,5,6]\nOutput: true\nExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.",
      "Input: root = [1,2,3,4,5,null,7]\nOutput: false\nExplanation: The node with value 7 isn't as far left as possible."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 100]`.\n\n`1 <= Node.val <= 1000`"
  },
  {
    "id": "959",
    "title": "Regions Cut By Slashes",
    "difficulty": "Medium",
    "explanation": "In a N x N `grid` composed of 1 x 1 squares, each 1 x 1 square consists of a `/`, `\\`, or blank space.  These characters divide the square into contiguous regions.\n\n(Note that backslash characters are escaped, so a `\\` is represented as `\"\\\\\"`.)\nReturn the number of regions.",
    "examples": [
      "Input:\n[\n  \" /\",\n  \"/ \"\n]\nOutput: 2\nExplanation: The 2x2 grid is as follows:",
      "Input:\n[\n  \" /\",\n  \"  \"\n]\nOutput: 1\nExplanation: The 2x2 grid is as follows:",
      "Input:\n[\n  \"\\\\/\",\n  \"/\\\\\"\n]\nOutput: 4\nExplanation: (Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.)\nThe 2x2 grid is as follows:",
      "Input:\n[\n  \"/\\\\\",\n  \"\\\\/\"\n]\nOutput: 5\nExplanation: (Recall that because \\ characters are escaped, \"/\\\\\" refers to /\\, and \"\\\\/\" refers to \\/.)\nThe 2x2 grid is as follows:",
      "Input:\n[\n  \"//\",\n  \"/ \"\n]\nOutput: 3\nExplanation: The 2x2 grid is as follows:\nNote:\n`1 <= grid.length == grid[0].length <= 30`\n`grid[i][j]` is either `'/'`, `'\\'`, or `' '`."
    ],
    "constraints": ""
  },
  {
    "id": "960",
    "title": "Delete Columns to Make Sorted III",
    "difficulty": "Hard",
    "explanation": "You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has every string (row) in lexicographic order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return the minimum possible value of `answer.length`.",
    "examples": [
      "Input: strs = [\"babca\",\"bbazb\"]\nOutput: 3\nExplanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\n\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\n\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.",
      "Input: strs = [\"edcba\"]\nOutput: 4\nExplanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.",
      "Input: strs = [\"ghi\",\"def\",\"abc\"]\nOutput: 0\nExplanation: All rows are already lexicographically sorted."
    ],
    "constraints": "`n == strs.length`\n`1 <= n <= 100`\n`1 <= strs[i].length <= 100`\n`strs[i]` consists of lowercase English letters."
  },
  {
    "id": "961",
    "title": "N-Repeated Element in Size 2N Array",
    "difficulty": "Easy",
    "explanation": "In a array `A` of size `2N`, there are `N+1` unique elements, and exactly one of these elements is repeated `N` times.\n\nReturn the element repeated `N` times.",
    "examples": [
      "Input: [1,2,3,3]\nOutput: 3",
      "Input: [2,1,2,5,3,2]\nOutput: 2",
      "Input: [5,1,5,2,5,3,5,4]\nOutput: 5\nNote:\n`4 <= A.length <= 10000`\n`0 <= A[i] < 10000`\n`A.length` is even"
    ],
    "constraints": ""
  },
  {
    "id": "962",
    "title": "Maximum Width Ramp",
    "difficulty": "Medium",
    "explanation": "Given an array `A` of integers, a ramp is a tuple `(i, j)` for which `i < j` and `A[i] <= A[j]`.  The width of such a ramp is `j - i`.\n\nFind the maximum width of a ramp in `A`.  If one doesn't exist, return 0.",
    "examples": [
      "Input: [6,0,8,2,1,5]\nOutput: 4\nExplanation: \nThe maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.",
      "Input: [9,8,1,0,1,9,4,0,4,1]\nOutput: 7\nExplanation: \nThe maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.\n\nNote:\n`2 <= A.length <= 50000`\n`0 <= A[i] <= 50000`"
    ],
    "constraints": ""
  },
  {
    "id": "963",
    "title": "Minimum Area Rectangle II",
    "difficulty": "Medium",
    "explanation": "Given a set of points in the xy-plane, determine the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes.\n\nIf there isn't any rectangle, return 0.",
    "examples": [
      "Input: [[1,2],[2,1],[1,0],[0,1]]\nOutput: 2.00000\nExplanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.",
      "Input: [[0,1],[2,1],[1,1],[1,0],[2,0]]\nOutput: 1.00000\nExplanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.",
      "Input: [[0,3],[1,2],[3,1],[1,3],[2,1]]\nOutput: 0\nExplanation: There is no possible rectangle to form from these points.",
      "Input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\nOutput: 2.00000\nExplanation: The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.\n\nNote:\n`1 <= points.length <= 50`\n`0 <= points[i][0] <= 40000`\n`0 <= points[i][1] <= 40000`\nAll points are distinct.\n\nAnswers within `10^-5` of the actual value will be accepted as correct."
    ],
    "constraints": ""
  },
  {
    "id": "964",
    "title": "Least Operators to Express Number",
    "difficulty": "Hard",
    "explanation": "Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3.\n\nWhen writing such an expression, we adhere to the following conventions:\nThe division operator (`/`) returns rational numbers.\n\nThere are no parentheses placed anywhere.\n\nWe use the usual order of operations: multiplication and division happen before addition and subtraction.\n\nIt is not allowed to use the unary negation operator (`-`). For example, \"`x - x`\" is a valid expression as it only uses subtraction, but \"`-x + x`\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.",
    "examples": [
      "Input: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\n\nThe expression contains 5 operations.",
      "Input: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\n\nThe expression contains 8 operations.",
      "Input: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\n\nThe expression contains 3 operations."
    ],
    "constraints": "`2 <= x <= 100`\n`1 <= target <= 2 * 108`"
  },
  {
    "id": "965",
    "title": "Univalued Binary Tree",
    "difficulty": "Easy",
    "explanation": "A binary tree is univalued if every node in the tree has the same value.\n\nReturn `true` if and only if the given tree is univalued.",
    "examples": [
      "Input: [1,1,1,1,1,null,1]\nOutput: true",
      "Input: [2,2,2,5,2]\nOutput: false\nNote:\nThe number of nodes in the given tree will be in the range `[1, 100]`.\n\nEach node's value will be an integer in the range `[0, 99]`."
    ],
    "constraints": ""
  },
  {
    "id": "966",
    "title": "Vowel Spellchecker",
    "difficulty": "Medium",
    "explanation": "Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.\n\nFor a given `query` word, the spell checker handles two categories of spelling mistakes:\nCapitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.\n\n\t\n\nExample: `wordlist = [\"yellow\"]`, `query = \"YellOw\"`: `correct = \"yellow\"`\n\nExample: `wordlist = [\"Yellow\"]`, `query = \"yellow\"`: `correct = \"Yellow\"`\n\nExample: `wordlist = [\"yellow\"]`, `query = \"yellow\"`: `correct = \"yellow\"`\nVowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.\n\n\t\n\nExample: `wordlist = [\"YellOw\"]`, `query = \"yollow\"`: `correct = \"YellOw\"`\n\nExample: `wordlist = [\"YellOw\"]`, `query = \"yeellow\"`: `correct = \"\"` (no match)\n\nExample: `wordlist = [\"YellOw\"]`, `query = \"yllw\"`: `correct = \"\"` (no match)\nIn addition, the spell checker operates under the following precedence rules:\nWhen the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.\n\nWhen the query matches a word up to capitlization, you should return the first such match in the wordlist.\n\nWhen the query matches a word up to vowel errors, you should return the first such match in the wordlist.\n\nIf the query has no matches in the wordlist, you should return the empty string.\n\nGiven some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.",
    "examples": [
      "Input: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\nOutput: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]",
      "Input: wordlist = [\"yellow\"], queries = [\"YellOw\"]\nOutput: [\"yellow\"]"
    ],
    "constraints": "`1 <= wordlist.length, queries.length <= 5000`\n`1 <= wordlist[i].length, queries[i].length <= 7`\n`wordlist[i]` and `queries[i]` consist only of only English letters."
  },
  {
    "id": "967",
    "title": "Numbers With Same Consecutive Differences",
    "difficulty": "Medium",
    "explanation": "Return all non-negative integers of length `n` such that the absolute difference between every two consecutive digits is `k`.\n\nNote that every number in the answer must not have leading zeros. For example, `01` has one leading zero and is invalid.\n\nYou may return the answer in any order.",
    "examples": [
      "Input: n = 3, k = 7\nOutput: [181,292,707,818,929]\nExplanation: Note that 070 is not a valid number, because it has leading zeroes.",
      "Input: n = 2, k = 1\nOutput: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]",
      "Input: n = 2, k = 0\nOutput: [11,22,33,44,55,66,77,88,99]",
      "Input: n = 2, k = 2\nOutput: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]"
    ],
    "constraints": "`2 <= n <= 9`\n`0 <= k <= 9`"
  },
  {
    "id": "968",
    "title": "Binary Tree Cameras",
    "difficulty": "Hard",
    "explanation": "Given a binary tree, we install cameras on the nodes of the tree. \nEach camera at a node can monitor its parent, itself, and its immediate children.\n\nCalculate the minimum number of cameras needed to monitor all nodes of the tree.",
    "examples": [
      "Input: [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.",
      "Input: [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\nNote:\nThe number of nodes in the given tree will be in the range `[1, 1000]`.\n\nEvery node has value 0."
    ],
    "constraints": ""
  },
  {
    "id": "969",
    "title": "Pancake Sorting",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr`, sort the array by performing a series of pancake flips.\n\nIn one pancake flip we do the following steps:\nChoose an integer `k` where `1 <= k <= arr.length`.\n\nReverse the sub-array `arr[0...k-1]` (0-indexed).\n\nFor example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.\n\nReturn an array of the `k`-values corresponding to a sequence of pancake flips that sort `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.",
    "examples": [
      "Input: arr = [3,2,4,1]\nOutput: [4,2,4,3]\nExplanation: \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\n\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.",
      "Input: arr = [1,2,3]\nOutput: []\nExplanation: The input is already sorted, so there is no need to flip anything.\n\nNote that other answers, such as [3, 3], would also be accepted."
    ],
    "constraints": "`1 <= arr.length <= 100`\n`1 <= arr[i] <= arr.length`\nAll integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`)."
  },
  {
    "id": "970",
    "title": "Powerful Integers",
    "difficulty": "Medium",
    "explanation": "Given three integers `x`, `y`, and `bound`, return a list of all the powerful integers that have a value less than or equal to `bound`.\n\nAn integer is powerful if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`.\n\nYou may return the answer in any order. In your answer, each value should occur at most once.",
    "examples": [
      "Input: x = 2, y = 3, bound = 10\nOutput: [2,3,4,5,7,9,10]\nExplanation:\n2 = 20 + 30\n3 = 21 + 30\n4 = 20 + 31\n5 = 21 + 31\n7 = 22 + 31\n9 = 23 + 30\n10 = 20 + 32",
      "Input: x = 3, y = 5, bound = 15\nOutput: [2,4,6,8,10,14]"
    ],
    "constraints": "`1 <= x, y <= 100`\n`0 <= bound <= 106`"
  },
  {
    "id": "971",
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "difficulty": "Medium",
    "explanation": "You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the desired pre-order traversal of the binary tree.\n\nAny node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\nFlip the smallest number of nodes so that the pre-order traversal of the tree matches `voyage`.\n\nReturn a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match `voyage`, return the list `[-1]`.",
    "examples": [
      "Input: root = [1,2], voyage = [2,1]\nOutput: [-1]\nExplanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.",
      "Input: root = [1,2,3], voyage = [1,3,2]\nOutput: [1]\nExplanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.",
      "Input: root = [1,2,3], voyage = [1,2,3]\nOutput: []\nExplanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."
    ],
    "constraints": "The number of nodes in the tree is `n`.\n\n`n == voyage.length`\n`1 <= n <= 100`\n`1 <= Node.val, voyage[i] <= n`\nAll the values in the tree are unique.\n\nAll the values in `voyage` are unique."
  },
  {
    "id": "972",
    "title": "Equal Rational Numbers",
    "difficulty": "Hard",
    "explanation": "Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\n\nA rational number can be represented using up to three parts: `<IntegerPart>`, `<NonRepeatingPart>`, and a `<RepeatingPart>`. The number will be represented in one of the following three ways:\n`<IntegerPart>`\n\t\nFor example, `12`, `0`, and `123`.\n\n`<IntegerPart><.><NonRepeatingPart>`\n\t\nFor example, `0.5`, `1.`, `2.12`, and `123.0001`.\n\n`<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>`\n\t\nFor example, `0.1(6)`, `1.(9)`, `123.00(1212)`.\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n`1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.",
    "examples": [
      "Input: s = \"0.(52)\", t = \"0.5(25)\"\nOutput: true\nExplanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.",
      "Input: s = \"0.1666(6)\", t = \"0.166(66)\"\nOutput: true",
      "Input: s = \"0.9(9)\", t = \"1.\"\nOutput: true\nExplanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\"."
    ],
    "constraints": "Each part consists only of digits.\n\nThe `<IntegerPart>` does not have leading zeros (except for the zero itself).\n\n`1 <= <IntegerPart>.length <= 4`\n`0 <= <NonRepeatingPart>.length <= 4`\n`1 <= <RepeatingPart>.length <= 4`"
  },
  {
    "id": "973",
    "title": "K Closest Points to Origin",
    "difficulty": "Medium",
    "explanation": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.\n\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., `√(x1 - x2)2 + (y1 - y2)2`).\n\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).",
    "examples": [
      "Input: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\n\nThe distance between (-2, 2) and the origin is sqrt(8).\n\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\n\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].",
      "Input: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted."
    ],
    "constraints": "`1 <= k <= points.length <= 104`\n`-104 < xi, yi < 104`"
  },
  {
    "id": "974",
    "title": "Subarray Sums Divisible by K",
    "difficulty": "Medium",
    "explanation": "Given an array `A` of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by `K`.",
    "examples": [
      "Input: A = [4,5,0,-2,-3,1], K = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by K = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\nNote:\n`1 <= A.length <= 30000`\n`-10000 <= A[i] <= 10000`\n`2 <= K <= 10000`"
    ],
    "constraints": ""
  },
  {
    "id": "975",
    "title": "Odd Even Jump",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.\n\nYou may jump forward from index `i` to index `j` (with `i < j`) in the following way:\nDuring odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the smallest such index `j`.\n\nDuring even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the smallest such index `j`.\n\nIt may be the case that for some index `i`, there are no legal jumps.\n\nA starting index is good if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once).\n\nReturn the number of good starting indices.",
    "examples": [
      "Input: arr = [10,13,12,14,15]\nOutput: 2\nExplanation: \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\n\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\n\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\n\nFrom starting index i = 4, we have reached the end already.\n\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.",
      "Input: arr = [2,3,1,1,4]\nOutput: 3\nExplanation: \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\n\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\n\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\n\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\n\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\n\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\n\nFrom starting index i = 4, we are already at the end.\n\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.",
      "Input: arr = [5,1,3,4,2]\nOutput: 3\nExplanation: We can reach the end from starting indices 1, 2, and 4."
    ],
    "constraints": "`1 <= arr.length <= 2 * 104`\n`0 <= arr[i] < 105`"
  },
  {
    "id": "976",
    "title": "Largest Perimeter Triangle",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums`, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return `0`.",
    "examples": [
      "Input: nums = [2,1,2]\nOutput: 5",
      "Input: nums = [1,2,1]\nOutput: 0",
      "Input: nums = [3,2,3,4]\nOutput: 10",
      "Input: nums = [3,6,2,3]\nOutput: 8"
    ],
    "constraints": "`3 <= nums.length <= 104`\n`1 <= nums[i] <= 106`"
  },
  {
    "id": "977",
    "title": "Squares of a Sorted Array",
    "difficulty": "Easy",
    "explanation": "Given an integer array `nums` sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.",
    "examples": [
      "Input: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\n\nAfter sorting, it becomes [0,1,9,16,100].",
      "Input: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]"
    ],
    "constraints": "`1 <= nums.length <= 104`\n`-104 <= nums[i] <= 104`\n`nums` is sorted in non-decreasing order.\n\nFollow up: Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?"
  },
  {
    "id": "978",
    "title": "Longest Turbulent Subarray",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr`, return the length of a maximum size turbulent subarray of `arr`.\n\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\n\nMore formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:\nFor `i <= k < j`:\n\t\n`arr[k] > arr[k + 1]` when `k` is odd, and\n`arr[k] < arr[k + 1]` when `k` is even.\n\nOr, for `i <= k < j`:\n\t\n`arr[k] > arr[k + 1]` when `k` is even, and\n`arr[k] < arr[k + 1]` when `k` is odd.",
    "examples": [
      "Input: arr = [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]",
      "Input: arr = [4,8,12,16]\nOutput: 2",
      "Input: arr = [100]\nOutput: 1"
    ],
    "constraints": "`1 <= arr.length <= 4 * 104`\n`0 <= arr[i] <= 109`"
  },
  {
    "id": "979",
    "title": "Distribute Coins in Binary Tree",
    "difficulty": "Medium",
    "explanation": "You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins and there are `n` coins total.\n\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. (A move may be from parent to child, or from child to parent.)\nReturn the number of moves required to make every node have exactly one coin.",
    "examples": [
      "Input: root = [3,0,0]\nOutput: 2\nExplanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.",
      "Input: root = [0,3,0]\nOutput: 3\nExplanation: From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.",
      "Input: root = [1,0,2]\nOutput: 2",
      "Input: root = [1,0,0,null,3]\nOutput: 4"
    ],
    "constraints": "The number of nodes in the tree is `n`.\n\n`1 <= n <= 100`\n`0 <= Node.val <= n`\nThe sum of `Node.val` is `n`."
  },
  {
    "id": "980",
    "title": "Unique Paths III",
    "difficulty": "Hard",
    "explanation": "On a 2-dimensional `grid`, there are 4 types of squares:\n`1` represents the starting square.  There is exactly one starting square.\n\n`2` represents the ending square.  There is exactly one ending square.\n\n`0` represents empty squares we can walk over.\n\n`-1` represents obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.",
    "examples": [
      "Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)",
      "Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)",
      "Input: [[0,1],[2,0]]\nOutput: 0\nExplanation: \nThere is no path that walks over every empty square exactly once.\n\nNote that the starting and ending square can be anywhere in the grid.\n\nNote:\n`1 <= grid.length * grid[0].length <= 20`"
    ],
    "constraints": ""
  },
  {
    "id": "981",
    "title": "Time Based Key-Value Store",
    "difficulty": "Medium",
    "explanation": "Create a timebased key-value store class `TimeMap`, that supports two operations.\n\n1. `set(string key, string value, int timestamp)`\nStores the `key` and `value`, along with the given `timestamp`.\n\n2. `get(string key, int timestamp)`\nReturns a value such that `set(key, value, timestamp_prev)` was called previously, with `timestamp_prev <= timestamp`.\n\nIf there are multiple such values, it returns the one with the largest `timestamp_prev`.\n\nIf there are no values, it returns the empty string (`\"\"`).",
    "examples": [
      "Input: inputs = [\"TimeMap\",\"set\",\"get\",\"get\",\"set\",\"get\",\"get\"], inputs = [[],[\"foo\",\"bar\",1],[\"foo\",1],[\"foo\",3],[\"foo\",\"bar2\",4],[\"foo\",4],[\"foo\",5]]\nOutput: [null,null,\"bar\",\"bar\",null,\"bar2\",\"bar2\"]\nExplanation:   \nTimeMap kv;   \nkv.set(\"foo\", \"bar\", 1); // store the key \"foo\" and value \"bar\" along with timestamp = 1   \nkv.get(\"foo\", 1);  // output \"bar\"   \nkv.get(\"foo\", 3); // output \"bar\" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie \"bar\"   \nkv.set(\"foo\", \"bar2\", 4);   \nkv.get(\"foo\", 4); // output \"bar2\"   \nkv.get(\"foo\", 5); //output \"bar2\"",
      "Input: inputs = [\"TimeMap\",\"set\",\"set\",\"get\",\"get\",\"get\",\"get\",\"get\"], inputs = [[],[\"love\",\"high\",10],[\"love\",\"low\",20],[\"love\",5],[\"love\",10],[\"love\",15],[\"love\",20],[\"love\",25]]\nOutput: [null,null,null,\"\",\"high\",\"high\",\"low\",\"low\"]\nNote:\nAll key/value strings are lowercase.\n\nAll key/value strings have length in the range `[1, 100]`\nThe `timestamps` for all `TimeMap.set` operations are strictly increasing.\n\n`1 <= timestamp <= 10^7`\n`TimeMap.set` and `TimeMap.get` functions will be called a total of `120000` times (combined) per test case."
    ],
    "constraints": ""
  },
  {
    "id": "982",
    "title": "Triples with Bitwise AND Equal To Zero",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `A`, find the number of triples of indices (i, j, k) such that:\n`0 <= i < A.length`\n`0 <= j < A.length`\n`0 <= k < A.length`\n`A[i] & A[j] & A[k] == 0`, where `&` represents the bitwise-AND operator.",
    "examples": [
      "Input: [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2\nNote:\n`1 <= A.length <= 1000`\n`0 <= A[i] < 2^16`"
    ],
    "constraints": ""
  },
  {
    "id": "983",
    "title": "Minimum Cost For Tickets",
    "difficulty": "Medium",
    "explanation": "In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array `days`.  Each day is an integer from `1` to `365`.\n\nTrain tickets are sold in 3 different ways:\na 1-day pass is sold for `costs[0]` dollars;\na 7-day pass is sold for `costs[1]` dollars;\na 30-day pass is sold for `costs[2]` dollars.\n\nThe passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.\n\nReturn the minimum number of dollars you need to travel every day in the given list of `days`.",
    "examples": [
      "Input: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\n\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\n\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\n\nIn total you spent $11 and covered all the days of your travel.",
      "Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\n\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\n\nIn total you spent $17 and covered all the days of your travel.\n\nNote:\n`1 <= days.length <= 365`\n`1 <= days[i] <= 365`\n`days` is in strictly increasing order.\n\n`costs.length == 3`\n`1 <= costs[i] <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "984",
    "title": "String Without AAA or BBB",
    "difficulty": "Medium",
    "explanation": "Given two integers `a` and `b`, return any string `s` such that:\n`s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,\nThe substring `'aaa'` does not occur in `s`, and\nThe substring `'bbb'` does not occur in `s`.",
    "examples": [
      "Input: a = 1, b = 2\nOutput: \"abb\"\nExplanation: \"abb\", \"bab\" and \"bba\" are all correct answers.",
      "Input: a = 4, b = 1\nOutput: \"aabaa\""
    ],
    "constraints": "`0 <= a, b <= 100`\nIt is guaranteed such an `s` exists for the given `a` and `b`."
  },
  {
    "id": "985",
    "title": "Sum of Even Numbers After Queries",
    "difficulty": "Easy",
    "explanation": "We have an array `A` of integers, and an array `queries` of queries.\n\nFor the `i`-th query `val = queries[i][0], index = queries[i][1]`, we add val to `A[index]`.  Then, the answer to the `i`-th query is the sum of the even values of `A`.\n\n(Here, the given `index = queries[i][1]` is a 0-based index, and each query permanently modifies the array `A`.)\nReturn the answer to all queries.  Your `answer` array should have `answer[i]` as the answer to the `i`-th query.",
    "examples": [
      "Input: A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: \nAt the beginning, the array is [1,2,3,4].\n\nAfter adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\n\nAfter adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\n\nAfter adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\n\nAfter adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n\nNote:\n`1 <= A.length <= 10000`\n`-10000 <= A[i] <= 10000`\n`1 <= queries.length <= 10000`\n`-10000 <= queries[i][0] <= 10000`\n`0 <= queries[i][1] < A.length`"
    ],
    "constraints": ""
  },
  {
    "id": "986",
    "title": "Interval List Intersections",
    "difficulty": "Medium",
    "explanation": "You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise disjoint and in sorted order.\n\nReturn the intersection of these two interval lists.\n\nA closed interval `[a, b]` (with `a < b`) denotes the set of real numbers `x` with `a <= x <= b`.\n\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.",
    "examples": [
      "Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
      "Input: firstList = [[1,3],[5,9]], secondList = []\nOutput: []",
      "Input: firstList = [], secondList = [[4,8],[10,12]]\nOutput: []",
      "Input: firstList = [[1,7]], secondList = [[3,10]]\nOutput: [[3,7]]"
    ],
    "constraints": "`0 <= firstList.length, secondList.length <= 1000`\n`firstList.length + secondList.length >= 1`\n`0 <= starti < endi <= 109`\n`endi < starti+1`\n`0 <= startj < endj <= 109 `\n`endj < startj+1`"
  },
  {
    "id": "987",
    "title": "Vertical Order Traversal of a Binary Tree",
    "difficulty": "Hard",
    "explanation": "Given the `root` of a binary tree, calculate the vertical order traversal of the binary tree.\n\nFor each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.\n\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\nReturn the vertical order traversal of the binary tree.",
    "examples": [
      "Input: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\n\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\n\nColumn 1: Only node 20 is in this column.\n\nColumn 2: Only node 7 is in this column.",
      "Input: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\n\nColumn -1: Only node 2 is in this column.\n\nColumn 0: Nodes 1, 5, and 6 are in this column.\n\n          1 is at the top, so it comes first.\n\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\n\nColumn 1: Only node 3 is in this column.\n\nColumn 2: Only node 7 is in this column.",
      "Input: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\n\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 1000]`.\n\n`0 <= Node.val <= 1000`"
  },
  {
    "id": "988",
    "title": "Smallest String Starting From Leaf",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, each node has a value from `0` to `25` representing the letters `'a'` to `'z'`: a value of `0` represents `'a'`, a value of `1` represents `'b'`, and so on.\n\nFind the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\n\n(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, `\"ab\"` is lexicographically smaller than `\"aba\"`.  A leaf of a node is a node that has no children.)",
    "examples": [
      "Input: [0,1,2,3,4,3,4]\nOutput: \"dba\"",
      "Input: [25,1,3,1,3,0,2]\nOutput: \"adz\"",
      "Input: [2,2,1,null,1,0,null,0]\nOutput: \"abc\"\nNote:\nThe number of nodes in the given tree will be between `1` and `8500`.\n\nEach node in the tree will have a value between `0` and `25`."
    ],
    "constraints": ""
  },
  {
    "id": "989",
    "title": "Add to Array-Form of Integer",
    "difficulty": "Easy",
    "explanation": "The array-form of an integer `num` is an array representing its digits in left to right order.\n\nFor example, for `num = 1321`, the array form is `[1,3,2,1]`.\n\nGiven `num`, the array-form of an integer, and an integer `k`, return the array-form of the integer `num + k`.",
    "examples": [
      "Input: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234",
      "Input: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455",
      "Input: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021",
      "Input: num = [9,9,9,9,9,9,9,9,9,9], k = 1\nOutput: [1,0,0,0,0,0,0,0,0,0,0]\nExplanation: 9999999999 + 1 = 10000000000"
    ],
    "constraints": "`1 <= num.length <= 104`\n`0 <= num[i] <= 9`\n`num` does not contain any leading zeros except for the zero itself.\n\n`1 <= k <= 104`"
  },
  {
    "id": "990",
    "title": "Satisfiability of Equality Equations",
    "difficulty": "Medium",
    "explanation": "Given an array equations of strings that represent relationships between variables, each string `equations[i]` has length `4` and takes one of two different forms: `\"a==b\"` or `\"a!=b\"`.  Here, `a` and `b` are lowercase letters (not necessarily different) that represent one-letter variable names.\n\nReturn `true` if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.",
    "examples": [
      "Input: [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.",
      "Input: [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.",
      "Input: [\"a==b\",\"b==c\",\"a==c\"]\nOutput: true",
      "Input: [\"a==b\",\"b!=c\",\"c==a\"]\nOutput: false",
      "Input: [\"c==c\",\"b==d\",\"x!=z\"]\nOutput: true\nNote:\n`1 <= equations.length <= 500`\n`equations[i].length == 4`\n`equations[i][0]` and `equations[i][3]` are lowercase letters\n`equations[i][1]` is either `'='` or `'!'`\n`equations[i][2]` is `'='`"
    ],
    "constraints": ""
  },
  {
    "id": "991",
    "title": "Broken Calculator",
    "difficulty": "Medium",
    "explanation": "On a broken calculator that has a number showing on its display, we can perform two operations:\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number `X`.\n\nReturn the minimum number of operations needed to display the number `Y`.",
    "examples": [
      "Input: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.",
      "Input: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.",
      "Input: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.",
      "Input: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\nNote:\n`1 <= X <= 10^9`\n`1 <= Y <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "992",
    "title": "Subarrays with K Different Integers",
    "difficulty": "Hard",
    "explanation": "Given an array `A` of positive integers, call a (contiguous, not necessarily distinct) subarray of `A` good if the number of different integers in that subarray is exactly `K`.\n\n(For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.)\nReturn the number of good subarrays of `A`.",
    "examples": [
      "Input: A = [1,2,1,2,3], K = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].",
      "Input: A = [1,2,1,3,4], K = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\nNote:\n`1 <= A.length <= 20000`\n`1 <= A[i] <= A.length`\n`1 <= K <= A.length`"
    ],
    "constraints": ""
  },
  {
    "id": "993",
    "title": "Cousins in Binary Tree",
    "difficulty": "Easy",
    "explanation": "In a binary tree, the root node is at depth `0`, and children of each depth `k` node are at depth `k+1`.\n\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\n\nWe are given the `root` of a binary tree with unique values, and the values `x` and `y` of two different nodes in the tree.\n\nReturn `true` if and only if the nodes corresponding to the values `x` and `y` are cousins.",
    "examples": [
      "Input: root = [1,2,3,4], x = 4, y = 3\nOutput: false",
      "Input: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true",
      "Input: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false"
    ],
    "constraints": "The number of nodes in the tree will be between `2` and `100`.\n\nEach node has a unique integer value from `1` to `100`."
  },
  {
    "id": "994",
    "title": "Rotting Oranges",
    "difficulty": "Medium",
    "explanation": "You are given an `m x n` `grid` where each cell can have one of three values:\n`0` representing an empty cell,\n`1` representing a fresh orange, or\n`2` representing a rotten orange.\n\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return `-1`.",
    "examples": [
      "Input: grid = [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4",
      "Input: grid = [[2,1,1],[0,1,1],[1,0,1]]\nOutput: -1\nExplanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.",
      "Input: grid = [[0,2]]\nOutput: 0\nExplanation: Since there are already no fresh oranges at minute 0, the answer is just 0."
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 10`\n`grid[i][j]` is `0`, `1`, or `2`."
  },
  {
    "id": "995",
    "title": "Minimum Number of K Consecutive Bit Flips",
    "difficulty": "Hard",
    "explanation": "In an array `A` containing only 0s and 1s, a `K`-bit flip consists of choosing a (contiguous) subarray of length `K` and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\n\nReturn the minimum number of `K`-bit flips required so that there is no 0 in the array.  If it is not possible, return `-1`.",
    "examples": [
      "Input: A = [0,1,0], K = 1\nOutput: 2\nExplanation: Flip A[0], then flip A[2].",
      "Input: A = [1,1,0], K = 2\nOutput: -1\nExplanation: No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].",
      "Input: A = [0,0,0,1,0,1,1,0], K = 3\nOutput: 3\nExplanation:\nFlip A[0],A[1],A[2]: A becomes [1,1,1,1,0,1,1,0]\nFlip A[4],A[5],A[6]: A becomes [1,1,1,1,1,0,0,0]\nFlip A[5],A[6],A[7]: A becomes [1,1,1,1,1,1,1,1]\nNote:\n`1 <= A.length <= 30000`\n`1 <= K <= A.length`"
    ],
    "constraints": ""
  },
  {
    "id": "996",
    "title": "Number of Squareful Arrays",
    "difficulty": "Hard",
    "explanation": "Given an array `A` of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.\n\nReturn the number of permutations of A that are squareful.  Two permutations `A1` and `A2` differ if and only if there is some index `i` such that `A1[i] != A2[i]`.",
    "examples": [
      "Input: [1,17,8]\nOutput: 2\nExplanation: \n[1,8,17] and [17,8,1] are the valid permutations.",
      "Input: [2,2,2]\nOutput: 1\nNote:\n`1 <= A.length <= 12`\n`0 <= A[i] <= 1e9`"
    ],
    "constraints": ""
  },
  {
    "id": "997",
    "title": "Find the Town Judge",
    "difficulty": "Easy",
    "explanation": "In a town, there are `N` people labelled from `1` to `N`.  There is a rumor that one of these people is secretly the town judge.\n\nIf the town judge exists, then:\nThe town judge trusts nobody.\n\nEverybody (except for the town judge) trusts the town judge.\n\nThere is exactly one person that satisfies properties 1 and 2.\n\nYou are given `trust`, an array of pairs `trust[i] = [a, b]` representing that the person labelled `a` trusts the person labelled `b`.\n\nIf the town judge exists and can be identified, return the label of the town judge.  Otherwise, return `-1`.",
    "examples": [
      "Input: N = 2, trust = [[1,2]]\nOutput: 2",
      "Input: N = 3, trust = [[1,3],[2,3]]\nOutput: 3",
      "Input: N = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1",
      "Input: N = 3, trust = [[1,2],[2,3]]\nOutput: -1",
      "Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\nOutput: 3"
    ],
    "constraints": "`1 <= N <= 1000`\n`0 <= trust.length <= 10^4`\n`trust[i].length == 2`\n`trust[i]` are all different\n`trust[i][0] != trust[i][1]`\n`1 <= trust[i][0], trust[i][1] <= N`"
  },
  {
    "id": "998",
    "title": "Maximum Binary Tree II",
    "difficulty": "Medium",
    "explanation": "We are given the `root` node of a maximum tree: a tree where every node has a value greater than any other value in its subtree.\n\nJust as in the previous problem, the given tree was constructed from an list `A` (`root = Construct(A)`) recursively with the following `Construct(A)` routine:\nIf `A` is empty, return `null`.\n\nOtherwise, let `A[i]` be the largest element of `A`.  Create a `root` node with value `A[i]`.\n\nThe left child of `root` will be `Construct([A[0], A[1], ..., A[i-1]])`\nThe right child of `root` will be `Construct([A[i+1], A[i+2], ..., A[A.length - 1]])`\nReturn `root`.\n\nNote that we were not given A directly, only a root node `root = Construct(A)`.\n\nSuppose `B` is a copy of `A` with the value `val` appended to it.  It is guaranteed that `B` has unique values.\n\nReturn `Construct(B)`.",
    "examples": [
      "Input: root = [4,1,3,null,null,2], val = 5\nOutput: [5,4,null,1,3,null,null,2]\nExplanation: A = [1,4,2,3], B = [1,4,2,3,5]",
      "Input: root = [5,2,4,null,1], val = 3\nOutput: [5,2,4,null,1,null,3]\nExplanation: A = [2,1,5,4], B = [2,1,5,4,3]",
      "Input: root = [5,2,3,null,1], val = 4\nOutput: [5,2,4,null,1,3]\nExplanation: A = [2,1,5,3], B = [2,1,5,3,4]"
    ],
    "constraints": "`1 <= B.length <= 100`"
  },
  {
    "id": "999",
    "title": "Available Captures for Rook",
    "difficulty": "Easy",
    "explanation": "On an `8 x 8` chessboard, there is exactly one white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.\n\nWhen the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.\n\nReturn the number of available captures for the white rook.",
    "examples": [
      "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 3\nExplanation: In this example, the rook is attacking all the pawns.",
      "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 0\nExplanation: The bishops are blocking the rook from attacking any of the pawns.",
      "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 3\nExplanation: The rook is attacking the pawns at positions b5, d6, and f5."
    ],
    "constraints": "`board.length == 8`\n`board[i].length == 8`\n`board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`\nThere is exactly one cell with `board[i][j] == 'R'`"
  },
  {
    "id": "1000",
    "title": "Minimum Cost to Merge Stones",
    "difficulty": "Hard",
    "explanation": "There are `N` piles of stones arranged in a row.  The `i`-th pile has `stones[i]` stones.\n\nA move consists of merging exactly `K` consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these `K` piles.\n\nFind the minimum cost to merge all piles of stones into one pile.  If it is impossible, return `-1`.",
    "examples": [
      "Input: stones = [3,2,4,1], K = 2\nOutput: 20\nExplanation: \nWe start with [3, 2, 4, 1].\n\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\n\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\n\nWe merge [5, 5] for a cost of 10, and we are left with [10].\n\nThe total cost was 20, and this is the minimum possible.",
      "Input: stones = [3,2,4,1], K = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.",
      "Input: stones = [3,5,1,2,6], K = 3\nOutput: 25\nExplanation: \nWe start with [3, 5, 1, 2, 6].\n\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\n\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\n\nThe total cost was 25, and this is the minimum possible.\n\nNote:\n`1 <= stones.length <= 30`\n`2 <= K <= 30`\n`1 <= stones[i] <= 100`"
    ],
    "constraints": ""
  },
  {
    "id": "1001",
    "title": "Grid Illumination",
    "difficulty": "Hard",
    "explanation": "You are given a `grid` of size `N x N`, and each cell of this grid has a lamp that is initially turned off.\n\nYou are also given an array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is turned on. When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.\n\nFinally, you are given a query array `queries`, where `queries[i] = [rowi, coli]`. For the `ith` query, determine whether `grid[rowi][coli]` is illuminated or not. After answering the `ith` query, turn off the lamp at `grid[rowi][coli]` and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowi][coli]`.\n\nReturn an array of integers `ans`, where `ans[i]` should be `1` if the lamp in the `ith` query was illuminated, or `0` if the lamp was not.",
    "examples": [
      "Input: N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\nOutput: [1,0]\nExplanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\n\nThe 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n\nThe 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.",
      "Input: N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\nOutput: [1,1]",
      "Input: N = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\nOutput: [1,1,0]"
    ],
    "constraints": "`1 <= N <= 109`\n`0 <= lamps.length <= 20000`\n`lamps[i].length == 2`\n`0 <= lamps[i][j] < N`\n`0 <= queries.length <= 20000`\n`queries[i].length == 2`\n`0 <= queries[i][j] < N`"
  },
  {
    "id": "1002",
    "title": "Find Common Characters",
    "difficulty": "Easy",
    "explanation": "Given an array `A` of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.\n\nYou may return the answer in any order.",
    "examples": [
      "Input: [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]",
      "Input: [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\nNote:\n`1 <= A.length <= 100`\n`1 <= A[i].length <= 100`\n`A[i][j]` is a lowercase letter"
    ],
    "constraints": ""
  },
  {
    "id": "1003",
    "title": "Check If Word Is Valid After Substitutions",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, determine if it is valid.\n\nA string `s` is valid if, starting with an empty string `t = \"\"`, you can transform `t` into `s` after performing the following operation any number of times:\nInsert string `\"abc\"` into any position in `t`. More formally, `t` becomes `tleft + \"abc\" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be empty.\n\nReturn `true` if `s` is a valid string, otherwise, return `false`.",
    "examples": [
      "Input: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.",
      "Input: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.",
      "Input: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.",
      "Input: s = \"cababc\"\nOutput: false\nExplanation: It is impossible to get \"cababc\" using the operation."
    ],
    "constraints": "`1 <= s.length <= 2 * 104`\n`s` consists of letters `'a'`, `'b'`, and `'c'`"
  },
  {
    "id": "1004",
    "title": "Max Consecutive Ones III",
    "difficulty": "Medium",
    "explanation": "Given an array `A` of 0s and 1s, we may change up to `K` values from 0 to 1.\n\nReturn the length of the longest (contiguous) subarray that contains only 1s.",
    "examples": [
      "Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2\nOutput: 6\nExplanation: \n[1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.",
      "Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3\nOutput: 10\nExplanation: \n[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.\n\nNote:\n`1 <= A.length <= 20000`\n`0 <= K <= A.length`\n`A[i]` is `0` or `1`"
    ],
    "constraints": ""
  },
  {
    "id": "1005",
    "title": "Maximize Sum Of Array After K Negations",
    "difficulty": "Easy",
    "explanation": "Given an array `A` of integers, we must modify the array in the following way: we choose an `i` and replace `A[i]` with `-A[i]`, and we repeat this process `K` times in total.  (We may choose the same index `i` multiple times.)\nReturn the largest possible sum of the array after modifying it in this way.",
    "examples": [
      "Input: A = [4,2,3], K = 1\nOutput: 5\nExplanation: Choose indices (1,) and A becomes [4,-2,3].",
      "Input: A = [3,-1,0,2], K = 3\nOutput: 6\nExplanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].",
      "Input: A = [2,-3,-1,5,-4], K = 2\nOutput: 13\nExplanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].\n\nNote:\n`1 <= A.length <= 10000`\n`1 <= K <= 10000`\n`-100 <= A[i] <= 100`"
    ],
    "constraints": ""
  },
  {
    "id": "1006",
    "title": "Clumsy Factorial",
    "difficulty": "Medium",
    "explanation": "Normally, the factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`.  For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.\n\nWe instead make a clumsy factorial: using the integers in decreasing order, we swap out the multiply operations for a fixed rotation of operations: multiply (*), divide (/), add (+) and subtract (-) in this order.\n\nFor example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.  However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\n\nAdditionally, the division that we use is floor division such that `10 * 9 / 8` equals `11`.  This guarantees the result is an integer.\n\n`Implement the clumsy` function as defined above: given an integer `N`, it returns the clumsy factorial of `N`.",
    "examples": [
      "Input: 4\nOutput: 7\nExplanation: 7 = 4 * 3 / 2 + 1",
      "Input: 10\nOutput: 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\nNote:\n`1 <= N <= 10000`\n`-2^31 <= answer <= 2^31 - 1`  (The answer is guaranteed to fit within a 32-bit integer.)"
    ],
    "constraints": ""
  },
  {
    "id": "1007",
    "title": "Minimum Domino Rotations For Equal Row",
    "difficulty": "Medium",
    "explanation": "In a row of dominoes, `A[i]` and `B[i]` represent the top and bottom halves of the `ith` domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\nWe may rotate the `ith` domino, so that `A[i]` and `B[i]` swap values.\n\nReturn the minimum number of rotations so that all the values in `A` are the same, or all the values in `B` are the same.\n\nIf it cannot be done, return `-1`.",
    "examples": [
      "Input: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]\nOutput: 2\nExplanation: \nThe first figure represents the dominoes as given by A and B: before we do any rotations.\n\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.",
      "Input: A = [3,5,1,2,3], B = [3,6,3,3,4]\nOutput: -1\nExplanation: \nIn this case, it is not possible to rotate the dominoes to make one row of values equal."
    ],
    "constraints": "`2 <= A.length == B.length <= 2 * 104`\n`1 <= A[i], B[i] <= 6`"
  },
  {
    "id": "1008",
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "difficulty": "Medium",
    "explanation": "Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.\n\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\n\nA binary search tree is a binary tree where for every node, any descendant of `Node.left` has a value strictly less than `Node.val`, and any descendant of `Node.right` has a value strictly greater than `Node.val`.\n\nA preorder traversal of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.",
    "examples": [
      "Input: preorder = [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]",
      "Input: preorder = [1,3]\nOutput: [1,null,3]"
    ],
    "constraints": "`1 <= preorder.length <= 100`\n`1 <= preorder[i] <= 108`\nAll the values of `preorder` are unique."
  },
  {
    "id": "1009",
    "title": "Complement of Base 10 Integer",
    "difficulty": "Easy",
    "explanation": "Every non-negative integer `N` has a binary representation.  For example, `5` can be represented as `\"101\"` in binary, `11` as `\"1011\"` in binary, and so on.  Note that except for `N = 0`, there are no leading zeroes in any binary representation.\n\nThe complement of a binary representation is the number in binary you get when changing every `1` to a `0` and `0` to a `1`.  For example, the complement of `\"101\"` in binary is `\"010\"` in binary.\n\nFor a given number `N` in base-10, return the complement of it's binary representation as a base-10 integer.",
    "examples": [
      "Input: 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.",
      "Input: 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.",
      "Input: 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\nNote:\n`0 <= N < 10^9`\nThis question is the same as 476: https://leetcode.com/problems/number-complement/"
    ],
    "constraints": ""
  },
  {
    "id": "1010",
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "difficulty": "Medium",
    "explanation": "You are given a list of songs where the ith song has a duration of `time[i]` seconds.\n\nReturn the number of pairs of songs for which their total duration in seconds is divisible by `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.",
    "examples": [
      "Input: time = [30,20,150,100,40]\nOutput: 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60",
      "Input: time = [60,60,60]\nOutput: 3\nExplanation: All three pairs have a total duration of 120, which is divisible by 60."
    ],
    "constraints": "`1 <= time.length <= 6 * 104`\n`1 <= time[i] <= 500`"
  },
  {
    "id": "1011",
    "title": "Capacity To Ship Packages Within D Days",
    "difficulty": "Medium",
    "explanation": "A conveyor belt has packages that must be shipped from one port to another within `D` days.\n\nThe ith package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `D` days.",
    "examples": [
      "Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.",
      "Input: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4",
      "Input: weights = [1,2,3,1,1], D = 4\nOutput: 3\nExplanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1"
    ],
    "constraints": "`1 <= D <= weights.length <= 5 * 104`\n`1 <= weights[i] <= 500`"
  },
  {
    "id": "1012",
    "title": "Numbers With Repeated Digits",
    "difficulty": "Hard",
    "explanation": "Given a positive integer `N`, return the number of positive integers less than or equal to `N` that have at least 1 repeated digit.",
    "examples": [
      "Input: 20\nOutput: 1\nExplanation: The only positive number (<= 20) with at least 1 repeated digit is 11.",
      "Input: 100\nOutput: 10\nExplanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.",
      "Input: 1000\nOutput: 262\nNote:\n`1 <= N <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "1013",
    "title": "Partition Array Into Three Parts With Equal Sum",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `arr`, return `true` if we can partition the array into three non-empty parts with equal sums.\n\nFormally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`",
    "examples": [
      "Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1",
      "Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false",
      "Input: arr = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
    ],
    "constraints": "`3 <= arr.length <= 5 * 104`\n`-104 <= arr[i] <= 104`"
  },
  {
    "id": "1014",
    "title": "Best Sightseeing Pair",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a distance `j - i` between them.\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\nReturn the maximum score of a pair of sightseeing spots.",
    "examples": [
      "Input: values = [8,1,5,2,6]\nOutput: 11\nExplanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11",
      "Input: values = [1,2]\nOutput: 2"
    ],
    "constraints": "`2 <= values.length <= 5 * 104`\n`1 <= values[i] <= 1000`"
  },
  {
    "id": "1015",
    "title": "Smallest Integer Divisible by K",
    "difficulty": "Medium",
    "explanation": "Given a positive integer `K`, you need to find the length of the smallest positive integer `N` such that `N` is divisible by `K`, and `N` only contains the digit `1`.\n\nReturn the length of `N`. If there is no such `N`, return -1.\n\nNote: `N` may not fit in a 64-bit signed integer.",
    "examples": [
      "Input: K = 1\nOutput: 1\nExplanation: The smallest answer is N = 1, which has length 1.",
      "Input: K = 2\nOutput: -1\nExplanation: There is no such positive integer N divisible by 2.",
      "Input: K = 3\nOutput: 3\nExplanation: The smallest answer is N = 111, which has length 3."
    ],
    "constraints": "`1 <= K <= 105`"
  },
  {
    "id": "1016",
    "title": "Binary String With Substrings Representing 1 To N",
    "difficulty": "Medium",
    "explanation": "Given a binary string `S` (a string consisting only of '0' and '1's) and a positive integer `N`, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.",
    "examples": [
      "Input: S = \"0110\", N = 3\nOutput: true",
      "Input: S = \"0110\", N = 4\nOutput: false\nNote:\n`1 <= S.length <= 1000`\n`1 <= N <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "1017",
    "title": "Convert to Base -2",
    "difficulty": "Medium",
    "explanation": "Given a number `N`, return a string consisting of `\"0\"`s and `\"1\"`s that represents its value in base `-2` (negative two).\n\nThe returned string must have no leading zeroes, unless the string is `\"0\"`.",
    "examples": [
      "Input: 2\nOutput: \"110\"\nExplantion: (-2) ^ 2 + (-2) ^ 1 = 2",
      "Input: 3\nOutput: \"111\"\nExplantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3",
      "Input: 4\nOutput: \"100\"\nExplantion: (-2) ^ 2 = 4\nNote:\n`0 <= N <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "1018",
    "title": "Binary Prefix Divisible By 5",
    "difficulty": "Easy",
    "explanation": "Given an array `A` of `0`s and `1`s, consider `N_i`: the i-th subarray from `A[0]` to `A[i]` interpreted as a binary number (from most-significant-bit to least-significant-bit.)\nReturn a list of booleans `answer`, where `answer[i]` is `true` if and only if `N_i` is divisible by 5.",
    "examples": [
      "Input: [0,1,1]\nOutput: [true,false,false]\nExplanation: \nThe input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.  Only the first number is divisible by 5, so answer[0] is true.",
      "Input: [1,1,1]\nOutput: [false,false,false]",
      "Input: [0,1,1,1,1,1]\nOutput: [true,false,false,false,true,false]",
      "Input: [1,1,1,0,1]\nOutput: [false,false,false,false,false]\nNote:\n`1 <= A.length <= 30000`\n`A[i]` is `0` or `1`"
    ],
    "constraints": ""
  },
  {
    "id": "1019",
    "title": "Next Greater Node In Linked List",
    "difficulty": "Medium",
    "explanation": "We are given a linked list with `head` as the first node.  Let's number the nodes in the list: `node_1, node_2, node_3, ...` etc.\n\nEach node may have a next larger value: for `node_i`, `next_larger(node_i)` is the `node_j.val` such that `j > i`, `node_j.val > node_i.val`, and `j` is the smallest possible choice.  If such a `j` does not exist, the next larger value is `0`.\n\nReturn an array of integers `answer`, where `answer[i] = next_larger(node_{i+1})`.\n\nNote that in the example inputs (not outputs) below, arrays such as `[2,1,5]` represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.",
    "examples": [
      "Input: [2,1,5]\nOutput: [5,5,0]",
      "Input: [2,7,4,3,5]\nOutput: [7,0,5,5,0]",
      "Input: [1,7,5,1,9,2,5,1]\nOutput: [7,9,9,9,0,5,0,0]\nNote:\n`1 <= node.val <= 10^9` for each node in the linked list.\n\nThe given list has length in the range `[0, 10000]`."
    ],
    "constraints": ""
  },
  {
    "id": "1020",
    "title": "Number of Enclaves",
    "difficulty": "Medium",
    "explanation": "You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.\n\nA move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the `grid`.\n\nReturn the number of land cells in `grid` for which we cannot walk off the boundary of the grid in any number of moves.",
    "examples": [
      "Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 3\nExplanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.",
      "Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\nOutput: 0\nExplanation: All 1s are either on the boundary or can reach the boundary."
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 500`\n`grid[i][j]` is either `0` or `1`."
  },
  {
    "id": "1021",
    "title": "Remove Outermost Parentheses",
    "difficulty": "Easy",
    "explanation": "A valid parentheses string is either empty `(\"\")`, `\"(\" + A + \")\"`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation.  For example, `\"\"`, `\"()\"`, `\"(())()\"`, and `\"(()(()))\"` are all valid parentheses strings.\n\nA valid parentheses string `S` is primitive if it is nonempty, and there does not exist a way to split it into `S = A+B`, with `A` and `B` nonempty valid parentheses strings.\n\nGiven a valid parentheses string `S`, consider its primitive decomposition: `S = P_1 + P_2 + ... + P_k`, where `P_i` are primitive valid parentheses strings.\n\nReturn `S` after removing the outermost parentheses of every primitive string in the primitive decomposition of `S`.",
    "examples": [
      "Input: \"(()())(())\"\nOutput: \"()()()\"\nExplanation: \nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\n\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".",
      "Input: \"(()())(())(()(()))\"\nOutput: \"()()()()(())\"\nExplanation: \nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\n\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".",
      "Input: \"()()\"\nOutput: \"\"\nExplanation: \nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\n\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\".\n\nNote:\n`S.length <= 10000`\n`S[i]` is `\"(\"` or `\")\"`\n`S` is a valid parentheses string"
    ],
    "constraints": ""
  },
  {
    "id": "1022",
    "title": "Sum of Root To Leaf Binary Numbers",
    "difficulty": "Easy",
    "explanation": "You are given the `root` of a binary tree where each node has a value `0` or `1`.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf.\n\nReturn the sum of these numbers. The answer is guaranteed to fit in a 32-bits integer.",
    "examples": [
      "Input: root = [1,0,1,0,1,0,1]\nOutput: 22\nExplanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22",
      "Input: root = [0]\nOutput: 0",
      "Input: root = [1]\nOutput: 1",
      "Input: root = [1,1]\nOutput: 3"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 1000]`.\n\n`Node.val` is `0` or `1`."
  },
  {
    "id": "1023",
    "title": "Camelcase Matching",
    "difficulty": "Medium",
    "explanation": "A query word matches a given `pattern` if we can insert lowercase letters to the pattern word so that it equals the `query`. (We may insert each character at any position, and may insert 0 characters.)\nGiven a list of `queries`, and a `pattern`, return an `answer` list of booleans, where `answer[i]` is true if and only if `queries[i]` matches the `pattern`.",
    "examples": [
      "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\nOutput: [true,false,true,true,false]\nExplanation: \n\"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".",
      "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\nOutput: [true,false,true,false,false]\nExplanation: \n\"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".",
      "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\nOutput: [false,true,false,false,false]\nExplanation: \n\"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\n\nNote:\n`1 <= queries.length <= 100`\n`1 <= queries[i].length <= 100`\n`1 <= pattern.length <= 100`\nAll strings consists only of lower and upper case English letters."
    ],
    "constraints": ""
  },
  {
    "id": "1024",
    "title": "Video Stitching",
    "difficulty": "Medium",
    "explanation": "You are given a series of video clips from a sporting event that lasted `T` seconds.  These video clips can be overlapping with each other and have varied lengths.\n\nEach video clip `clips[i]` is an interval: it starts at time `clips[i][0]` and ends at time `clips[i][1]`.  We can cut these clips into segments freely: for example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.\n\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (`[0, T]`).  If the task is impossible, return `-1`.",
    "examples": [
      "Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10\nOutput: 3\nExplanation: \nWe take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\n\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\n\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].",
      "Input: clips = [[0,1],[1,2]], T = 5\nOutput: -1\nExplanation: \nWe can't cover [0,5] with only [0,1] and [1,2].",
      "Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9\nOutput: 3\nExplanation: \nWe can take clips [0,4], [4,7], and [6,9].",
      "Input: clips = [[0,4],[2,8]], T = 5\nOutput: 2\nExplanation: \nNotice you can have extra video after the event ends."
    ],
    "constraints": "`1 <= clips.length <= 100`\n`0 <= clips[i][0] <= clips[i][1] <= 100`\n`0 <= T <= 100`"
  },
  {
    "id": "1025",
    "title": "Divisor Game",
    "difficulty": "Easy",
    "explanation": "Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:\nChoosing any `x` with `0 < x < n` and `n % x == 0`.\n\nReplacing the number `n` on the chalkboard with `n - x`.\n\nAlso, if a player cannot make a move, they lose the game.\n\nReturn `true` if and only if Alice wins the game, assuming both players play optimally.",
    "examples": [
      "Input: n = 2\nOutput: true\nExplanation: Alice chooses 1, and Bob has no more moves.",
      "Input: n = 3\nOutput: false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves."
    ],
    "constraints": "`1 <= n <= 1000`"
  },
  {
    "id": "1026",
    "title": "Maximum Difference Between Node and Ancestor",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, find the maximum value `V` for which there exist different nodes `A` and `B` where `V = |A.val - B.val|` and `A` is an ancestor of `B`.\n\nA node `A` is an ancestor of `B` if either: any child of `A` is equal to `B`, or any child of `A` is an ancestor of `B`.",
    "examples": [
      "Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\nExplanation: We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.",
      "Input: root = [1,null,2,null,0,3]\nOutput: 3"
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 5000]`.\n\n`0 <= Node.val <= 105`"
  },
  {
    "id": "1027",
    "title": "Longest Arithmetic Subsequence",
    "difficulty": "Medium",
    "explanation": "Given an array `A` of integers, return the length of the longest arithmetic subsequence in `A`.\n\nRecall that a subsequence of `A` is a list `A[i_1], A[i_2], ..., A[i_k]` with `0 <= i_1 < i_2 < ... < i_k <= A.length - 1`, and that a sequence `B` is arithmetic if `B[i+1] - B[i]` are all the same value (for `0 <= i < B.length - 1`).",
    "examples": [
      "Input: A = [3,6,9,12]\nOutput: 4\nExplanation: \nThe whole array is an arithmetic sequence with steps of length = 3.",
      "Input: A = [9,4,7,2,10]\nOutput: 3\nExplanation: \nThe longest arithmetic subsequence is [4,7,10].",
      "Input: A = [20,1,15,3,10,5,8]\nOutput: 4\nExplanation: \nThe longest arithmetic subsequence is [20,15,10,5]."
    ],
    "constraints": "`2 <= A.length <= 1000`\n`0 <= A[i] <= 500`"
  },
  {
    "id": "1028",
    "title": "Recover a Tree From Preorder Traversal",
    "difficulty": "Hard",
    "explanation": "We run a preorder depth-first search (DFS) on the `root` of a binary tree.\n\nAt each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node.  If the depth of a node is `D`, the depth of its immediate child is `D + 1`.  The depth of the `root` node is `0`.\n\nIf a node has only one child, that child is guaranteed to be the left child.\n\nGiven the output `S` of this traversal, recover the tree and return its `root`.",
    "examples": [
      "Input: S = \"1-2--3--4-5--6--7\"\nOutput: [1,2,5,3,4,6,7]",
      "Input: S = \"1-2--3---4-5--6---7\"\nOutput: [1,2,5,3,null,6,null,4,null,7]",
      "Input: S = \"1-401--349---90--88\"\nOutput: [1,401,null,349,88,90]"
    ],
    "constraints": "The number of nodes in the original tree is in the range `[1, 1000]`.\n\n`1 <= Node.val <= 109`"
  },
  {
    "id": "1029",
    "title": "Two City Scheduling",
    "difficulty": "Medium",
    "explanation": "A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.\n\nReturn the minimum cost to fly every person to a city such that exactly `n` people arrive in each city.",
    "examples": [
      "Input: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\n\nThe second person goes to city A for a cost of 30.\n\nThe third person goes to city B for a cost of 50.\n\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.",
      "Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859",
      "Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086"
    ],
    "constraints": "`2 * n == costs.length`\n`2 <= costs.length <= 100`\n`costs.length` is even.\n\n`1 <= aCosti, bCosti <= 1000`"
  },
  {
    "id": "1030",
    "title": "Matrix Cells in Distance Order",
    "difficulty": "Easy",
    "explanation": "We are given a matrix with `R` rows and `C` columns has cells with integer coordinates `(r, c)`, where `0 <= r < R` and `0 <= c < C`.\n\nAdditionally, we are given a cell in that matrix with coordinates `(r0, c0)`.\n\nReturn the coordinates of all cells in the matrix, sorted by their distance from `(r0, c0)` from smallest distance to largest distance.  Here, the distance between two cells `(r1, c1)` and `(r2, c2)` is the Manhattan distance, `|r1 - r2| + |c1 - c2|`.  (You may return the answer in any order that satisfies this condition.)",
    "examples": [
      "Input: R = 1, C = 2, r0 = 0, c0 = 0\nOutput: [[0,0],[0,1]]\nExplanation: The distances from (r0, c0) to other cells are: [0,1]",
      "Input: R = 2, C = 2, r0 = 0, c0 = 1\nOutput: [[0,1],[0,0],[1,1],[1,0]]\nExplanation: The distances from (r0, c0) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.",
      "Input: R = 2, C = 3, r0 = 1, c0 = 2\nOutput: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\nExplanation: The distances from (r0, c0) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\n\nNote:\n`1 <= R <= 100`\n`1 <= C <= 100`\n`0 <= r0 < R`\n`0 <= c0 < C`"
    ],
    "constraints": ""
  },
  {
    "id": "1031",
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "difficulty": "Medium",
    "explanation": "Given an array `A` of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths `L` and `M`.  (For clarification, the `L`-length subarray could occur before or after the `M`-length subarray.)\nFormally, return the largest `V` for which `V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])` and either:\n`0 <= i < i + L - 1 < j < j + M - 1 < A.length`, or\n`0 <= j < j + M - 1 < i < i + L - 1 < A.length`.",
    "examples": [
      "Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.",
      "Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.",
      "Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.\n\nNote:\n`L >= 1`\n`M >= 1`\n`L + M <= A.length <= 1000`\n`0 <= A[i] <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "1032",
    "title": "Stream of Characters",
    "difficulty": "Hard",
    "explanation": "Implement the `StreamChecker` class as follows:\n`StreamChecker(words)`: Constructor, init the data structure with the given words.\n\n`query(letter)`: returns true if and only if for some `k >= 1`, the last `k` characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.\n\n\nExample:\nStreamChecker streamChecker = new StreamChecker([\"cd\",\"f\",\"kl\"]); // init the dictionary.\n\nstreamChecker.query('a');          // return false\nstreamChecker.query('b');          // return false\nstreamChecker.query('c');          // return false\nstreamChecker.query('d');          // return true, because 'cd' is in the wordlist\nstreamChecker.query('e');          // return false\nstreamChecker.query('f');          // return true, because 'f' is in the wordlist\nstreamChecker.query('g');          // return false\nstreamChecker.query('h');          // return false\nstreamChecker.query('i');          // return false\nstreamChecker.query('j');          // return false\nstreamChecker.query('k');          // return false\nstreamChecker.query('l');          // return true, because 'kl' is in the wordlist\nNote:\n`1 <= words.length <= 2000`\n`1 <= words[i].length <= 2000`\nWords will only consist of lowercase English letters.\n\nQueries will only consist of lowercase English letters.\n\nThe number of queries is at most 40000.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1033",
    "title": "Moving Stones Until Consecutive",
    "difficulty": "Easy",
    "explanation": "Three stones are on a number line at positions `a`, `b`, and `c`.\n\nEach turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints.  Formally, let's say the stones are currently at positions `x, y, z` with `x < y < z`.  You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`.\n\nThe game ends when you cannot make any more moves, ie. the stones are in consecutive positions.\n\nWhen the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`",
    "examples": [
      "Input: a = 1, b = 2, c = 5\nOutput: [1,2]\nExplanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.",
      "Input: a = 4, b = 3, c = 2\nOutput: [0,0]\nExplanation: We cannot make any moves.",
      "Input: a = 3, b = 5, c = 1\nOutput: [1,2]\nExplanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.\n\nNote:\n`1 <= a <= 100`\n`1 <= b <= 100`\n`1 <= c <= 100`\n`a != b, b != c, c != a`"
    ],
    "constraints": ""
  },
  {
    "id": "1034",
    "title": "Coloring A Border",
    "difficulty": "Medium",
    "explanation": "Given a 2-dimensional `grid` of integers, each value in the grid represents the color of the grid square at that location.\n\nTwo squares belong to the same connected component if and only if they have the same color and are next to each other in any of the 4 directions.\n\nThe border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).\n\nGiven a square at location `(r0, c0)` in the grid and a `color`, color the border of the connected component of that square with the given `color`, and return the final `grid`.",
    "examples": [
      "Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3\nOutput: [[3, 3], [3, 2]]",
      "Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3\nOutput: [[1, 3, 3], [2, 3, 3]]",
      "Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2\nOutput: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]\nNote:\n`1 <= grid.length <= 50`\n`1 <= grid[0].length <= 50`\n`1 <= grid[i][j] <= 1000`\n`0 <= r0 < grid.length`\n`0 <= c0 < grid[0].length`\n`1 <= color <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "1035",
    "title": "Uncrossed Lines",
    "difficulty": "Medium",
    "explanation": "We write the integers of `A` and `B` (in the order they are given) on two separate horizontal lines.\n\nNow, we may draw connecting lines: a straight line connecting two numbers `A[i]` and `B[j]` such that:\n`A[i] == B[j]`;\nThe line we draw does not intersect any other connecting (non-horizontal) line.\n\nNote that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.\n\nReturn the maximum number of connecting lines we can draw in this way.",
    "examples": [
      "Input: A = [1,4,2], B = [1,2,4]\nOutput: 2\nExplanation: We can draw 2 uncrossed lines as in the diagram.\n\nWe cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.",
      "Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]\nOutput: 3",
      "Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]\nOutput: 2\nNote:\n`1 <= A.length <= 500`\n`1 <= B.length <= 500`\n`1 <= A[i], B[i] <= 2000`"
    ],
    "constraints": ""
  },
  {
    "id": "1036",
    "title": "Escape a Large Maze",
    "difficulty": "Hard",
    "explanation": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`.\n\nWe start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`.\n\nEach move, we can walk one square north, east, south, or west if the square is not in the array of `blocked` squares. We are also not allowed to walk outside of the grid.\n\nReturn `true` if and only if it is possible to reach the `target` square from the `source` square through a sequence of valid moves.",
    "examples": [
      "Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\nOutput: false\nExplanation: The target square is inaccessible starting from the source square because we cannot move.\n\nWe cannot move north or east because those squares are blocked.\n\nWe cannot move south or west because we cannot go outside of the grid.",
      "Input: blocked = [], source = [0,0], target = [999999,999999]\nOutput: true\nExplanation: Because there are no blocked cells, it is possible to reach the target square."
    ],
    "constraints": "`0 <= blocked.length <= 200`\n`blocked[i].length == 2`\n`0 <= xi, yi < 106`\n`source.length == target.length == 2`\n`0 <= sx, sy, tx, ty < 106`\n`source != target`\nIt is guaranteed that `source` and `target` are not blocked."
  },
  {
    "id": "1037",
    "title": "Valid Boomerang",
    "difficulty": "Easy",
    "explanation": "Given an array `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return `true` if these points are a boomerang.\n\nA boomerang is a set of three points that are all distinct and not in a straight line.",
    "examples": [
      "Input: points = [[1,1],[2,3],[3,2]]\nOutput: true",
      "Input: points = [[1,1],[2,2],[3,3]]\nOutput: false"
    ],
    "constraints": "`points.length == 3`\n`points[i].length == 2`\n`0 <= xi, yi <= 100`"
  },
  {
    "id": "1038",
    "title": "Binary Search Tree to Greater Sum Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\n\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node's key.\n\nThe right subtree of a node contains only nodes with keys greater than the node's key.\n\nBoth the left and right subtrees must also be binary search trees.\n\nNote: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/",
    "examples": [
      "Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
      "Input: root = [0,null,1]\nOutput: [1,null,1]",
      "Input: root = [1,0,2]\nOutput: [3,3,2]",
      "Input: root = [3,2,4,1]\nOutput: [7,9,4,10]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 100]`.\n\n`0 <= Node.val <= 100`\nAll the values in the tree are unique.\n\n`root` is guaranteed to be a valid binary search tree."
  },
  {
    "id": "1039",
    "title": "Minimum Score Triangulation of Polygon",
    "difficulty": "Medium",
    "explanation": "You have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., clockwise order).\n\nYou will triangulate the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.\n\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.",
    "examples": [
      "Input: values = [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.",
      "Input: values = [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\n\nThe minimum score is 144.",
      "Input: values = [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."
    ],
    "constraints": "`n == values.length`\n`3 <= n <= 50`\n`1 <= values[i] <= 100`"
  },
  {
    "id": "1040",
    "title": "Moving Stones Until Consecutive II",
    "difficulty": "Medium",
    "explanation": "On an infinite number line, the position of the i-th stone is given by `stones[i]`.  Call a stone an endpoint stone if it has the smallest or largest position.\n\nEach turn, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.\n\nIn particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.\n\nThe game ends when you cannot make any more moves, ie. the stones are in consecutive positions.\n\nWhen the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`",
    "examples": [
      "Input: [7,4,9]\nOutput: [1,2]\nExplanation: \nWe can move 4 -> 8 for one move to finish the game.\n\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.",
      "Input: [6,5,4,3,10]\nOutput: [2,3]\nWe can move 3 -> 8 then 10 -> 7 to finish the game.\n\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\n\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.",
      "Input: [100,101,104,102,103]\nOutput: [0,0]\nNote:\n`3 <= stones.length <= 10^4`\n`1 <= stones[i] <= 10^9`\n`stones[i]` have distinct values."
    ],
    "constraints": ""
  },
  {
    "id": "1041",
    "title": "Robot Bounded In Circle",
    "difficulty": "Medium",
    "explanation": "On an infinite plane, a robot initially stands at `(0, 0)` and faces north. The robot can receive one of three instructions:\n`\"G\"`: go straight 1 unit;\n`\"L\"`: turn 90 degrees to the left;\n`\"R\"`: turn 90 degrees to the right.\n\nThe robot performs the `instructions` given in order, and repeats them forever.\n\nReturn `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.",
    "examples": [
      "Input: instructions = \"GGLLGG\"\nOutput: true\nExplanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).\n\nWhen repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.",
      "Input: instructions = \"GG\"\nOutput: false\nExplanation: The robot moves north indefinitely.",
      "Input: instructions = \"GL\"\nOutput: true\nExplanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ..."
    ],
    "constraints": "`1 <= instructions.length <= 100`\n`instructions[i]` is `'G'`, `'L'` or, `'R'`."
  },
  {
    "id": "1042",
    "title": "Flower Planting With No Adjacent",
    "difficulty": "Medium",
    "explanation": "You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.\n\nAll gardens have at most 3 paths coming into or leaving it.\n\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\n\nReturn any such a choice as an array `answer`, where `answer[i]` is the type of flower planted in the `(i+1)th` garden. The flower types are denoted `1`, `2`, `3`, or `4`. It is guaranteed an answer exists.",
    "examples": [
      "Input: n = 3, paths = [[1,2],[2,3],[3,1]]\nOutput: [1,2,3]\nExplanation:\nGardens 1 and 2 have different types.\n\nGardens 2 and 3 have different types.\n\nGardens 3 and 1 have different types.\n\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].",
      "Input: n = 4, paths = [[1,2],[3,4]]\nOutput: [1,2,1,2]",
      "Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\nOutput: [1,2,3,4]"
    ],
    "constraints": "`1 <= n <= 104`\n`0 <= paths.length <= 2 * 104`\n`paths[i].length == 2`\n`1 <= xi, yi <= n`\n`xi != yi`\nEvery garden has at most 3 paths coming into or leaving it."
  },
  {
    "id": "1043",
    "title": "Partition Array for Maximum Sum",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr`, you should partition the array into (contiguous) subarrays of length at most `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n\nReturn the largest sum of the given array after partitioning.",
    "examples": [
      "Input: arr = [1,15,7,9,2,5,10], k = 3\nOutput: 84\nExplanation: arr becomes [15,15,15,9,10,10,10]",
      "Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\nOutput: 83",
      "Input: arr = [1], k = 1\nOutput: 1"
    ],
    "constraints": "`1 <= arr.length <= 500`\n`0 <= arr[i] <= 109`\n`1 <= k <= arr.length`"
  },
  {
    "id": "1044",
    "title": "Longest Duplicate Substring",
    "difficulty": "Hard",
    "explanation": "Given a string `s`, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.\n\nReturn any duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `\"\"`.",
    "examples": [
      "Input: s = \"banana\"\nOutput: \"ana\"",
      "Input: s = \"abcd\"\nOutput: \"\""
    ],
    "constraints": "`2 <= s.length <= 3 * 104`\n`s` consists of lowercase English letters."
  },
  {
    "id": "1045",
    "title": "Customers Who Bought All Products",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1046",
    "title": "Last Stone Weight",
    "difficulty": "Easy",
    "explanation": "We have a collection of stones, each stone has a positive integer weight.\n\nEach turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights `x` and `y` with `x <= y`.  The result of this smash is:\nIf `x == y`, both stones are totally destroyed;\nIf `x != y`, the stone of weight `x` is totally destroyed, and the stone of weight `y` has new weight `y-x`.\n\nAt the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)",
    "examples": [
      "Input: [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.\n\nNote:\n`1 <= stones.length <= 30`\n`1 <= stones[i] <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "1047",
    "title": "Remove All Adjacent Duplicates In String",
    "difficulty": "Easy",
    "explanation": "Given a string `S` of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\n\nWe repeatedly make duplicate removals on S until we no longer can.\n\nReturn the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.",
    "examples": [
      "Input: \"abbaca\"\nOutput: \"ca\"\nExplanation: \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n\nNote:\n`1 <= S.length <= 20000`\n`S` consists only of English lowercase letters."
    ],
    "constraints": ""
  },
  {
    "id": "1048",
    "title": "Longest String Chain",
    "difficulty": "Medium",
    "explanation": "Given a list of words, each word consists of English lowercase letters.\n\nLet's say `word1` is a predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`.  For example, `\"abc\"` is a predecessor of `\"abac\"`.\n\nA word chain is a sequence of words `[word_1, word_2, ..., word_k]` with `k >= 1`, where `word_1` is a predecessor of `word_2`, `word_2` is a predecessor of `word_3`, and so on.\n\nReturn the longest possible length of a word chain with words chosen from the given list of `words`.",
    "examples": [
      "Input: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\nOutput: 4\nExplanation: One of the longest word chain is \"a\",\"ba\",\"bda\",\"bdca\".",
      "Input: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]\nOutput: 5"
    ],
    "constraints": "`1 <= words.length <= 1000`\n`1 <= words[i].length <= 16`\n`words[i]` only consists of English lowercase letters."
  },
  {
    "id": "1049",
    "title": "Last Stone Weight II",
    "difficulty": "Medium",
    "explanation": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:\nIf `x == y`, both stones are destroyed, and\nIf `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\nAt the end of the game, there is at most one stone left.\n\nReturn the smallest possible weight of the left stone. If there are no stones left, return `0`.",
    "examples": [
      "Input: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation:\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.",
      "Input: stones = [31,26,33,21,40]\nOutput: 5",
      "Input: stones = [1,2]\nOutput: 1"
    ],
    "constraints": "`1 <= stones.length <= 30`\n`1 <= stones[i] <= 100`"
  },
  {
    "id": "1050",
    "title": "Actors and Directors Who Cooperated At Least Three Times",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1051",
    "title": "Height Checker",
    "difficulty": "Easy",
    "explanation": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.\n\nYou are given an integer array `heights` representing the current order that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (0-indexed).\n\nReturn the number of indices where `heights[i] != expected[i]`.",
    "examples": [
      "Input: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nheights:  [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match.",
      "Input: heights = [5,1,2,3,4]\nOutput: 5\nExplanation:\nheights:  [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match.",
      "Input: heights = [1,2,3,4,5]\nOutput: 0\nExplanation:\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match."
    ],
    "constraints": "`1 <= heights.length <= 100`\n`1 <= heights[i] <= 100`"
  },
  {
    "id": "1052",
    "title": "Grumpy Bookstore Owner",
    "difficulty": "Medium",
    "explanation": "Today, the bookstore owner has a store open for `customers.length` minutes.  Every minute, some number of customers (`customers[i]`) enter the store, and all those customers leave after the end of that minute.\n\nOn some minutes, the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute, `grumpy[i] = 1`, otherwise `grumpy[i] = 0`.  When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.\n\nThe bookstore owner knows a secret technique to keep themselves not grumpy for `X` minutes straight, but can only use it once.\n\nReturn the maximum number of customers that can be satisfied throughout the day.",
    "examples": [
      "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nNote:\n`1 <= X <= customers.length == grumpy.length <= 20000`\n`0 <= customers[i] <= 1000`\n`0 <= grumpy[i] <= 1`"
    ],
    "constraints": ""
  },
  {
    "id": "1053",
    "title": "Previous Permutation With One Swap",
    "difficulty": "Medium",
    "explanation": "Given an array of positive integers `arr` (not necessarily distinct), return the lexicographically largest permutation that is smaller than `arr`, that can be made with exactly one swap (A swap exchanges the positions of two numbers `arr[i]` and `arr[j]`). If it cannot be done, then return the same array.",
    "examples": [
      "Input: arr = [3,2,1]\nOutput: [3,1,2]\nExplanation: Swapping 2 and 1.",
      "Input: arr = [1,1,5]\nOutput: [1,1,5]\nExplanation: This is already the smallest permutation.",
      "Input: arr = [1,9,4,6,7]\nOutput: [1,7,4,6,9]\nExplanation: Swapping 9 and 7.",
      "Input: arr = [3,1,1,3]\nOutput: [1,3,1,3]\nExplanation: Swapping 1 and 3."
    ],
    "constraints": "`1 <= arr.length <= 104`\n`1 <= arr[i] <= 104`"
  },
  {
    "id": "1054",
    "title": "Distant Barcodes",
    "difficulty": "Medium",
    "explanation": "In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.\n\nRearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.",
    "examples": [
      "Input: barcodes = [1,1,1,2,2,2]\nOutput: [2,1,2,1,2,1]",
      "Input: barcodes = [1,1,1,1,2,2,3,3]\nOutput: [1,3,1,3,1,2,1,2]"
    ],
    "constraints": "`1 <= barcodes.length <= 10000`\n`1 <= barcodes[i] <= 10000`"
  },
  {
    "id": "1055",
    "title": "Shortest Way to Form String",
    "difficulty": "Medium",
    "explanation": "From any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions).\n\nGiven two strings `source` and `target`, return the minimum number of subsequences of `source` such that their concatenation equals `target`. If the task is impossible, return `-1`.",
    "examples": [
      "Input: source = \"abc\", target = \"abcbc\"\nOutput: 2\nExplanation: The target \"abcbc\" can be formed by \"abc\" and \"bc\", which are subsequences of source \"abc\".",
      "Input: source = \"abc\", target = \"acdbc\"\nOutput: -1\nExplanation: The target string cannot be constructed from the subsequences of source string due to the character \"d\" in target string.",
      "Input: source = \"xyz\", target = \"xzyxz\"\nOutput: 3\nExplanation: The target string can be constructed as follows \"xz\" + \"y\" + \"xz\"."
    ],
    "constraints": "Both the `source` and `target` strings consist of only lowercase English letters from \"a\"-\"z\".\n\nThe lengths of `source` and `target` string are between `1` and `1000`."
  },
  {
    "id": "1056",
    "title": "Confusing Number",
    "difficulty": "Easy",
    "explanation": "Given a number `N`, return `true` if and only if it is a confusing number, which satisfies the following condition:\nWe can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.",
    "examples": [
      "Input: 6\nOutput: true\nExplanation: \nWe get `9` after rotating `6`, `9` is a valid number and `9!=6`.",
      "Input: 89\nOutput: true\nExplanation: \nWe get `68` after rotating `89`, `86` is a valid number and `86!=89`.",
      "Input: 11\nOutput: false\nExplanation: \nWe get `11` after rotating `11`, `11` is a valid number but the value remains the same, thus `11` is not a confusing number.",
      "Input: 25\nOutput: false\nExplanation: \nWe get an invalid number after rotating `25`.\n\nNote:\n`0 <= N <= 10^9`\nAfter the rotation we can ignore leading zeros, for example if after rotation we have `0008` then this number is considered as just `8`."
    ],
    "constraints": ""
  },
  {
    "id": "1057",
    "title": "Campus Bikes",
    "difficulty": "Medium",
    "explanation": "On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.\n\nOur goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index). We repeat this process until there are no available workers.\n\nThe Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\nReturn a vector `ans` of length `N`, where `ans[i]` is the index (0-indexed) of the bike that the `i`-th worker is assigned to.",
    "examples": [
      "Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]\nOutput: [1,0]\nExplanation: \nWorker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].",
      "Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]\nOutput: [0,2,1]\nExplanation: \nWorker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].\n\nNote:\n`0 <= workers[i][j], bikes[i][j] < 1000`\nAll worker and bike locations are distinct.\n\n`1 <= workers.length <= bikes.length <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "1058",
    "title": "Minimize Rounding Error to Meet Target",
    "difficulty": "Medium",
    "explanation": "Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.\n\nReturn the string `\"-1\"` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `Σ |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.",
    "examples": [
      "Input: prices = [\"0.700\",\"2.800\",\"4.900\"], target = 8\nOutput: \"1.000\"\nExplanation:\nUse Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .",
      "Input: prices = [\"1.500\",\"2.500\",\"3.500\"], target = 10\nOutput: \"-1\"\nExplanation: It is impossible to meet the target.",
      "Input: prices = [\"1.500\",\"2.500\",\"3.500\"], target = 9\nOutput: \"1.500\""
    ],
    "constraints": "`1 <= prices.length <= 500`\nEach string `prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places.\n\n`0 <= target <= 106`"
  },
  {
    "id": "1059",
    "title": "All Paths from Source Lead to Destination",
    "difficulty": "Medium",
    "explanation": "Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:\nAt least one path exists from the `source` node to the `destination` node\nIf a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.\n\nThe number of possible paths from `source` to `destination` is a finite number.\n\nReturn `true` if and only if all roads from `source` lead to `destination`.",
    "examples": [
      "Input: n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2\nOutput: false\nExplanation: It is possible to reach and get stuck on both node 1 and node 2.",
      "Input: n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3\nOutput: false\nExplanation: We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.",
      "Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3\nOutput: true",
      "Input: n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2\nOutput: false\nExplanation: All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.",
      "Input: n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1\nOutput: false\nExplanation: There is infinite self-loop at destination node."
    ],
    "constraints": "`1 <= n <= 104`\n`0 <= edges.length <= 104`\n`edges.length == 2`\n`0 <= ai, bi <= n - 1`\n`0 <= source <= n - 1`\n`0 <= destination <= n - 1`\nThe given graph may have self-loops and parallel edges."
  },
  {
    "id": "1060",
    "title": "Missing Element in Sorted Array",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` which is sorted in ascending order and all of its elements are unique and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.",
    "examples": [
      "Input: nums = [4,7,9,10], k = 1\nOutput: 5\nExplanation: The first missing number is 5.",
      "Input: nums = [4,7,9,10], k = 3\nOutput: 8\nExplanation: The missing numbers are [5,6,8,...], hence the third missing number is 8.",
      "Input: nums = [1,2,4], k = 3\nOutput: 6\nExplanation: The missing numbers are [3,5,6,7,...], hence the third missing number is 6."
    ],
    "constraints": "`1 <= nums.length <= 5 * 104`\n`1 <= nums[i] <= 107`\n`nums` is sorted in ascending order, and all the elements are unique.\n\n`1 <= k <= 108`\nFollow up: Can you find a logarithmic time complexity (i.e., `O(log(n))`) solution?"
  },
  {
    "id": "1061",
    "title": "Lexicographically Smallest Equivalent String",
    "difficulty": "Medium",
    "explanation": "Given strings `A` and `B` of the same length, we say A[i] and B[i] are equivalent characters. For example, if `A = \"abc\"` and `B = \"cde\"`, then we have `'a' == 'c', 'b' == 'd', 'c' == 'e'`.\n\nEquivalent characters follow the usual rules of any equivalence relation:\nReflexivity: 'a' == 'a'\nSymmetry: 'a' == 'b' implies 'b' == 'a'\nTransitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'\nFor example, given the equivalency information from `A` and `B` above, `S = \"eed\"`, `\"acd\"`, and `\"aab\"` are equivalent strings, and `\"aab\"` is the lexicographically smallest equivalent string of `S`.\n\nReturn the lexicographically smallest equivalent string of `S` by using the equivalency information from `A` and `B`.",
    "examples": [
      "Input: A = \"parker\", B = \"morris\", S = \"parser\"\nOutput: \"makkek\"\nExplanation: Based on the equivalency information in `A` and `B`, we can group their characters as `[m,p]`, `[a,o]`, `[k,r,s]`, `[e,i]`. The characters in each group are equivalent and sorted in lexicographical order. So the answer is `\"makkek\"`.",
      "Input: A = \"hello\", B = \"world\", S = \"hold\"\nOutput: \"hdld\"\nExplanation:  Based on the equivalency information in `A` and `B`, we can group their characters as `[h,w]`, `[d,e,o]`, `[l,r]`. So only the second letter `'o'` in `S` is changed to `'d'`, the answer is `\"hdld\"`.",
      "Input: A = \"leetcode\", B = \"programs\", S = \"sourcecode\"\nOutput: \"aauaaaaada\"\nExplanation:  We group the equivalent characters in `A` and `B` as `[a,o,e,r,s,c]`, `[l,p]`, `[g,t]` and `[d,m]`, thus all letters in `S` except `'u'` and `'d'` are transformed to `'a'`, the answer is `\"aauaaaaada\"`.\n\nNote:\nString `A`, `B` and `S` consist of only lowercase English letters from `'a'` - `'z'`.\n\nThe lengths of string `A`, `B` and `S` are between `1` and `1000`.\n\nString `A` and `B` are of the same length."
    ],
    "constraints": ""
  },
  {
    "id": "1062",
    "title": "Longest Repeating Substring",
    "difficulty": "Medium",
    "explanation": "Given a string `S`, find out the length of the longest repeating substring(s). Return `0` if no repeating substring exists.",
    "examples": [
      "Input: S = \"abcd\"\nOutput: 0\nExplanation: There is no repeating substring.",
      "Input: S = \"abbaba\"\nOutput: 2\nExplanation: The longest repeating substrings are \"ab\" and \"ba\", each of which occurs twice.",
      "Input: S = \"aabcaabdaab\"\nOutput: 3\nExplanation: The longest repeating substring is \"aab\", which occurs `3` times.",
      "Input: S = \"aaaaa\"\nOutput: 4\nExplanation: The longest repeating substring is \"aaaa\", which occurs twice."
    ],
    "constraints": "The string `S` consists of only lowercase English letters from `'a'` - `'z'`.\n\n`1 <= S.length <= 1500`"
  },
  {
    "id": "1063",
    "title": "Number of Valid Subarrays",
    "difficulty": "Hard",
    "explanation": "Given an array `A` of integers, return the number of non-empty continuous subarrays that satisfy the following condition:\nThe leftmost element of the subarray is not larger than other elements in the subarray.",
    "examples": [
      "Input: [1,4,2,5,3]\nOutput: 11\nExplanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].",
      "Input: [3,2,1]\nOutput: 3\nExplanation: The 3 valid subarrays are: [3],[2],[1].",
      "Input: [2,2,2]\nOutput: 6\nExplanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].\n\nNote:\n`1 <= A.length <= 50000`\n`0 <= A[i] <= 100000`"
    ],
    "constraints": ""
  },
  {
    "id": "1064",
    "title": "Fixed Point",
    "difficulty": "Easy",
    "explanation": "Given an array of distinct integers `arr`, where `arr` is sorted in ascending order, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.",
    "examples": [
      "Input: arr = [-10,-5,0,3,7]\nOutput: 3\nExplanation: For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3.",
      "Input: arr = [0,2,5,8,17]\nOutput: 0\nExplanation: `arr[0] = 0`, thus the output is 0.",
      "Input: arr = [-10,-5,3,4,7,9]\nOutput: -1\nExplanation: There is no such `i` that `arr[i] == i`, thus the output is -1."
    ],
    "constraints": "`1 <= arr.length < 104`\n`-109 <= arr[i] <= 109`\nFollow up: The `O(n)` solution is very straightforward. Can we do better?"
  },
  {
    "id": "1065",
    "title": "Index Pairs of a String",
    "difficulty": "Easy",
    "explanation": "Given a `text` string and `words` (a list of strings), return all index pairs `[i, j]` so that the substring `text[i]...text[j]` is in the list of `words`.",
    "examples": [
      "Input: text = \"thestoryofleetcodeandme\", words = [\"story\",\"fleet\",\"leetcode\"]\nOutput: [[3,7],[9,13],[10,17]]",
      "Input: text = \"ababa\", words = [\"aba\",\"ab\"]\nOutput: [[0,1],[0,2],[2,3],[2,4]]\nExplanation: \nNotice that matches can overlap, see \"aba\" is found in [0,2] and [2,4].\n\nNote:\nAll strings contains only lowercase English letters.\n\nIt's guaranteed that all strings in `words` are different.\n\n`1 <= text.length <= 100`\n`1 <= words.length <= 20`\n`1 <= words[i].length <= 50`\nReturn the pairs `[i,j]` in sorted order (i.e. sort them by their first coordinate in case of ties sort them by their second coordinate)."
    ],
    "constraints": ""
  },
  {
    "id": "1066",
    "title": "Campus Bikes II",
    "difficulty": "Medium",
    "explanation": "On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.\n\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\n\nThe Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.",
    "examples": [
      "Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]\nOutput: 6\nExplanation: \nWe assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.",
      "Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]\nOutput: 4\nExplanation: \nWe first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.",
      "Input: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]\nOutput: 4995"
    ],
    "constraints": "`N == workers.length`\n`M == bikes.length`\n`1 <= N <= M <= 10`\n`workers[i].length == 2`\n`bikes[i].length == 2`\n`0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000`\nAll the workers and the bikes locations are unique."
  },
  {
    "id": "1067",
    "title": "Digit Count in Range",
    "difficulty": "Hard",
    "explanation": "Given an integer `d` between `0` and `9`, and two positive integers `low` and `high` as lower and upper bounds, respectively. Return the number of times that `d` occurs as a digit in all integers between `low` and `high`, including the bounds `low` and `high`.",
    "examples": [
      "Input: d = 1, low = 1, high = 13\nOutput: 6\nExplanation: \nThe digit `d=1` occurs `6` times in `1,10,11,12,13`. Note that the digit `d=1` occurs twice in the number `11`.",
      "Input: d = 3, low = 100, high = 250\nOutput: 35\nExplanation: \nThe digit `d=3` occurs `35` times in `103,113,123,130,131,...,238,239,243`.\n\nNote:\n`0 <= d <= 9`\n`1 <= low <= high <= 2×10^8`"
    ],
    "constraints": ""
  },
  {
    "id": "1068",
    "title": "Product Sales Analysis I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1069",
    "title": "Product Sales Analysis II",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1070",
    "title": "Product Sales Analysis III",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1071",
    "title": "Greatest Common Divisor of Strings",
    "difficulty": "Easy",
    "explanation": "For two strings `s` and `t`, we say \"`t` divides `s`\" if and only if `s = t + ... + t`  (`t` concatenated with itself 1 or more times)\nGiven two strings str1 and str2, return the largest string `x` such that `x` divides both `str1` and `str2`.",
    "examples": [
      "Input: str1 = \"ABCABC\", str2 = \"ABC\"\nOutput: \"ABC\"",
      "Input: str1 = \"ABABAB\", str2 = \"ABAB\"\nOutput: \"AB\"",
      "Input: str1 = \"LEET\", str2 = \"CODE\"\nOutput: \"\"",
      "Input: str1 = \"ABCDEF\", str2 = \"ABC\"\nOutput: \"\""
    ],
    "constraints": "`1 <= str1.length <= 1000`\n`1 <= str2.length <= 1000`\n`str1` and `str2` consist of English uppercase letters."
  },
  {
    "id": "1072",
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "difficulty": "Medium",
    "explanation": "You are given an `m x n` binary matrix `matrix`.\n\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).\n\nReturn the maximum number of rows that have all values equal after some number of flips.",
    "examples": [
      "Input: matrix = [[0,1],[1,1]]\nOutput: 1\nExplanation: After flipping no values, 1 row has all values equal.",
      "Input: matrix = [[0,1],[1,0]]\nOutput: 2\nExplanation: After flipping values in the first column, both rows have equal values.",
      "Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]\nOutput: 2\nExplanation: After flipping values in the first two columns, the last two rows have equal values."
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 300`\n`matrix[i][j]` is either `0` or `1`."
  },
  {
    "id": "1073",
    "title": "Adding Two Negabinary Numbers",
    "difficulty": "Medium",
    "explanation": "Given two numbers `arr1` and `arr2` in base -2, return the result of adding them together.\n\nEach number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`.  A number `arr` in array, format is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`.\n\nReturn the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.",
    "examples": [
      "Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]\nOutput: [1,0,0,0,0]\nExplanation: arr1 represents 11, arr2 represents 5, the output represents 16.",
      "Input: arr1 = [0], arr2 = [0]\nOutput: [0]",
      "Input: arr1 = [0], arr2 = [1]\nOutput: [1]"
    ],
    "constraints": "`1 <= arr1.length, arr2.length <= 1000`\n`arr1[i]` and `arr2[i]` are `0` or `1`\n`arr1` and `arr2` have no leading zeros"
  },
  {
    "id": "1074",
    "title": "Number of Submatrices That Sum to Target",
    "difficulty": "Hard",
    "explanation": "Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target.\n\nA submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`.\n\nTwo submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.",
    "examples": [
      "Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\nOutput: 4\nExplanation: The four 1x1 submatrices that only contain 0.",
      "Input: matrix = [[1,-1],[-1,1]], target = 0\nOutput: 5\nExplanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.",
      "Input: matrix = [[904]], target = 0\nOutput: 0"
    ],
    "constraints": "`1 <= matrix.length <= 100`\n`1 <= matrix[0].length <= 100`\n`-1000 <= matrix[i] <= 1000`\n`-10^8 <= target <= 10^8`"
  },
  {
    "id": "1075",
    "title": "Project Employees I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1076",
    "title": "Project Employees II",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1077",
    "title": "Project Employees III",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1078",
    "title": "Occurrences After Bigram",
    "difficulty": "Easy",
    "explanation": "Given words `first` and `second`, consider occurrences in some `text` of the form \"`first second third`\", where `second` comes immediately after `first`, and `third` comes immediately after `second`.\n\nFor each such occurrence, add \"`third`\" to the answer, and return the answer.",
    "examples": [
      "Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\nOutput: [\"girl\",\"student\"]",
      "Input: text = \"we will we will rock you\", first = \"we\", second = \"will\"\nOutput: [\"we\",\"rock\"]\nNote:\n`1 <= text.length <= 1000`\n`text` consists of space separated words, where each word consists of lowercase English letters.\n\n`1 <= first.length, second.length <= 10`\n`first` and `second` consist of lowercase English letters."
    ],
    "constraints": ""
  },
  {
    "id": "1079",
    "title": "Letter Tile Possibilities",
    "difficulty": "Medium",
    "explanation": "You have `n`  `tiles`, where each tile has one letter `tiles[i]` printed on it.\n\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those `tiles`.",
    "examples": [
      "Input: tiles = \"AAB\"\nOutput: 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".",
      "Input: tiles = \"AAABBC\"\nOutput: 188",
      "Input: tiles = \"V\"\nOutput: 1"
    ],
    "constraints": "`1 <= tiles.length <= 7`\n`tiles` consists of uppercase English letters."
  },
  {
    "id": "1080",
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)\nA `node` is insufficient if every such root to leaf path intersecting this `node` has sum strictly less than `limit`.\n\nDelete all insufficient nodes simultaneously, and return the root of the resulting binary tree.",
    "examples": [
      "Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\nOutput: [1,2,3,4,null,null,7,8,9,null,14]",
      "Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\nOutput: [5,4,8,11,null,17,4,7,null,null,null,5]",
      "Input: root = [1,2,-3,-5,null,4,null], limit = -1\nOutput: [1,null,-3,4]\nNote:\nThe given tree will have between `1` and `5000` nodes.\n\n`-10^5 <= node.val <= 10^5`\n`-10^9 <= limit <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "1081",
    "title": "Smallest Subsequence of Distinct Characters",
    "difficulty": "Medium",
    "explanation": "Return the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once.\n\nNote: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/",
    "examples": [
      "Input: s = \"bcabc\"\nOutput: \"abc\"",
      "Input: s = \"cbacdcbc\"\nOutput: \"acdb\""
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consists of lowercase English letters."
  },
  {
    "id": "1082",
    "title": "Sales Analysis I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1083",
    "title": "Sales Analysis II",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1084",
    "title": "Sales Analysis III",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1085",
    "title": "Sum of Digits in the Minimum Number",
    "difficulty": "Easy",
    "explanation": "Given an array `A` of positive integers, let `S` be the sum of the digits of the minimal element of `A`.\n\nReturn 0 if `S` is odd, otherwise return 1.",
    "examples": [
      "Input: [34,23,1,24,75,33,54,8]\nOutput: 0\nExplanation: \nThe minimal element is 1, and the sum of those digits is S = 1 which is odd, so the answer is 0.",
      "Input: [99,77,33,66,55]\nOutput: 1\nExplanation: \nThe minimal element is 33, and the sum of those digits is S = 3 + 3 = 6 which is even, so the answer is 1."
    ],
    "constraints": "`1 <= A.length <= 100`\n`1 <= A[i] <= 100`"
  },
  {
    "id": "1086",
    "title": "High Five",
    "difficulty": "Easy",
    "explanation": "Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's top five average.\n\nReturn the answer as an array of pairs `result`, where `result[j] = [IDj, topFiveAveragej]` represents the student with `IDj` and their top five average. Sort `result` by `IDj` in increasing order.\n\nA student's top five average is calculated by taking the sum of their top five scores and dividing it by `5` using integer division.",
    "examples": [
      "Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]\nOutput: [[1,87],[2,88]]\nExplanation: \nThe student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.\n\nThe student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.",
      "Input: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]\nOutput: [[1,100],[7,100]]"
    ],
    "constraints": "`1 <= items.length <= 1000`\n`items[i].length == 2`\n`1 <= IDi <= 1000`\n`0 <= scorei <= 100`\nFor each `IDi`, there will be at least five scores."
  },
  {
    "id": "1087",
    "title": "Brace Expansion",
    "difficulty": "Medium",
    "explanation": "You are given a string `s` representing a list of words. Each letter in the word has one or more options.\n\nIf there is one option, the letter is represented as is.\n\nIf there is more than one option, then curly braces delimit the options. For example, `\"{a,b,c}\"` represents options `[\"a\", \"b\", \"c\"]`.\n\nFor example, if `s = \"a{b,c}\"`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[\"ab\", \"ac\"]`.\n\nReturn all words that can be formed in this manner, sorted in lexicographical order.",
    "examples": [
      "Input: s = \"{a,b}c{d,e}f\"\nOutput: [\"acdf\",\"acef\",\"bcdf\",\"bcef\"]",
      "Input: s = \"abcd\"\nOutput: [\"abcd\"]"
    ],
    "constraints": "`1 <= s.length <= 50`\n`s` consists of curly brackets `'{}'`, commas `','`, and lowercase English letters.\n\n`s` is guaranteed to be a valid input.\n\nThere are no nested curly brackets.\n\nAll characters inside a pair of consecutive opening and ending curly brackets are different."
  },
  {
    "id": "1088",
    "title": "Confusing Number II",
    "difficulty": "Hard",
    "explanation": "We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.\n\nA confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.)\nGiven a positive integer `N`, return the number of confusing numbers between `1` and `N` inclusive.",
    "examples": [
      "Input: 20\nOutput: 6\nExplanation: \nThe confusing numbers are [6,9,10,16,18,19].\n\n6 converts to 9.\n\n9 converts to 6.\n\n10 converts to 01 which is just 1.\n\n16 converts to 91.\n\n18 converts to 81.\n\n19 converts to 61.",
      "Input: 100\nOutput: 19\nExplanation: \nThe confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].\n\nNote:\n`1 <= N <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "1089",
    "title": "Duplicate Zeros",
    "difficulty": "Easy",
    "explanation": "Given a fixed length array `arr` of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.\n\nNote that elements beyond the length of the original array are not written.\n\nDo the above modifications to the input array in place, do not return anything from your function.",
    "examples": [
      "Input: [1,0,2,3,0,4,5,0]\nOutput: null\nExplanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]",
      "Input: [1,2,3]\nOutput: null\nExplanation: After calling your function, the input array is modified to: [1,2,3]\nNote:\n`1 <= arr.length <= 10000`\n`0 <= arr[i] <= 9`"
    ],
    "constraints": ""
  },
  {
    "id": "1090",
    "title": "Largest Values From Labels",
    "difficulty": "Medium",
    "explanation": "We have a set of items: the `i`-th item has value `values[i]` and label `labels[i]`.\n\nThen, we choose a subset `S` of these items, such that:\n`|S| <= num_wanted`\nFor every label `L`, the number of items in `S` with label `L` is `<= use_limit`.\n\nReturn the largest possible sum of the subset `S`.",
    "examples": [
      "Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], `num_wanted `= 3, use_limit = 1\nOutput: 9\nExplanation: The subset chosen is the first, third, and fifth item.",
      "Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], `num_wanted `= 3, use_limit = 2\nOutput: 12\nExplanation: The subset chosen is the first, second, and third item.",
      "Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 1\nOutput: 16\nExplanation: The subset chosen is the first and fourth item.",
      "Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 2\nOutput: 24\nExplanation: The subset chosen is the first, second, and fourth item.\n\nNote:\n`1 <= values.length == labels.length <= 20000`\n`0 <= values[i], labels[i] <= 20000`\n`1 <= num_wanted, use_limit <= values.length`"
    ],
    "constraints": ""
  },
  {
    "id": "1091",
    "title": "Shortest Path in Binary Matrix",
    "difficulty": "Medium",
    "explanation": "Given an `n x n` binary matrix `grid`, return the length of the shortest clear path in the matrix. If there is no clear path, return `-1`.\n\nA clear path in a binary matrix is a path from the top-left cell (i.e., `(0, 0)`) to the bottom-right cell (i.e., `(n - 1, n - 1)`) such that:\nAll the visited cells of the path are `0`.\n\nAll the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\n\nThe length of a clear path is the number of visited cells of this path.",
    "examples": [
      "Input: grid = [[0,1],[1,0]]\nOutput: 2",
      "Input: grid = [[0,0,0],[1,1,0],[1,1,0]]\nOutput: 4",
      "Input: grid = [[1,0,0],[1,1,0],[1,1,0]]\nOutput: -1"
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 100`\n`grid[i][j] is 0 or 1`"
  },
  {
    "id": "1092",
    "title": "Shortest Common Supersequence",
    "difficulty": "Hard",
    "explanation": "Given two strings `str1` and `str2`, return the shortest string that has both `str1` and `str2` as subsequences.  If multiple answers exist, you may return any of them.\n\n(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)",
    "examples": [
      "Input: str1 = \"abac\", str2 = \"cab\"\nOutput: \"cabac\"\nExplanation: \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\n\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\n\nThe answer provided is the shortest such string that satisfies these properties.\n\nNote:\n`1 <= str1.length, str2.length <= 1000`\n`str1` and `str2` consist of lowercase English letters."
    ],
    "constraints": ""
  },
  {
    "id": "1093",
    "title": "Statistics from a Large Sample",
    "difficulty": "Medium",
    "explanation": "You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the number of times that `k` appears in the sample.\n\nCalculate the following statistics:\n`minimum`: The minimum element in the sample.\n\n`maximum`: The maximum element in the sample.\n\n`mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\n\n`median`:\n\t\nIf the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.\n\nIf the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.\n\n`mode`: The number that appears the most in the sample. It is guaranteed to be unique.\n\nReturn the statistics of the sample as an array of floating-point numbers `[minimum, maximum, mean, median, mode]`. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      "Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: [1.00000,3.00000,2.37500,2.50000,3.00000]\nExplanation: The sample represented by count is [1,2,2,2,3,3,3,3].\n\nThe minimum and maximum are 1 and 3 respectively.\n\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\n\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\n\nThe mode is 3 as it appears the most in the sample.",
      "Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: [1.00000,4.00000,2.18182,2.00000,1.00000]\nExplanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\n\nThe minimum and maximum are 1 and 4 respectively.\n\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\n\nSince the size of the sample is odd, the median is the middle element 2.\n\nThe mode is 1 as it appears the most in the sample."
    ],
    "constraints": "`count.length == 256`\n`0 <= count[i] <= 109`\n`1 <= sum(count) <= 109`\nThe mode of the sample that `count` represents is unique."
  },
  {
    "id": "1094",
    "title": "Car Pooling",
    "difficulty": "Medium",
    "explanation": "You are driving a vehicle that has `capacity` empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)\nGiven a list of `trips`, `trip[i] = [num_passengers, start_location, end_location]` contains information about the `i`-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.\n\nReturn `true` if and only if it is possible to pick up and drop off all passengers for all the given trips.",
    "examples": [
      "Input: trips = [[2,1,5],[3,3,7]], capacity = 4\nOutput: false",
      "Input: trips = [[2,1,5],[3,3,7]], capacity = 5\nOutput: true",
      "Input: trips = [[2,1,5],[3,5,7]], capacity = 3\nOutput: true",
      "Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11\nOutput: true"
    ],
    "constraints": "`trips.length <= 1000`\n`trips[i].length == 3`\n`1 <= trips[i][0] <= 100`\n`0 <= trips[i][1] < trips[i][2] <= 1000`\n`1 <= capacity <= 100000`"
  },
  {
    "id": "1095",
    "title": "Find in Mountain Array",
    "difficulty": "Hard",
    "explanation": "(This problem is an interactive problem.)\nYou may recall that an array `A` is a mountain array if and only if:\n`A.length >= 3`\nThere exists some `i` with `0 < i < A.length - 1` such that:\n\t\n`A[0] < A[1] < ... A[i-1] < A[i]`\n`A[i] > A[i+1] > ... > A[A.length - 1]`\nGiven a mountain array `mountainArr`, return the minimum `index` such that `mountainArr.get(index) == target`.  If such an `index` doesn't exist, return `-1`.\n\nYou can't access the mountain array directly.  You may only access the array using a `MountainArray` interface:\n`MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).\n\n`MountainArray.length()` returns the length of the array.\n\nSubmissions making more than `100` calls to `MountainArray.get` will be judged Wrong Answer.  Also, any solutions that attempt to circumvent the judge will result in disqualification.",
    "examples": [
      "Input: array = [1,2,3,4,5,3,1], target = 3\nOutput: 2\nExplanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.",
      "Input: array = [0,1,2,4,2,1], target = 3\nOutput: -1\nExplanation: 3 does not exist in `the array,` so we return -1."
    ],
    "constraints": "`3 <= mountain_arr.length() <= 10000`\n`0 <= target <= 10^9`\n`0 <= mountain_arr.get(index) <= 10^9`"
  },
  {
    "id": "1096",
    "title": "Brace Expansion II",
    "difficulty": "Hard",
    "explanation": "Under a grammar given below, strings can represent a set of lowercase words.  Let's use `R(expr)` to denote the set of words the expression represents.\n\nGrammar can best be understood through simple examples:\nSingle letters represent a singleton set containing that word.\n\n\t\n`R(\"a\") = {\"a\"}`\n`R(\"w\") = {\"w\"}`\nWhen we take a comma delimited list of 2 or more expressions, we take the union of possibilities.\n\n\t\n`R(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}`\n`R(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"}` (notice the final set only contains each word at most once)\nWhen we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\n\t\n`R(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}`\n`R(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}`\nFormally, the 3 rules for our grammar:\nFor every lowercase letter `x`, we have `R(x) = {x}`\nFor expressions `e_1, e_2, ... , e_k` with `k >= 2`, we have `R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...`\nFor expressions `e_1` and `e_2`, we have `R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}`, where + denotes concatenation, and × denotes the cartesian product.\n\nGiven an `expression` representing a set of words under the given grammar, return the sorted list of words that the expression represents.",
    "examples": [
      "Input: \"{a,b}{c,{d,e}}\"\nOutput: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]",
      "Input: \"{{a,z},a{b,c},{ab,z}}\"\nOutput: [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer."
    ],
    "constraints": "`1 <= expression.length <= 60`\n`expression[i]` consists of `'{'`, `'}'`, `','`or lowercase English letters.\n\nThe given `expression` represents a set of words based on the grammar given in the description."
  },
  {
    "id": "1097",
    "title": "Game Play Analysis V",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1098",
    "title": "Unpopular Books",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1099",
    "title": "Two Sum Less Than K",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.",
    "examples": [
      "Input: nums = [34,23,1,24,75,33,54,8], k = 60\nOutput: 58\nExplanation: We can use 34 and 24 to sum 58 which is less than 60.",
      "Input: nums = [10,20,30], k = 15\nOutput: -1\nExplanation: In this case it is not possible to get a pair sum less that 15."
    ],
    "constraints": "`1 <= nums.length <= 100`\n`1 <= nums[i] <= 1000`\n`1 <= k <= 2000`"
  },
  {
    "id": "1100",
    "title": "Find K-Length Substrings With No Repeated Characters",
    "difficulty": "Medium",
    "explanation": "Given a string `S`, return the number of substrings of length `K` with no repeated characters.",
    "examples": [
      "Input: S = \"havefunonleetcode\", K = 5\nOutput: 6\nExplanation: \nThere are 6 substrings they are : 'havef','avefu','vefun','efuno','etcod','tcode'.",
      "Input: S = \"home\", K = 5\nOutput: 0\nExplanation: \nNotice K can be larger than the length of S. In this case is not possible to find any substring.\n\nNote:\n`1 <= S.length <= 10^4`\nAll characters of S are lowercase English letters.\n\n`1 <= K <= 10^4`"
    ],
    "constraints": ""
  },
  {
    "id": "1101",
    "title": "The Earliest Moment When Everyone Become Friends",
    "difficulty": "Medium",
    "explanation": "In a social group, there are `N` people, with unique integer ids from `0` to `N-1`.\n\nWe have a list of `logs`, where each `logs[i] = [timestamp, id_A, id_B]` contains a non-negative integer timestamp, and the ids of two different people.\n\nEach log represents the time in which two different people became friends.  Friendship is symmetric: if A is friends with B, then B is friends with A.\n\nLet's say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.\n\nReturn the earliest time for which every person became acquainted with every other person. Return -1 if there is no such earliest time.",
    "examples": [
      "Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6\nOutput: 20190301\nExplanation: \nThe first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].\n\nThe second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].\n\nThe third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].\n\nThe fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].\n\nThe fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens.\n\nThe sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.\n\nNote:\n`2 <= N <= 100`\n`1 <= logs.length <= 10^4`\n`0 <= logs[i][0] <= 10^9`\n`0 <= logs[i][1], logs[i][2] <= N - 1`\nIt's guaranteed that all timestamps in `logs[i][0]` are different.\n\n`logs `are not necessarily ordered by some criteria.\n\n`logs[i][1] != logs[i][2]`"
    ],
    "constraints": ""
  },
  {
    "id": "1102",
    "title": "Path With Maximum Minimum Value",
    "difficulty": "Medium",
    "explanation": "Given a matrix of integers `A` with R rows and C columns, find the maximum score of a path starting at `[0,0]` and ending at `[R-1,C-1]`.\n\nThe score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.\n\nA path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).",
    "examples": [
      "Input: [[5,4,5],[1,2,6],[7,4,6]]\nOutput: 4\nExplanation: \nThe path with the maximum score is highlighted in yellow.",
      "Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]\nOutput: 2",
      "Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]\nOutput: 3\nNote:\n`1 <= R, C <= 100`\n`0 <= A[i][j] <= 10^9`"
    ],
    "constraints": ""
  },
  {
    "id": "1103",
    "title": "Distribute Candies to People",
    "difficulty": "Easy",
    "explanation": "We distribute some number of `candies`, to a row of `n = num_people` people in the following way:\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person.\n\nThen, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person.\n\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\n\nReturn an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.",
    "examples": [
      "Input: candies = 7, num_people = 4\nOutput: [1,2,3,1]\nExplanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\n\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\n\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\n\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].",
      "Input: candies = 10, num_people = 3\nOutput: [5,2,3]\nExplanation: \nOn the first turn, ans[0] += 1, and the array is [1,0,0].\n\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\n\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\n\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3]."
    ],
    "constraints": "1 <= candies <= 10^9\n1 <= num_people <= 1000"
  },
  {
    "id": "1104",
    "title": "Path In Zigzag Labelled Binary Tree",
    "difficulty": "Medium",
    "explanation": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\n\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\nGiven the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.",
    "examples": [
      "Input: label = 14\nOutput: [1,3,4,14]",
      "Input: label = 26\nOutput: [1,2,6,10,26]"
    ],
    "constraints": "`1 <= label <= 10^6`"
  },
  {
    "id": "1105",
    "title": "Filling Bookcase Shelves",
    "difficulty": "Medium",
    "explanation": "We have a sequence of `books`: the `i`-th book has thickness `books[i][0]` and height `books[i][1]`.\n\nWe want to place these books in order onto bookcase shelves that have total width `shelf_width`.\n\nWe choose some of the books to place on this shelf (such that the sum of their thickness is `<= shelf_width`), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.\n\nNote again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.\n\nReturn the minimum possible height that the total bookshelf can be after placing shelves in this manner.",
    "examples": [
      "Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\nOutput: 6\nExplanation:\nThe sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.\n\nNotice that book number 2 does not have to be on the first shelf."
    ],
    "constraints": "`1 <= books.length <= 1000`\n`1 <= books[i][0] <= shelf_width <= 1000`\n`1 <= books[i][1] <= 1000`"
  },
  {
    "id": "1106",
    "title": "Parsing A Boolean Expression",
    "difficulty": "Hard",
    "explanation": "Return the result of evaluating a given boolean `expression`, represented as a string.\n\nAn expression can either be:\n`\"t\"`, evaluating to `True`;\n`\"f\"`, evaluating to `False`;\n`\"!(expr)\"`, evaluating to the logical NOT of the inner expression `expr`;\n`\"&(expr1,expr2,...)\"`, evaluating to the logical AND of 2 or more inner expressions `expr1, expr2, ...`;\n`\"|(expr1,expr2,...)\"`, evaluating to the logical OR of 2 or more inner expressions `expr1, expr2, ...`",
    "examples": [
      "Input: expression = \"!(f)\"\nOutput: true",
      "Input: expression = \"|(f,t)\"\nOutput: true",
      "Input: expression = \"&(t,f)\"\nOutput: false",
      "Input: expression = \"|(&(t,f,t),!(t))\"\nOutput: false"
    ],
    "constraints": "`1 <= expression.length <= 20000`\n`expression[i]` consists of characters in `{'(', ')', '&', '|', '!', 't', 'f', ','}`.\n\n`expression` is a valid expression representing a boolean, as given in the description."
  },
  {
    "id": "1107",
    "title": "New Users Daily Count",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1108",
    "title": "Defanging an IP Address",
    "difficulty": "Easy",
    "explanation": "Given a valid (IPv4) IP `address`, return a defanged version of that IP address.\n\nA defanged IP address replaces every period `\".\"` with `\"[.]\"`.",
    "examples": [
      "Input: address = \"1.1.1.1\"\nOutput: \"1[.]1[.]1[.]1\"",
      "Input: address = \"255.100.50.0\"\nOutput: \"255[.]100[.]50[.]0\""
    ],
    "constraints": "The given `address` is a valid IPv4 address."
  },
  {
    "id": "1109",
    "title": "Corporate Flight Bookings",
    "difficulty": "Medium",
    "explanation": "There are `n` flights that are labeled from `1` to `n`.\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (inclusive) with `seatsi` seats reserved for each flight in the range.\n\nReturn an array `answer` of length `n`, where `answer[i]` is the total number of seats reserved for flight `i`.",
    "examples": [
      "Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]",
      "Input: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]"
    ],
    "constraints": "`1 <= n <= 2 * 104`\n`1 <= bookings.length <= 2 * 104`\n`bookings[i].length == 3`\n`1 <= firsti <= lasti <= n`\n`1 <= seatsi <= 104`"
  },
  {
    "id": "1110",
    "title": "Delete Nodes And Return Forest",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, each node in the tree has a distinct value.\n\nAfter deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).\n\nReturn the roots of the trees in the remaining forest. You may return the result in any order.",
    "examples": [
      "Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]\nOutput: [[1,2,null,4],[6],[7]]",
      "Input: root = [1,2,4,null,3], to_delete = [3]\nOutput: [[1,2,4]]"
    ],
    "constraints": "The number of nodes in the given tree is at most `1000`.\n\nEach node has a distinct value between `1` and `1000`.\n\n`to_delete.length <= 1000`\n`to_delete` contains distinct values between `1` and `1000`."
  },
  {
    "id": "1111",
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "difficulty": "Medium",
    "explanation": "A string is a valid parentheses string (denoted VPS) if and only if it consists of `\"(\"` and `\")\"` characters only, and:\nIt is the empty string, or\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\nIt can be written as `(A)`, where `A` is a VPS.\n\nWe can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:\n`depth(\"\") = 0`\n`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's\n`depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS.\n\nFor example,  `\"\"`, `\"()()\"`, and `\"()(()())\"` are VPS's (with nesting depths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS's.\n\nGiven a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`).\n\nNow choose any such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.\n\nReturn an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`:  `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`.  Note that even though multiple answers may exist, you may return any of them.",
    "examples": [
      "Input: seq = \"(()())\"\nOutput: [0,1,1,1,1,0]",
      "Input: seq = \"()(())()\"\nOutput: [0,0,0,1,1,0,1,1]"
    ],
    "constraints": "`1 <= seq.size <= 10000`"
  },
  {
    "id": "1112",
    "title": "Highest Grade For Each Student",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1113",
    "title": "Reported Posts",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1114",
    "title": "Print in Order",
    "difficulty": "Easy",
    "explanation": "Suppose we have a class:\npublic class Foo {\n  public void first() { print(\"first\"); }\n  public void second() { print(\"second\"); }\n  public void third() { print(\"third\"); }\n}\nThe same instance of `Foo` will be passed to three different threads. Thread A will call `first()`, thread B will call `second()`, and thread C will call `third()`. Design a mechanism and modify the program to ensure that `second()` is executed after `first()`, and `third()` is executed after `second()`.",
    "examples": [
      "Input: [1,2,3]\nOutput: \"firstsecondthird\"\nExplanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output.",
      "Input: [1,3,2]\nOutput: \"firstsecondthird\"\nExplanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output.\n\nNote:\nWe do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness."
    ],
    "constraints": ""
  },
  {
    "id": "1115",
    "title": "Print FooBar Alternately",
    "difficulty": "Medium",
    "explanation": "Suppose you are given the following code:\nclass FooBar {\n  public void foo() {\n    for (int i = 0; i < n; i++) {\n      print(\"foo\");\n    }\n  }\n  public void bar() {\n    for (int i = 0; i < n; i++) {\n      print(\"bar\");\n    }\n  }\n}\nThe same instance of `FooBar` will be passed to two different threads. Thread A will call `foo()` while thread B will call `bar()`. Modify the given program to output \"foobar\" n times.",
    "examples": [
      "Input: n = 1\nOutput: \"foobar\"\nExplanation: There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar(). \"foobar\" is being output 1 time.",
      "Input: n = 2\nOutput: \"foobarfoobar\"\nExplanation: \"foobar\" is being output 2 times."
    ],
    "constraints": ""
  },
  {
    "id": "1116",
    "title": "Print Zero Even Odd",
    "difficulty": "Medium",
    "explanation": "Suppose you are given the following code:\nclass ZeroEvenOdd {\n  public ZeroEvenOdd(int n) { ... }      // constructor\n  public void zero(printNumber) { ... }  // only output 0's\n  public void even(printNumber) { ... }  // only output even numbers\n  public void odd(printNumber) { ... }   // only output odd numbers\n}\nThe same instance of `ZeroEvenOdd` will be passed to three different threads:\nThread A will call `zero()` which should only output 0's.\n\nThread B will call `even()` which should only ouput even numbers.\n\nThread C will call `odd()` which should only output odd numbers.\n\nEach of the threads is given a `printNumber` method to output an integer. Modify the given program to output the series `010203040506`... where the length of the series must be 2n.",
    "examples": [
      "Input: n = 2\nOutput: \"0102\"\nExplanation: There are three threads being fired asynchronously. One of them calls zero(), the other calls even(), and the last one calls odd(). \"0102\" is the correct output.",
      "Input: n = 5\nOutput: \"0102030405\""
    ],
    "constraints": ""
  },
  {
    "id": "1117",
    "title": "Building H2O",
    "difficulty": "Medium",
    "explanation": "There are two kinds of threads, `oxygen` and `hydrogen`. Your goal is to group these threads to form water molecules. There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given `releaseHydrogen` and `releaseOxygen` methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must be able to immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.\n\nIn other words:\nIf an oxygen thread arrives at the barrier when no hydrogen threads are present, it has to wait for two hydrogen threads.\n\nIf a hydrogen thread arrives at the barrier when no other threads are present, it has to wait for an oxygen thread and another hydrogen thread.\n\nWe don’t have to worry about matching the threads up explicitly; that is, the threads do not necessarily know which other threads they are paired up with. The key is just that threads pass the barrier in complete sets; thus, if we examine the sequence of threads that bond and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.\n\nWrite synchronization code for oxygen and hydrogen molecules that enforces these constraints.",
    "examples": [
      "Input: \"HOH\"\nOutput: \"HHO\"\nExplanation: \"HOH\" and \"OHH\" are also valid answers.",
      "Input: \"OOHHHH\"\nOutput: \"HHOHHO\"\nExplanation: \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers."
    ],
    "constraints": "Total length of input string will be 3n, where 1 ≤ n ≤ 20.\n\nTotal number of `H` will be 2n in the input string.\n\nTotal number of `O` will be n in the input string."
  },
  {
    "id": "1118",
    "title": "Number of Days in a Month",
    "difficulty": "Easy",
    "explanation": "Given a year `Y` and a month `M`, return how many days there are in that month.",
    "examples": [
      "Input: Y = 1992, M = 7\nOutput: 31",
      "Input: Y = 2000, M = 2\nOutput: 29",
      "Input: Y = 1900, M = 2\nOutput: 28\nNote:\n`1583 <= Y <= 2100`\n`1 <= M <= 12`"
    ],
    "constraints": ""
  },
  {
    "id": "1119",
    "title": "Remove Vowels from a String",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.",
    "examples": [
      "Input: s = \"leetcodeisacommunityforcoders\"\nOutput: \"ltcdscmmntyfrcdrs\"",
      "Input: s = \"aeiou\"\nOutput: \"\""
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consists of only lowercase English letters."
  },
  {
    "id": "1120",
    "title": "Maximum Average Subtree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, find the maximum average value of any subtree of that tree.\n\n(A subtree of a tree is any node of that tree plus all its descendants. The average value of a tree is the sum of its values, divided by the number of nodes.)",
    "examples": [
      "Input: [5,6,1]\nOutput: 6.00000\nExplanation: \nFor the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.\n\nFor the node with value = 6 we have an average of 6 / 1 = 6.\n\nFor the node with value = 1 we have an average of 1 / 1 = 1.\n\nSo the answer is 6 which is the maximum.\n\nNote:\nThe number of nodes in the tree is between `1` and `5000`.\n\nEach node will have a value between `0` and `100000`.\n\nAnswers will be accepted as correct if they are within `10^-5` of the correct answer."
    ],
    "constraints": ""
  },
  {
    "id": "1121",
    "title": "Divide Array Into Increasing Sequences",
    "difficulty": "Hard",
    "explanation": "Given a non-decreasing array of positive integers `nums` and an integer `K`, find out if this array can be divided into one or more disjoint increasing subsequences of length at least `K`.",
    "examples": [
      "Input: nums = [1,2,2,3,3,4,4], K = 3\nOutput: true\nExplanation: \nThe array can be divided into the two subsequences [1,2,3,4] and [2,3,4] with lengths at least 3 each.",
      "Input: nums = [5,6,6,7,8], K = 3\nOutput: false\nExplanation: \nThere is no way to divide the array using the conditions required.\n\nNote:\n`1 <= nums.length <= 10^5`\n`1 <= K <= nums.length`\n`1 <= nums[i] <= 10^5`"
    ],
    "constraints": ""
  },
  {
    "id": "1122",
    "title": "Relative Sort Array",
    "difficulty": "Easy",
    "explanation": "Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.\n\nSort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`.  Elements that don't appear in `arr2` should be placed at the end of `arr1` in ascending order.",
    "examples": [
      "Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\nOutput: [2,2,2,1,4,3,3,9,6,7,19]"
    ],
    "constraints": "`1 <= arr1.length, arr2.length <= 1000`\n`0 <= arr1[i], arr2[i] <= 1000`\nAll the elements of `arr2` are distinct.\n\nEach `arr2[i]` is in `arr1`."
  },
  {
    "id": "1123",
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the lowest common ancestor of its deepest leaves.\n\nRecall that:\nThe node of a binary tree is a leaf if and only if it has no children\nThe depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.\n\nThe lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.\n\nNote: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\n\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\n\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.",
      "Input: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree, and it's the lca of itself.",
      "Input: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest leaf node in the tree is 2, the lca of one node is itself."
    ],
    "constraints": "The number of nodes in the tree will be in the range `[1, 1000]`.\n\n`0 <= Node.val <= 1000`\nThe values of the nodes in the tree are unique."
  },
  {
    "id": "1124",
    "title": "Longest Well-Performing Interval",
    "difficulty": "Medium",
    "explanation": "We are given `hours`, a list of the number of hours worked per day for a given employee.\n\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than `8`.\n\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\n\nReturn the length of the longest well-performing interval.",
    "examples": [
      "Input: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6]."
    ],
    "constraints": "`1 <= hours.length <= 10000`\n`0 <= hours[i] <= 16`"
  },
  {
    "id": "1125",
    "title": "Smallest Sufficient Team",
    "difficulty": "Hard",
    "explanation": "In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has.\n\nConsider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\n\nFor example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.\n\nReturn any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.\n\nIt is guaranteed an answer exists.",
    "examples": [
      "Input: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\nOutput: [0,2]",
      "Input: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\nOutput: [1,2]"
    ],
    "constraints": "`1 <= req_skills.length <= 16`\n`1 <= req_skills[i].length <= 16`\n`req_skills[i]` consists of lowercase English letters.\n\nAll the strings of `req_skills` are unique.\n\n`1 <= people.length <= 60`\n`0 <= people[i].length <= 16`\n`1 <= people[i][j].length <= 16`\n`people[i][j]` consists of lowercase English letters.\n\nAll the strings of `people[i]` are unique.\n\nEvery skill in `people[i]` is a skill in `req_skills`.\n\nIt is guaranteed a sufficient team exists."
  },
  {
    "id": "1126",
    "title": "Active Businesses",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1127",
    "title": "User Purchase Platform",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1128",
    "title": "Number of Equivalent Domino Pairs",
    "difficulty": "Easy",
    "explanation": "Given a list of `dominoes`, `dominoes[i] = [a, b]` is equivalent to `dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d` and `b==c`) - that is, one domino can be rotated to be equal to another domino.\n\nReturn the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`, and `dominoes[i]` is equivalent to `dominoes[j]`.",
    "examples": [
      "Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]\nOutput: 1"
    ],
    "constraints": "`1 <= dominoes.length <= 40000`\n`1 <= dominoes[i][j] <= 9`"
  },
  {
    "id": "1129",
    "title": "Shortest Path with Alternating Colors",
    "difficulty": "Medium",
    "explanation": "Consider a directed graph, with nodes labelled `0, 1, ..., n-1`.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.\n\nEach `[i, j]` in `red_edges` denotes a red directed edge from node `i` to node `j`.  Similarly, each `[i, j]` in `blue_edges` denotes a blue directed edge from node `i` to node `j`.\n\nReturn an array `answer` of length `n`, where each `answer[X]` is the length of the shortest path from node `0` to node `X` such that the edge colors alternate along the path (or `-1` if such a path doesn't exist).",
    "examples": [
      "Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []\nOutput: [0,1,-1]",
      "Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\nOutput: [0,1,-1]",
      "Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\nOutput: [0,-1,-1]",
      "Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\nOutput: [0,1,2]",
      "Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\nOutput: [0,1,1]"
    ],
    "constraints": "`1 <= n <= 100`\n`red_edges.length <= 400`\n`blue_edges.length <= 400`\n`red_edges[i].length == blue_edges[i].length == 2`\n`0 <= red_edges[i][j], blue_edges[i][j] < n`"
  },
  {
    "id": "1130",
    "title": "Minimum Cost Tree From Leaf Values",
    "difficulty": "Medium",
    "explanation": "Given an array `arr` of positive integers, consider all binary trees such that:\nEach node has either 0 or 2 children;\nThe values of `arr` correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)\nThe value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.\n\nAmong all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.",
    "examples": [
      "Input: arr = [6,2,4]\nOutput: 32\nExplanation:\nThere are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.\n\n    24            24\n   /  \\          /  \\\n  12   4        6    8\n /  \\               / \\\n6    2             2   4"
    ],
    "constraints": "`2 <= arr.length <= 40`\n`1 <= arr[i] <= 15`\nIt is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than `2^31`)."
  },
  {
    "id": "1131",
    "title": "Maximum of Absolute Value Expression",
    "difficulty": "Medium",
    "explanation": "Given two arrays of integers with equal lengths, return the maximum value of:\n`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`\nwhere the maximum is taken over all `0 <= i, j < arr1.length`.",
    "examples": [
      "Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\nOutput: 13",
      "Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\nOutput: 20"
    ],
    "constraints": "`2 <= arr1.length == arr2.length <= 40000`\n`-10^6 <= arr1[i], arr2[i] <= 10^6`"
  },
  {
    "id": "1132",
    "title": "Reported Posts II",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1133",
    "title": "Largest Unique Number",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `A`, return the largest integer that only occurs once.\n\nIf no integer occurs once, return -1.",
    "examples": [
      "Input: [5,7,3,9,4,9,8,3,1]\nOutput: 8\nExplanation: \nThe maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it's the answer.",
      "Input: [9,9,8,8]\nOutput: -1\nExplanation: \nThere is no number that occurs only once.\n\nNote:\n`1 <= A.length <= 2000`\n`0 <= A[i] <= 1000`"
    ],
    "constraints": ""
  },
  {
    "id": "1134",
    "title": "Armstrong Number",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return `true` if and only if it is an Armstrong number.\n\nThe `k`-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.",
    "examples": [
      "Input: n = 153\nOutput: true\nExplanation: 153 is a 3-digit number, and 153 = 13 + 53 + 33.",
      "Input: n = 123\nOutput: false\nExplanation: 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36."
    ],
    "constraints": "`1 <= n <= 108`"
  },
  {
    "id": "1135",
    "title": "Connecting Cities With Minimum Cost",
    "difficulty": "Medium",
    "explanation": "There are `N` cities numbered from 1 to `N`.\n\nYou are given `connections`, where each `connections[i] = [city1, city2, cost]` represents the cost to connect `city1` and `city2` together.  (A connection is bidirectional: connecting `city1` and `city2` is the same as connecting `city2` and `city1`.)\nReturn the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.",
    "examples": [
      "Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]\nOutput: 6\nExplanation: \nChoosing any 2 edges will connect all cities so we choose the minimum 2.",
      "Input: N = 4, connections = [[1,2,3],[3,4,4]]\nOutput: -1\nExplanation: \nThere is no way to connect all cities even if all edges are used.\n\nNote:\n`1 <= N <= 10000`\n`1 <= connections.length <= 10000`\n`1 <= connections[i][0], connections[i][1] <= N`\n`0 <= connections[i][2] <= 10^5`\n`connections[i][0] != connections[i][1]`"
    ],
    "constraints": ""
  },
  {
    "id": "1136",
    "title": "Parallel Courses",
    "difficulty": "Medium",
    "explanation": "You are given an integer `n` which indicates that we have `n` courses, labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [a, b]`, representing a prerequisite relationship between course `a` and course `b`: course `a` has to be studied before course `b`.\n\nIn one semester, you can study any number of courses as long as you have studied all the prerequisites for the course you are studying.\n\nReturn the minimum number of semesters needed to study all courses. If there is no way to study all the courses, return `-1`.",
    "examples": [
      "Input: n = 3, relations = [[1,3],[2,3]]\nOutput: 2\nExplanation: In the first semester, courses 1 and 2 are studied. In the second semester, course 3 is studied.",
      "Input: n = 3, relations = [[1,2],[2,3],[3,1]]\nOutput: -1\nExplanation: No course can be studied because they depend on each other."
    ],
    "constraints": "`1 <= n <= 5000`\n`1 <= relations.length <= 5000`\n`1 <= a, b <= n`\n`a != b`\nAll the pairs `[a, b]` are unique."
  },
  {
    "id": "1137",
    "title": "N-th Tribonacci Number",
    "difficulty": "Easy",
    "explanation": "The Tribonacci sequence Tn is defined as follows: \nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\nGiven `n`, return the value of Tn.",
    "examples": [
      "Input: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4",
      "Input: n = 25\nOutput: 1389537"
    ],
    "constraints": "`0 <= n <= 37`\nThe answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`."
  },
  {
    "id": "1138",
    "title": "Alphabet Board Path",
    "difficulty": "Medium",
    "explanation": "On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`.\n\nHere, `board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]`, as shown in the diagram below.\n\nWe may make the following moves:\n`'U'` moves our position up one row, if the position exists on the board;\n`'D'` moves our position down one row, if the position exists on the board;\n`'L'` moves our position left one column, if the position exists on the board;\n`'R'` moves our position right one column, if the position exists on the board;\n`'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.\n\n(Here, the only positions that exist on the board are positions with letters on them.)\nReturn a sequence of moves that makes our answer equal to `target` in the minimum number of moves.  You may return any path that does so.",
    "examples": [
      "Input: target = \"leet\"\nOutput: \"DDR!UURRR!!DDD!\"",
      "Input: target = \"code\"\nOutput: \"RR!DDRR!UUL!R!\""
    ],
    "constraints": "`1 <= target.length <= 100`\n`target` consists only of English lowercase letters."
  },
  {
    "id": "1139",
    "title": "Largest 1-Bordered Square",
    "difficulty": "Medium",
    "explanation": "Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest square subgrid that has all `1`s on its border, or `0` if such a subgrid doesn't exist in the `grid`.",
    "examples": [
      "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 9",
      "Input: grid = [[1,1,0,0]]\nOutput: 1"
    ],
    "constraints": "`1 <= grid.length <= 100`\n`1 <= grid[0].length <= 100`\n`grid[i][j]` is `0` or `1`"
  },
  {
    "id": "1140",
    "title": "Stone Game II",
    "difficulty": "Medium",
    "explanation": "Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.  The objective of the game is to end with the most stones. \nAlice and Bob take turns, with Alice starting first.  Initially, `M = 1`.\n\nOn each player's turn, that player can take all the stones in the first `X` remaining piles, where `1 <= X <= 2M`.  Then, we set `M = max(M, X)`.\n\nThe game continues until all the stones have been taken.\n\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice can get.",
    "examples": [
      "Input: piles = [2,7,9,4,4]\nOutput: 10\nExplanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger.",
      "Input: piles = [1,2,3,4,5,100]\nOutput: 104"
    ],
    "constraints": "`1 <= piles.length <= 100`\n`1 <= piles[i] <= 104`"
  },
  {
    "id": "1141",
    "title": "User Activity for the Past 30 Days I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1142",
    "title": "User Activity for the Past 30 Days II",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1143",
    "title": "Longest Common Subsequence",
    "difficulty": "Medium",
    "explanation": "Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\nA common subsequence of two strings is a subsequence that is common to both strings.",
    "examples": [
      "Input: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.",
      "Input: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.",
      "Input: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0."
    ],
    "constraints": "`1 <= text1.length, text2.length <= 1000`\n`text1` and `text2` consist of only lowercase English characters."
  },
  {
    "id": "1144",
    "title": "Decrease Elements To Make Array Zigzag",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of integers, a move consists of choosing any element and decreasing it by 1.\n\nAn array `A` is a zigzag array if either:\nEvery even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`\nOR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`\nReturn the minimum number of moves to transform the given array `nums` into a zigzag array.",
    "examples": [
      "Input: nums = [1,2,3]\nOutput: 2\nExplanation: We can decrease 2 to 0 or 3 to 1.",
      "Input: nums = [9,6,1,6,2]\nOutput: 4"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= 1000`"
  },
  {
    "id": "1145",
    "title": "Binary Tree Coloring Game",
    "difficulty": "Medium",
    "explanation": "Two players play a turn based game on a binary tree.  We are given the `root` of this binary tree, and the number of nodes `n` in the tree.  `n` is odd, and each node has a distinct value from `1` to `n`.\n\nInitially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`.  The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.\n\nThen, the players take turns starting with the first player.  In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn.  If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\n\nYou are the second player.  If it is possible to choose such a `y` to ensure you win the game, return `true`.  If it is not possible, return `false`.",
    "examples": [
      "Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\nOutput: true\nExplanation: The second player can choose the node with value 2."
    ],
    "constraints": "`root` is the root of a binary tree with `n` nodes and distinct node values from `1` to `n`.\n\n`n` is odd.\n\n`1 <= x <= n <= 100`"
  },
  {
    "id": "1146",
    "title": "Snapshot Array",
    "difficulty": "Medium",
    "explanation": "Implement a SnapshotArray that supports the following interface:\n`SnapshotArray(int length)` initializes an array-like data structure with the given length.  Initially, each element equals 0.\n\n`void set(index, val)` sets the element at the given `index` to be equal to `val`.\n\n`int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.\n\n`int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`",
    "examples": [
      "Input: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]\nOutput: [null,null,0,null,5]\nExplanation: \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5"
    ],
    "constraints": "`1 <= length <= 50000`\nAt most `50000` calls will be made to `set`, `snap`, and `get`.\n\n`0 <= index < length`\n`0 <= snap_id < `(the total number of times we call `snap()`)\n`0 <= val <= 10^9`"
  },
  {
    "id": "1147",
    "title": "Longest Chunked Palindrome Decomposition",
    "difficulty": "Hard",
    "explanation": "You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that:\n`subtexti` is a non-empty string.\n\nThe concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).\n\n`subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).\n\nReturn the largest possible value of `k`.",
    "examples": [
      "Input: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".",
      "Input: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".",
      "Input: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".",
      "Input: text = \"aaa\"\nOutput: 3\nExplanation: We can split the string on \"(a)(a)(a)\"."
    ],
    "constraints": "`1 <= text.length <= 1000`\n`text` consists only of lowercase English characters."
  },
  {
    "id": "1148",
    "title": "Article Views I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1149",
    "title": "Article Views II",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1150",
    "title": "Check If a Number Is Majority Element in a Sorted Array",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` sorted in non-decreasing order, and a number `target`, return `True` if and only if `target` is a majority element.\n\nA majority element is an element that appears more than `N/2` times in an array of length `N`.",
    "examples": [
      "Input: nums = [2,4,5,5,5,5,5,6,6], target = 5\nOutput: true\nExplanation: \nThe value 5 appears 5 times and the length of the array is 9.\n\nThus, 5 is a majority element because 5 > 9/2 is true.",
      "Input: nums = [10,100,101,101], target = 101\nOutput: false\nExplanation: \nThe value 101 appears 2 times and the length of the array is 4.\n\nThus, 101 is not a majority element because 2 > 4/2 is false."
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= 10^9`\n`1 <= target <= 10^9`"
  },
  {
    "id": "1151",
    "title": "Minimum Swaps to Group All 1's Together",
    "difficulty": "Medium",
    "explanation": "Given a binary array `data`, return the minimum number of swaps required to group all `1`’s present in the array together in any place in the array.",
    "examples": [
      "Input: data = [1,0,1,0,1]\nOutput: 1\nExplanation: \nThere are 3 ways to group all 1's together:\n[1,1,1,0,0] using 1 swap.\n\n[0,1,1,1,0] using 2 swaps.\n\n[0,0,1,1,1] using 1 swap.\n\nThe minimum is 1.",
      "Input: data = [0,0,0,1,0]\nOutput: 0\nExplanation: \nSince there is only one 1 in the array, no swaps needed.",
      "Input: data = [1,0,1,0,1,0,0,1,1,0,1]\nOutput: 3\nExplanation: \nOne possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].",
      "Input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1]\nOutput: 8"
    ],
    "constraints": "`1 <= data.length <= 105`\n`data[i]` is `0` or `1`."
  },
  {
    "id": "1152",
    "title": "Analyze User Website Visit Pattern",
    "difficulty": "Medium",
    "explanation": "We are given some website visits: the user with name `username[i]` visited the website `website[i]` at time `timestamp[i]`.\n\nA 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  (The websites in a 3-sequence are not necessarily distinct.)\nFind the 3-sequence visited by the largest number of users. If there is more than one solution, return the lexicographically smallest such 3-sequence.",
    "examples": [
      "Input: username = [\"joe\",\"joe\",\"joe\",\"james\",\"james\",\"james\",\"james\",\"mary\",\"mary\",\"mary\"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = [\"home\",\"about\",\"career\",\"home\",\"cart\",\"maps\",\"home\",\"home\",\"about\",\"career\"]\nOutput: [\"home\",\"about\",\"career\"]\nExplanation: \nThe tuples in this example are:\n[\"joe\", 1, \"home\"]\n[\"joe\", 2, \"about\"]\n[\"joe\", 3, \"career\"]\n[\"james\", 4, \"home\"]\n[\"james\", 5, \"cart\"]\n[\"james\", 6, \"maps\"]\n[\"james\", 7, \"home\"]\n[\"mary\", 8, \"home\"]\n[\"mary\", 9, \"about\"]\n[\"mary\", 10, \"career\"]\nThe 3-sequence (\"home\", \"about\", \"career\") was visited at least once by 2 users.\n\nThe 3-sequence (\"home\", \"cart\", \"maps\") was visited at least once by 1 user.\n\nThe 3-sequence (\"home\", \"cart\", \"home\") was visited at least once by 1 user.\n\nThe 3-sequence (\"home\", \"maps\", \"home\") was visited at least once by 1 user.\n\nThe 3-sequence (\"cart\", \"maps\", \"home\") was visited at least once by 1 user.\n\nNote:\n`3 <= N = username.length = timestamp.length = website.length <= 50`\n`1 <= username[i].length <= 10`\n`0 <= timestamp[i] <= 10^9`\n`1 <= website[i].length <= 10`\nBoth `username[i]` and `website[i]` contain only lowercase characters.\n\nIt is guaranteed that there is at least one user who visited at least 3 websites.\n\nNo user visits two websites at the same time."
    ],
    "constraints": ""
  },
  {
    "id": "1153",
    "title": "String Transforms Into Another String",
    "difficulty": "Hard",
    "explanation": "Given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing zero or more conversions.\n\nIn one conversion you can convert all occurrences of one character in `str1` to any other lowercase English character.\n\nReturn `true` if and only if you can transform `str1` into `str2`.",
    "examples": [
      "Input: str1 = \"aabcc\", str2 = \"ccdee\"\nOutput: true\nExplanation: Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.",
      "Input: str1 = \"leetcode\", str2 = \"codeleet\"\nOutput: false\nExplanation: There is no way to transform str1 to str2."
    ],
    "constraints": "`1 <= str1.length == str2.length <= 104`\n`str1` and `str2` contain only lowercase English letters."
  },
  {
    "id": "1154",
    "title": "Day of the Year",
    "difficulty": "Easy",
    "explanation": "Given a string `date` representing a Gregorian calendar date formatted as `YYYY-MM-DD`, return the day number of the year.",
    "examples": [
      "Input: date = \"2019-01-09\"\nOutput: 9\nExplanation: Given date is the 9th day of the year in 2019.",
      "Input: date = \"2019-02-10\"\nOutput: 41",
      "Input: date = \"2003-03-01\"\nOutput: 60",
      "Input: date = \"2004-03-01\"\nOutput: 61"
    ],
    "constraints": "`date.length == 10`\n`date[4] == date[7] == '-'`, and all other `date[i]`'s are digits\n`date` represents a calendar date between Jan 1st, 1900 and Dec 31, 2019."
  },
  {
    "id": "1155",
    "title": "Number of Dice Rolls With Target Sum",
    "difficulty": "Medium",
    "explanation": "You have `d` dice, and each die has `f` faces numbered `1, 2, ..., f`.\n\nReturn the number of possible ways (out of `fd` total ways) modulo `10^9 + 7` to roll the dice so the sum of the face up numbers equals `target`.",
    "examples": [
      "Input: d = 1, f = 6, target = 3\nOutput: 1\nExplanation: \nYou throw one die with 6 faces.  There is only one way to get a sum of 3.",
      "Input: d = 2, f = 6, target = 7\nOutput: 6\nExplanation: \nYou throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:\n1+6, 2+5, 3+4, 4+3, 5+2, 6+1.",
      "Input: d = 2, f = 5, target = 10\nOutput: 1\nExplanation: \nYou throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.",
      "Input: d = 1, f = 2, target = 3\nOutput: 0\nExplanation: \nYou throw one die with 2 faces.  There is no way to get a sum of 3.",
      "Input: d = 30, f = 30, target = 500\nOutput: 222616187\nExplanation: \nThe answer must be returned modulo 10^9 + 7."
    ],
    "constraints": "`1 <= d, f <= 30`\n`1 <= target <= 1000`"
  },
  {
    "id": "1156",
    "title": "Swap For Longest Repeated Character Substring",
    "difficulty": "Medium",
    "explanation": "Given a string `text`, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.",
    "examples": [
      "Input: text = \"ababa\"\nOutput: 3\nExplanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\", which its length is 3.",
      "Input: text = \"aaabaaa\"\nOutput: 6\nExplanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\", which its length is 6.",
      "Input: text = \"aaabbaaa\"\nOutput: 4",
      "Input: text = \"aaaaa\"\nOutput: 5\nExplanation: No need to swap, longest repeated character substring is \"aaaaa\", length is 5.",
      "Input: text = \"abcdef\"\nOutput: 1"
    ],
    "constraints": "`1 <= text.length <= 20000`\n`text` consist of lowercase English characters only."
  },
  {
    "id": "1157",
    "title": "Online Majority Element In Subarray",
    "difficulty": "Hard",
    "explanation": "Implementing the class `MajorityChecker`, which has the following API:\n`MajorityChecker(int[] arr)` constructs an instance of MajorityChecker with the given array `arr`;\n`int query(int left, int right, int threshold)` has arguments such that:\n\t\n`0 <= left <= right < arr.length` representing a subarray of `arr`;\n`2 * threshold > right - left + 1`, ie. the threshold is always a strict majority of the length of the subarray\nEach `query(...)` returns the element in `arr[left], arr[left+1], ..., arr[right]` that occurs at least `threshold` times, or `-1` if no such element exists.\n\n\nExample:\nMajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\nmajorityChecker.query(0,5,4); // returns 1\nmajorityChecker.query(0,3,3); // returns -1\nmajorityChecker.query(2,3,2); // returns 2\n\nConstraints:\n`1 <= arr.length <= 20000`\n`1 <= arr[i] <= 20000`\nFor each query, `0 <= left <= right < len(arr)`\nFor each query, `2 * threshold > right - left + 1`\nThe number of queries is at most `10000`",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1158",
    "title": "Market Analysis I",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1159",
    "title": "Market Analysis II",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1160",
    "title": "Find Words That Can Be Formed by Characters",
    "difficulty": "Easy",
    "explanation": "You are given an array of strings `words` and a string `chars`.\n\nA string is good if it can be formed by characters from `chars` (each character can only be used once).\n\nReturn the sum of lengths of all good strings in `words`.",
    "examples": [
      "Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\nOutput: 6\nExplanation: \nThe strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.",
      "Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\nOutput: 10\nExplanation: \nThe strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.\n\nNote:\n`1 <= words.length <= 1000`\n`1 <= words[i].length, chars.length <= 100`\nAll strings contain lowercase English letters only."
    ],
    "constraints": ""
  },
  {
    "id": "1161",
    "title": "Maximum Level Sum of a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.\n\nReturn the smallest level `x` such that the sum of all the values of nodes at level `x` is maximal.",
    "examples": [
      "Input: root = [1,7,0,7,-8,null,null]\nOutput: 2\nExplanation: \nLevel 1 sum = 1.\n\nLevel 2 sum = 7 + 0 = 7.\n\nLevel 3 sum = 7 + -8 = -1.\n\nSo we return the level with the maximum sum which is level 2.",
      "Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]\nOutput: 2"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-105 <= Node.val <= 105`"
  },
  {
    "id": "1162",
    "title": "As Far from Land as Possible",
    "difficulty": "Medium",
    "explanation": "Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`.\n\nThe distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.",
    "examples": [
      "Input: grid = [[1,0,1],[0,0,0],[1,0,1]]\nOutput: 2\nExplanation: The cell (1, 1) is as far as possible from all the land with distance 2.",
      "Input: grid = [[1,0,0],[0,0,0],[0,0,0]]\nOutput: 4\nExplanation: The cell (2, 2) is as far as possible from all the land with distance 4."
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 100`\n`grid[i][j]` is `0` or `1`"
  },
  {
    "id": "1163",
    "title": "Last Substring in Lexicographical Order",
    "difficulty": "Hard",
    "explanation": "Given a string `s`, return the last substring of `s` in lexicographical order.",
    "examples": [
      "Input: s = \"abab\"\nOutput: \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".",
      "Input: s = \"leetcode\"\nOutput: \"tcode\""
    ],
    "constraints": "`1 <= s.length <= 4 * 105`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1164",
    "title": "Product Price at a Given Date",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1165",
    "title": "Single-Row Keyboard",
    "difficulty": "Easy",
    "explanation": "There is a special keyboard with all keys in a single row.\n\nGiven a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.\n\nYou want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.",
    "examples": [
      "Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"cba\"\nOutput: 4\nExplanation: The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.\n\nTotal time = 2 + 1 + 1 = 4.",
      "Input: keyboard = \"pqrstuvwxyzabcdefghijklmno\", word = \"leetcode\"\nOutput: 73"
    ],
    "constraints": "`keyboard.length == 26`\n`keyboard` contains each English lowercase letter exactly once in some order.\n\n`1 <= word.length <= 104`\n`word[i]` is an English lowercase letter."
  },
  {
    "id": "1166",
    "title": "Design File System",
    "difficulty": "Medium",
    "explanation": "You are asked to design a file system that allows you to create new paths and associate them with different values.\n\nThe format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, \"`/leetcode\"` and \"`/leetcode/problems\"` are valid paths while an empty string `\"\"` and `\"/\"` are not.\n\nImplement the `FileSystem` class:\n`bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path already exists or its parent path doesn't exist.\n\n`int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.",
    "examples": [
      "Input: \n[\"FileSystem\",\"createPath\",\"get\"]\n[[],[\"/a\",1],[\"/a\"]]\nOutput: \n[null,true,1]\nExplanation: \nFileSystem fileSystem = new FileSystem();\nfileSystem.createPath(\"/a\", 1); // return true\nfileSystem.get(\"/a\"); // return 1",
      "Input: \n[\"FileSystem\",\"createPath\",\"createPath\",\"get\",\"createPath\",\"get\"]\n[[],[\"/leet\",1],[\"/leet/code\",2],[\"/leet/code\"],[\"/c/d\",1],[\"/c\"]]\nOutput: \n[null,true,true,2,false,-1]\nExplanation: \nFileSystem fileSystem = new FileSystem();\nfileSystem.createPath(\"/leet\", 1); // return true\nfileSystem.createPath(\"/leet/code\", 2); // return true\nfileSystem.get(\"/leet/code\"); // return 2\nfileSystem.createPath(\"/c/d\", 1); // return false because the parent path \"/c\" doesn't exist.\n\nfileSystem.get(\"/c\"); // return -1 because this path doesn't exist."
    ],
    "constraints": "The number of calls to the two functions is less than or equal to `104` in total.\n\n`2 <= path.length <= 100`\n`1 <= value <= 109`"
  },
  {
    "id": "1167",
    "title": "Minimum Cost to Connect Sticks",
    "difficulty": "Medium",
    "explanation": "You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick.\n\nYou can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining.\n\nReturn the minimum cost of connecting all the given sticks into one stick in this way.",
    "examples": [
      "Input: sticks = [2,4,3]\nOutput: 14\nExplanation: You start with sticks = [2,4,3].\n\n1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = [5,4].\n\n2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = [9].\n\nThere is only one stick left, so you are done. The total cost is 5 + 9 = 14.",
      "Input: sticks = [1,8,3,5]\nOutput: 30\nExplanation: You start with sticks = [1,8,3,5].\n\n1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = [4,8,5].\n\n2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = [9,8].\n\n3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = [17].\n\nThere is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.",
      "Input: sticks = [5]\nOutput: 0\nExplanation: There is only one stick, so you don't need to do anything. The total cost is 0."
    ],
    "constraints": "`1 <= sticks.length <= 104`\n`1 <= sticks[i] <= 104`"
  },
  {
    "id": "1168",
    "title": "Optimize Water Distribution in a Village",
    "difficulty": "Hard",
    "explanation": "There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes.\n\nFor each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to 0-indexing), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes`, where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional.\n\nReturn the minimum total cost to supply water to all houses.",
    "examples": [
      "Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]\nOutput: 3\nExplanation: \nThe image shows the costs of connecting houses using pipes.\n\nThe best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3."
    ],
    "constraints": "`1 <= n <= 104`\n`wells.length == n`\n`0 <= wells[i] <= 105`\n`1 <= pipes.length <= 104`\n`pipes[j].length == 3`\n`1 <= house1j, house2j <= n`\n`0 <= costj <= 105`\n`house1j != house2j`"
  },
  {
    "id": "1169",
    "title": "Invalid Transactions",
    "difficulty": "Medium",
    "explanation": "A transaction is possibly invalid if:\nthe amount exceeds `$1000`, or;\nif it occurs within (and including) `60` minutes of another transaction with the same name in a different city.\n\nYou are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\n\nReturn a list of `transactions` that are possibly invalid. You may return the answer in any order.",
    "examples": [
      "Input: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.",
      "Input: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]",
      "Input: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]"
    ],
    "constraints": "`transactions.length <= 1000`\nEach `transactions[i]` takes the form `\"{name},{time},{amount},{city}\"`\nEach `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`.\n\nEach `{time}` consist of digits, and represent an integer between `0` and `1000`.\n\nEach `{amount}` consist of digits, and represent an integer between `0` and `2000`."
  },
  {
    "id": "1170",
    "title": "Compare Strings by Frequency of the Smallest Character",
    "difficulty": "Medium",
    "explanation": "Let the function `f(s)` be the frequency of the lexicographically smallest character in a non-empty string `s`. For example, if `s = \"dcce\"` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.\n\nYou are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the number of words in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.\n\nReturn an integer array `answer`, where each `answer[i]` is the answer to the `ith` query.",
    "examples": [
      "Input: queries = [\"cbd\"], words = [\"zaaaz\"]\nOutput: [1]\nExplanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\").",
      "Input: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: [1,2]\nExplanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\")."
    ],
    "constraints": "`1 <= queries.length <= 2000`\n`1 <= words.length <= 2000`\n`1 <= queries[i].length, words[i].length <= 10`\n`queries[i][j]`, `words[i][j]` consist of lowercase English letters."
  },
  {
    "id": "1171",
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "difficulty": "Medium",
    "explanation": "Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.\n\nAfter doing so, return the head of the final linked list.  You may return any such answer.\n\n(Note that in the examples below, all sequences are serializations of `ListNode` objects.)",
    "examples": [
      "Input: head = [1,2,-3,3,1]\nOutput: [3,1]\nNote: The answer [1,2,1] would also be accepted.",
      "Input: head = [1,2,3,-3,4]\nOutput: [1,2,4]",
      "Input: head = [1,2,3,-3,-2]\nOutput: [1]"
    ],
    "constraints": "The given linked list will contain between `1` and `1000` nodes.\n\nEach node in the linked list has `-1000 <= node.val <= 1000`."
  },
  {
    "id": "1172",
    "title": "Dinner Plate Stacks",
    "difficulty": "Hard",
    "explanation": "You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum `capacity`.\n\nImplement the `DinnerPlates` class:\n`DinnerPlates(int capacity)` Initializes the object with the maximum `capacity` of the stacks.\n\n`void push(int val)` Pushes the given positive integer `val` into the leftmost stack with size less than `capacity`.\n\n`int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all stacks are empty.\n\n`int popAtStack(int index)` Returns the value at the top of the stack with the given `index` and removes it from that stack, and returns -1 if the stack with that given `index` is empty.\n\n\nExample:\nInput: \n[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\nOutput: \n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\nExplanation: \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2  4\n                                           1  3  5\n                                           ] ] ]\nD.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                       1  3  5\n                                                       ] ] ]\nD.push(20);        // The stacks are now: 20  4\n                                           1  3  5\n                                           ] ] ]\nD.push(21);        // The stacks are now: 20  4 21\n                                           1  3  5\n                                           ] ] ]\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                        1  3  5\n                                                        ] ] ]\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                        1  3  5\n                                                        ] ] ] \nD.pop()            // Returns 5.  The stacks are now:      4\n                                                        1  3 \n                                                        ] ]  \nD.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                        ] ]   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        ]   \nD.pop()            // Returns 1.  There are no stacks.\n\nD.pop()            // Returns -1.  There are still no stacks.\n\n\nConstraints:\n`1 <= capacity <= 20000`\n`1 <= val <= 20000`\n`0 <= index <= 100000`\nAt most `200000` calls will be made to `push`, `pop`, and `popAtStack`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1173",
    "title": "Immediate Food Delivery I",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1174",
    "title": "Immediate Food Delivery II",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1175",
    "title": "Prime Arrangements",
    "difficulty": "Easy",
    "explanation": "Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)\nSince the answer may be large, return the answer modulo `10^9 + 7`.",
    "examples": [
      "Input: n = 5\nOutput: 12\nExplanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.",
      "Input: n = 100\nOutput: 682289015"
    ],
    "constraints": "`1 <= n <= 100`"
  },
  {
    "id": "1176",
    "title": "Diet Plan Performance",
    "difficulty": "Easy",
    "explanation": "A dieter consumes `calories[i]` calories on the `i`-th day. \nGiven an integer `k`, for every consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at T, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):\nIf `T < lower`, they performed poorly on their diet and lose 1 point; \nIf `T > upper`, they performed well on their diet and gain 1 point;\nOtherwise, they performed normally and there is no change in points.\n\nInitially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days.\n\nNote that the total points can be negative.",
    "examples": [
      "Input: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3\nOutput: 0\nExplanation: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\n\ncalories[0] and calories[1] are less than lower so 2 points are lost.\n\ncalories[3] and calories[4] are greater than upper so 2 points are gained.",
      "Input: calories = [3,2], k = 2, lower = 0, upper = 1\nOutput: 1\nExplanation: Since k = 2, we consider subarrays of length 2.\n\ncalories[0] + calories[1] > upper so 1 point is gained.",
      "Input: calories = [6,5,0,0], k = 2, lower = 1, upper = 5\nOutput: 0\nExplanation:\ncalories[0] + calories[1] > upper so 1 point is gained.\n\nlower <= calories[1] + calories[2] <= upper so no change in points.\n\ncalories[2] + calories[3] < lower so 1 point is lost."
    ],
    "constraints": "`1 <= k <= calories.length <= 10^5`\n`0 <= calories[i] <= 20000`\n`0 <= lower <= upper`"
  },
  {
    "id": "1177",
    "title": "Can Make Palindrome from Substring",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, we make queries on substrings of `s`.\n\nFor each query `queries[i] = [left, right, k]`, we may rearrange the substring `s[left], ..., s[right]`, and then choose up to `k` of them to replace with any lowercase English letter. \nIf the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.\n\nReturn an array `answer[]`, where `answer[i]` is the result of the `i`-th query `queries[i]`.\n\nNote that: Each letter is counted individually for replacement so if for example `s[left..right] = \"aaa\"`, and `k = 2`, we can only replace two of the letters.  (Also, note that the initial string `s` is never modified by any query.)\n\nExample :\nInput: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\nOutput: [true,false,false,true,true]\nExplanation:\nqueries[0] : substring = \"d\", is palidrome.\n\nqueries[1] : substring = \"bc\", is not palidrome.\n\nqueries[2] : substring = \"abcd\", is not palidrome after replacing only 1 character.\n\nqueries[3] : substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".\n\nqueries[4] : substring = \"abcda\", could be changed to \"abcba\" which is palidrome.\n\n\nConstraints:\n`1 <= s.length, queries.length <= 10^5`\n`0 <= queries[i][0] <= queries[i][1] < s.length`\n`0 <= queries[i][2] <= s.length`\n`s` only contains lowercase English letters.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1178",
    "title": "Number of Valid Words for Each Puzzle",
    "difficulty": "Hard",
    "explanation": "With respect to a given `puzzle` string, a `word` is valid if both the following conditions are satisfied:\n`word` contains the first letter of `puzzle`.\n\nFor each letter in `word`, that letter is in `puzzle`.\n\n\tFor example, if the puzzle is \"abcdefg\", then valid words are \"faced\", \"cabbage\", and \"baggage\"; while invalid words are \"beefed\" (doesn't include \"a\") and \"based\" (includes \"s\" which isn't in the puzzle).\n\nReturn an array `answer`, where `answer[i]` is the number of words in the given word list `words` that are valid with respect to the puzzle `puzzles[i]`.\n\n\nExample :\nInput: \nwords = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], \npuzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]\nOutput: [1,1,3,2,4,0]\nExplanation:\n1 valid word for \"aboveyz\" : \"aaaa\" \n1 valid word for \"abrodyz\" : \"aaaa\"\n3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\nThere're no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'.\n\n\nConstraints:\n`1 <= words.length <= 10^5`\n`4 <= words[i].length <= 50`\n`1 <= puzzles.length <= 10^4`\n`puzzles[i].length == 7`\n`words[i][j]`, `puzzles[i][j]` are English lowercase letters.\n\nEach `puzzles[i] `doesn't contain repeated characters.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1179",
    "title": "Reformat Department Table",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1180",
    "title": "Count Substrings with Only One Distinct Letter",
    "difficulty": "Easy",
    "explanation": "Given a string `S`, return the number of substrings that have only one distinct letter.",
    "examples": [
      "Input: S = \"aaaba\"\nOutput: 8\nExplanation: The substrings with one distinct letter are \"aaa\", \"aa\", \"a\", \"b\".\n\n\"aaa\" occurs 1 time.\n\n\"aa\" occurs 2 times.\n\n\"a\" occurs 4 times.\n\n\"b\" occurs 1 time.\n\nSo the answer is 1 + 2 + 4 + 1 = 8.",
      "Input: S = \"aaaaaaaaaa\"\nOutput: 55"
    ],
    "constraints": "`1 <= S.length <= 1000`\n`S[i]` consists of only lowercase English letters."
  },
  {
    "id": "1181",
    "title": "Before and After Puzzle",
    "difficulty": "Medium",
    "explanation": "Given a list of `phrases`, generate a list of Before and After puzzles.\n\nA phrase is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.\n\nBefore and After puzzles are phrases that are formed by merging two phrases where the last word of the first phrase is the same as the first word of the second phrase.\n\nReturn the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.\n\nYou should return a list of distinct strings sorted lexicographically.",
    "examples": [
      "Input: phrases = [\"writing code\",\"code rocks\"]\nOutput: [\"writing code rocks\"]",
      "Input: phrases = [\"mission statement\",\n                  \"a quick bite to eat\",\n                  \"a chip off the old block\",\n                  \"chocolate bar\",\n                  \"mission impossible\",\n                  \"a man on a mission\",\n                  \"block party\",\n                  \"eat my words\",\n                  \"bar of soap\"]\nOutput: [\"a chip off the old block party\",\n         \"a man on a mission impossible\",\n         \"a man on a mission statement\",\n         \"a quick bite to eat my words\",\n         \"chocolate bar of soap\"]",
      "Input: phrases = [\"a\",\"b\",\"a\"]\nOutput: [\"a\"]"
    ],
    "constraints": "`1 <= phrases.length <= 100`\n`1 <= phrases[i].length <= 100`"
  },
  {
    "id": "1182",
    "title": "Shortest Distance to Target Color",
    "difficulty": "Medium",
    "explanation": "You are given an array `colors`, in which there are three colors: `1`, `2` and `3`.\n\nYou are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.",
    "examples": [
      "Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]\nOutput: [3,0,3]\nExplanation: \nThe nearest 3 from index 1 is at index 4 (3 steps away).\n\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\n\nThe nearest 1 from index 6 is at index 3 (3 steps away).",
      "Input: colors = [1,2], queries = [[0,3]]\nOutput: [-1]\nExplanation: There is no 3 in the array."
    ],
    "constraints": "`1 <= colors.length <= 5*10^4`\n`1 <= colors[i] <= 3`\n`1 <= queries.length <= 5*10^4`\n`queries[i].length == 2`\n`0 <= queries[i][0] < colors.length`\n`1 <= queries[i][1] <= 3`"
  },
  {
    "id": "1183",
    "title": "Maximum Number of Ones",
    "difficulty": "Hard",
    "explanation": "Consider a matrix `M` with dimensions `width * height`, such that every cell has value `0` or `1`, and any square sub-matrix of `M` of size `sideLength * sideLength` has at most `maxOnes` ones.\n\nReturn the maximum possible number of ones that the matrix `M` can have.",
    "examples": [
      "Input: width = 3, height = 3, sideLength = 2, maxOnes = 1\nOutput: 4\nExplanation:\nIn a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.\n\nThe best solution that has 4 ones is:\n[1,0,1]\n[0,0,0]\n[1,0,1]",
      "Input: width = 3, height = 3, sideLength = 2, maxOnes = 2\nOutput: 6\nExplanation:\n[1,0,1]\n[1,0,1]\n[1,0,1]"
    ],
    "constraints": "`1 <= width, height <= 100`\n`1 <= sideLength <= width, height`\n`0 <= maxOnes <= sideLength * sideLength`"
  },
  {
    "id": "1184",
    "title": "Distance Between Bus Stops",
    "difficulty": "Easy",
    "explanation": "A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.\n\nThe bus goes along both directions i.e. clockwise and counterclockwise.\n\nReturn the shortest distance between the given `start` and `destination` stops.",
    "examples": [
      "Input: distance = [1,2,3,4], start = 0, destination = 1\nOutput: 1\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.",
      "Input: distance = [1,2,3,4], start = 0, destination = 2\nOutput: 3\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.",
      "Input: distance = [1,2,3,4], start = 0, destination = 3\nOutput: 4\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4."
    ],
    "constraints": "`1 <= n <= 10^4`\n`distance.length == n`\n`0 <= start, destination < n`\n`0 <= distance[i] <= 10^4`"
  },
  {
    "id": "1185",
    "title": "Day of the Week",
    "difficulty": "Easy",
    "explanation": "Given a date, return the corresponding day of the week for that date.\n\nThe input is given as three integers representing the `day`, `month` and `year` respectively.\n\nReturn the answer as one of the following values `{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}`.",
    "examples": [
      "Input: day = 31, month = 8, year = 2019\nOutput: \"Saturday\"",
      "Input: day = 18, month = 7, year = 1999\nOutput: \"Sunday\"",
      "Input: day = 15, month = 8, year = 1993\nOutput: \"Sunday\""
    ],
    "constraints": "The given dates are valid dates between the years `1971` and `2100`."
  },
  {
    "id": "1186",
    "title": "Maximum Subarray Sum with One Deletion",
    "difficulty": "Medium",
    "explanation": "Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.\n\nNote that the subarray needs to be non-empty after deleting one element.",
    "examples": [
      "Input: arr = [1,-2,0,3]\nOutput: 4\nExplanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.",
      "Input: arr = [1,-2,-2,3]\nOutput: 3\nExplanation: We just choose [3] and it's the maximum sum.",
      "Input: arr = [-1,-1,-1,-1]\nOutput: -1\nExplanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0."
    ],
    "constraints": "`1 <= arr.length <= 105`\n`-104 <= arr[i] <= 104`"
  },
  {
    "id": "1187",
    "title": "Make Array Strictly Increasing",
    "difficulty": "Hard",
    "explanation": "Given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing.\n\nIn one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`.\n\nIf there is no way to make `arr1` strictly increasing, return `-1`.",
    "examples": [
      "Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace `5` with `2`, then `arr1 = [1, 2, 3, 6, 7]`.",
      "Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace `5` with `3` and then replace `3` with `4`. `arr1 = [1, 3, 4, 6, 7]`.",
      "Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make `arr1` strictly increasing."
    ],
    "constraints": "`1 <= arr1.length, arr2.length <= 2000`\n`0 <= arr1[i], arr2[i] <= 10^9`"
  },
  {
    "id": "1188",
    "title": "Design Bounded Blocking Queue",
    "difficulty": "Medium",
    "explanation": "Implement a thread-safe bounded blocking queue that has the following methods:\n`BoundedBlockingQueue(int capacity)` The constructor initializes the queue with a maximum `capacity`.\n\n`void enqueue(int element)` Adds an `element` to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full.\n\n`int dequeue()` Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.\n\n`int size()` Returns the number of elements currently in the queue.\n\nYour implementation will be tested using multiple threads at the same time. Each thread will either be a producer thread that only makes calls to the `enqueue` method or a consumer thread that only makes calls to the `dequeue` method. The `size` method will be called after every test case.\n\nPlease do not use built-in implementations of bounded blocking queue as this will not be accepted in an interview.",
    "examples": [
      "Input:\n1\n1\n[\"BoundedBlockingQueue\",\"enqueue\",\"dequeue\",\"dequeue\",\"enqueue\",\"enqueue\",\"enqueue\",\"enqueue\",\"dequeue\"]\n[[2],[1],[],[],[0],[2],[3],[4],[]]\nOutput:\n[1,0,2,2]\nExplanation:\nNumber of producer threads = 1\nNumber of consumer threads = 1\nBoundedBlockingQueue queue = new BoundedBlockingQueue(2);   // initialize the queue with capacity = 2.\n\nqueue.enqueue(1);   // The producer thread enqueues 1 to the queue.\n\nqueue.dequeue();    // The consumer thread calls dequeue and returns 1 from the queue.\n\nqueue.dequeue();    // Since the queue is empty, the consumer thread is blocked.\n\nqueue.enqueue(0);   // The producer thread enqueues 0 to the queue. The consumer thread is unblocked and returns 0 from the queue.\n\nqueue.enqueue(2);   // The producer thread enqueues 2 to the queue.\n\nqueue.enqueue(3);   // The producer thread enqueues 3 to the queue.\n\nqueue.enqueue(4);   // The producer thread is blocked because the queue's capacity (2) is reached.\n\nqueue.dequeue();    // The consumer thread returns 2 from the queue. The producer thread is unblocked and enqueues 4 to the queue.\n\nqueue.size();       // 2 elements remaining in the queue. size() is always called at the end of each test case.",
      "Input:\n3\n4\n[\"BoundedBlockingQueue\",\"enqueue\",\"enqueue\",\"enqueue\",\"dequeue\",\"dequeue\",\"dequeue\",\"enqueue\"]\n[[3],[1],[0],[2],[],[],[],[3]]\nOutput:\n[1,0,2,1]\nExplanation:\nNumber of producer threads = 3\nNumber of consumer threads = 4\nBoundedBlockingQueue queue = new BoundedBlockingQueue(3);   // initialize the queue with capacity = 3.\n\nqueue.enqueue(1);   // Producer thread P1 enqueues 1 to the queue.\n\nqueue.enqueue(0);   // Producer thread P2 enqueues 0 to the queue.\n\nqueue.enqueue(2);   // Producer thread P3 enqueues 2 to the queue.\n\nqueue.dequeue();    // Consumer thread C1 calls dequeue.\n\nqueue.dequeue();    // Consumer thread C2 calls dequeue.\n\nqueue.dequeue();    // Consumer thread C3 calls dequeue.\n\nqueue.enqueue(3);   // One of the producer threads enqueues 3 to the queue.\n\nqueue.size();       // 1 element remaining in the queue.\n\nSince the number of threads for producer/consumer is greater than 1, we do not know how the threads will be scheduled in the operating system, even though the input seems to imply the ordering. Therefore, any of the output [1,0,2] or [1,2,0] or [0,1,2] or [0,2,1] or [2,0,1] or [2,1,0] will be accepted."
    ],
    "constraints": "`1 <= Number of Prdoucers <= 8`\n`1 <= Number of Consumers <= 8`\n`1 <= size <= 30`\n`0 <= element <= 20`\nThe number of calls to `enqueue` is greater than or equal to the number of calls to `dequeue`.\n\nAt most `40` calls will be made to `enque`, `deque`, and `size`."
  },
  {
    "id": "1189",
    "title": "Maximum Number of Balloons",
    "difficulty": "Easy",
    "explanation": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word \"balloon\" as possible.\n\nYou can use each character in `text` at most once. Return the maximum number of instances that can be formed.",
    "examples": [
      "Input: text = \"nlaebolko\"\nOutput: 1",
      "Input: text = \"loonbalxballpoon\"\nOutput: 2",
      "Input: text = \"leetcode\"\nOutput: 0"
    ],
    "constraints": "`1 <= text.length <= 10^4`\n`text` consists of lower case English letters only."
  },
  {
    "id": "1190",
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "difficulty": "Medium",
    "explanation": "You are given a string `s` that consists of lower case English letters and brackets. \nReverse the strings in each pair of matching parentheses, starting from the innermost one.\n\nYour result should not contain any brackets.",
    "examples": [
      "Input: s = \"(abcd)\"\nOutput: \"dcba\"",
      "Input: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation: The substring \"love\" is reversed first, then the whole string is reversed.",
      "Input: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.",
      "Input: s = \"a(bcdefghijkl(mno)p)q\"\nOutput: \"apmnolkjihgfedcbq\""
    ],
    "constraints": "`0 <= s.length <= 2000`\n`s` only contains lower case English characters and parentheses.\n\nIt's guaranteed that all parentheses are balanced."
  },
  {
    "id": "1191",
    "title": "K-Concatenation Maximum Sum",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.\n\nFor example, if `arr = [1, 2]` and `k = 3 `then the modified array will be `[1, 2, 1, 2, 1, 2]`.\n\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.\n\nAs the answer can be very large, return the answer modulo `109 + 7`.",
    "examples": [
      "Input: arr = [1,2], k = 3\nOutput: 9",
      "Input: arr = [1,-2,1], k = 5\nOutput: 2",
      "Input: arr = [-1,-2], k = 7\nOutput: 0"
    ],
    "constraints": "`1 <= arr.length <= 105`\n`1 <= k <= 105`\n`-104 <= arr[i] <= 104`"
  },
  {
    "id": "1192",
    "title": "Critical Connections in a Network",
    "difficulty": "Hard",
    "explanation": "There are `n` servers numbered from `0` to `n-1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [a, b]` represents a connection between servers `a` and `b`. Any server can reach any other server directly or indirectly through the network.\n\nA critical connection is a connection that, if removed, will make some server unable to reach some other server.\n\nReturn all critical connections in the network in any order.",
    "examples": [
      "Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\nOutput: [[1,3]]\nExplanation: [[3,1]] is also accepted."
    ],
    "constraints": "`1 <= n <= 10^5`\n`n-1 <= connections.length <= 10^5`\n`connections[i][0] != connections[i][1]`\nThere are no repeated connections."
  },
  {
    "id": "1193",
    "title": "Monthly Transactions I",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1194",
    "title": "Tournament Winners",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1195",
    "title": "Fizz Buzz Multithreaded",
    "difficulty": "Medium",
    "explanation": "Write a program that outputs the string representation of numbers from 1 to n, however:\nIf the number is divisible by 3, output \"fizz\".\n\nIf the number is divisible by 5, output \"buzz\".\n\nIf the number is divisible by both 3 and 5, output \"fizzbuzz\".\n\nFor example, for `n = 15`, we output: `1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz`.\n\nSuppose you are given the following code:\nclass FizzBuzz {\n  public FizzBuzz(int n) { ... }               // constructor\n  public void fizz(printFizz) { ... }          // only output \"fizz\"\n  public void buzz(printBuzz) { ... }          // only output \"buzz\"\n  public void fizzbuzz(printFizzBuzz) { ... }  // only output \"fizzbuzz\"\n  public void number(printNumber) { ... }      // only output the numbers\n}\nImplement a multithreaded version of `FizzBuzz` with four threads. The same instance of `FizzBuzz` will be passed to four different threads:\nThread A will call `fizz()` to check for divisibility of 3 and outputs `fizz`.\n\nThread B will call `buzz()` to check for divisibility of 5 and outputs `buzz`.\n\nThread C will call `fizzbuzz()` to check for divisibility of 3 and 5 and outputs `fizzbuzz`.\n\nThread D will call `number()` which should only output the numbers.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1196",
    "title": "How Many Apples Can You Put into the Basket",
    "difficulty": "Easy",
    "explanation": "You have some apples, where `arr[i]` is the weight of the `i`-th apple.  You also have a basket that can carry up to `5000` units of weight.\n\nReturn the maximum number of apples you can put in the basket.",
    "examples": [
      "Input: arr = [100,200,150,1000]\nOutput: 4\nExplanation: All 4 apples can be carried by the basket since their sum of weights is 1450.",
      "Input: arr = [900,950,800,1000,700,800]\nOutput: 5\nExplanation: The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them."
    ],
    "constraints": "`1 <= arr.length <= 10^3`\n`1 <= arr[i] <= 10^3`"
  },
  {
    "id": "1197",
    "title": "Minimum Knight Moves",
    "difficulty": "Medium",
    "explanation": "In an infinite chess board with coordinates from `-infinity` to `+infinity`, you have a knight at square `[0, 0]`.\n\nA knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.\n\nReturn the minimum number of steps needed to move the knight to the square `[x, y]`.  It is guaranteed the answer exists.",
    "examples": [
      "Input: x = 2, y = 1\nOutput: 1\nExplanation: [0, 0] → [2, 1]",
      "Input: x = 5, y = 5\nOutput: 4\nExplanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]"
    ],
    "constraints": "`|x| + |y| <= 300`"
  },
  {
    "id": "1198",
    "title": "Find Smallest Common Element in All Rows",
    "difficulty": "Medium",
    "explanation": "Given an `m x n` matrix `mat` where every row is sorted in strictly increasing order, return the smallest common element in all rows.\n\nIf there is no common element, return `-1`.",
    "examples": [
      "Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]\nOutput: 5",
      "Input: mat = [[1,2,3],[2,3,4],[2,3,5]]\nOutput: 2"
    ],
    "constraints": "`m == mat.length`\n`n == mat[i].length`\n`1 <= m, n <= 500`\n`1 <= mat[i][j] <= 104`\n`mat[i]` is sorted in strictly increasing order."
  },
  {
    "id": "1199",
    "title": "Minimum Time to Build Blocks",
    "difficulty": "Hard",
    "explanation": "You are given a list of blocks, where `blocks[i] = t` means that the `i`-th block needs `t` units of time to be built. A block can only be built by exactly one worker.\n\nA worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time.\n\nThe time cost of spliting one worker into two workers is given as an integer `split`. Note that if two workers split at the same time, they split in parallel so the cost would be `split`.\n\nOutput the minimum time needed to build all blocks.\nInitially, there is only one worker.",
    "examples": [
      "Input: blocks = [1], split = 1\nOutput: 1\nExplanation: We use 1 worker to build 1 block in 1 time unit.",
      "Input: blocks = [1,2], split = 5\nOutput: 7\nExplanation: We split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7.",
      "Input: blocks = [1,2,3], split = 1\nOutput: 4\nExplanation: Split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2.\n\nThen, use the two unassigned workers to build the first two blocks.\n\nThe cost is 1 + max(3, 1 + max(1, 2)) = 4."
    ],
    "constraints": "`1 <= blocks.length <= 1000`\n`1 <= blocks[i] <= 10^5`\n`1 <= split <= 100`"
  },
  {
    "id": "1200",
    "title": "Minimum Absolute Difference",
    "difficulty": "Easy",
    "explanation": "Given an array of distinct integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. \nReturn a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows\n`a, b` are from `arr`\n`a < b`\n`b - a` equals to the minimum absolute difference of any two elements in `arr`",
    "examples": [
      "Input: arr = [4,2,1,3]\nOutput: [[1,2],[2,3],[3,4]]\nExplanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.",
      "Input: arr = [1,3,6,10,15]\nOutput: [[1,3]]",
      "Input: arr = [3,8,-10,23,19,-4,-14,27]\nOutput: [[-14,-10],[19,23],[23,27]]"
    ],
    "constraints": "`2 <= arr.length <= 10^5`\n`-10^6 <= arr[i] <= 10^6`"
  },
  {
    "id": "1201",
    "title": "Ugly Number III",
    "difficulty": "Medium",
    "explanation": "Given four integers `n`, `a`, `b`, and `c`, return the `nth` ugly number.\n\nUgly numbers are positive integers that are divisible by `a`, `b`, or `c`.",
    "examples": [
      "Input: n = 3, a = 2, b = 3, c = 5\nOutput: 4\nExplanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.",
      "Input: n = 4, a = 2, b = 3, c = 4\nOutput: 6\nExplanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.",
      "Input: n = 5, a = 2, b = 11, c = 13\nOutput: 10\nExplanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.",
      "Input: n = 1000000000, a = 2, b = 217983653, c = 336916467\nOutput: 1999999984"
    ],
    "constraints": "`1 <= n, a, b, c <= 109`\n`1 <= a * b * c <= 1018`\nIt is guaranteed that the result will be in range `[1, 2 * 109]`."
  },
  {
    "id": "1202",
    "title": "Smallest String With Swaps",
    "difficulty": "Medium",
    "explanation": "You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.\n\nYou can swap the characters at any pair of indices in the given `pairs` any number of times.\n\nReturn the lexicographically smallest string that `s` can be changed to after using the swaps.",
    "examples": [
      "Input: s = \"dcab\", pairs = [[0,3],[1,2]]\nOutput: \"bacd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"",
      "Input: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\nOutput: \"abcd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"",
      "Input: s = \"cba\", pairs = [[0,1],[1,2]]\nOutput: \"abc\"\nExplaination: \nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\""
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`0 <= pairs.length <= 10^5`\n`0 <= pairs[i][0], pairs[i][1] < s.length`\n`s` only contains lower case English letters."
  },
  {
    "id": "1203",
    "title": "Sort Items by Groups Respecting Dependencies",
    "difficulty": "Hard",
    "explanation": "There are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`-th item belongs to and it's equal to `-1` if the `i`-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.\n\nReturn a sorted list of the items such that:\nThe items that belong to the same group are next to each other in the sorted list.\n\nThere are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`-th item in the sorted array (to the left of the `i`-th item).\n\nReturn any solution if there is more than one solution and return an empty list if there is no solution.",
    "examples": [
      "Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]\nOutput: [6,3,4,1,5,2,0,7]",
      "Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]\nOutput: []\nExplanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list."
    ],
    "constraints": "`1 <= m <= n <= 3 * 104`\n`group.length == beforeItems.length == n`\n`-1 <= group[i] <= m - 1`\n`0 <= beforeItems[i].length <= n - 1`\n`0 <= beforeItems[i][j] <= n - 1`\n`i != beforeItems[i][j]`\n`beforeItems[i] `does not contain duplicates elements."
  },
  {
    "id": "1204",
    "title": "Last Person to Fit in the Elevator",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1205",
    "title": "Monthly Transactions II",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1206",
    "title": "Design Skiplist",
    "difficulty": "Hard",
    "explanation": "Design a Skiplist without using any built-in libraries.\n\nA Skiplist is a data structure that takes O(log(n)) time to `add`, `erase` and `search`. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists are just simple linked lists.\n\nFor example: we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way:\nArtyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, `add` , `erase` and `search `can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).\n\nTo be specific, your design should include these functions:\n`bool search(int target)` : Return whether the `target` exists in the Skiplist or not.\n\n`void add(int num)`: Insert a value into the SkipList. \n`bool erase(int num)`: Remove a value in the Skiplist. If `num` does not exist in the Skiplist, do nothing and return false. If there exists multiple `num` values, removing any one of them is fine.\n\nSee more about Skiplist : https://en.wikipedia.org/wiki/Skip_list\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.\n\n\nExample:\nSkiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0);   // return false.\n\nskiplist.add(4);\nskiplist.search(1);   // return true.\n\nskiplist.erase(0);    // return false, 0 is not in skiplist.\n\nskiplist.erase(1);    // return true.\n\nskiplist.search(1);   // return false, 1 has already been erased.\n\n\nConstraints:\n`0 <= num, target <= 20000`\nAt most `50000` calls will be made to `search`, `add`, and `erase`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1207",
    "title": "Unique Number of Occurrences",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `arr`, write a function that returns `true` if and only if the number of occurrences of each value in the array is unique.",
    "examples": [
      "Input: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.",
      "Input: arr = [1,2]\nOutput: false",
      "Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true"
    ],
    "constraints": "`1 <= arr.length <= 1000`\n`-1000 <= arr[i] <= 1000`"
  },
  {
    "id": "1208",
    "title": "Get Equal Substrings Within Budget",
    "difficulty": "Medium",
    "explanation": "You are given two strings `s` and `t` of the same length. You want to change `s` to `t`. Changing the `i`-th character of `s` to `i`-th character of `t` costs `|s[i] - t[i]|` that is, the absolute difference between the ASCII values of the characters.\n\nYou are also given an integer `maxCost`.\n\nReturn the maximum length of a substring of `s` that can be changed to be the same as the corresponding substring of `t`with a cost less than or equal to `maxCost`.\n\nIf there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.",
    "examples": [
      "Input: s = \"abcd\", t = \"bcdf\", maxCost = 3\nOutput: 3\nExplanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3.",
      "Input: s = \"abcd\", t = \"cdef\", maxCost = 3\nOutput: 1\nExplanation: Each character in s costs 2 to change to charactor in `t, so the maximum length is 1.`",
      "Input: s = \"abcd\", t = \"acde\", maxCost = 0\nOutput: 1\nExplanation: You can't make any change, so the maximum length is 1."
    ],
    "constraints": "`1 <= s.length, t.length <= 10^5`\n`0 <= maxCost <= 10^6`\n`s` and `t` only contain lower case English letters."
  },
  {
    "id": "1209",
    "title": "Remove All Adjacent Duplicates in String II",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, a k duplicate removal consists of choosing `k` adjacent and equal letters from `s` and removing them causing the left and the right side of the deleted substring to concatenate together.\n\nWe repeatedly make `k` duplicate removals on `s` until we no longer can.\n\nReturn the final string after all such duplicate removals have been made.\n\nIt is guaranteed that the answer is unique.",
    "examples": [
      "Input: s = \"abcd\", k = 2\nOutput: \"abcd\"\nExplanation: There's nothing to delete.",
      "Input: s = \"deeedbbcccbdaa\", k = 3\nOutput: \"aa\"\nExplanation: \nFirst delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\"",
      "Input: s = \"pbbcggttciiippooaais\", k = 2\nOutput: \"ps\""
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`2 <= k <= 10^4`\n`s` only contains lower case English letters."
  },
  {
    "id": "1210",
    "title": "Minimum Moves to Reach Target with Rotations",
    "difficulty": "Hard",
    "explanation": "In an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.\n\nIn one move the snake can:\nMove one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n\nMove down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n\nRotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.\n\nRotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.\n\nReturn the minimum number of moves to reach the target.\n\nIf there is no way to reach the target, return `-1`.",
    "examples": [
      "Input: grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n               [0,0,0,0,1,1],\n               [0,0,1,0,1,0],\n               [0,1,1,0,0,0],\n               [0,1,1,0,0,0]]\nOutput: 11\nExplanation:\nOne possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].",
      "Input: grid = [[0,0,1,1,1,1],\n               [0,0,0,0,1,1],\n               [1,1,0,0,0,1],\n               [1,1,1,0,0,1],\n               [1,1,1,0,0,1],\n               [1,1,1,0,0,0]]\nOutput: 9"
    ],
    "constraints": "`2 <= n <= 100`\n`0 <= grid[i][j] <= 1`\nIt is guaranteed that the snake starts at empty cells."
  },
  {
    "id": "1211",
    "title": "Queries Quality and Percentage",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1212",
    "title": "Team Scores in Football Tournament",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1213",
    "title": "Intersection of Three Sorted Arrays",
    "difficulty": "Easy",
    "explanation": "Given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.",
    "examples": [
      "Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\nOutput: [1,5]\nExplanation: Only 1 and 5 appeared in the three arrays.",
      "Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]\nOutput: []"
    ],
    "constraints": "`1 <= arr1.length, arr2.length, arr3.length <= 1000`\n`1 <= arr1[i], arr2[i], arr3[i] <= 2000`"
  },
  {
    "id": "1214",
    "title": "Two Sum BSTs",
    "difficulty": "Medium",
    "explanation": "Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.",
    "examples": [
      "Input: root1 = [2,1,4], root2 = [1,0,3], target = 5\nOutput: true\nExplanation: 2 and 3 sum up to 5.",
      "Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18\nOutput: false"
    ],
    "constraints": "The number of nodes in each tree is in the range `[1, 5000]`.\n\n`-109 <= Node.val, target <= 109`"
  },
  {
    "id": "1215",
    "title": "Stepping Numbers",
    "difficulty": "Medium",
    "explanation": "A Stepping Number is an integer such that all of its adjacent digits have an absolute difference of exactly `1`. For example, `321` is a Stepping Number while `421` is not.\n\nGiven two integers `low` and `high`, find and return a sorted list of all the Stepping Numbers in the range `[low, high]` inclusive.",
    "examples": [
      "Input: low = 0, high = 21\nOutput: [0,1,2,3,4,5,6,7,8,9,10,12,21]"
    ],
    "constraints": "`0 <= low <= high <= 2 * 10^9`"
  },
  {
    "id": "1216",
    "title": "Valid Palindrome III",
    "difficulty": "Hard",
    "explanation": "Given a string `s` and an integer `k`, return `true` if `s` is a `k`-palindrome.\n\nA string is `k`-palindrome if it can be transformed into a palindrome by removing at most `k` characters from it.",
    "examples": [
      "Input: s = \"abcdeca\", k = 2\nOutput: true\nExplanation: Remove 'b' and 'e' characters.",
      "Input: s = \"abbababa\", k = 1\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consists of only lowercase English letters.\n\n`1 <= k <= s.length`"
  },
  {
    "id": "1217",
    "title": "Minimum Cost to Move Chips to The Same Position",
    "difficulty": "Easy",
    "explanation": "We have `n` chips, where the position of the `ith` chip is `position[i]`.\n\nWe need to move all the chips to the same position. In one step, we can change the position of the `ith` chip from `position[i]` to:\n`position[i] + 2` or `position[i] - 2` with `cost = 0`.\n\n`position[i] + 1` or `position[i] - 1` with `cost = 1`.\n\nReturn the minimum cost needed to move all the chips to the same position.",
    "examples": [
      "Input: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0.\n\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\n\nTotal cost is 1.",
      "Input: position = [2,2,2,3,3]\nOutput: 2\nExplanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.",
      "Input: position = [1,1000000000]\nOutput: 1"
    ],
    "constraints": "`1 <= position.length <= 100`\n`1 <= position[i] <= 10^9`"
  },
  {
    "id": "1218",
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\nA subsequence is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
      "Input: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].",
      "Input: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.",
      "Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1]."
    ],
    "constraints": "`1 <= arr.length <= 105`\n`-104 <= arr[i], difference <= 104`"
  },
  {
    "id": "1219",
    "title": "Path with Maximum Gold",
    "difficulty": "Medium",
    "explanation": "In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\nEvery time you are located in a cell you will collect all the gold in that cell.\n\nFrom your position, you can walk one step to the left, right, up, or down.\n\nYou can't visit the same cell more than once.\n\nNever visit a cell with `0` gold.\n\nYou can start and stop collecting gold from any position in the grid that has some gold.",
    "examples": [
      "Input: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.",
      "Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7."
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 15`\n`0 <= grid[i][j] <= 100`\nThere are at most 25 cells containing gold."
  },
  {
    "id": "1220",
    "title": "Count Vowels Permutation",
    "difficulty": "Hard",
    "explanation": "Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\nEach character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\nEach vowel `'a'` may only be followed by an `'e'`.\n\nEach vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n\nEach vowel `'i'` may not be followed by another `'i'`.\n\nEach vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n\nEach vowel `'u'` may only be followed by an `'a'.`\nSince the answer may be too large, return it modulo `10^9 + 7.`",
    "examples": [
      "Input: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".",
      "Input: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n\n\nExample 3: \nInput: n = 5\nOutput: 68"
    ],
    "constraints": "`1 <= n <= 2 * 10^4`"
  },
  {
    "id": "1221",
    "title": "Split a String in Balanced Strings",
    "difficulty": "Easy",
    "explanation": "Balanced strings are those that have an equal quantity of `'L'` and `'R'` characters.\n\nGiven a balanced string `s`, split it in the maximum amount of balanced strings.\n\nReturn the maximum amount of split balanced strings.",
    "examples": [
      "Input: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.",
      "Input: s = \"RLLLLRRRLR\"\nOutput: 3\nExplanation: s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'.",
      "Input: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".",
      "Input: s = \"RLRRRLLRLL\"\nOutput: 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", since each substring contains an equal number of 'L' and 'R'"
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s[i]` is either `'L'` or `'R'`.\n\n`s` is a balanced string."
  },
  {
    "id": "1222",
    "title": "Queens That Can Attack the King",
    "difficulty": "Medium",
    "explanation": "On an 8x8 chessboard, there can be multiple Black Queens and one White King.\n\nGiven an array of integer coordinates `queens` that represents the positions of the Black Queens, and a pair of coordinates `king` that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.",
    "examples": [
      "Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\nOutput: [[0,1],[1,0],[3,3]]\nExplanation:  \nThe queen at [0,1] can attack the king cause they're in the same row. \nThe queen at [1,0] can attack the king cause they're in the same column. \nThe queen at [3,3] can attack the king cause they're in the same diagnal. \nThe queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. \nThe queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. \nThe queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.",
      "Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\nOutput: [[2,2],[3,4],[4,4]]",
      "Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]\nOutput: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]"
    ],
    "constraints": "`1 <= queens.length <= 63`\n`queens[i].length == 2`\n`0 <= queens[i][j] < 8`\n`king.length == 2`\n`0 <= king[0], king[1] < 8`\nAt most one piece is allowed in a cell."
  },
  {
    "id": "1223",
    "title": "Dice Roll Simulation",
    "difficulty": "Hard",
    "explanation": "A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (1-indexed) consecutive times. \nGiven an array of integers `rollMax` and an integer `n`, return the number of distinct sequences that can be obtained with exact `n` rolls.\n\nTwo sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo `10^9 + 7`.",
    "examples": [
      "Input: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.",
      "Input: n = 2, rollMax = [1,1,1,1,1,1]\nOutput: 30",
      "Input: n = 3, rollMax = [1,1,1,2,2,3]\nOutput: 181"
    ],
    "constraints": "`1 <= n <= 5000`\n`rollMax.length == 6`\n`1 <= rollMax[i] <= 15`"
  },
  {
    "id": "1224",
    "title": "Maximum Equal Frequency",
    "difficulty": "Hard",
    "explanation": "Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.\n\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).",
    "examples": [
      "Input: nums = [2,2,1,1,5,3,3,5]\nOutput: 7\nExplanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.",
      "Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\nOutput: 13",
      "Input: nums = [1,1,1,2,2,2]\nOutput: 5",
      "Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]\nOutput: 8"
    ],
    "constraints": "`2 <= nums.length <= 10^5`\n`1 <= nums[i] <= 10^5`"
  },
  {
    "id": "1225",
    "title": "Report Contiguous Dates",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1226",
    "title": "The Dining Philosophers",
    "difficulty": "Medium",
    "explanation": "Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.\n\nEach philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.\n\nEating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.\n\nDesign a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.\n\nThe problem statement and the image above are taken from wikipedia.org\nThe philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function `void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)` where:\n`philosopher` is the id of the philosopher who wants to eat.\n\n`pickLeftFork` and `pickRightFork` are functions you can call to pick the corresponding forks of that philosopher.\n\n`eat` is a function you can call to let the philosopher eat once he has picked both forks.\n\n`putLeftFork` and `putRightFork` are functions you can call to put down the corresponding forks of that philosopher.\n\nThe philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).\n\nFive threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.",
    "examples": [
      "Input: n = 1\nOutput: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]\nExplanation:\nn is the number of times each philosopher will call the function.\n\nThe output array describes the calls you made to the functions controlling the forks and the eat function, its format is:\noutput[i] = [a, b, c] (three integers)\n- a is the id of a philosopher.\n\n- b specifies the fork: {1 : left, 2 : right}.\n\n- c specifies the operation: {1 : pick, 2 : put, 3 : eat}."
    ],
    "constraints": "`1 <= n <= 60`"
  },
  {
    "id": "1227",
    "title": "Airplane Seat Assignment Probability",
    "difficulty": "Medium",
    "explanation": "n` passengers board an airplane with exactly n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:\nTake their own seat if it is still available, \nPick other seats randomly when they find their seat occupied \nWhat is the probability that the n-th person can get his own seat?",
    "examples": [
      "Input: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.",
      "Input: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."
    ],
    "constraints": "`1 <= n <= 10^5`"
  },
  {
    "id": "1228",
    "title": "Missing Number In Arithmetic Progression",
    "difficulty": "Easy",
    "explanation": "In some array `arr`, the values were in arithmetic progression: the values `arr[i+1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.\n\nThen, a value from `arr` was removed that was not the first or last value in the array.\n\nReturn the removed value.",
    "examples": [
      "Input: arr = [5,7,11,13]\nOutput: 9\nExplanation: The previous array was [5,7,9,11,13].",
      "Input: arr = [15,13,12]\nOutput: 14\nExplanation: The previous array was [15,14,13,12]."
    ],
    "constraints": "`3 <= arr.length <= 1000`\n`0 <= arr[i] <= 10^5`"
  },
  {
    "id": "1229",
    "title": "Meeting Scheduler",
    "difficulty": "Medium",
    "explanation": "Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`.\n\nIf there is no common time slot that satisfies the requirements, return an empty array.\n\nThe format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`.\n\nIt is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.",
    "examples": [
      "Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8\nOutput: [60,68]",
      "Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12\nOutput: []"
    ],
    "constraints": "`1 <= slots1.length, slots2.length <= 104`\n`slots1[i].length, slots2[i].length == 2`\n`slots1[i][0] < slots1[i][1]`\n`slots2[i][0] < slots2[i][1]`\n`0 <= slots1[i][j], slots2[i][j] <= 109`\n`1 <= duration <= 106`"
  },
  {
    "id": "1230",
    "title": "Toss Strange Coins",
    "difficulty": "Medium",
    "explanation": "You have some coins.  The `i`-th coin has a probability `prob[i]` of facing heads when tossed.\n\nReturn the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.",
    "examples": [
      "Input: prob = [0.4], target = 1\nOutput: 0.40000",
      "Input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0\nOutput: 0.03125"
    ],
    "constraints": "`1 <= prob.length <= 1000`\n`0 <= prob[i] <= 1`\n`0 <= target ``<= prob.length`\nAnswers will be accepted as correct if they are within `10^-5` of the correct answer."
  },
  {
    "id": "1231",
    "title": "Divide Chocolate",
    "difficulty": "Hard",
    "explanation": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`.\n\nYou want to share the chocolate with your `K` friends so you start cutting the chocolate bar into `K+1` pieces using `K` cuts, each piece consists of some consecutive chunks.\n\nBeing generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.\n\nFind the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.",
    "examples": [
      "Input: sweetness = [1,2,3,4,5,6,7,8,9], K = 5\nOutput: 6\nExplanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]",
      "Input: sweetness = [5,6,7,8,9,1,2,3,4], K = 8\nOutput: 1\nExplanation: There is only one way to cut the bar into 9 pieces.",
      "Input: sweetness = [1,2,2,1,2,2,1,2,2], K = 2\nOutput: 5\nExplanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]"
    ],
    "constraints": "`0 <= K < sweetness.length <= 10^4`\n`1 <= sweetness[i] <= 10^5`"
  },
  {
    "id": "1232",
    "title": "Check If It Is a Straight Line",
    "difficulty": "Easy",
    "explanation": "You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.",
    "examples": [
      "Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nOutput: true",
      "Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\nOutput: false"
    ],
    "constraints": "`2 <= coordinates.length <= 1000`\n`coordinates[i].length == 2`\n`-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`\n`coordinates` contains no duplicate point."
  },
  {
    "id": "1233",
    "title": "Remove Sub-Folders from the Filesystem",
    "difficulty": "Medium",
    "explanation": "Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.\n\nIf a `folder[i]` is located within another `folder[j]`, it is called a sub-folder of it.\n\nThe format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, `/leetcode` and `/leetcode/problems` are valid paths while an empty string and `/` are not.",
    "examples": [
      "Input: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]\nOutput: [\"/a\",\"/c/d\",\"/c/f\"]\nExplanation: Folders \"/a/b/\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem.",
      "Input: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]\nOutput: [\"/a\"]\nExplanation: Folders \"/a/b/c\" and \"/a/b/d/\" will be removed because they are subfolders of \"/a\".",
      "Input: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\nOutput: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]"
    ],
    "constraints": "`1 <= folder.length <= 4 * 10^4`\n`2 <= folder[i].length <= 100`\n`folder[i]` contains only lowercase letters and '/'\n`folder[i]` always starts with character '/'\nEach folder name is unique."
  },
  {
    "id": "1234",
    "title": "Replace the Substring for Balanced String",
    "difficulty": "Medium",
    "explanation": "You are given a string containing only 4 kinds of characters `'Q',` `'W', 'E'` and `'R'`.\n\nA string is said to be balanced if each of its characters appears `n/4` times where `n` is the length of the string.\n\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make the original string `s` balanced.\n\nReturn 0 if the string is already balanced.",
    "examples": [
      "Input: s = \"QWER\"\nOutput: 0\nExplanation: s is already balanced.",
      "Input: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.",
      "Input: s = \"QQQW\"\nOutput: 2\nExplanation: We can replace the first \"QQ\" to \"ER\".",
      "Input: s = \"QQQQ\"\nOutput: 3\nExplanation: We can replace the last 3 'Q' to make s = \"QWER\"."
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s.length` is a multiple of `4`\n`s `contains only `'Q'`, `'W'`, `'E'` and `'R'`."
  },
  {
    "id": "1235",
    "title": "Maximum Profit in Job Scheduling",
    "difficulty": "Hard",
    "explanation": "We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.\n\nYou're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\n\nIf you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.",
    "examples": [
      "Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.",
      "Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.",
      "Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6"
    ],
    "constraints": "`1 <= startTime.length == endTime.length == profit.length <= 5 * 104`\n`1 <= startTime[i] < endTime[i] <= 109`\n`1 <= profit[i] <= 104`"
  },
  {
    "id": "1236",
    "title": "Web Crawler",
    "difficulty": "Medium",
    "explanation": "Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the same hostname as `startUrl`. \nReturn all urls obtained by your web crawler in any order.\n\nYour crawler should:\nStart from the page: `startUrl`\nCall `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.\n\nDo not crawl the same link twice.\n\nExplore only the links that are under the same hostname as `startUrl`.\n\nAs shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.\n\nThe `HtmlParser` interface is defined as such: \ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given url.\n\n  public List<String> getUrls(String url);\n}\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.",
    "examples": [
      "Input:\nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\",\n  \"http://news.yahoo.com/us\"\n]\nedges = [[2,0],[2,1],[3,2],[3,1],[0,4]]\nstartUrl = \"http://news.yahoo.com/news/topics/\"\nOutput: [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.yahoo.com/us\"\n]",
      "Input: \nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\"\n]\nedges = [[0,2],[2,1],[3,2],[3,1],[3,0]]\nstartUrl = \"http://news.google.com\"\nOutput: [\"http://news.google.com\"]\nExplanation: The startUrl links to all other pages that do not share the same hostname."
    ],
    "constraints": "`1 <= urls.length <= 1000`\n`1 <= urls[i].length <= 300`\n`startUrl` is one of the `urls`.\n\nHostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits  from '0' to '9' and the hyphen-minus character ('-').\n\nThe hostname may not start or end with the hyphen-minus character ('-'). \nSee:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames\nYou may assume there're no duplicates in url library."
  },
  {
    "id": "1237",
    "title": "Find Positive Integer Solution for a Given Equation",
    "difficulty": "Medium",
    "explanation": "Given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. You may return the pairs in any order.\n\nWhile the exact formula is hidden, the function is monotonically increasing, i.e.:\n`f(x, y) < f(x + 1, y)`\n`f(x, y) < f(x, y + 1)`\nThe function interface is defined like this:\ninterface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n\n  int f(int x, int y);\n};\nWe will judge your solution as follows:\nThe judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an answer key of all valid pairs for a specific `z`.\n\nThe judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.\n\nThe judge will call your `findSolution` and compare your results with the answer key.\n\nIf your results match the answer key, your solution will be `Accepted`.",
    "examples": [
      "Input: function_id = 1, z = 5\nOutput: [[1,4],[2,3],[3,2],[4,1]]\nExplanation: The hidden formula for function_id = 1 is f(x, y) = x + y.\n\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -> f(1, 4) = 1 + 4 = 5.\n\nx=2, y=3 -> f(2, 3) = 2 + 3 = 5.\n\nx=3, y=2 -> f(3, 2) = 3 + 2 = 5.\n\nx=4, y=1 -> f(4, 1) = 4 + 1 = 5.",
      "Input: function_id = 2, z = 5\nOutput: [[1,5],[5,1]]\nExplanation: The hidden formula for function_id = 2 is f(x, y) = x * y.\n\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -> f(1, 5) = 1 * 5 = 5.\n\nx=5, y=1 -> f(5, 1) = 5 * 1 = 5."
    ],
    "constraints": "`1 <= function_id <= 9`\n`1 <= z <= 100`\nIt is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`.\n\nIt is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`."
  },
  {
    "id": "1238",
    "title": "Circular Permutation in Binary Representation",
    "difficulty": "Medium",
    "explanation": "Given 2 integers `n` and `start`. Your task is return any permutation `p` of `(0,1,2.....,2^n -1) `such that :\n`p[0] = start`\n`p[i]` and `p[i+1]` differ by only one bit in their binary representation.\n\n`p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.",
    "examples": [
      "Input: n = 2, start = 3\nOutput: [3,2,0,1]\nExplanation: The binary representation of the permutation is (11,10,00,01). \nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]",
      "Input: n = 3, start = 2\nOutput: [2,6,7,5,4,0,1,3]\nExplanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011)."
    ],
    "constraints": "`1 <= n <= 16`\n`0 <= start < 2 ^ n`"
  },
  {
    "id": "1239",
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "difficulty": "Medium",
    "explanation": "Given an array of strings `arr`. String `s` is a concatenation of a sub-sequence of `arr` which have unique characters.\n\nReturn the maximum possible length of `s`.",
    "examples": [
      "Input: arr = [\"un\",\"iq\",\"ue\"]\nOutput: 4\nExplanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".\n\nMaximum length is 4.",
      "Input: arr = [\"cha\",\"r\",\"act\",\"ers\"]\nOutput: 6\nExplanation: Possible solutions are \"chaers\" and \"acters\".",
      "Input: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\nOutput: 26"
    ],
    "constraints": "`1 <= arr.length <= 16`\n`1 <= arr[i].length <= 26`\n`arr[i]` contains only lower case English letters."
  },
  {
    "id": "1240",
    "title": "Tiling a Rectangle with the Fewest Squares",
    "difficulty": "Hard",
    "explanation": "Given a rectangle of size `n` x `m`, find the minimum number of integer-sided squares that tile the rectangle.",
    "examples": [
      "Input: n = 2, m = 3\nOutput: 3\nExplanation: `3` squares are necessary to cover the rectangle.\n\n`2` (squares of `1x1`)\n`1` (square of `2x2`)",
      "Input: n = 5, m = 8\nOutput: 5",
      "Input: n = 11, m = 13\nOutput: 6"
    ],
    "constraints": "`1 <= n <= 13`\n`1 <= m <= 13`"
  },
  {
    "id": "1241",
    "title": "Number of Comments per Post",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1242",
    "title": "Web Crawler Multithreaded",
    "difficulty": "Medium",
    "explanation": "Given a url `startUrl` and an interface `HtmlParser`, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as `startUrl`. \nReturn all urls obtained by your web crawler in any order.\n\nYour crawler should:\nStart from the page: `startUrl`\nCall `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.\n\nDo not crawl the same link twice.\n\nExplore only the links that are under the same hostname as `startUrl`.\n\nAs shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.\n\nThe `HtmlParser` interface is defined as such: \ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given url.\n\n  // This is a blocking call, that means it will do HTTP request and return when this request is finished.\n\n  public List<String> getUrls(String url);\n}\nNote that `getUrls(String url)` simulates performing a HTTP request. You can treat it as a blocking function call which waits for a HTTP request to finish. It is guaranteed that `getUrls(String url)` will return the urls within 15ms.  Single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better?\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.\n\nFollow up:\nAssume we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software onto each node. The software can know about all the nodes. We have to minimize communication between machines and make sure each node does equal amount of work. How would your web crawler design change?\nWhat if one node fails or does not work?\nHow do you know when the crawler is done?",
    "examples": [
      "Input:\nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\",\n  \"http://news.yahoo.com/us\"\n]\nedges = [[2,0],[2,1],[3,2],[3,1],[0,4]]\nstartUrl = \"http://news.yahoo.com/news/topics/\"\nOutput: [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.yahoo.com/us\"\n]",
      "Input: \nurls = [\n  \"http://news.yahoo.com\",\n  \"http://news.yahoo.com/news\",\n  \"http://news.yahoo.com/news/topics/\",\n  \"http://news.google.com\"\n]\nedges = [[0,2],[2,1],[3,2],[3,1],[3,0]]\nstartUrl = \"http://news.google.com\"\nOutput: [\"http://news.google.com\"]\nExplanation: The startUrl links to all other pages that do not share the same hostname."
    ],
    "constraints": "`1 <= urls.length <= 1000`\n`1 <= urls[i].length <= 300`\n`startUrl` is one of the `urls`.\n\nHostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').\n\nThe hostname may not start or end with the hyphen-minus character ('-'). \nSee:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames\nYou may assume there're no duplicates in url library."
  },
  {
    "id": "1243",
    "title": "Array Transformation",
    "difficulty": "Easy",
    "explanation": "Given an initial array `arr`, every day you produce a new array using the array of the previous day.\n\nOn the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`:\nIf an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.\n\nIf an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.\n\nThe first and last elements never change.\n\nAfter some days, the array does not change. Return that final array.",
    "examples": [
      "Input: arr = [6,2,3,4]\nOutput: [6,3,3,4]\nExplanation: \nOn the first day, the array is changed from [6,2,3,4] to [6,3,3,4].\n\nNo more operations can be done to this array.",
      "Input: arr = [1,6,3,4,3,5]\nOutput: [1,4,4,4,4,5]\nExplanation: \nOn the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].\n\nOn the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].\n\nNo more operations can be done to this array."
    ],
    "constraints": "`3 <= arr.length <= 100`\n`1 <= arr[i] <= 100`"
  },
  {
    "id": "1244",
    "title": "Design A Leaderboard",
    "difficulty": "Medium",
    "explanation": "Design a Leaderboard class, which has 3 functions:\n`addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`.\n\n`top(K)`: Return the score sum of the top `K` players.\n\n`reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.\n\nInitially, the leaderboard is empty.",
    "examples": [
      "Input: \n[\"Leaderboard\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"addScore\",\"top\",\"reset\",\"reset\",\"addScore\",\"top\"]\n[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]\nOutput: \n[null,null,null,null,null,null,73,null,null,null,141]\nExplanation: \nLeaderboard leaderboard = new Leaderboard ();\nleaderboard.addScore(1,73);   // leaderboard = [[1,73]];\nleaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];\nleaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];\nleaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];\nleaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];\nleaderboard.top(1);           // returns 73;\nleaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];\nleaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];\nleaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];\nleaderboard.top(3);           // returns 141 = 51 + 51 + 39;"
    ],
    "constraints": "`1 <= playerId, K <= 10000`\nIt's guaranteed that `K` is less than or equal to the current number of players.\n\n`1 <= score <= 100`\nThere will be at most `1000` function calls."
  },
  {
    "id": "1245",
    "title": "Tree Diameter",
    "difficulty": "Medium",
    "explanation": "Given an undirected tree, return its diameter: the number of edges in a longest path in that tree.\n\nThe tree is given as an array of `edges` where `edges[i] = [u, v]` is a bidirectional edge between nodes `u` and `v`.  Each node has labels in the set `{0, 1, ..., edges.length}`.",
    "examples": [
      "Input: edges = [[0,1],[0,2]]\nOutput: 2\nExplanation: \nA longest path of the tree is the path 1 - 0 - 2.",
      "Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]\nOutput: 4\nExplanation: \nA longest path of the tree is the path 3 - 2 - 1 - 4 - 5."
    ],
    "constraints": "`0 <= edges.length < 10^4`\n`edges[i][0] != edges[i][1]`\n`0 <= edges[i][j] <= edges.length`\nThe given edges form an undirected tree."
  },
  {
    "id": "1246",
    "title": "Palindrome Removal",
    "difficulty": "Hard",
    "explanation": "Given an integer array `arr`, in one move you can select a palindromic subarray `arr[i], arr[i+1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\n\nReturn the minimum number of moves needed to remove all numbers from the array.",
    "examples": [
      "Input: arr = [1,2]\nOutput: 2",
      "Input: arr = [1,3,4,1,5]\nOutput: 3\nExplanation: Remove [4] then remove [1,3,1] then remove [5]."
    ],
    "constraints": "`1 <= arr.length <= 100`\n`1 <= arr[i] <= 20`"
  },
  {
    "id": "1247",
    "title": "Minimum Swaps to Make Strings Equal",
    "difficulty": "Medium",
    "explanation": "You are given two strings `s1` and `s2` of equal length consisting of letters `\"x\"` and `\"y\"` only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap `s1[i]` and `s2[j]`.\n\nReturn the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.",
    "examples": [
      "Input: s1 = \"xx\", s2 = \"yy\"\nOutput: 1\nExplanation: \nSwap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".\n\n\nExample 2: \nInput: s1 = \"xy\", s2 = \"yx\"\nOutput: 2\nExplanation: \nSwap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\n\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\n\nNote that you can't swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.",
      "Input: s1 = \"xx\", s2 = \"xy\"\nOutput: -1",
      "Input: s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"\nOutput: 4"
    ],
    "constraints": "`1 <= s1.length, s2.length <= 1000`\n`s1, s2` only contain `'x'` or `'y'`."
  },
  {
    "id": "1248",
    "title": "Count Number of Nice Subarrays",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and an integer `k`. A continuous subarray is called nice if there are `k` odd numbers on it.\n\nReturn the number of nice sub-arrays.",
    "examples": [
      "Input: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].",
      "Input: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no odd numbers in the array.",
      "Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16"
    ],
    "constraints": "`1 <= nums.length <= 50000`\n`1 <= nums[i] <= 10^5`\n`1 <= k <= nums.length`"
  },
  {
    "id": "1249",
    "title": "Minimum Remove to Make Valid Parentheses",
    "difficulty": "Medium",
    "explanation": "Given a string s of `'('` , `')'` and lowercase English characters. \nYour task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting parentheses string is valid and return any valid string.\n\nFormally, a parentheses string is valid if and only if:\nIt is the empty string, contains only lowercase characters, or\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\nIt can be written as `(A)`, where `A` is a valid string.",
    "examples": [
      "Input: s = \"lee(t(c)o)de)\"\nOutput: \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.",
      "Input: s = \"a)b(c)d\"\nOutput: \"ab(c)d\"",
      "Input: s = \"))((\"\nOutput: \"\"\nExplanation: An empty string is also valid.",
      "Input: s = \"(a(b(c)d)\"\nOutput: \"a(b(c)d)\""
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s[i]` is one of  `'('` , `')'` and lowercase English letters`.`"
  },
  {
    "id": "1250",
    "title": "Check If It Is a Good Array",
    "difficulty": "Hard",
    "explanation": "Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of `1` from the array by any possible subset and multiplicand.\n\nReturn `True` if the array is good otherwise return `False`.",
    "examples": [
      "Input: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n\n5*3 + 7*(-2) = 1",
      "Input: nums = [29,6,10]\nOutput: true\nExplanation: Pick numbers 29, 6 and 10.\n\n29*1 + 6*(-3) + 10*(-1) = 1",
      "Input: nums = [3,6]\nOutput: false"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`1 <= nums[i] <= 10^9`"
  },
  {
    "id": "1251",
    "title": "Average Selling Price",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1252",
    "title": "Cells with Odd Values in a Matrix",
    "difficulty": "Easy",
    "explanation": "There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a 0-indexed location to perform some increment operations on the matrix.\n\nFor each location `indices[i]`, do both of the following:\nIncrement all the cells on row `ri`.\n\nIncrement all the cells on column `ci`.\n\nGiven `m`, `n`, and `indices`, return the number of odd-valued cells in the matrix after applying the increment to all locations in `indices`.",
    "examples": [
      "Input: m = 2, n = 3, indices = [[0,1],[1,1]]\nOutput: 6\nExplanation: Initial matrix = [[0,0,0],[0,0,0]].\n\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\n\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.",
      "Input: m = 2, n = 2, indices = [[1,1],[0,0]]\nOutput: 0\nExplanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix."
    ],
    "constraints": "`1 <= m, n <= 50`\n`1 <= indices.length <= 100`\n`0 <= ri < m`\n`0 <= ci < n`\nFollow up: Could you solve this in `O(n + m + indices.length)` time with only `O(n + m)` extra space?"
  },
  {
    "id": "1253",
    "title": "Reconstruct a 2-Row Binary Matrix",
    "difficulty": "Medium",
    "explanation": "Given the following details of a matrix with `n` columns and `2` rows :\nThe matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.\n\nThe sum of elements of the 0-th(upper) row is given as `upper`.\n\nThe sum of elements of the 1-st(lower) row is given as `lower`.\n\nThe sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.\n\nYour task is to reconstruct the matrix with `upper`, `lower` and `colsum`.\n\nReturn it as a 2-D integer array.\n\nIf there are more than one valid solution, any of them will be accepted.\n\nIf no valid solution exists, return an empty 2-D array.",
    "examples": [
      "Input: upper = 2, lower = 1, colsum = [1,1,1]\nOutput: [[1,1,0],[0,0,1]]\nExplanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.",
      "Input: upper = 2, lower = 3, colsum = [2,2,1,1]\nOutput: []",
      "Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\nOutput: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]"
    ],
    "constraints": "`1 <= colsum.length <= 10^5`\n`0 <= upper, lower <= colsum.length`\n`0 <= colsum[i] <= 2`"
  },
  {
    "id": "1254",
    "title": "Number of Closed Islands",
    "difficulty": "Medium",
    "explanation": "Given a 2D `grid` consists of `0s` (land) and `1s` (water).  An island is a maximal 4-directionally connected group of `0s` and a closed island is an island totally (all left, top, right, bottom) surrounded by `1s.`\nReturn the number of closed islands.",
    "examples": [
      "Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\nOutput: 2\nExplanation: \nIslands in gray are closed because they are completely surrounded by water (group of 1s).",
      "Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\nOutput: 1",
      "Input: grid = [[1,1,1,1,1,1,1],\n               [1,0,0,0,0,0,1],\n               [1,0,1,1,1,0,1],\n               [1,0,1,0,1,0,1],\n               [1,0,1,1,1,0,1],\n               [1,0,0,0,0,0,1],\n               [1,1,1,1,1,1,1]]\nOutput: 2"
    ],
    "constraints": "`1 <= grid.length, grid[0].length <= 100`\n`0 <= grid[i][j] <=1`"
  },
  {
    "id": "1255",
    "title": "Maximum Score Words Formed by Letters",
    "difficulty": "Hard",
    "explanation": "Given a list of `words`, list of  single `letters` (might be repeating) and `score` of every character.\n\nReturn the maximum score of any valid set of words formed by using the given letters (`words[i]` cannot be used two or more times).\n\nIt is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.",
    "examples": [
      "Input: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\nOutput: 23\nExplanation:\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\n\nWords \"dad\" and \"dog\" only get a score of 21.",
      "Input: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\nOutput: 27\nExplanation:\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\n\nWord \"xxxz\" only get a score of 25.",
      "Input: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\nOutput: 0\nExplanation:\nLetter \"e\" can only be used once."
    ],
    "constraints": "`1 <= words.length <= 14`\n`1 <= words[i].length <= 15`\n`1 <= letters.length <= 100`\n`letters[i].length == 1`\n`score.length == 26`\n`0 <= score[i] <= 10`\n`words[i]`, `letters[i]` contains only lower case English letters."
  },
  {
    "id": "1256",
    "title": "Encode Number",
    "difficulty": "Medium",
    "explanation": "Given a non-negative integer `num`, Return its encoding string.\n\nThe encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:",
    "examples": [
      "Input: num = 23\nOutput: \"1000\"",
      "Input: num = 107\nOutput: \"101100\""
    ],
    "constraints": "`0 <= num <= 10^9`"
  },
  {
    "id": "1257",
    "title": "Smallest Common Region",
    "difficulty": "Medium",
    "explanation": "You are given some lists of `regions` where the first region of each list includes all other regions in that list.\n\nNaturally, if a region `X` contains another region `Y` then `X` is bigger than `Y`. Also by definition a region X contains itself.\n\nGiven two regions `region1`, `region2`, find out the smallest region that contains both of them.\n\nIf you are given regions `r1`, `r2` and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`.\n\nIt's guaranteed the smallest region exists.",
    "examples": [
      "Input:\nregions = [[\"Earth\",\"North America\",\"South America\"],\n[\"North America\",\"United States\",\"Canada\"],\n[\"United States\",\"New York\",\"Boston\"],\n[\"Canada\",\"Ontario\",\"Quebec\"],\n[\"South America\",\"Brazil\"]],\nregion1 = \"Quebec\",\nregion2 = \"New York\"\nOutput: \"North America\""
    ],
    "constraints": "`2 <= regions.length <= 10^4`\n`region1 != region2`\nAll strings consist of English letters and spaces with at most 20 letters."
  },
  {
    "id": "1258",
    "title": "Synonymous Sentences",
    "difficulty": "Medium",
    "explanation": "Given a list of pairs of equivalent words `synonyms` and a sentence `text`, Return all possible synonymous sentences sorted lexicographically.",
    "examples": [
      "Input:\nsynonyms = [[\"happy\",\"joy\"],[\"sad\",\"sorrow\"],[\"joy\",\"cheerful\"]],\ntext = \"I am happy today but was sad yesterday\"\nOutput:\n[\"I am cheerful today but was sad yesterday\",\n\"I am cheerful today but was sorrow yesterday\",\n\"I am happy today but was sad yesterday\",\n\"I am happy today but was sorrow yesterday\",\n\"I am joy today but was sad yesterday\",\n\"I am joy today but was sorrow yesterday\"]",
      "Input: synonyms = [[\"happy\",\"joy\"],[\"cheerful\",\"glad\"]], text = \"I am happy today but was sad yesterday\"\nOutput: [\"I am happy today but was sad yesterday\",\"I am joy today but was sad yesterday\"]",
      "Input: synonyms = [[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\"]], text = \"a c e\"\nOutput: [\"a c e\",\"a c f\",\"a d e\",\"a d f\",\"b c e\",\"b c f\",\"b d e\",\"b d f\"]",
      "Input: synonyms = [[\"a\",\"QrbCl\"]], text = \"d QrbCl ya ya NjZQ\"\nOutput: [\"d QrbCl ya ya NjZQ\",\"d a ya ya NjZQ\"]"
    ],
    "constraints": "`0 <= synonyms.length <= 10`\n`synonyms[i].length == 2`\n`synonyms[i][0] != synonyms[i][1]`\nAll words consist of at most `10` English letters only.\n\n`text` is a single space separated sentence of at most `10` words."
  },
  {
    "id": "1259",
    "title": "Handshakes That Don't Cross",
    "difficulty": "Hard",
    "explanation": "You are given an even number of people `num_people` that stand around a circle and each person shakes hands with someone else, so that there are `num_people / 2` handshakes total.\n\nReturn the number of ways these handshakes could occur such that none of the handshakes cross.\n\nSince this number could be very big, return the answer mod `10^9 + 7`",
    "examples": [
      "Input: num_people = 2\nOutput: 1",
      "Input: num_people = 4\nOutput: 2\nExplanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].",
      "Input: num_people = 6\nOutput: 5",
      "Input: num_people = 8\nOutput: 14"
    ],
    "constraints": "`2 <= num_people <= 1000`\n`num_people % 2 == 0`"
  },
  {
    "id": "1260",
    "title": "Shift 2D Grid",
    "difficulty": "Easy",
    "explanation": "Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times.\n\nIn one shift operation:\nElement at `grid[i][j]` moves to `grid[i][j + 1]`.\n\nElement at `grid[i][n - 1]` moves to `grid[i + 1][0]`.\n\nElement at `grid[m - 1][n - 1]` moves to `grid[0][0]`.\n\nReturn the 2D grid after applying shift operation `k` times.",
    "examples": [
      "Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[9,1,2],[3,4,5],[6,7,8]]",
      "Input: `grid` = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\nOutput: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
      "Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 9\nOutput: [[1,2,3],[4,5,6],[7,8,9]]"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m <= 50`\n`1 <= n <= 50`\n`-1000 <= grid[i][j] <= 1000`\n`0 <= k <= 100`"
  },
  {
    "id": "1261",
    "title": "Find Elements in a Contaminated Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree with the following rules:\n`root.val == 0`\nIf `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`\nIf `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`\nNow the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.\n\nYou need to first recover the binary tree and then implement the `FindElements` class:\n`FindElements(TreeNode* root)` Initializes the object with a contamined binary tree, you need to recover it first.\n\n`bool find(int target)` Return if the `target` value exists in the recovered binary tree.",
    "examples": [
      "Input\n[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]\nOutput\n[null,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True",
      "Input\n[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]\nOutput\n[null,true,true,false]\nExplanation\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False",
      "Input\n[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\nOutput\n[null,true,false,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True"
    ],
    "constraints": "`TreeNode.val == -1`\nThe height of the binary tree is less than or equal to `20`\nThe total number of nodes is between `[1, 10^4]`\nTotal calls of `find()` is between `[1, 10^4]`\n`0 <= target <= 10^6`"
  },
  {
    "id": "1262",
    "title": "Greatest Sum Divisible by Three",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.",
    "examples": [
      "Input: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).",
      "Input: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.",
      "Input: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3)."
    ],
    "constraints": "`1 <= nums.length <= 4 * 10^4`\n`1 <= nums[i] <= 10^4`"
  },
  {
    "id": "1263",
    "title": "Minimum Moves to Move a Box to Their Target Location",
    "difficulty": "Hard",
    "explanation": "Storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\n\nThe game is represented by a `grid` of size `m x n`, where each element is a wall, floor, or a box.\n\nYour task is move the box `'B'` to the target position `'T'` under the following rules:\nPlayer is represented by character `'S'` and can move up, down, left, right in the `grid` if it is a floor (empy cell).\n\nFloor is represented by character `'.'` that means free cell to walk.\n\nWall is represented by character `'#'` that means obstacle  (impossible to walk there). \nThere is only one box `'B'` and one target cell `'T'` in the `grid`.\n\nThe box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.\n\nThe player cannot walk through the box.\n\nReturn the minimum number of pushes to move the box to the target. If there is no way to reach the target, return `-1`.",
    "examples": [
      "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\nExplanation: We return only the number of times the box is pushed.",
      "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: -1",
      "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n               [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 5\nExplanation:  push the box down, left, left, up and up.",
      "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: -1"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m <= 20`\n`1 <= n <= 20`\n`grid` contains only characters `'.'`, `'#'`,  `'S'` , `'T'`, or `'B'`.\n\nThere is only one character `'S'`, `'B'` and `'T'` in the `grid`."
  },
  {
    "id": "1264",
    "title": "Page Recommendations",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1265",
    "title": "Print Immutable Linked List in Reverse",
    "difficulty": "Medium",
    "explanation": "You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:\n`ImmutableListNode`: An interface of immutable linked list, you are given the head of the list.\n\nYou need to use the following functions to access the linked list (you can't access the `ImmutableListNode` directly):\n`ImmutableListNode.printValue()`: Print value of the current node.\n\n`ImmutableListNode.getNext()`: Return the next node.\n\nThe input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.",
    "examples": [
      "Input: head = [1,2,3,4]\nOutput: [4,3,2,1]",
      "Input: head = [0,-4,-1,3,-5]\nOutput: [-5,3,-1,-4,0]",
      "Input: head = [-2,0,6,4,4,-6]\nOutput: [-6,4,4,6,0,-2]"
    ],
    "constraints": "The length of the linked list is between `[1, 1000]`.\n\nThe value of each node in the linked list is between `[-1000, 1000]`.\n\nFollow up:\nCould you solve this problem in:\nConstant space complexity?\nLinear time complexity and less than linear space complexity?"
  },
  {
    "id": "1266",
    "title": "Minimum Time Visiting All Points",
    "difficulty": "Easy",
    "explanation": "On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return the minimum time in seconds to visit all the points in the order given by `points`.\n\nYou can move according to these rules:\nIn `1` second, you can either:\n\t\nmove vertically by one unit,\nmove horizontally by one unit, or\nmove diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).\n\nYou have to visit the points in the same order as they appear in the array.\n\nYou are allowed to pass through points that appear later in the order, but these do not count as visits.",
    "examples": [
      "Input: points = [[1,1],[3,4],[-1,0]]\nOutput: 7\nExplanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds",
      "Input: points = [[3,2],[-2,2]]\nOutput: 5"
    ],
    "constraints": "`points.length == n`\n`1 <= n <= 100`\n`points[i].length == 2`\n`-1000 <= points[i][0], points[i][1] <= 1000`"
  },
  {
    "id": "1267",
    "title": "Count Servers that Communicate",
    "difficulty": "Medium",
    "explanation": "You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\n\nReturn the number of servers that communicate with any other server.",
    "examples": [
      "Input: grid = [[1,0],[0,1]]\nOutput: 0\nExplanation: No servers can communicate with others.",
      "Input: grid = [[1,0],[1,1]]\nOutput: 3\nExplanation: All three servers can communicate with at least one other server.",
      "Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\nOutput: 4\nExplanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m <= 250`\n`1 <= n <= 250`\n`grid[i][j] == 0 or 1`"
  },
  {
    "id": "1268",
    "title": "Search Suggestions System",
    "difficulty": "Medium",
    "explanation": "Given an array of strings `products` and a string `searchWord`. We want to design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.\n\nReturn list of lists of the suggested `products` after each character of `searchWord` is typed.",
    "examples": [
      "Input: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"\nOutput: [\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"]\n]\nExplanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]\nAfter typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"]\nAfter typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]",
      "Input: products = [\"havana\"], searchWord = \"havana\"\nOutput: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]",
      "Input: products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"\nOutput: [[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]",
      "Input: products = [\"havana\"], searchWord = \"tatiana\"\nOutput: [[],[],[],[],[],[],[]]"
    ],
    "constraints": "`1 <= products.length <= 1000`\nThere are no repeated elements in `products`.\n\n`1 <= Σ products[i].length <= 2 * 10^4`\nAll characters of `products[i]` are lower-case English letters.\n\n`1 <= searchWord.length <= 1000`\nAll characters of `searchWord` are lower-case English letters."
  },
  {
    "id": "1269",
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "difficulty": "Hard",
    "explanation": "You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array or stay in the same place  (The pointer should not be placed outside the array at any time).\n\nGiven two integers `steps` and `arrLen`, return the number of ways such that your pointer still at index `0` after exactly `steps` steps.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.",
    "examples": [
      "Input: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\n\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay",
      "Input: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay",
      "Input: steps = 4, arrLen = 2\nOutput: 8"
    ],
    "constraints": "`1 <= steps <= 500`\n`1 <= arrLen <= 10^6`"
  },
  {
    "id": "1270",
    "title": "All People Report to the Given Manager",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1271",
    "title": "Hexspeak",
    "difficulty": "Easy",
    "explanation": "A decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `0` with the letter `O`, and the digit `1` with the letter `I`.  Such a representation is valid if and only if it consists only of the letters in the set `{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"I\", \"O\"}`.\n\nGiven a string `num` representing a decimal integer `N`, return the Hexspeak representation of `N` if it is valid, otherwise return `\"ERROR\"`.",
    "examples": [
      "Input: num = \"257\"\nOutput: \"IOI\"\nExplanation:  257 is 101 in hexadecimal.",
      "Input: num = \"3\"\nOutput: \"ERROR\""
    ],
    "constraints": "`1 <= N <= 10^12`\nThere are no leading zeros in the given string.\n\nAll answers must be in uppercase letters."
  },
  {
    "id": "1272",
    "title": "Remove Interval",
    "difficulty": "Medium",
    "explanation": "A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).\n\nYou are given a sorted list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`.\n\nReturn the set of real numbers with the interval `toBeRemoved` removed from `intervals`. In other words, return the set of real numbers such that every `x` in the set is in `intervals` but not in `toBeRemoved`. Your answer should be a sorted list of disjoint intervals as described above.",
    "examples": [
      "Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]\nOutput: [[0,1],[6,7]]",
      "Input: intervals = [[0,5]], toBeRemoved = [2,3]\nOutput: [[0,2],[3,5]]",
      "Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]\nOutput: [[-5,-4],[-3,-2],[4,5],[8,9]]"
    ],
    "constraints": "`1 <= intervals.length <= 104`\n`-109 <= ai < bi <= 109`"
  },
  {
    "id": "1273",
    "title": "Delete Tree Nodes",
    "difficulty": "Medium",
    "explanation": "A tree rooted at node 0 is given as follows:\nThe number of nodes is `nodes`;\nThe value of the `i`-th node is `value[i]`;\nThe parent of the `i`-th node is `parent[i]`.\n\nRemove every subtree whose sum of values of nodes is zero.\n\nAfter doing so, return the number of nodes remaining in the tree.",
    "examples": [
      "Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]\nOutput: 2",
      "Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]\nOutput: 6",
      "Input: nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378]\nOutput: 5",
      "Input: nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746]\nOutput: 5"
    ],
    "constraints": "`1 <= nodes <= 10^4`\n`parent.length == nodes`\n`0 <= parent[i] <= nodes - 1`\n`parent[0] == -1` which indicates that `0` is the root.\n\n`value.length == nodes`\n`-10^5 <= value[i] <= 10^5`\nThe given input is guaranteed to represent a valid tree."
  },
  {
    "id": "1274",
    "title": "Number of Ships in a Rectangle",
    "difficulty": "Hard",
    "explanation": "(This problem is an interactive problem.)\nEach ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.\n\nYou have a function `Sea.hasShips(topRight, bottomLeft)` which takes two points as arguments and returns `true` If there is at least one ship in the rectangle represented by the two points, including on the boundary.\n\nGiven two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are at most 10 ships in that rectangle.\n\nSubmissions making more than 400 calls to `hasShips` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\n\nExample :\nInput: \nships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]\nOutput: 3\nExplanation: From [0,0] to [4,4] we can count 3 ships within the range.\n\n\nConstraints:\nOn the input `ships` is only given to initialize the map internally. You must solve this problem \"blindfolded\". In other words, you must find the answer using the given `hasShips` API, without knowing the `ships` position.\n\n`0 <= bottomLeft[0] <= topRight[0] <= 1000`\n`0 <= bottomLeft[1] <= topRight[1] <= 1000`\n`topRight != bottomLeft`",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1275",
    "title": "Find Winner on a Tic Tac Toe Game",
    "difficulty": "Easy",
    "explanation": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid.\n\nHere are the rules of Tic-Tac-Toe:\nPlayers take turns placing characters into empty squares (\" \").\n\nThe first player A always places \"X\" characters, while the second player B always places \"O\" characters.\n\n\"X\" and \"O\" characters are always placed into empty squares, never on filled ones.\n\nThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\n\nThe game also ends if all squares are non-empty.\n\nNo more moves can be played if the game is over.\n\nGiven an array `moves` where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.\n\nReturn the winner of the game if it exists (A or B), in case the game ends in a draw return \"Draw\", if there are still movements to play return \"Pending\".\n\nYou can assume that `moves` is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.",
    "examples": [
      "Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: \"A\"\nExplanation: \"A\" wins, he always plays first.\n\n\"X  \"    \"X  \"    \"X  \"    \"X  \"    \"X  \"\n\"   \" -> \"   \" -> \" X \" -> \" X \" -> \" X \"\n\"   \"    \"O  \"    \"O  \"    \"OO \"    \"OOX\"",
      "Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: \"B\"\nExplanation: \"B\" wins.\n\n\"X  \"    \"X  \"    \"XX \"    \"XXO\"    \"XXO\"    \"XXO\"\n\"   \" -> \" O \" -> \" O \" -> \" O \" -> \"XO \" -> \"XO \" \n\"   \"    \"   \"    \"   \"    \"   \"    \"   \"    \"O  \"",
      "Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: \"Draw\"\nExplanation: The game ends in a draw since there are no moves to make.\n\n\"XXO\"\n\"OOX\"\n\"XOX\"",
      "Input: moves = [[0,0],[1,1]]\nOutput: \"Pending\"\nExplanation: The game has not finished yet.\n\n\"X  \"\n\" O \"\n\"   \""
    ],
    "constraints": "`1 <= moves.length <= 9`\n`moves[i].length == 2`\n`0 <= moves[i][j] <= 2`\nThere are no repeated elements on `moves`.\n\n`moves` follow the rules of tic tac toe."
  },
  {
    "id": "1276",
    "title": "Number of Burgers with No Waste of Ingredients",
    "difficulty": "Medium",
    "explanation": "Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:\nJumbo Burger: 4 tomato slices and 1 cheese slice.\n\nSmall Burger: 2 Tomato slices and 1 cheese slice.\n\nReturn `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to 0 and the number of remaining `cheeseSlices` equal to 0. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to 0 return `[]`.",
    "examples": [
      "Input: tomatoSlices = 16, cheeseSlices = 7\nOutput: [1,6]\nExplantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. There will be no remaining ingredients.",
      "Input: tomatoSlices = 17, cheeseSlices = 4\nOutput: []\nExplantion: There will be no way to use all ingredients to make small and jumbo burgers.",
      "Input: tomatoSlices = 4, cheeseSlices = 17\nOutput: []\nExplantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.",
      "Input: tomatoSlices = 0, cheeseSlices = 0\nOutput: [0,0]",
      "Input: tomatoSlices = 2, cheeseSlices = 1\nOutput: [0,1]"
    ],
    "constraints": "`0 <= tomatoSlices <= 10^7`\n`0 <= cheeseSlices <= 10^7`"
  },
  {
    "id": "1277",
    "title": "Count Square Submatrices with All Ones",
    "difficulty": "Medium",
    "explanation": "Given a `m * n` matrix of ones and zeros, return how many square submatrices have all ones.",
    "examples": [
      "Input: matrix =\n[\n  [0,1,1,1],\n  [1,1,1,1],\n  [0,1,1,1]\n]\nOutput: 15\nExplanation: \nThere are 10 squares of side 1.\n\nThere are 4 squares of side 2.\n\nThere is  1 square of side 3.\n\nTotal number of squares = 10 + 4 + 1 = 15.",
      "Input: matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\nOutput: 7\nExplanation: \nThere are 6 squares of side 1.  \nThere is 1 square of side 2. \nTotal number of squares = 6 + 1 = 7."
    ],
    "constraints": "`1 <= arr.length <= 300`\n`1 <= arr[0].length <= 300`\n`0 <= arr[i][j] <= 1`"
  },
  {
    "id": "1278",
    "title": "Palindrome Partitioning III",
    "difficulty": "Hard",
    "explanation": "You are given a string `s` containing lowercase letters and an integer `k`. You need to :\nFirst, change some characters of `s` to other lowercase English letters.\n\nThen divide `s` into `k` non-empty disjoint substrings such that each substring is palindrome.\n\nReturn the minimal number of characters that you need to change to divide the string.",
    "examples": [
      "Input: s = \"abc\", k = 2\nOutput: 1\nExplanation: You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.",
      "Input: s = \"aabbc\", k = 3\nOutput: 0\nExplanation: You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.",
      "Input: s = \"leetcode\", k = 8\nOutput: 0"
    ],
    "constraints": "`1 <= k <= s.length <= 100`.\n\n`s` only contains lowercase English letters."
  },
  {
    "id": "1279",
    "title": "Traffic Light Controlled Intersection",
    "difficulty": "Easy",
    "explanation": "There is an intersection of two roads. First road is road A where cars travel from North to South in direction 1 and from South to North in direction 2. Second road is road B where cars travel from West to East in direction 3 and from East to West in direction 4.\n\nThere is a traffic light located on each road before the intersection. A traffic light can either be green or red.\n\nGreen means cars can cross the intersection in both directions of the road.\n\nRed means cars in both directions cannot cross the intersection and must wait until the light turns green.\n\nThe traffic lights cannot be green on both roads at the same time. That means when the light is green on road A, it is red on road B and when the light is green on road B, it is red on road A.\n\nInitially, the traffic light is green on road A and red on road B. When the light is green on one road, all cars can cross the intersection in both directions until the light becomes green on the other road. No two cars traveling on different roads should cross at the same time.\n\nDesign a deadlock-free traffic light controlled system at this intersection.\n\nImplement the function `void carArrived(carId, roadId, direction, turnGreen, crossCar)` where:\n`carId` is the id of the car that arrived.\n\n`roadId` is the id of the road that the car travels on.\n\n`direction` is the direction of the car.\n\n`turnGreen` is a function you can call to turn the traffic light to green on the current road.\n\n`crossCar` is a function you can call to let the current car cross the intersection.\n\nYour answer is considered correct if it avoids cars deadlock in the intersection. Turning the light green on a road when it was already green is considered a wrong answer.",
    "examples": [
      "Input: cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivalTimes = [10,20,30,40,50]\nOutput: [\n\"Car 1 Has Passed Road A In Direction 2\",    // Traffic light on road A is green, car 1 can cross the intersection.\n\n\"Car 3 Has Passed Road A In Direction 1\",    // Car 3 crosses the intersection as the light is still green.\n\n\"Car 5 Has Passed Road A In Direction 2\",    // Car 5 crosses the intersection as the light is still green.\n\n\"Traffic Light On Road B Is Green\",          // Car 2 requests green light for road B.\n\n\"Car 2 Has Passed Road B In Direction 4\",    // Car 2 crosses as the light is green on road B now.\n\n\"Car 4 Has Passed Road B In Direction 3\"     // Car 4 crosses the intersection as the light is still green.\n\n]",
      "Input: cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivalTimes = [10,20,30,40,40]\nOutput: [\n\"Car 1 Has Passed Road A In Direction 2\",    // Traffic light on road A is green, car 1 can cross the intersection.\n\n\"Traffic Light On Road B Is Green\",          // Car 2 requests green light for road B.\n\n\"Car 2 Has Passed Road B In Direction 4\",    // Car 2 crosses as the light is green on road B now.\n\n\"Car 3 Has Passed Road B In Direction 3\",    // Car 3 crosses as the light is green on road B now.\n\n\"Traffic Light On Road A Is Green\",          // Car 5 requests green light for road A.\n\n\"Car 5 Has Passed Road A In Direction 1\",    // Car 5 crosses as the light is green on road A now.\n\n\"Traffic Light On Road B Is Green\",          // Car 4 requests green light for road B. Car 4 blocked until car 5 crosses and then traffic light is green on road B.\n\n\"Car 4 Has Passed Road B In Direction 3\"     // Car 4 crosses as the light is green on road B now.\n\n]\nExplanation: This is a dead-lock free scenario. Note that the scenario when car 4 crosses before turning light into green on road A and allowing car 5 to pass is also correct and Accepted scenario."
    ],
    "constraints": "`1 <= cars.length <= 20`\n`cars.length = directions.length`\n`cars.length = arrivalTimes.length`\nAll values of `cars` are unique\n`1 <= directions[i] <= 4`\n`arrivalTimes` is non-decreasing"
  },
  {
    "id": "1280",
    "title": "Students and Examinations",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1281",
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "difficulty": "Easy",
    "explanation": "Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.",
    "examples": [
      "Input: n = 234\nOutput: 15 \nExplanation: \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15",
      "Input: n = 4421\nOutput: 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21"
    ],
    "constraints": "`1 <= n <= 10^5`"
  },
  {
    "id": "1282",
    "title": "Group the People Given the Group Size They Belong To",
    "difficulty": "Medium",
    "explanation": "There are `n` people that are split into some unknown number of groups. Each person is labeled with a unique ID from `0` to `n - 1`.\n\nYou are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`.\n\nReturn a list of groups such that each person `i` is in a group of size `groupSizes[i]`.\n\nEach person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.",
    "examples": [
      "Input: groupSizes = [3,3,3,3,3,1,3]\nOutput: [[5],[0,1,2],[3,4,6]]\nExplanation: \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\n\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\n\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\n\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].",
      "Input: groupSizes = [2,1,3,3,3,2]\nOutput: [[1],[0,5],[2,3,4]]"
    ],
    "constraints": "`groupSizes.length == n`\n`1 <= n <= 500`\n`1 <= groupSizes[i] <= n`"
  },
  {
    "id": "1283",
    "title": "Find the Smallest Divisor Given a Threshold",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the smallest `divisor` such that the result mentioned above is less than or equal to `threshold`.\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\nIt is guaranteed that there will be an answer.",
    "examples": [
      "Input: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2).",
      "Input: nums = [44,22,33,11,1], threshold = 5\nOutput: 44",
      "Input: nums = [21212,10101,12121], threshold = 1000000\nOutput: 1",
      "Input: nums = [2,3,5,7,11], threshold = 11\nOutput: 3"
    ],
    "constraints": "`1 <= nums.length <= 5 * 104`\n`1 <= nums[i] <= 106`\n`nums.length <= threshold <= 106`"
  },
  {
    "id": "1284",
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "difficulty": "Hard",
    "explanation": "Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbours of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.\n\nReturn the minimum number of steps required to convert `mat` to a zero matrix or -1 if you cannot.\n\nBinary matrix is a matrix with all cells equal to 0 or 1 only.\n\nZero matrix is a matrix with all cells equal to 0.",
    "examples": [
      "Input: mat = [[0,0],[0,1]]\nOutput: 3\nExplanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.",
      "Input: mat = [[0]]\nOutput: 0\nExplanation: Given matrix is a zero matrix. We don't need to change it.",
      "Input: mat = [[1,1,1],[1,0,1],[0,0,0]]\nOutput: 6",
      "Input: mat = [[1,0,0],[1,0,0]]\nOutput: -1\nExplanation: Given matrix can't be a zero matrix"
    ],
    "constraints": "`m == mat.length`\n`n == mat[0].length`\n`1 <= m <= 3`\n`1 <= n <= 3`\n`mat[i][j]` is 0 or 1."
  },
  {
    "id": "1285",
    "title": "Find the Start and End Number of Continuous Ranges",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1286",
    "title": "Iterator for Combination",
    "difficulty": "Medium",
    "explanation": "Design the `CombinationIterator` class:\n`CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of sorted distinct lowercase English letters and a number `combinationLength` as arguments.\n\n`next()` Returns the next combination of length `combinationLength` in lexicographical order.\n\n`hasNext()` Returns `true` if and only if there exists a next combination.",
    "examples": [
      "Input\n[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]\nOutput\n[null, \"ab\", true, \"ac\", true, \"bc\", false]\nExplanation\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // return \"ab\"\nitr.hasNext(); // return True\nitr.next();    // return \"ac\"\nitr.hasNext(); // return True\nitr.next();    // return \"bc\"\nitr.hasNext(); // return False"
    ],
    "constraints": "`1 <= combinationLength <= characters.length <= 15`\nAll the characters of `characters` are unique.\n\nAt most `104` calls will be made to `next` and `hasNext`.\n\nIt's guaranteed that all calls of the function `next` are valid."
  },
  {
    "id": "1287",
    "title": "Element Appearing More Than 25% In Sorted Array",
    "difficulty": "Easy",
    "explanation": "Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.\n\nReturn that integer.",
    "examples": [
      "Input: arr = [1,2,2,6,6,6,6,7,10]\nOutput: 6"
    ],
    "constraints": "`1 <= arr.length <= 10^4`\n`0 <= arr[i] <= 10^5`"
  },
  {
    "id": "1288",
    "title": "Remove Covered Intervals",
    "difficulty": "Medium",
    "explanation": "Given a list of `intervals`, remove all intervals that are covered by another interval in the list.\n\nInterval `[a,b)` is covered by interval `[c,d)` if and only if `c <= a` and `b <= d`.\n\nAfter doing so, return the number of remaining intervals.",
    "examples": [
      "Input: intervals = [[1,4],[3,6],[2,8]]\nOutput: 2\nExplanation: Interval [3,6] is covered by [2,8], therefore it is removed.",
      "Input: intervals = [[1,4],[2,3]]\nOutput: 1",
      "Input: intervals = [[0,10],[5,12]]\nOutput: 2",
      "Input: intervals = [[3,10],[4,10],[5,11]]\nOutput: 2",
      "Input: intervals = [[1,2],[1,4],[3,4]]\nOutput: 1"
    ],
    "constraints": "`1 <= intervals.length <= 1000`\n`intervals[i].length == 2`\n`0 <= intervals[i][0] < intervals[i][1] <= 10^5`\nAll the intervals are unique."
  },
  {
    "id": "1289",
    "title": "Minimum Falling Path Sum II",
    "difficulty": "Hard",
    "explanation": "Given a square grid of integers `arr`, a falling path with non-zero shifts is a choice of exactly one element from each row of `arr`, such that no two elements chosen in adjacent rows are in the same column.\n\nReturn the minimum sum of a falling path with non-zero shifts.",
    "examples": [
      "Input: arr = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is [1,5,7], so the answer is 13."
    ],
    "constraints": "`1 <= arr.length == arr[i].length <= 200`\n`-99 <= arr[i][j] <= 99`"
  },
  {
    "id": "1290",
    "title": "Convert Binary Number in a Linked List to Integer",
    "difficulty": "Easy",
    "explanation": "Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\n\nReturn the decimal value of the number in the linked list.",
    "examples": [
      "Input: head = [1,0,1]\nOutput: 5\nExplanation: (101) in base 2 = (5) in base 10",
      "Input: head = [0]\nOutput: 0",
      "Input: head = [1]\nOutput: 1",
      "Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]\nOutput: 18880",
      "Input: head = [0,0]\nOutput: 0"
    ],
    "constraints": "The Linked List is not empty.\n\nNumber of nodes will not exceed `30`.\n\nEach node's value is either `0` or `1`."
  },
  {
    "id": "1291",
    "title": "Sequential Digits",
    "difficulty": "Medium",
    "explanation": "An integer has sequential digits if and only if each digit in the number is one more than the previous digit.\n\nReturn a sorted list of all the integers in the range `[low, high]` inclusive that have sequential digits.",
    "examples": [
      "Input: low = 100, high = 300\nOutput: [123,234]",
      "Input: low = 1000, high = 13000\nOutput: [1234,2345,3456,4567,5678,6789,12345]"
    ],
    "constraints": "`10 <= low <= high <= 10^9`"
  },
  {
    "id": "1292",
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "difficulty": "Medium",
    "explanation": "Given a `m x n` matrix `mat` and an integer `threshold`. Return the maximum side-length of a square with a sum less than or equal to `threshold` or return 0 if there is no such square.",
    "examples": [
      "Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of square with sum less than 4 is 2 as shown.",
      "Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0",
      "Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6\nOutput: 3",
      "Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184\nOutput: 2"
    ],
    "constraints": "`1 <= m, n <= 300`\n`m == mat.length`\n`n == mat[i].length`\n`0 <= mat[i][j] <= 10000`\n`0 <= threshold <= 10^5`"
  },
  {
    "id": "1293",
    "title": "Shortest Path in a Grid with Obstacles Elimination",
    "difficulty": "Hard",
    "explanation": "Given a `m * n` grid, where each cell is either `0` (empty) or `1` (obstacle). In one step, you can move up, down, left or right from and to an empty cell.\n\nReturn the minimum number of steps to walk from the upper left corner `(0, 0)` to the lower right corner `(m-1, n-1)` given that you can eliminate at most `k` obstacles. If it is not possible to find such walk return -1.",
    "examples": [
      "Input: \ngrid = \n[[0,0,0],\n [1,1,0],\n [0,0,0],\n [0,1,1],\n [0,0,0]], \nk = 1\nOutput: 6\nExplanation: \nThe shortest path without eliminating any obstacle is 10. \nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2)`.",
      "Input: \ngrid = \n[[0,1,1],\n [1,1,1],\n [1,0,0]], \nk = 1\nOutput: -1\nExplanation: \nWe need to eliminate at least two obstacles to find such a walk."
    ],
    "constraints": "`grid.length == m`\n`grid[0].length == n`\n`1 <= m, n <= 40`\n`1 <= k <= m*n`\n`grid[i][j] == 0 or 1`\n`grid[0][0] == grid[m-1][n-1] == 0`"
  },
  {
    "id": "1294",
    "title": "Weather Type in Each Country",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1295",
    "title": "Find Numbers with Even Number of Digits",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` of integers, return how many of them contain an even number of digits.",
    "examples": [
      "Input: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation: \n12 contains 2 digits (even number of digits). \n345 contains 3 digits (odd number of digits). \n2 contains 1 digit (odd number of digits). \n6 contains 1 digit (odd number of digits). \n7896 contains 4 digits (even number of digits). \nTherefore only 12 and 7896 contain an even number of digits.",
      "Input: nums = [555,901,482,1771]\nOutput: 1 \nExplanation: \nOnly 1771 contains an even number of digits."
    ],
    "constraints": "`1 <= nums.length <= 500`\n`1 <= nums[i] <= 10^5`"
  },
  {
    "id": "1296",
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into sets of `k` consecutive numbers\nReturn `True` if it is possible. Otherwise, return `False`.",
    "examples": [
      "Input: nums = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].",
      "Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\nOutput: true\nExplanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].",
      "Input: nums = [3,3,2,2,1,1], k = 3\nOutput: true",
      "Input: nums = [1,2,3,4], k = 3\nOutput: false\nExplanation: Each array should be divided in subarrays of size 3."
    ],
    "constraints": "`1 <= k <= nums.length <= 105`\n`1 <= nums[i] <= 109`\nNote: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/"
  },
  {
    "id": "1297",
    "title": "Maximum Number of Occurrences of a Substring",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, return the maximum number of ocurrences of any substring under the following rules:\nThe number of unique characters in the substring must be less than or equal to `maxLetters`.\n\nThe substring size must be between `minSize` and `maxSize` inclusive.",
    "examples": [
      "Input: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: Substring \"aab\" has 2 ocurrences in the original string.\n\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).",
      "Input: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: Substring \"aaa\" occur 2 times in the string. It can overlap.",
      "Input: s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3\nOutput: 3",
      "Input: s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3\nOutput: 0"
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`1 <= maxLetters <= 26`\n`1 <= minSize <= maxSize <= min(26, s.length)`\n`s` only contains lowercase English letters."
  },
  {
    "id": "1298",
    "title": "Maximum Candies You Can Get from Boxes",
    "difficulty": "Hard",
    "explanation": "Given `n` boxes, each box is given in the format `[status, candies, keys, containedBoxes]` where:\n`status[i]`: an integer which is 1 if `box[i]` is open and 0 if `box[i]` is closed.\n\n`candies[i]`: an integer representing the number of candies in `box[i]`.\n\n`keys[i]`: an array contains the indices of the boxes you can open with the key in `box[i]`.\n\n`containedBoxes[i]`: an array contains the indices of the boxes found in `box[i]`.\n\nYou will start with some boxes given in `initialBoxes` array. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\nReturn the maximum number of candies you can get following the rules above.",
    "examples": [
      "Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\n\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\n\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.",
      "Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\nOutput: 6\nExplanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.",
      "Input: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]\nOutput: 1",
      "Input: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []\nOutput: 0",
      "Input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]\nOutput: 7"
    ],
    "constraints": "`1 <= status.length <= 1000`\n`status.length == candies.length == keys.length == containedBoxes.length == n`\n`status[i]` is `0` or `1`.\n\n`1 <= candies[i] <= 1000`\n`0 <= keys[i].length <= status.length`\n`0 <= keys[i][j] < status.length`\nAll values in `keys[i]` are unique.\n\n`0 <= containedBoxes[i].length <= status.length`\n`0 <= containedBoxes[i][j] < status.length`\nAll values in `containedBoxes[i]` are unique.\n\nEach box is contained in one box at most.\n\n`0 <= initialBoxes.length <= status.length`\n`0 <= initialBoxes[i] < status.length`"
  },
  {
    "id": "1299",
    "title": "Replace Elements with Greatest Element on Right Side",
    "difficulty": "Easy",
    "explanation": "Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.\n\nAfter doing so, return the array.",
    "examples": [
      "Input: arr = [17,18,5,4,6,1]\nOutput: [18,6,6,6,1,-1]\nExplanation: \n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n\n- index 5 --> there are no elements to the right of index 5, so we put -1.",
      "Input: arr = [400]\nOutput: [-1]\nExplanation: There are no elements to the right of index 0."
    ],
    "constraints": "`1 <= arr.length <= 104`\n`1 <= arr[i] <= 105`"
  },
  {
    "id": "1300",
    "title": "Sum of Mutated Array Closest to Target",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.\n\nIn case of a tie, return the minimum such integer.\n\nNotice that the answer is not neccesarilly a number from `arr`.",
    "examples": [
      "Input: arr = [4,9,3], target = 10\nOutput: 3\nExplanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.",
      "Input: arr = [2,3,5], target = 10\nOutput: 5",
      "Input: arr = [60864,25176,27249,21296,20204], target = 56803\nOutput: 11361"
    ],
    "constraints": "`1 <= arr.length <= 10^4`\n`1 <= arr[i], target <= 10^5`"
  },
  {
    "id": "1301",
    "title": "Number of Paths with Max Score",
    "difficulty": "Hard",
    "explanation": "You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `'S'`.\n\nYou need to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo `10^9 + 7`.\n\nIn case there is no path, return `[0, 0]`.",
    "examples": [
      "Input: board = [\"E23\",\"2X2\",\"12S\"]\nOutput: [7,1]",
      "Input: board = [\"E12\",\"1X1\",\"21S\"]\nOutput: [4,2]",
      "Input: board = [\"E11\",\"XXX\",\"11S\"]\nOutput: [0,0]"
    ],
    "constraints": "`2 <= board.length == board[i].length <= 100`"
  },
  {
    "id": "1302",
    "title": "Deepest Leaves Sum",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the sum of values of its deepest leaves.",
    "examples": [
      "Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15",
      "Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 19"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`1 <= Node.val <= 100`"
  },
  {
    "id": "1303",
    "title": "Find the Team Size",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1304",
    "title": "Find N Unique Integers Sum up to Zero",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return any array containing `n` unique integers such that they add up to `0`.",
    "examples": [
      "Input: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].",
      "Input: n = 3\nOutput: [-1,0,1]",
      "Input: n = 1\nOutput: [0]"
    ],
    "constraints": "`1 <= n <= 1000`"
  },
  {
    "id": "1305",
    "title": "All Elements in Two Binary Search Trees",
    "difficulty": "Medium",
    "explanation": "Given two binary search trees `root1` and `root2`.\n\nReturn a list containing all the integers from both trees sorted in ascending order.",
    "examples": [
      "Input: root1 = [2,1,4], root2 = [1,0,3]\nOutput: [0,1,1,2,3,4]",
      "Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]\nOutput: [-10,0,0,1,2,5,7,10]",
      "Input: root1 = [], root2 = [5,1,7,0,2]\nOutput: [0,1,2,5,7]",
      "Input: root1 = [0,-10,10], root2 = []\nOutput: [-10,0,10]",
      "Input: root1 = [1,null,8], root2 = [8,1]\nOutput: [1,1,8,8]"
    ],
    "constraints": "Each tree has at most `5000` nodes.\n\nEach node's value is between `[-10^5, 10^5]`."
  },
  {
    "id": "1306",
    "title": "Jump Game III",
    "difficulty": "Medium",
    "explanation": "Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to any index with value 0.\n\nNotice that you can not jump outside of the array at any time.",
    "examples": [
      "Input: arr = [4,2,3,0,3,1,2], start = 5\nOutput: true\nExplanation: \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3",
      "Input: arr = [4,2,3,0,3,1,2], start = 0\nOutput: true \nExplanation: \nOne possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3",
      "Input: arr = [3,0,2,1,2], start = 2\nOutput: false\nExplanation: There is no way to reach at index 1 with value 0."
    ],
    "constraints": "`1 <= arr.length <= 5 * 104`\n`0 <= arr[i] < arr.length`\n`0 <= start < arr.length`"
  },
  {
    "id": "1307",
    "title": "Verbal Arithmetic Puzzle",
    "difficulty": "Hard",
    "explanation": "Given an equation, represented by `words` on left side and the `result` on right side.\n\nYou need to check if the equation is solvable under the following rules:\nEach character is decoded as one digit (0 - 9).\n\nEvery pair of different characters they must map to different digits.\n\nEach `words[i]` and `result` are decoded as one number without leading zeros.\n\nSum of numbers on left side (`words`) will equal to the number on right side (`result`). \nReturn `True` if the equation is solvable otherwise return `False`.",
    "examples": [
      "Input: words = [\"SEND\",\"MORE\"], result = \"MONEY\"\nOutput: true\nExplanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652",
      "Input: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"\nOutput: true\nExplanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214",
      "Input: words = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\"\nOutput: true",
      "Input: words = [\"LEET\",\"CODE\"], result = \"POINT\"\nOutput: false"
    ],
    "constraints": "`2 <= words.length <= 5`\n`1 <= words[i].length, result.length <= 7`\n`words[i], result` contain only uppercase English letters.\n\nThe number of different characters used in the expression is at most `10`."
  },
  {
    "id": "1308",
    "title": "Running Total for Different Genders",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1309",
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "difficulty": "Easy",
    "explanation": "Given a string `s` formed by digits (`'0'` - `'9'`) and `'#'` . We want to map `s` to English lowercase characters as follows:\nCharacters (`'a'` to `'i')` are represented by (`'1'` to `'9'`) respectively.\n\nCharacters (`'j'` to `'z')` are represented by (`'10#'` to `'26#'`) respectively. \nReturn the string formed after mapping.\n\nIt's guaranteed that a unique mapping will always exist.",
    "examples": [
      "Input: s = \"10#11#12\"\nOutput: \"jkab\"\nExplanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".",
      "Input: s = \"1326#\"\nOutput: \"acz\"",
      "Input: s = \"25#\"\nOutput: \"y\"",
      "Input: s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"\nOutput: \"abcdefghijklmnopqrstuvwxyz\""
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s[i]` only contains digits letters (`'0'`-`'9'`) and `'#'` letter.\n\n`s` will be valid string such that mapping is always possible."
  },
  {
    "id": "1310",
    "title": "XOR Queries of a Subarray",
    "difficulty": "Medium",
    "explanation": "Given the array `arr` of positive integers and the array `queries` where `queries[i] = [Li, Ri]`, for each query `i` compute the XOR of elements from `Li` to `Ri` (that is, `arr[Li] xor arr[Li+1] xor ... xor arr[Ri]` ). Return an array containing the result for the given `queries`.",
    "examples": [
      "Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\nOutput: [2,7,14,8] \nExplanation: \nThe binary representation of the elements in the array are:\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2 \n[1,2] = 3 xor 4 = 7 \n[0,3] = 1 xor 3 xor 4 xor 8 = 14 \n[3,3] = 8",
      "Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\nOutput: [8,0,4,4]"
    ],
    "constraints": "`1 <= arr.length <= 3 * 10^4`\n`1 <= arr[i] <= 10^9`\n`1 <= queries.length <= 3 * 10^4`\n`queries[i].length == 2`\n`0 <= queries[i][0] <= queries[i][1] < arr.length`"
  },
  {
    "id": "1311",
    "title": "Get Watched Videos by Your Friends",
    "difficulty": "Medium",
    "explanation": "There are `n` people, each person has a unique id between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`.\n\nLevel 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path exactly equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.",
    "examples": [
      "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\nOutput: [\"B\",\"C\"] \nExplanation: \nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = [\"C\"] \nPerson with id = 2 -> watchedVideos = [\"B\",\"C\"] \nThe frequencies of watchedVideos by your friends are: \nB -> 1 \nC -> 2",
      "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\nOutput: [\"D\"]\nExplanation: \nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure)."
    ],
    "constraints": "`n == watchedVideos.length == friends.length`\n`2 <= n <= 100`\n`1 <= watchedVideos[i].length <= 100`\n`1 <= watchedVideos[i][j].length <= 8`\n`0 <= friends[i].length < n`\n`0 <= friends[i][j] < n`\n`0 <= id < n`\n`1 <= level < n`\nif `friends[i]` contains `j`, then `friends[j]` contains `i`"
  },
  {
    "id": "1312",
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "difficulty": "Hard",
    "explanation": "Given a string `s`. In one step you can insert any character at any index of the string.\n\nReturn the minimum number of steps to make `s` palindrome.\n\nA Palindrome String is one that reads the same backward as well as forward.",
    "examples": [
      "Input: s = \"zzazz\"\nOutput: 0\nExplanation: The string \"zzazz\" is already palindrome we don't need any insertions.",
      "Input: s = \"mbadm\"\nOutput: 2\nExplanation: String can be \"mbdadbm\" or \"mdbabdm\".",
      "Input: s = \"leetcode\"\nOutput: 5\nExplanation: Inserting 5 characters the string becomes \"leetcodocteel\".",
      "Input: s = \"g\"\nOutput: 0",
      "Input: s = \"no\"\nOutput: 1"
    ],
    "constraints": "`1 <= s.length <= 500`\nAll characters of `s` are lower case English letters."
  },
  {
    "id": "1313",
    "title": "Decompress Run-Length Encoded List",
    "difficulty": "Easy",
    "explanation": "We are given a list `nums` of integers representing a list compressed with run-length encoding.\n\nConsider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`).  For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\n\nReturn the decompressed list.",
    "examples": [
      "Input: nums = [1,2,3,4]\nOutput: [2,4,4,4]\nExplanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\n\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\n\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4].",
      "Input: nums = [1,1,2,3]\nOutput: [1,3,3]"
    ],
    "constraints": "`2 <= nums.length <= 100`\n`nums.length % 2 == 0`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "1314",
    "title": "Matrix Block Sum",
    "difficulty": "Medium",
    "explanation": "Given a `m x n` matrix `mat` and an integer `k`, return a matrix `answer` where each `answer[i][j]` is the sum of all elements `mat[r][c]` for:\n`i - k <= r <= i + k,`\n`j - k <= c <= j + k`, and\n`(r, c)` is a valid position in the matrix.",
    "examples": [
      "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[12,21,16],[27,45,33],[24,39,28]]",
      "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\nOutput: [[45,45,45],[45,45,45],[45,45,45]]"
    ],
    "constraints": "`m == mat.length`\n`n == mat[i].length`\n`1 <= m, n, k <= 100`\n`1 <= mat[i][j] <= 100`"
  },
  {
    "id": "1315",
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "difficulty": "Medium",
    "explanation": "Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)\nIf there are no nodes with an even-valued grandparent, return `0`.",
    "examples": [
      "Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 18\nExplanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
    ],
    "constraints": "The number of nodes in the tree is between `1` and `10^4`.\n\nThe value of nodes is between `1` and `100`."
  },
  {
    "id": "1316",
    "title": "Distinct Echo Substrings",
    "difficulty": "Hard",
    "explanation": "Return the number of distinct non-empty substrings of `text` that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a` where `a` is some string).",
    "examples": [
      "Input: text = \"abcabcabc\"\nOutput: 3\nExplanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".",
      "Input: text = \"leetcodeleetcode\"\nOutput: 2\nExplanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\"."
    ],
    "constraints": "`1 <= text.length <= 2000`\n`text` has only lowercase English letters."
  },
  {
    "id": "1317",
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.\n\nReturn a list of two integers `[A, B]` where:\n`A` and `B` are No-Zero integers.\n\n`A + B = n`\nIt's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.",
    "examples": [
      "Input: n = 2\nOutput: [1,1]\nExplanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.",
      "Input: n = 11\nOutput: [2,9]",
      "Input: n = 10000\nOutput: [1,9999]",
      "Input: n = 69\nOutput: [1,68]",
      "Input: n = 1010\nOutput: [11,999]"
    ],
    "constraints": "`2 <= n <= 10^4`"
  },
  {
    "id": "1318",
    "title": "Minimum Flips to Make a OR b Equal to c",
    "difficulty": "Medium",
    "explanation": "Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation).\n\nFlip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.",
    "examples": [
      "Input: a = 2, b = 6, c = 5\nOutput: 3\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)",
      "Input: a = 4, b = 2, c = 7\nOutput: 1",
      "Input: a = 1, b = 2, c = 3\nOutput: 0"
    ],
    "constraints": "`1 <= a <= 10^9`\n`1 <= b <= 10^9`\n`1 <= c <= 10^9`"
  },
  {
    "id": "1319",
    "title": "Number of Operations to Make Network Connected",
    "difficulty": "Medium",
    "explanation": "There are `n` computers numbered from `0` to `n-1` connected by ethernet cables `connections` forming a network where `connections[i] = [a, b]` represents a connection between computers `a` and `b`. Any computer can reach any other computer directly or indirectly through the network.\n\nGiven an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it's not possible, return -1.",
    "examples": [
      "Input: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.",
      "Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2",
      "Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.",
      "Input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]\nOutput: 0"
    ],
    "constraints": "`1 <= n <= 10^5`\n`1 <= connections.length <= min(n*(n-1)/2, 10^5)`\n`connections[i].length == 2`\n`0 <= connections[i][0], connections[i][1] < n`\n`connections[i][0] != connections[i][1]`\nThere are no repeated connections.\n\nNo two computers are connected by more than one cable."
  },
  {
    "id": "1320",
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "difficulty": "Hard",
    "explanation": "You have a keyboard layout as shown above in the XY plane, where each English uppercase letter is located at some coordinate, for example, the letter A is located at coordinate (0,0), the letter B is located at coordinate (0,1), the letter P is located at coordinate (2,3) and the letter Z is located at coordinate (4,1).\n\nGiven the string `word`, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. \nNote that the initial positions of your two fingers are considered free so don't count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.",
    "examples": [
      "Input: word = \"CAKE\"\nOutput: 3\nExplanation: \nUsing two fingers, one optimal way to type \"CAKE\" is: \nFinger 1 on letter 'C' -> cost = 0 \nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -> cost = 0 \nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3",
      "Input: word = \"HAPPY\"\nOutput: 6\nExplanation: \nUsing two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6",
      "Input: word = \"NEW\"\nOutput: 3",
      "Input: word = \"YEAR\"\nOutput: 7"
    ],
    "constraints": "`2 <= word.length <= 300`\nEach word[i]` is an English uppercase letter."
  },
  {
    "id": "1321",
    "title": "Restaurant Growth",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1322",
    "title": "Ads Performance",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1323",
    "title": "Maximum 69 Number",
    "difficulty": "Easy",
    "explanation": "Given a positive integer `num` consisting only of digits 6 and 9.\n\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).",
    "examples": [
      "Input: num = 9669\nOutput: 9969\nExplanation: \nChanging the first digit results in 6669.\n\nChanging the second digit results in 9969.\n\nChanging the third digit results in 9699.\n\nChanging the fourth digit results in 9666. \nThe maximum number is 9969.",
      "Input: num = 9996\nOutput: 9999\nExplanation: Changing the last digit 6 to 9 results in the maximum number.",
      "Input: num = 9999\nOutput: 9999\nExplanation: It is better not to apply any change."
    ],
    "constraints": "`1 <= num <= 10^4`\n`num`'s digits are 6 or 9."
  },
  {
    "id": "1324",
    "title": "Print Words Vertically",
    "difficulty": "Medium",
    "explanation": "Given a string `s`. Return all the words vertically in the same order in which they appear in `s`.\n\nWords are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).\n\nEach word would be put on only one column and that in one column there will be only one word.",
    "examples": [
      "Input: s = \"HOW ARE YOU\"\nOutput: [\"HAY\",\"ORO\",\"WEU\"]\nExplanation: Each word is printed vertically. \n \"HAY\"\n \"ORO\"\n \"WEU\"",
      "Input: s = \"TO BE OR NOT TO BE\"\nOutput: [\"TBONTB\",\"OEROOE\",\"   T\"]\nExplanation: Trailing spaces is not allowed. \n\"TBONTB\"\n\"OEROOE\"\n\"   T\"",
      "Input: s = \"CONTEST IS COMING\"\nOutput: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]"
    ],
    "constraints": "`1 <= s.length <= 200`\n`s` contains only upper case English letters.\n\nIt's guaranteed that there is only one space between 2 words."
  },
  {
    "id": "1325",
    "title": "Delete Leaves With a Given Value",
    "difficulty": "Medium",
    "explanation": "Given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`.\n\nNote that once you delete a leaf node with value `target`, if it's parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you can't).",
    "examples": [
      "Input: root = [1,2,3,2,null,2,4], target = 2\nOutput: [1,null,3,null,4]\nExplanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). \nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).",
      "Input: root = [1,3,3,3,2], target = 3\nOutput: [1,3,null,null,2]",
      "Input: root = [1,2,null,2,null,2], target = 2\nOutput: [1]\nExplanation: Leaf nodes in green with value (target = 2) are removed at each step.",
      "Input: root = [1,1,1], target = 1\nOutput: []",
      "Input: root = [1,2,3], target = 1\nOutput: [1,2,3]"
    ],
    "constraints": "`1 <= target <= 1000`\nThe given binary tree will have between `1` and `3000` nodes.\n\nEach node's value is between `[1, 1000]`."
  },
  {
    "id": "1326",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "difficulty": "Hard",
    "explanation": "There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e The length of the garden is `n`).\n\nThere are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.\n\nGiven an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open.\n\nReturn the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.",
    "examples": [
      "Input: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]",
      "Input: n = 3, ranges = [0,0,0,0]\nOutput: -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.",
      "Input: n = 7, ranges = [1,2,1,0,2,1,0,1]\nOutput: 3",
      "Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4]\nOutput: 2",
      "Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4]\nOutput: 1"
    ],
    "constraints": "`1 <= n <= 10^4`\n`ranges.length == n + 1`\n`0 <= ranges[i] <= 100`"
  },
  {
    "id": "1327",
    "title": "List the Products Ordered in a Period",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1328",
    "title": "Break a Palindrome",
    "difficulty": "Medium",
    "explanation": "Given a palindromic string of lowercase English letters `palindrome`, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\n\nReturn the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc\"` is lexicographically smaller than `\"abcd\"` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.",
    "examples": [
      "Input: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\n\nOf all the ways, \"aaccba\" is the lexicographically smallest.",
      "Input: palindrome = \"a\"\nOutput: \"\"\nExplanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.",
      "Input: palindrome = \"aa\"\nOutput: \"ab\"",
      "Input: palindrome = \"aba\"\nOutput: \"abb\""
    ],
    "constraints": "`1 <= palindrome.length <= 1000`\n`palindrome` consists of only lowercase English letters."
  },
  {
    "id": "1329",
    "title": "Sort the Matrix Diagonally",
    "difficulty": "Medium",
    "explanation": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\nGiven an `m x n` matrix `mat` of integers, sort each matrix diagonal in ascending order and return the resulting matrix.",
    "examples": [
      "Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
      "Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]"
    ],
    "constraints": "`m == mat.length`\n`n == mat[i].length`\n`1 <= m, n <= 100`\n`1 <= mat[i][j] <= 100`"
  },
  {
    "id": "1330",
    "title": "Reverse Subarray To Maximize Array Value",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `nums`. The value of this array is defined as the sum of `|nums[i]-nums[i+1]|` for all `0 <= i < nums.length-1`.\n\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.\n\nFind maximum possible value of the final array.",
    "examples": [
      "Input: nums = [2,3,1,5,4]\nOutput: 10\nExplanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.",
      "Input: nums = [2,4,9,24,2,1,10]\nOutput: 68"
    ],
    "constraints": "`1 <= nums.length <= 3*10^4`\n`-10^5 <= nums[i] <= 10^5`"
  },
  {
    "id": "1331",
    "title": "Rank Transform of an Array",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `arr`, replace each element with its rank.\n\nThe rank represents how large the element is. The rank has the following rules:\nRank is an integer starting from 1.\n\nThe larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n\nRank should be as small as possible.",
    "examples": [
      "Input: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.",
      "Input: arr = [100,100,100]\nOutput: [1,1,1]\nExplanation: Same elements share the same rank.",
      "Input: arr = [37,12,28,9,100,56,80,5,12]\nOutput: [5,3,4,2,8,6,7,1,3]"
    ],
    "constraints": "`0 <= arr.length <= 105`\n`-109 <= arr[i] <= 109`"
  },
  {
    "id": "1332",
    "title": "Remove Palindromic Subsequences",
    "difficulty": "Easy",
    "explanation": "You are given a string `s` consisting only of letters `'a'` and `'b'`. In a single step you can remove one palindromic subsequence from `s`.\n\nReturn the minimum number of steps to make the given string empty.\n\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\n\nA string is called palindrome if is one that reads the same backward as well as forward.",
    "examples": [
      "Input: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.",
      "Input: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\".",
      "Input: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\"."
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s[i]` is either `'a'` or `'b'`."
  },
  {
    "id": "1333",
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "difficulty": "Medium",
    "explanation": "Given the array `restaurants` where  `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.\n\nThe `veganFriendly` filter will be either true (meaning you should only include restaurants with `veganFriendlyi` set to true) or false (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively.\n\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value 1 when it is true, and 0 when it is false.",
    "examples": [
      "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5] \nExplanation: \nThe restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).",
      "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\nOutput: [4,3,2,1,5]\nExplanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.",
      "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\nOutput: [4,5]"
    ],
    "constraints": "`1 <= restaurants.length <= 10^4`\n`restaurants[i].length == 5`\n`1 <= idi, ratingi, pricei, distancei <= 10^5`\n`1 <= maxPrice, maxDistance <= 10^5`\n`veganFriendlyi` and `veganFriendly` are 0 or 1.\n\nAll `idi` are distinct."
  },
  {
    "id": "1334",
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "difficulty": "Medium",
    "explanation": "There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.\n\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.\n\nNotice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.",
    "examples": [
      "Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\nOutput: 3\nExplanation: The figure above describes the graph. \nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2] \nCity 1 -> [City 0, City 2, City 3] \nCity 2 -> [City 0, City 1, City 3] \nCity 3 -> [City 1, City 2] \nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.",
      "Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\nOutput: 0\nExplanation: The figure above describes the graph. \nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> [City 1] \nCity 1 -> [City 0, City 4] \nCity 2 -> [City 3, City 4] \nCity 3 -> [City 2, City 4]\nCity 4 -> [City 1, City 2, City 3] \nThe city 0 has 1 neighboring city at a distanceThreshold = 2."
    ],
    "constraints": "`2 <= n <= 100`\n`1 <= edges.length <= n * (n - 1) / 2`\n`edges[i].length == 3`\n`0 <= fromi < toi < n`\n`1 <= weighti, distanceThreshold <= 10^4`\nAll pairs `(fromi, toi)` are distinct."
  },
  {
    "id": "1335",
    "title": "Minimum Difficulty of a Job Schedule",
    "difficulty": "Hard",
    "explanation": "You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `i-th` job, you have to finish all the jobs `j` where `0 <= j < i`).\n\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done in that day.\n\nGiven an array of integers `jobDifficulty` and an integer `d`. The difficulty of the `i-th` job is `jobDifficulty[i]`.\n\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.",
    "examples": [
      "Input: jobDifficulty = [6,5,4,3,2,1], d = 2\nOutput: 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\n\nSecond day you can finish the last job, total difficulty = 1.\n\nThe difficulty of the schedule = 6 + 1 = 7",
      "Input: jobDifficulty = [9,9,9], d = 4\nOutput: -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.",
      "Input: jobDifficulty = [1,1,1], d = 3\nOutput: 3\nExplanation: The schedule is one job per day. total difficulty will be 3.",
      "Input: jobDifficulty = [7,1,7,1,7,1], d = 3\nOutput: 15",
      "Input: jobDifficulty = [11,111,22,222,33,333,44,444], d = 6\nOutput: 843"
    ],
    "constraints": "`1 <= jobDifficulty.length <= 300`\n`0 <= jobDifficulty[i] <= 1000`\n`1 <= d <= 10`"
  },
  {
    "id": "1336",
    "title": "Number of Transactions per Visit",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1337",
    "title": "The K Weakest Rows in a Matrix",
    "difficulty": "Easy",
    "explanation": "You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned in front of the civilians. That is, all the `1`'s will appear to the left of all the `0`'s in each row.\n\nA row `i` is weaker than a row `j` if one of the following is true:\nThe number of soldiers in row `i` is less than the number of soldiers in row `j`.\n\nBoth rows have the same number of soldiers and `i < j`.\n\nReturn the indices of the `k` weakest rows in the matrix ordered from weakest to strongest.",
    "examples": [
      "Input: mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\nOutput: [2,0,3]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].",
      "Input: mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\nOutput: [0,2]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1]."
    ],
    "constraints": "`m == mat.length`\n`n == mat[i].length`\n`2 <= n, m <= 100`\n`1 <= k <= m`\n`matrix[i][j]` is either 0 or 1."
  },
  {
    "id": "1338",
    "title": "Reduce Array Size to The Half",
    "difficulty": "Medium",
    "explanation": "Given an array `arr`.  You can choose a set of integers and remove all the occurrences of these integers in the array.\n\nReturn the minimum size of the set so that at least half of the integers of the array are removed.",
    "examples": [
      "Input: arr = [3,3,3,3,5,5,5,2,2,7]\nOutput: 2\nExplanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\n\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\n\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.",
      "Input: arr = [7,7,7,7,7,7]\nOutput: 1\nExplanation: The only possible set you can choose is {7}. This will make the new array empty.",
      "Input: arr = [1,9]\nOutput: 1",
      "Input: arr = [1000,1000,3,7]\nOutput: 1",
      "Input: arr = [1,2,3,4,5,6,7,8,9,10]\nOutput: 5"
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`arr.length` is even.\n\n`1 <= arr[i] <= 10^5`"
  },
  {
    "id": "1339",
    "title": "Maximum Product of Splitted Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree `root`. Split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized.\n\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
      "Input: root = [1,2,3,4,5,6]\nOutput: 110\nExplanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)",
      "Input: root = [1,null,2,3,4,null,null,5,6]\nOutput: 90\nExplanation:  Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)",
      "Input: root = [2,3,9,10,7,8,6,5,4,11,1]\nOutput: 1025",
      "Input: root = [1,1]\nOutput: 1"
    ],
    "constraints": "Each tree has at most `50000` nodes and at least `2` nodes.\n\nEach node's value is between `[1, 10000]`."
  },
  {
    "id": "1340",
    "title": "Jump Game V",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `arr` and an integer `d`. In one step you can jump from index `i` to index:\n`i + x` where: `i + x < arr.length` and ` 0 < x <= d`.\n\n`i - x` where: `i - x >= 0` and ` 0 < x <= d`.\n\nIn addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i, j) < k < max(i, j)`).\n\nYou can choose any index of the array and start jumping. Return the maximum number of indices you can visit.\n\nNotice that you can not jump outside of the array at any time.",
    "examples": [
      "Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\n\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\n\nSimilarly You cannot jump from index 3 to index 2 or index 1.",
      "Input: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You can start at any index. You always cannot jump to any index.",
      "Input: arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0. You can visit all the indicies.",
      "Input: arr = [7,1,7,1,7,1], d = 2\nOutput: 2",
      "Input: arr = [66], d = 1\nOutput: 1"
    ],
    "constraints": "`1 <= arr.length <= 1000`\n`1 <= arr[i] <= 10^5`\n`1 <= d <= arr.length`"
  },
  {
    "id": "1341",
    "title": "Movie Rating",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1342",
    "title": "Number of Steps to Reduce a Number to Zero",
    "difficulty": "Easy",
    "explanation": "Given a non-negative integer `num`, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",
    "examples": [
      "Input: num = 14\nOutput: 6\nExplanation: \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is odd; subtract 1 and obtain 6.\n\nStep 3) 6 is even; divide by 2 and obtain 3. \nStep 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.",
      "Input: num = 8\nOutput: 4\nExplanation: \nStep 1) 8 is even; divide by 2 and obtain 4. \nStep 2) 4 is even; divide by 2 and obtain 2. \nStep 3) 2 is even; divide by 2 and obtain 1. \nStep 4) 1 is odd; subtract 1 and obtain 0.",
      "Input: num = 123\nOutput: 12"
    ],
    "constraints": "`0 <= num <= 10^6`"
  },
  {
    "id": "1343",
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr` and two integers `k` and `threshold`.\n\nReturn the number of sub-arrays of size `k` and average greater than or equal to `threshold`.",
    "examples": [
      "Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).",
      "Input: arr = [1,1,1,1,1], k = 1, threshold = 0\nOutput: 5",
      "Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\nOutput: 6\nExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.",
      "Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7\nOutput: 1",
      "Input: arr = [4,4,4,4], k = 4, threshold = 1\nOutput: 1"
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`1 <= arr[i] <= 10^4`\n`1 <= k <= arr.length`\n`0 <= threshold <= 10^4`"
  },
  {
    "id": "1344",
    "title": "Angle Between Hands of a Clock",
    "difficulty": "Medium",
    "explanation": "Given two numbers, `hour` and `minutes`. Return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.",
    "examples": [
      "Input: hour = 12, minutes = 30\nOutput: 165",
      "Input: hour = 3, minutes = 30\nOutput: 75",
      "Input: hour = 3, minutes = 15\nOutput: 7.5",
      "Input: hour = 4, minutes = 50\nOutput: 155",
      "Input: hour = 12, minutes = 0\nOutput: 0"
    ],
    "constraints": "`1 <= hour <= 12`\n`0 <= minutes <= 59`\nAnswers within `10^-5` of the actual value will be accepted as correct."
  },
  {
    "id": "1345",
    "title": "Jump Game IV",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `arr`, you are initially positioned at the first index of the array.\n\nIn one step you can jump from index `i` to index:\n`i + 1` where: `i + 1 < arr.length`.\n\n`i - 1` where: `i - 1 >= 0`.\n\n`j` where: `arr[i] == arr[j]` and `i != j`.\n\nReturn the minimum number of steps to reach the last index of the array.\n\nNotice that you can not jump outside of the array at any time.",
    "examples": [
      "Input: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.",
      "Input: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You don't need to jump.",
      "Input: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.",
      "Input: arr = [6,1,9]\nOutput: 2",
      "Input: arr = [11,22,7,7,7,7,7,7,7,22,13]\nOutput: 3"
    ],
    "constraints": "`1 <= arr.length <= 5 * 104`\n`-108 <= arr[i] <= 108`"
  },
  {
    "id": "1346",
    "title": "Check If N and Its Double Exist",
    "difficulty": "Easy",
    "explanation": "Given an array `arr` of integers, check if there exists two integers `N` and `M` such that `N` is the double of `M` ( i.e. `N = 2 * M`).\n\nMore formally check if there exists two indices `i` and `j` such that :\n`i != j`\n`0 <= i, j < arr.length`\n`arr[i] == 2 * arr[j]`",
    "examples": [
      "Input: arr = [10,2,5,3]\nOutput: true\nExplanation: N` = 10` is the double of M` = 5`,that is, `10 = 2 * 5`.",
      "Input: arr = [7,1,14,11]\nOutput: true\nExplanation: N` = 14` is the double of M` = 7`,that is, `14 = 2 * 7`.",
      "Input: arr = [3,1,7,11]\nOutput: false\nExplanation: In this case does not exist N and M, such that N = 2 * M."
    ],
    "constraints": "`2 <= arr.length <= 500`\n`-10^3 <= arr[i] <= 10^3`"
  },
  {
    "id": "1347",
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "difficulty": "Medium",
    "explanation": "Given two equal-size strings `s` and `t`. In one step you can choose any character of `t` and replace it with another character.\n\nReturn the minimum number of steps to make `t` an anagram of `s`.\n\nAn Anagram of a string is a string that contains the same characters with a different (or the same) ordering.",
    "examples": [
      "Input: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.",
      "Input: s = \"leetcode\", t = \"practice\"\nOutput: 5\nExplanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.",
      "Input: s = \"anagram\", t = \"mangaar\"\nOutput: 0\nExplanation: \"anagram\" and \"mangaar\" are anagrams.",
      "Input: s = \"xxyyzz\", t = \"xxyyzz\"\nOutput: 0",
      "Input: s = \"friend\", t = \"family\"\nOutput: 4"
    ],
    "constraints": "`1 <= s.length <= 50000`\n`s.length == t.length`\n`s` and `t` contain lower-case English letters only."
  },
  {
    "id": "1348",
    "title": "Tweet Counts Per Frequency",
    "difficulty": "Medium",
    "explanation": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\n\nFor example, the period `[10, 10000]` (in seconds) would be partitioned into the following time chunks with these frequencies:\nEvery minute (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`\nEvery hour (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`\nEvery day (86400-second chunks): `[10,10000]`\nNotice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example).\n\nDesign and implement an API to help the company with their analysis.\n\nImplement the `TweetCounts` class:\n`TweetCounts()` Initializes the `TweetCounts` object.\n\n`void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in seconds).\n\n`List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each time chunk for the given period of time `[startTime, endTime]` (in seconds) and frequency `freq`.\n\n\t\n`freq` is one of `\"minute\"`, `\"hour\"`, or `\"day\"` representing a frequency of every minute, hour, or day respectively.\n\n\nExample:\nInput\n[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\nOutput\n[null,null,null,null,[2],[2,1],null,[4]]\nExplanation\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0);                              // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60);                             // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10);                             // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120);                            // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  // return [4]; chunk [0,210] had 4 tweets\n\nConstraints:\n`0 <= time, startTime, endTime <= 109`\n`0 <= endTime - startTime <= 104`\nThere will be at most `104` calls in total to `recordTweet` and `getTweetCountsPerFrequency`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1349",
    "title": "Maximum Students Taking Exam",
    "difficulty": "Hard",
    "explanation": "Given a `m * n` matrix `seats`  that represent seats distributions in a classroom. If a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.\n\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible..\n\nStudents must be placed in seats in good condition.",
    "examples": [
      "Input: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n                [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n                [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]\nOutput: 4\nExplanation: Teacher can place 4 students in available seats so they don't cheat on the exam.",
      "Input: seats = [[\".\",\"#\"],\n                [\"#\",\"#\"],\n                [\"#\",\".\"],\n                [\"#\",\"#\"],\n                [\".\",\"#\"]]\nOutput: 3\nExplanation: Place all students in available seats.",
      "Input: seats = [[\"#\",\".\",\".\",\".\",\"#\"],\n                [\".\",\"#\",\".\",\"#\",\".\"],\n                [\".\",\".\",\"#\",\".\",\".\"],\n                [\".\",\"#\",\".\",\"#\",\".\"],\n                [\"#\",\".\",\".\",\".\",\"#\"]]\nOutput: 10\nExplanation: Place students in available seats in column 1, 3 and 5."
    ],
    "constraints": "`seats` contains only characters `'.' and``'#'.`\n`m == seats.length`\n`n == seats[i].length`\n`1 <= m <= 8`\n`1 <= n <= 8`"
  },
  {
    "id": "1350",
    "title": "Students With Invalid Departments",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1351",
    "title": "Count Negative Numbers in a Sorted Matrix",
    "difficulty": "Easy",
    "explanation": "Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.",
    "examples": [
      "Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negatives number in the matrix.",
      "Input: grid = [[3,2],[1,0]]\nOutput: 0",
      "Input: grid = [[1,-1],[-1,-1]]\nOutput: 3",
      "Input: grid = [[-1]]\nOutput: 1"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 100`\n`-100 <= grid[i][j] <= 100`\nFollow up: Could you find an `O(n + m)` solution?"
  },
  {
    "id": "1352",
    "title": "Product of the Last K Numbers",
    "difficulty": "Medium",
    "explanation": "Implement the class `ProductOfNumbers` that supports two methods:\n1.` add(int num)`\nAdds the number `num` to the back of the current list of numbers.\n\n2.` getProduct(int k)`\nReturns the product of the last `k` numbers in the current list.\n\nYou can assume that always the current list has at least `k` numbers.\n\nAt any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n\n\nExample:\nInput\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\nOutput\n[null,null,null,null,null,null,20,40,0,null,32]\nExplanation\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 \n\nConstraints:\nThere will be at most `40000` operations considering both `add` and `getProduct`.\n\n`0 <= num <= 100`\n`1 <= k <= 40000`",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1353",
    "title": "Maximum Number of Events That Can Be Attended",
    "difficulty": "Medium",
    "explanation": "Given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.\n\nYou can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. Notice that you can only attend one event at any time `d`.\n\nReturn the maximum number of events you can attend.",
    "examples": [
      "Input: events = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: You can attend all the three events.\n\nOne way to attend them all is as shown.\n\nAttend the first event on day 1.\n\nAttend the second event on day 2.\n\nAttend the third event on day 3.",
      "Input: events= [[1,2],[2,3],[3,4],[1,2]]\nOutput: 4",
      "Input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]]\nOutput: 4",
      "Input: events = [[1,100000]]\nOutput: 1",
      "Input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]\nOutput: 7"
    ],
    "constraints": "`1 <= events.length <= 105`\n`events[i].length == 2`\n`1 <= startDayi <= endDayi <= 105`"
  },
  {
    "id": "1354",
    "title": "Construct Target Array With Multiple Sums",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `target`. From a starting array, `A` consisting of all 1's, you may perform the following procedure :\nlet `x` be the sum of all elements currently in your array.\n\nchoose index `i`, such that `0 <= i < target.size` and set the value of `A` at index `i` to `x`.\n\nYou may repeat this procedure as many times as needed.\n\nReturn True if it is possible to construct the `target` array from `A` otherwise return False.",
    "examples": [
      "Input: target = [9,3,5]\nOutput: true\nExplanation: Start with [1, 1, 1] \n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done",
      "Input: target = [1,1,1,2]\nOutput: false\nExplanation: Impossible to create target array from [1,1,1,1].",
      "Input: target = [8,5]\nOutput: true"
    ],
    "constraints": "`N == target.length`\n`1 <= target.length <= 5 * 10^4`\n`1 <= target[i] <= 10^9`"
  },
  {
    "id": "1355",
    "title": "Activity Participants",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1356",
    "title": "Sort Integers by The Number of 1 Bits",
    "difficulty": "Easy",
    "explanation": "Given an integer array `arr`. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.\n\nReturn the sorted array.",
    "examples": [
      "Input: arr = [0,1,2,3,4,5,6,7,8]\nOutput: [0,1,2,4,8,3,5,6,7]\nExplantion: [0] is the only integer with 0 bits.\n\n[1,2,4,8] all have 1 bit.\n\n[3,5,6] have 2 bits.\n\n[7] has 3 bits.\n\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]",
      "Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]\nOutput: [1,2,4,8,16,32,64,128,256,512,1024]\nExplantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.",
      "Input: arr = [10000,10000]\nOutput: [10000,10000]",
      "Input: arr = [2,3,5,7,11,13,17,19]\nOutput: [2,3,5,17,7,11,13,19]",
      "Input: arr = [10,100,1000,10000]\nOutput: [10,100,10000,1000]"
    ],
    "constraints": "`1 <= arr.length <= 500`\n`0 <= arr[i] <= 10^4`"
  },
  {
    "id": "1357",
    "title": "Apply Discount Every n Orders",
    "difficulty": "Medium",
    "explanation": "There is a sale in a supermarket, there will be a `discount` every `n` customer.\n\nThere are some products in the supermarket where the id of the `i-th` product is `products[i]` and the price per unit of this product is `prices[i]`.\n\nThe system will count the number of customers and when the `n-th` customer arrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the new cost is `x - (discount * x) / 100`). Then the system will start counting customers again.\n\nThe customer orders a certain amount of each product where `product[i]` is the id of the `i-th` product the customer ordered and `amount[i]` is the number of units the customer ordered of that product.\n\nImplement the `Cashier` class:\n`Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, the `products` and their `prices`.\n\n`double getBill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. Answers within `10^-5` of the actual value will be accepted as correct.",
    "examples": [
      "Input\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\nOutput\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.\n\ncashier.getBill([3,7],[10,10]);                      // return 4000.0\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.\n\ncashier.getBill([4],[10]);                           // return 4000.0\ncashier.getBill([7,3],[10,10]);                      // return 4000.0\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0"
    ],
    "constraints": "`1 <= n <= 10^4`\n`0 <= discount <= 100`\n`1 <= products.length <= 200`\n`1 <= products[i] <= 200`\nThere are not repeated elements in the array `products`.\n\n`prices.length == products.length`\n`1 <= prices[i] <= 1000`\n`1 <= product.length <= products.length`\n`product[i]` exists in `products`.\n\n`amount.length == product.length`\n`1 <= amount[i] <= 1000`\nAt most `1000` calls will be made to `getBill`.\n\nAnswers within `10^-5` of the actual value will be accepted as correct."
  },
  {
    "id": "1358",
    "title": "Number of Substrings Containing All Three Characters",
    "difficulty": "Medium",
    "explanation": "Given a string `s` consisting only of characters a, b and c.\n\nReturn the number of substrings containing at least one occurrence of all these characters a, b and c.",
    "examples": [
      "Input: s = \"abcabc\"\nOutput: 10\nExplanation: The substrings containing at least one occurrence of the characters a, b and c are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again).",
      "Input: s = \"aaacb\"\nOutput: 3\nExplanation: The substrings containing at least one occurrence of the characters a, b and c are \"aaacb\", \"aacb\" and \"acb\".",
      "Input: s = \"abc\"\nOutput: 1"
    ],
    "constraints": "`3 <= s.length <= 5 x 10^4`\n`s` only consists of a, b or c characters."
  },
  {
    "id": "1359",
    "title": "Count All Valid Pickup and Delivery Options",
    "difficulty": "Hard",
    "explanation": "Given `n` orders, each order consist in pickup and delivery services. \nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). \nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
      "Input: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.",
      "Input: n = 2\nOutput: 6\nExplanation: All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\n\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.",
      "Input: n = 3\nOutput: 90"
    ],
    "constraints": "`1 <= n <= 500`"
  },
  {
    "id": "1360",
    "title": "Number of Days Between Two Dates",
    "difficulty": "Easy",
    "explanation": "Write a program to count the number of days between two dates.\n\nThe two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.",
    "examples": [
      "Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\"\nOutput: 1",
      "Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\"\nOutput: 15"
    ],
    "constraints": "The given dates are valid dates between the years `1971` and `2100`."
  },
  {
    "id": "1361",
    "title": "Validate Binary Tree Nodes",
    "difficulty": "Medium",
    "explanation": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if all the given nodes form exactly one valid binary tree.\n\nIf node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.\n\nNote that the nodes have no values and that we only use the node numbers in this problem.",
    "examples": [
      "Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true",
      "Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false",
      "Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false",
      "Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]\nOutput: false"
    ],
    "constraints": "`1 <= n <= 104`\n`leftChild.length == rightChild.length == n`\n`-1 <= leftChild[i], rightChild[i] <= n - 1`"
  },
  {
    "id": "1362",
    "title": "Closest Divisors",
    "difficulty": "Medium",
    "explanation": "Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`.\n\nReturn the two integers in any order.",
    "examples": [
      "Input: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.",
      "Input: num = 123\nOutput: [5,25]",
      "Input: num = 999\nOutput: [40,25]"
    ],
    "constraints": "`1 <= num <= 10^9`"
  },
  {
    "id": "1363",
    "title": "Largest Multiple of Three",
    "difficulty": "Hard",
    "explanation": "Given an integer array of `digits`, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.\n\nSince the answer may not fit in an integer data type, return the answer as a string.\n\nIf there is no answer return an empty string.",
    "examples": [
      "Input: digits = [8,1,9]\nOutput: \"981\"",
      "Input: digits = [8,6,7,1,0]\nOutput: \"8760\"",
      "Input: digits = [1]\nOutput: \"\"",
      "Input: digits = [0,0,0,0,0,0]\nOutput: \"0\""
    ],
    "constraints": "`1 <= digits.length <= 10^4`\n`0 <= digits[i] <= 9`\nThe returning answer must not contain unnecessary leading zeros."
  },
  {
    "id": "1364",
    "title": "Number of Trusted Contacts of a Customer",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1365",
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "difficulty": "Easy",
    "explanation": "Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` and `nums[j] < nums[i]`.\n\nReturn the answer in an array.",
    "examples": [
      "Input: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\n\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).",
      "Input: nums = [6,5,4,8]\nOutput: [2,1,0,3]",
      "Input: nums = [7,7,7,7]\nOutput: [0,0,0,0]"
    ],
    "constraints": "`2 <= nums.length <= 500`\n`0 <= nums[i] <= 100`"
  },
  {
    "id": "1366",
    "title": "Rank Teams by Votes",
    "difficulty": "Medium",
    "explanation": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.\n\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\n\nGiven an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\n\nReturn a string of all teams sorted by the ranking system.",
    "examples": [
      "Input: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\nOutput: \"ACB\"\nExplanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.\n\nTeam B was ranked second by 2 voters and was ranked third by 3 voters.\n\nTeam C was ranked second by 3 voters and was ranked third by 2 voters.\n\nAs most of the voters ranked C second, team C is the second team and team B is the third.",
      "Input: votes = [\"WXYZ\",\"XYZW\"]\nOutput: \"XWYZ\"\nExplanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position.",
      "Input: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\nOutput: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\nExplanation: Only one voter so his votes are used for the ranking.",
      "Input: votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]\nOutput: \"ABC\"\nExplanation: \nTeam A was ranked first by 2 voters, second by 2 voters and third by 2 voters.\n\nTeam B was ranked first by 2 voters, second by 2 voters and third by 2 voters.\n\nTeam C was ranked first by 2 voters, second by 2 voters and third by 2 voters.\n\nThere is a tie and we rank teams ascending by their IDs.",
      "Input: votes = [\"M\",\"M\",\"M\",\"M\"]\nOutput: \"M\"\nExplanation: Only team M in the competition so it has the first rank."
    ],
    "constraints": "`1 <= votes.length <= 1000`\n`1 <= votes[i].length <= 26`\n`votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.\n\n`votes[i][j]` is an English upper-case letter.\n\nAll characters of `votes[i]` are unique.\n\nAll the characters that occur in `votes[0]` also occur in `votes[j]` where `1 <= j < votes.length`."
  },
  {
    "id": "1367",
    "title": "Linked List in Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree `root` and a linked list with `head` as the first node. \nReturn True if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree otherwise return False.\n\nIn this context downward path means a path that starts at some node and goes downwards.",
    "examples": [
      "Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\nExplanation: Nodes in blue form a subpath in the binary Tree.",
      "Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true",
      "Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from `head`."
    ],
    "constraints": "The number of nodes in the tree will be in the range `[1, 2500]`.\n\nThe number of nodes in the list will be in the range `[1, 100]`.\n\n`1 <= Node.val <= 100` for each node in the linked list and binary tree."
  },
  {
    "id": "1368",
    "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
    "difficulty": "Hard",
    "explanation": "Given a m x n `grid`. Each cell of the `grid` has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:\n1 which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)\n2 which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)\n3 which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)\n4 which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)\nNotice that there could be some invalid signs on the cells of the `grid` which points outside the `grid`.\n\nYou will initially start at the upper left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path doesn't have to be the shortest.\n\nYou can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell one time only.\n\nReturn the minimum cost to make the grid have at least one valid path.",
    "examples": [
      "Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\nOutput: 3\nExplanation: You will start at point (0, 0).\n\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3.",
      "Input: grid = [[1,1,3],[3,2,2],[1,1,4]]\nOutput: 0\nExplanation: You can follow the path from (0, 0) to (2, 2).",
      "Input: grid = [[1,2],[4,3]]\nOutput: 1",
      "Input: grid = [[2,2,2],[2,2,2]]\nOutput: 3",
      "Input: grid = [[4]]\nOutput: 0"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 100`"
  },
  {
    "id": "1369",
    "title": "Get the Second Most Recent Activity",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1370",
    "title": "Increasing Decreasing String",
    "difficulty": "Easy",
    "explanation": "Given a string `s`. You should re-order the string using the following algorithm:\nPick the smallest character from `s` and append it to the result.\n\nPick the smallest character from `s` which is greater than the last appended character to the result and append it.\n\nRepeat step 2 until you cannot pick more characters.\n\nPick the largest character from `s` and append it to the result.\n\nPick the largest character from `s` which is smaller than the last appended character to the result and append it.\n\nRepeat step 5 until you cannot pick more characters.\n\nRepeat the steps from 1 to 6 until you pick all characters from `s`.\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\n\nReturn the result string after sorting `s` with this algorithm.",
    "examples": [
      "Input: s = \"aaaabbbbcccc\"\nOutput: \"abccbaabccba\"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"",
      "Input: s = \"rat\"\nOutput: \"art\"\nExplanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.",
      "Input: s = \"leetcode\"\nOutput: \"cdelotee\"",
      "Input: s = \"ggggggg\"\nOutput: \"ggggggg\"",
      "Input: s = \"spo\"\nOutput: \"ops\""
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` contains only lower-case English letters."
  },
  {
    "id": "1371",
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "difficulty": "Medium",
    "explanation": "Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.",
    "examples": [
      "Input: s = \"eleetminicoworoep\"\nOutput: 13\nExplanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.",
      "Input: s = \"leetcodeisgreat\"\nOutput: 5\nExplanation: The longest substring is \"leetc\" which contains two e's.",
      "Input: s = \"bcbcbc\"\nOutput: 6\nExplanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times."
    ],
    "constraints": "`1 <= s.length <= 5 x 10^5`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1372",
    "title": "Longest ZigZag Path in a Binary Tree",
    "difficulty": "Medium",
    "explanation": "You are given the `root` of a binary tree.\n\nA ZigZag path for a binary tree is defined as follow:\nChoose any node in the binary tree and a direction (right or left).\n\nIf the current direction is right, move to the right child of the current node; otherwise, move to the left child.\n\nChange the direction from right to left or from left to right.\n\nRepeat the second and third steps until you can't move in the tree.\n\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\n\nReturn the longest ZigZag path contained in that tree.",
    "examples": [
      "Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\nOutput: 3\nExplanation: Longest ZigZag path in blue nodes (right -> left -> right).",
      "Input: root = [1,1,1,null,1,null,null,1,1,null,1]\nOutput: 4\nExplanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).",
      "Input: root = [1]\nOutput: 0"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 5 * 104]`.\n\n`1 <= Node.val <= 100`"
  },
  {
    "id": "1373",
    "title": "Maximum Sum BST in Binary Tree",
    "difficulty": "Hard",
    "explanation": "Given a binary tree `root`, the task is to return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\n\nAssume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node's key.\n\nThe right subtree of a node contains only nodes with keys greater than the node's key.\n\nBoth the left and right subtrees must also be binary search trees.",
    "examples": [
      "Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\nOutput: 20\nExplanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.",
      "Input: root = [4,3,null,1,2]\nOutput: 2\nExplanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.",
      "Input: root = [-4,-2,-5]\nOutput: 0\nExplanation: All values are negatives. Return an empty BST.",
      "Input: root = [2,1,3]\nOutput: 6",
      "Input: root = [5,4,8,3,null,6,3]\nOutput: 7"
    ],
    "constraints": "The given binary tree will have between `1` and `40000` nodes.\n\nEach node's value is between `[-4 * 10^4 , 4 * 10^4]`."
  },
  {
    "id": "1374",
    "title": "Generate a String With Characters That Have Odd Counts",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times.\n\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.",
    "examples": [
      "Input: n = 4\nOutput: \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".",
      "Input: n = 2\nOutput: \"xy\"\nExplanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".",
      "Input: n = 7\nOutput: \"holasss\""
    ],
    "constraints": "`1 <= n <= 500`"
  },
  {
    "id": "1375",
    "title": "Bulb Switcher III",
    "difficulty": "Medium",
    "explanation": "There is a room with `n` bulbs, numbered from `1` to `n`, arranged in a row from left to right. Initially, all the bulbs are turned off.\n\nAt moment k (for k from `0` to `n - 1`), we turn on the `light[k]` bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\n\nReturn the number of moments in which all turned on bulbs are blue.",
    "examples": [
      "Input: light = [2,1,3,5,4]\nOutput: 3\nExplanation: All bulbs turned on, are blue at the moment 1, 2 and 4.",
      "Input: light = [3,2,4,1,5]\nOutput: 2\nExplanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).",
      "Input: light = [4,1,2,3]\nOutput: 1\nExplanation: All bulbs turned on, are blue at the moment 3 (index-0).\n\nBulb 4th changes to blue at the moment 3.",
      "Input: light = [2,1,4,3,6,5]\nOutput: 3",
      "Input: light = [1,2,3,4,5,6]\nOutput: 6"
    ],
    "constraints": "`n == light.length`\n`1 <= n <= 5 * 10^4`\n`light` is a permutation of  `[1, 2, ..., n]`"
  },
  {
    "id": "1376",
    "title": "Time Needed to Inform All Employees",
    "difficulty": "Medium",
    "explanation": "A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.\n\nEach employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.\n\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\n\nThe `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\n\nReturn the number of minutes needed to inform all the employees about the urgent news.",
    "examples": [
      "Input: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.",
      "Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\n\nThe tree structure of the employees in the company is shown.",
      "Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]\nOutput: 21\nExplanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.\n\nThe employee with id = 5 will inform the employee with id = 4 in 2 minutes.\n\nThe employee with id = 4 will inform the employee with id = 3 in 3 minutes.\n\nThe employee with id = 3 will inform the employee with id = 2 in 4 minutes.\n\nThe employee with id = 2 will inform the employee with id = 1 in 5 minutes.\n\nThe employee with id = 1 will inform the employee with id = 0 in 6 minutes.\n\nNeeded time = 1 + 2 + 3 + 4 + 5 + 6 = 21.",
      "Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]\nOutput: 3\nExplanation: The first minute the head will inform employees 1 and 2.\n\nThe second minute they will inform employees 3, 4, 5 and 6.\n\nThe third minute they will inform the rest of employees.",
      "Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]\nOutput: 1076"
    ],
    "constraints": "`1 <= n <= 105`\n`0 <= headID < n`\n`manager.length == n`\n`0 <= manager[i] < n`\n`manager[headID] == -1`\n`informTime.length == n`\n`0 <= informTime[i] <= 1000`\n`informTime[i] == 0` if employee `i` has no subordinates.\n\nIt is guaranteed that all the employees can be informed."
  },
  {
    "id": "1377",
    "title": "Frog Position After T Seconds",
    "difficulty": "Hard",
    "explanation": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.\n\nReturn the probability that after `t` seconds the frog is on the vertex `target`.",
    "examples": [
      "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\nOutput: 0.16666666666666666 \nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666.",
      "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\nOutput: 0.3333333333333333\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1.",
      "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6\nOutput: 0.16666666666666666"
    ],
    "constraints": "`1 <= n <= 100`\n`edges.length == n - 1`\n`edges[i].length == 2`\n`1 <= ai, bi <= n`\n`1 <= t <= 50`\n`1 <= target <= n`\nAnswers within `10-5` of the actual value will be accepted as correct."
  },
  {
    "id": "1378",
    "title": "Replace Employee ID With The Unique Identifier",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1379",
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "difficulty": "Medium",
    "explanation": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.\n\nThe `cloned` tree is a copy of the `original` tree.\n\nReturn a reference to the same node in the `cloned` tree.\n\nNote that you are not allowed to change any of the two trees or the `target` node and the answer must be a reference to a node in the `cloned` tree.\n\nFollow up: Solve the problem if repeated values on the tree are allowed.",
    "examples": [
      "Input: tree = [7,4,3,null,null,6,19], target = 3\nOutput: 3\nExplanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.",
      "Input: tree = [7], target =  7\nOutput: 7",
      "Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4\nOutput: 4",
      "Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5\nOutput: 5",
      "Input: tree = [1,2,null,3], target = 2\nOutput: 2"
    ],
    "constraints": "The number of nodes in the `tree` is in the range `[1, 10^4]`.\n\nThe values of the nodes of the `tree` are unique.\n\n`target` node is a node from the `original` tree and is not `null`."
  },
  {
    "id": "1380",
    "title": "Lucky Numbers in a Matrix",
    "difficulty": "Easy",
    "explanation": "Given a `m * n` matrix of distinct numbers, return all lucky numbers in the matrix in any order.\n\nA lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.",
    "examples": [
      "Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]\nOutput: [15]\nExplanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column",
      "Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\nOutput: [12]\nExplanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.",
      "Input: matrix = [[7,8],[1,2]]\nOutput: [7]"
    ],
    "constraints": "`m == mat.length`\n`n == mat[i].length`\n`1 <= n, m <= 50`\n`1 <= matrix[i][j] <= 10^5`.\n\nAll elements in the matrix are distinct."
  },
  {
    "id": "1381",
    "title": "Design a Stack With Increment Operation",
    "difficulty": "Medium",
    "explanation": "Design a stack which supports the following operations.\n\nImplement the `CustomStack` class:\n`CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack or do nothing if the stack reached the `maxSize`.\n\n`void push(int x)` Adds `x` to the top of the stack if the stack hasn't reached the `maxSize`.\n\n`int pop()` Pops and returns the top of stack or -1 if the stack is empty.\n\n`void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, just increment all the elements in the stack.",
    "examples": [
      "Input\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack customStack = new CustomStack(3); // Stack is Empty []\ncustomStack.push(1);                          // stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.push(3);                          // stack becomes [1, 2, 3]\ncustomStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4\ncustomStack.increment(5, 100);                // stack becomes [101, 102, 103]\ncustomStack.increment(2, 100);                // stack becomes [201, 202, 103]\ncustomStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\ncustomStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]\ncustomStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []\ncustomStack.pop();                            // return -1 --> Stack is empty return -1."
    ],
    "constraints": "`1 <= maxSize <= 1000`\n`1 <= x <= 1000`\n`1 <= k <= 1000`\n`0 <= val <= 100`\nAt most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately."
  },
  {
    "id": "1382",
    "title": "Balance a Binary Search Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary search tree, return a balanced binary search tree with the same node values.\n\nA binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.\n\nIf there is more than one answer, return any of them.",
    "examples": [
      "Input: root = [1,null,2,null,3,null,4,null,null]\nOutput: [2,1,3,null,null,null,4]\nExplanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct."
    ],
    "constraints": "The number of nodes in the tree is between `1` and `10^4`.\n\nThe tree nodes will have distinct values between `1` and `10^5`."
  },
  {
    "id": "1383",
    "title": "Maximum Performance of a Team",
    "difficulty": "Hard",
    "explanation": "There are `n` engineers numbered from 1 to `n` and two arrays: `speed` and `efficiency`, where `speed[i]` and `efficiency[i]` represent the speed and efficiency for the i-th engineer respectively. Return the maximum performance of a team composed of at most `k` engineers, since the answer can be a huge number, return this modulo 10^9 + 7.\n\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.",
    "examples": [
      "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.",
      "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.",
      "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72"
    ],
    "constraints": "`1 <= n <= 10^5`\n`speed.length == n`\n`efficiency.length == n`\n`1 <= speed[i] <= 10^5`\n`1 <= efficiency[i] <= 10^8`\n`1 <= k <= n`"
  },
  {
    "id": "1384",
    "title": "Total Sales Amount by Year",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1385",
    "title": "Find the Distance Value Between Two Arrays",
    "difficulty": "Easy",
    "explanation": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, return the distance value between the two arrays.\n\nThe distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.",
    "examples": [
      "Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2",
      "Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2",
      "Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1"
    ],
    "constraints": "`1 <= arr1.length, arr2.length <= 500`\n`-10^3 <= arr1[i], arr2[j] <= 10^3`\n`0 <= d <= 100`"
  },
  {
    "id": "1386",
    "title": "Cinema Seat Allocation",
    "difficulty": "Medium",
    "explanation": "A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.\n\nGiven the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row 3 and labelled with 8 is already reserved.\n\nReturn the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.",
    "examples": [
      "Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.",
      "Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2",
      "Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4"
    ],
    "constraints": "`1 <= n <= 10^9`\n`1 <= reservedSeats.length <= min(10*n, 10^4)`\n`reservedSeats[i].length == 2`\n`1 <= reservedSeats[i][0] <= n`\n`1 <= reservedSeats[i][1] <= 10`\nAll `reservedSeats[i]` are distinct."
  },
  {
    "id": "1387",
    "title": "Sort Integers by The Power Value",
    "difficulty": "Medium",
    "explanation": "The power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps:\nif `x` is even then `x = x / 2`\nif `x` is odd then `x = 3 * x + 1`\nFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\n\nGiven three integers `lo`, `hi` and `k`. The task is to sort all integers in the interval `[lo, hi]` by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.\n\nReturn the `k-th` integer in the range `[lo, hi]` sorted by the power value.\n\nNotice that for any integer `x` `(lo <= x <= hi)` it is guaranteed that `x` will transform into `1` using these steps and that the power of `x` is will fit in 32 bit signed integer.",
    "examples": [
      "Input: lo = 12, hi = 15, k = 2\nOutput: 13\nExplanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\n\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.",
      "Input: lo = 1, hi = 1, k = 1\nOutput: 1",
      "Input: lo = 7, hi = 11, k = 4\nOutput: 7\nExplanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\n\nThe interval sorted by power is [8, 10, 11, 7, 9].\n\nThe fourth number in the sorted array is 7.",
      "Input: lo = 10, hi = 20, k = 5\nOutput: 13",
      "Input: lo = 1, hi = 1000, k = 777\nOutput: 570"
    ],
    "constraints": "`1 <= lo <= hi <= 1000`\n`1 <= k <= hi - lo + 1`"
  },
  {
    "id": "1388",
    "title": "Pizza With 3n Slices",
    "difficulty": "Hard",
    "explanation": "There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\nYou will pick any pizza slice.\n\nYour friend Alice will pick next slice in anti clockwise direction of your pick. \nYour friend Bob will pick next slice in clockwise direction of your pick.\n\nRepeat until there are no more slices of pizzas.\n\nSizes of Pizza slices is represented by circular array `slices` in clockwise direction.\n\nReturn the maximum possible sum of slice sizes which you can have.",
    "examples": [
      "Input: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.",
      "Input: slices = [8,9,8,6,1,1]\nOutput: 16\nOutput: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.",
      "Input: slices = [4,1,2,5,8,3,1,9,7]\nOutput: 21",
      "Input: slices = [3,1,2]\nOutput: 3"
    ],
    "constraints": "`1 <= slices.length <= 500`\n`slices.length % 3 == 0`\n`1 <= slices[i] <= 1000`"
  },
  {
    "id": "1389",
    "title": "Create Target Array in the Given Order",
    "difficulty": "Easy",
    "explanation": "Given two arrays of integers `nums` and `index`. Your task is to create target array under the following rules:\nInitially target array is empty.\n\nFrom left to right read nums[i] and index[i], insert at index `index[i]` the value `nums[i]` in target array.\n\nRepeat the previous step until there are no elements to read in `nums` and `index.`\nReturn the target array.\n\nIt is guaranteed that the insertion operations will be valid.",
    "examples": [
      "Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]\nOutput: [0,4,1,3,2]\nExplanation:\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]",
      "Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]\nOutput: [0,1,2,3,4]\nExplanation:\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]",
      "Input: nums = [1], index = [0]\nOutput: [1]"
    ],
    "constraints": "`1 <= nums.length, index.length <= 100`\n`nums.length == index.length`\n`0 <= nums[i] <= 100`\n`0 <= index[i] <= i`"
  },
  {
    "id": "1390",
    "title": "Four Divisors",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors.\n\nIf there is no such integer in the array, return `0`.",
    "examples": [
      "Input: nums = [21,4,7]\nOutput: 32\nExplanation:\n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only."
    ],
    "constraints": "`1 <= nums.length <= 10^4`\n`1 <= nums[i] <= 10^5`"
  },
  {
    "id": "1391",
    "title": "Check if There is a Valid Path in a Grid",
    "difficulty": "Medium",
    "explanation": "Given a m x n `grid`. Each cell of the `grid` represents a street. The street of `grid[i][j]` can be:\n1 which means a street connecting the left cell and the right cell.\n\n2 which means a street connecting the upper cell and the lower cell.\n\n3 which means a street connecting the left cell and the lower cell.\n\n4 which means a street connecting the right cell and the lower cell.\n\n5 which means a street connecting the left cell and the upper cell.\n\n6 which means a street connecting the right cell and the upper cell.\n\nYou will initially start at the street of the upper-left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)`. The path should only follow the streets.\n\nNotice that you are not allowed to change any street.\n\nReturn true if there is a valid path in the grid or false otherwise.",
    "examples": [
      "Input: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).",
      "Input: grid = [[1,2,1],[1,2,1]]\nOutput: false\nExplanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)",
      "Input: grid = [[1,1,2]]\nOutput: false\nExplanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).",
      "Input: grid = [[1,1,1,1,1,1,3]]\nOutput: true",
      "Input: grid = [[2],[2],[2],[2],[2],[2],[6]]\nOutput: true"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 300`\n`1 <= grid[i][j] <= 6`"
  },
  {
    "id": "1392",
    "title": "Longest Happy Prefix",
    "difficulty": "Hard",
    "explanation": "A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).\n\nGiven a string `s`. Return the longest happy prefix of `s` .\n\nReturn an empty string if no such prefix exists.",
    "examples": [
      "Input: s = \"level\"\nOutput: \"l\"\nExplanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".",
      "Input: s = \"ababab\"\nOutput: \"abab\"\nExplanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.",
      "Input: s = \"leetcodeleet\"\nOutput: \"leet\"",
      "Input: s = \"a\"\nOutput: \"\""
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1393",
    "title": "Capital Gain/Loss",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1394",
    "title": "Find Lucky Integer in an Array",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `arr`, a lucky integer is an integer which has a frequency in the array equal to its value.\n\nReturn a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.",
    "examples": [
      "Input: arr = [2,2,3,4]\nOutput: 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.",
      "Input: arr = [1,2,2,3,3,3]\nOutput: 3\nExplanation: 1, 2 and 3 are all lucky numbers, return the largest of them.",
      "Input: arr = [2,2,2,3,3]\nOutput: -1\nExplanation: There are no lucky numbers in the array.",
      "Input: arr = [5]\nOutput: -1",
      "Input: arr = [7,7,7,7,7,7,7]\nOutput: 7"
    ],
    "constraints": "`1 <= arr.length <= 500`\n`1 <= arr[i] <= 500`"
  },
  {
    "id": "1395",
    "title": "Count Number of Teams",
    "difficulty": "Medium",
    "explanation": "There are `n` soldiers standing in a line. Each soldier is assigned a unique `rating` value.\n\nYou have to form a team of 3 soldiers amongst them under the following rules:\nChoose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).\n\nA team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).",
    "examples": [
      "Input: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).",
      "Input: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.",
      "Input: rating = [1,2,3,4]\nOutput: 4"
    ],
    "constraints": "`n == rating.length`\n`3 <= n <= 1000`\n`1 <= rating[i] <= 105`\nAll the integers in `rating` are unique."
  },
  {
    "id": "1396",
    "title": "Design Underground System",
    "difficulty": "Medium",
    "explanation": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\n\nImplement the `UndergroundSystem` class:\n`void checkIn(int id, string stationName, int t)`\n\t\nA customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.\n\nA customer can only be checked into one place at a time.\n\n`void checkOut(int id, string stationName, int t)`\n\t\nA customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.\n\n`double getAverageTime(string startStation, string endStation)`\n\t\nReturns the average time it takes to travel from `startStation` to `endStation`.\n\nThe average time is computed from all the previous traveling times from `startStation` to `endStation` that happened directly, meaning a check in at `startStation` followed by a check out from `endStation`.\n\nThe time it takes to travel from `startStation` to `endStation` may be different from the time it takes to travel from `endStation` to `startStation`.\n\nThere will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.\n\nYou may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.",
    "examples": [
      "Input\n[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\nOutput\n[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12",
      "Input\n[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]\nOutput\n[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667"
    ],
    "constraints": "`1 <= id, t <= 106`\n`1 <= stationName.length, startStation.length, endStation.length <= 10`\nAll strings consist of uppercase and lowercase English letters and digits.\n\nThere will be at most `2 * 104` calls in total to `checkIn`, `checkOut`, and `getAverageTime`.\n\nAnswers within `10-5` of the actual value will be accepted."
  },
  {
    "id": "1397",
    "title": "Find All Good Strings",
    "difficulty": "Hard",
    "explanation": "Given the strings `s1` and `s2` of size `n`, and the string `evil`. Return the number of good strings.\n\nA good string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this modulo 10^9 + 7.",
    "examples": [
      "Input: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51 \nExplanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\".",
      "Input: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\nOutput: 0 \nExplanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.",
      "Input: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\nOutput: 2"
    ],
    "constraints": "`s1.length == n`\n`s2.length == n`\n`s1 <= s2`\n`1 <= n <= 500`\n`1 <= evil.length <= 50`\nAll strings consist of lowercase English letters."
  },
  {
    "id": "1398",
    "title": "Customers Who Bought Products A and B but Not C",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1399",
    "title": "Count Largest Group",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. \nReturn how many groups have the largest size.",
    "examples": [
      "Input: n = 13\nOutput: 4\nExplanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.",
      "Input: n = 2\nOutput: 2\nExplanation: There are 2 groups [1], [2] of size 1.",
      "Input: n = 15\nOutput: 6",
      "Input: n = 24\nOutput: 5"
    ],
    "constraints": "`1 <= n <= 10^4`"
  },
  {
    "id": "1400",
    "title": "Construct K Palindrome Strings",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and an integer `k`. You should construct `k` non-empty palindrome strings using all the characters in `s`.\n\nReturn True if you can use all the characters in `s` to construct `k` palindrome strings or False otherwise.",
    "examples": [
      "Input: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s.\n\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"",
      "Input: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.",
      "Input: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.",
      "Input: s = \"yzyzyzyzyzyzyzy\", k = 2\nOutput: true\nExplanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.",
      "Input: s = \"cr\", k = 7\nOutput: false\nExplanation: We don't have enough characters in s to construct 7 palindromes."
    ],
    "constraints": "`1 <= s.length <= 10^5`\nAll characters in `s` are lower-case English letters.\n\n`1 <= k <= 10^5`"
  },
  {
    "id": "1401",
    "title": "Circle and Rectangle Overlapping",
    "difficulty": "Medium",
    "explanation": "Given a circle represented as (`radius`, `x_center`, `y_center`) and an axis-aligned rectangle represented as (`x1`, `y1`, `x2`, `y2`), where (`x1`, `y1`) are the coordinates of the bottom-left corner, and (`x2`, `y2`) are the coordinates of the top-right corner of the rectangle.\n\nReturn True if the circle and rectangle are overlapped otherwise return False.\n\nIn other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.",
    "examples": [
      "Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\nOutput: true\nExplanation: Circle and rectangle share the point (1,0)",
      "Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1\nOutput: true",
      "Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3\nOutput: true",
      "Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1\nOutput: false"
    ],
    "constraints": "`1 <= radius <= 2000`\n`-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4`\n`x1 < x2`\n`y1 < y2`"
  },
  {
    "id": "1402",
    "title": "Reducing Dishes",
    "difficulty": "Hard",
    "explanation": "A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time.\n\nLike-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level  i.e.  `time[i]`*`satisfaction[i]`\nReturn the maximum sum of Like-time coefficient that the chef can obtain after dishes preparation.\n\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.",
    "examples": [
      "Input: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.",
      "Input: satisfaction = [4,3,2]\nOutput: 20\nExplanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)",
      "Input: satisfaction = [-1,-4,-5]\nOutput: 0\nExplanation: People don't like the dishes. No dish is prepared.",
      "Input: satisfaction = [-2,5,-1,0,3,-3]\nOutput: 35"
    ],
    "constraints": "`n == satisfaction.length`\n`1 <= n <= 500`\n`-10^3 <= satisfaction[i] <= 10^3`"
  },
  {
    "id": "1403",
    "title": "Minimum Subsequence in Non-Increasing Order",
    "difficulty": "Easy",
    "explanation": "Given the array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. \nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. \nNote that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.",
    "examples": [
      "Input: nums = [4,3,10,9,8]\nOutput: [10,9] \nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements.",
      "Input: nums = [4,4,7,6,7]\nOutput: [7,7,6] \nExplanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.",
      "Input: nums = [6]\nOutput: [6]"
    ],
    "constraints": "`1 <= nums.length <= 500`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "1404",
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "difficulty": "Medium",
    "explanation": "Given a number `s` in their binary representation. Return the number of steps to reduce it to 1 under the following rules:\nIf the current number is even, you have to divide it by 2.\n\nIf the current number is odd, you have to add 1 to it.\n\nIt's guaranteed that you can always reach to one for all testcases.",
    "examples": [
      "Input: s = \"1101\"\nOutput: 6\nExplanation: \"1101\" corressponds to number 13 in their decimal representation.\n\nStep 1) 13 is odd, add 1 and obtain 14. \nStep 2) 14 is even, divide by 2 and obtain 7.\n\nStep 3) 7 is odd, add 1 and obtain 8.\n\nStep 4) 8 is even, divide by 2 and obtain 4.  \nStep 5) 4 is even, divide by 2 and obtain 2. \nStep 6) 2 is even, divide by 2 and obtain 1.",
      "Input: s = \"10\"\nOutput: 1\nExplanation: \"10\" corressponds to number 2 in their decimal representation.\n\nStep 1) 2 is even, divide by 2 and obtain 1.",
      "Input: s = \"1\"\nOutput: 0"
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` consists of characters '0' or '1'\n`s[0] == '1'`"
  },
  {
    "id": "1405",
    "title": "Longest Happy String",
    "difficulty": "Medium",
    "explanation": "A string is called happy if it does not have any of the strings `'aaa'`, `'bbb'` or `'ccc'` as a substring.\n\nGiven three integers `a`, `b` and `c`, return any string `s`, which satisfies following conditions:\n`s` is happy and longest possible.\n\n`s` contains at most `a` occurrences of the letter `'a'`, at most `b` occurrences of the letter `'b'` and at most `c` occurrences of the letter `'c'`.\n\n`s `will only contain `'a'`, `'b'` and `'c'` letters.\n\nIf there is no such string `s` return the empty string `\"\"`.",
    "examples": [
      "Input: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.",
      "Input: a = 2, b = 2, c = 1\nOutput: \"aabbc\"",
      "Input: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It's the only correct answer in this case."
    ],
    "constraints": "`0 <= a, b, c <= 100`\n`a + b + c > 0`"
  },
  {
    "id": "1406",
    "title": "Stone Game III",
    "difficulty": "Hard",
    "explanation": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2 or 3 stones from the first remaining stones in the row.\n\nThe score of each player is the sum of values of the stones taken. The score of each player is 0 initially.\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\nAssume Alice and Bob play optimally.\n\nReturn \"Alice\" if Alice will win, \"Bob\" if Bob will win or \"Tie\" if they end the game with the same score.",
    "examples": [
      "Input: values = [1,2,3,7]\nOutput: \"Bob\"\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.",
      "Input: values = [1,2,3,-9]\nOutput: \"Alice\"\nExplanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\n\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.\n\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.\n\nRemember that both play optimally so here Alice will choose the scenario that makes her win.",
      "Input: values = [1,2,3,6]\nOutput: \"Tie\"\nExplanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.",
      "Input: values = [1,2,3,-1,-2,-3,7]\nOutput: \"Alice\"",
      "Input: values = [-1,-2,-3]\nOutput: \"Tie\""
    ],
    "constraints": "`1 <= values.length <= 50000`\n`-1000 <= values[i] <= 1000`"
  },
  {
    "id": "1407",
    "title": "Top Travellers",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1408",
    "title": "String Matching in an Array",
    "difficulty": "Easy",
    "explanation": "Given an array of string `words`. Return all strings in `words` which is substring of another word in any order. \nString `words[i]` is substring of `words[j]`, if can be obtained removing some characters to left and/or right side of `words[j]`.",
    "examples": [
      "Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"]\nOutput: [\"as\",\"hero\"]\nExplanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\n\n[\"hero\",\"as\"] is also a valid answer.",
      "Input: words = [\"leetcode\",\"et\",\"code\"]\nOutput: [\"et\",\"code\"]\nExplanation: \"et\", \"code\" are substring of \"leetcode\".",
      "Input: words = [\"blue\",\"green\",\"bu\"]\nOutput: []"
    ],
    "constraints": "`1 <= words.length <= 100`\n`1 <= words[i].length <= 30`\n`words[i]` contains only lowercase English letters.\n\nIt's guaranteed that `words[i]` will be unique."
  },
  {
    "id": "1409",
    "title": "Queries on a Permutation With Key",
    "difficulty": "Medium",
    "explanation": "Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:\nIn the beginning, you have the permutation `P=[1,2,3,...,m]`.\n\nFor the current `i`, find the position of `queries[i]` in the permutation `P` (indexing from 0) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.\n\nReturn an array containing the result for the given `queries`.",
    "examples": [
      "Input: queries = [3,1,2,1], m = 5\nOutput: [2,1,2,1] \nExplanation: The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \nTherefore, the array containing the result is [2,1,2,1].",
      "Input: queries = [4,1,2,2], m = 4\nOutput: [3,1,2,0]",
      "Input: queries = [7,5,5,8,3], m = 8\nOutput: [6,5,0,7,5]"
    ],
    "constraints": "`1 <= m <= 10^3`\n`1 <= queries.length <= m`\n`1 <= queries[i] <= m`"
  },
  {
    "id": "1410",
    "title": "HTML Entity Parser",
    "difficulty": "Medium",
    "explanation": "HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\n\nThe special characters and their entities for HTML are:\nQuotation Mark: the entity is `&quot;` and symbol character is `\"`.\n\nSingle Quote Mark: the entity is `&apos;` and symbol character is `'`.\n\nAmpersand: the entity is `&amp;` and symbol character is `&`.\n\nGreater Than Sign: the entity is `&gt;` and symbol character is `>`.\n\nLess Than Sign: the entity is `&lt;` and symbol character is `<`.\n\nSlash: the entity is `&frasl;` and symbol character is `/`.\n\nGiven the input `text` string to the HTML parser, you have to implement the entity parser.\n\nReturn the text after replacing the entities by the special characters.",
    "examples": [
      "Input: text = \"&amp; is an HTML entity but &ambassador; is not.\"\nOutput: \"& is an HTML entity but &ambassador; is not.\"\nExplanation: The parser will replace the &amp; entity by &",
      "Input: text = \"and I quote: &quot;...&quot;\"\nOutput: \"and I quote: \\\"...\\\"\"",
      "Input: text = \"Stay home! Practice on Leetcode :)\"\nOutput: \"Stay home! Practice on Leetcode :)\"",
      "Input: text = \"x &gt; y &amp;&amp; x &lt; y is always false\"\nOutput: \"x > y && x < y is always false\"",
      "Input: text = \"leetcode.com&frasl;problemset&frasl;all\"\nOutput: \"leetcode.com/problemset/all\""
    ],
    "constraints": "`1 <= text.length <= 10^5`\nThe string may contain any possible characters out of all the 256 ASCII characters."
  },
  {
    "id": "1411",
    "title": "Number of Ways to Paint N × 3 Grid",
    "difficulty": "Hard",
    "explanation": "You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\nGiven `n` the number of rows of the grid, return the number of ways you can paint this `grid`. As the answer may grow large, the answer must be computed modulo `109 + 7`.",
    "examples": [
      "Input: n = 1\nOutput: 12\nExplanation: There are 12 possible way to paint the grid as shown.",
      "Input: n = 2\nOutput: 54",
      "Input: n = 3\nOutput: 246",
      "Input: n = 7\nOutput: 106494",
      "Input: n = 5000\nOutput: 30228214"
    ],
    "constraints": "`n == grid.length`\n`grid[i].length == 3`\n`1 <= n <= 5000`"
  },
  {
    "id": "1412",
    "title": "Find the Quiet Students in All Exams",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1413",
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums`, you start with an initial positive value startValue.\n\nIn each iteration, you calculate the step by step sum of startValue plus elements in `nums` (from left to right).\n\nReturn the minimum positive value of startValue such that the step by step sum is never less than 1.",
    "examples": [
      "Input: nums = [-3,2,-3,4,2]\nOutput: 5\nExplanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n\n                step by step sum\n                startValue = 4 | startValue = 5 | nums\n                  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3\n                  (1 +2 ) = 3  | (2 +2 ) = 4    |   2\n                  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3\n                  (0 +4 ) = 4  | (1 +4 ) = 5    |   4\n                  (4 +2 ) = 6  | (5 +2 ) = 7    |   2",
      "Input: nums = [1,2]\nOutput: 1\nExplanation: Minimum start value should be positive.",
      "Input: nums = [1,-2,-3]\nOutput: 5"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`-100 <= nums[i] <= 100`"
  },
  {
    "id": "1414",
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "difficulty": "Medium",
    "explanation": "Given an integer `k`, return the minimum number of Fibonacci numbers whose sum is equal to `k`. The same Fibonacci number can be used multiple times.\n\nThe Fibonacci numbers are defined as:\n`F1 = 1`\n`F2 = 1`\n`Fn = Fn-1 + Fn-2` for `n > 2.`\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.",
    "examples": [
      "Input: k = 7\nOutput: 2 \nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7.",
      "Input: k = 10\nOutput: 2 \nExplanation: For k = 10 we can use 2 + 8 = 10.",
      "Input: k = 19\nOutput: 3 \nExplanation: For k = 19 we can use 1 + 5 + 13 = 19."
    ],
    "constraints": "`1 <= k <= 10^9`"
  },
  {
    "id": "1415",
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "difficulty": "Medium",
    "explanation": "A happy string is a string that:\nconsists only of letters of the set `['a', 'b', 'c']`.\n\n`s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).\n\nFor example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.\n\nGiven two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.\n\nReturn the kth string of this list or return an empty string if there are less than `k` happy strings of length `n`.",
    "examples": [
      "Input: n = 1, k = 3\nOutput: \"c\"\nExplanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".",
      "Input: n = 1, k = 4\nOutput: \"\"\nExplanation: There are only 3 happy strings of length 1.",
      "Input: n = 3, k = 9\nOutput: \"cab\"\nExplanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"",
      "Input: n = 2, k = 7\nOutput: \"\"",
      "Input: n = 10, k = 100\nOutput: \"abacbabacb\""
    ],
    "constraints": "`1 <= n <= 10`\n`1 <= k <= 100`"
  },
  {
    "id": "1416",
    "title": "Restore The Array",
    "difficulty": "Hard",
    "explanation": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array.\n\nGiven the string `s` and the integer `k`. There can be multiple ways to restore the array.\n\nReturn the number of possible array that can be printed as a string `s` using the mentioned program.\n\nThe number of ways could be very large so return it modulo `10^9 + 7`",
    "examples": [
      "Input: s = \"1000\", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]",
      "Input: s = \"1000\", k = 10\nOutput: 0\nExplanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.",
      "Input: s = \"1317\", k = 2000\nOutput: 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]",
      "Input: s = \"2020\", k = 30\nOutput: 1\nExplanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.",
      "Input: s = \"1234567890\", k = 90\nOutput: 34"
    ],
    "constraints": "`1 <= s.length <= 10^5`.\n\n`s` consists of only digits and doesn't contain leading zeros.\n\n`1 <= k <= 10^9`."
  },
  {
    "id": "1417",
    "title": "Reformat The String",
    "difficulty": "Easy",
    "explanation": "Given alphanumeric string `s`. (Alphanumeric string is a string consisting of lowercase English letters and digits).\n\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.\n\nReturn the reformatted string or return an empty string if it is impossible to reformat the string.",
    "examples": [
      "Input: s = \"a0b1c2\"\nOutput: \"0a1b2c\"\nExplanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations.",
      "Input: s = \"leetcode\"\nOutput: \"\"\nExplanation: \"leetcode\" has only characters so we cannot separate them by digits.",
      "Input: s = \"1229857369\"\nOutput: \"\"\nExplanation: \"1229857369\" has only digits so we cannot separate them by characters.",
      "Input: s = \"covid2019\"\nOutput: \"c2o0v1i9d\"",
      "Input: s = \"ab123\"\nOutput: \"1a2b3\""
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` consists of only lowercase English letters and/or digits."
  },
  {
    "id": "1418",
    "title": "Display Table of Food Orders in a Restaurant",
    "difficulty": "Medium",
    "explanation": "Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders.\n\nReturn the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.",
    "examples": [
      "Input: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\nOutput: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \nExplanation:\nThe displaying table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3    ,0           ,2      ,1            ,0\n5    ,0           ,1      ,0            ,1\n10   ,1           ,0      ,0            ,0\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\n\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\n\nFor the table 10: Corina orders \"Beef Burrito\".",
      "Input: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\nOutput: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \nExplanation: \nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\n\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".",
      "Input: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\nOutput: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]"
    ],
    "constraints": "`1 <= orders.length <= 5 * 10^4`\n`orders[i].length == 3`\n`1 <= customerNamei.length, foodItemi.length <= 20`\n`customerNamei` and `foodItemi` consist of lowercase and uppercase English letters and the space character.\n\n`tableNumberi `is a valid integer between `1` and `500`."
  },
  {
    "id": "1419",
    "title": "Minimum Number of Frogs Croaking",
    "difficulty": "Medium",
    "explanation": "Given the string `croakOfFrogs`, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. Return the minimum number of different frogs to finish all the croak in the given string.\n\nA valid \"croak\" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of valid \"croak\" return -1.",
    "examples": [
      "Input: croakOfFrogs = \"croakcroak\"\nOutput: 1 \nExplanation: One frog yelling \"croak\" twice.",
      "Input: croakOfFrogs = \"crcoakroak\"\nOutput: 2 \nExplanation: The minimum number of frogs is two. \nThe first frog could yell \"crcoakroak\".\n\nThe second frog could yell later \"crcoakroak\".",
      "Input: croakOfFrogs = \"croakcrook\"\nOutput: -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.",
      "Input: croakOfFrogs = \"croakcroa\"\nOutput: -1"
    ],
    "constraints": "`1 <= croakOfFrogs.length <= 10^5`\nAll characters in the string are: `'c'`, `'r'`, `'o'`, `'a'` or `'k'`."
  },
  {
    "id": "1420",
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "difficulty": "Hard",
    "explanation": "Given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:\nYou should build the array arr which has the following properties:\n`arr` has exactly `n` integers.\n\n`1 <= arr[i] <= m` where `(0 <= i < n)`.\n\nAfter applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\nReturn the number of ways to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer must be computed modulo `10^9 + 7`.",
    "examples": [
      "Input: n = 2, m = 3, k = 1\nOutput: 6\nExplanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]",
      "Input: n = 5, m = 2, k = 3\nOutput: 0\nExplanation: There are no possible arrays that satisify the mentioned conditions.",
      "Input: n = 9, m = 1, k = 1\nOutput: 1\nExplanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]",
      "Input: n = 50, m = 100, k = 25\nOutput: 34549172\nExplanation: Don't forget to compute the answer modulo 1000000007",
      "Input: n = 37, m = 17, k = 7\nOutput: 418930126"
    ],
    "constraints": "`1 <= n <= 50`\n`1 <= m <= 100`\n`0 <= k <= n`"
  },
  {
    "id": "1421",
    "title": "NPV Queries",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1422",
    "title": "Maximum Score After Splitting a String",
    "difficulty": "Easy",
    "explanation": "Given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).\n\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.",
    "examples": [
      "Input: s = \"011101\"\nOutput: 5 \nExplanation: \nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3",
      "Input: s = \"00111\"\nOutput: 5\nExplanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5",
      "Input: s = \"1111\"\nOutput: 3"
    ],
    "constraints": "`2 <= s.length <= 500`\nThe string `s` consists of characters '0' and '1' only."
  },
  {
    "id": "1423",
    "title": "Maximum Points You Can Obtain from Cards",
    "difficulty": "Medium",
    "explanation": "There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array `cardPoints`.\n\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.\n\nYour score is the sum of the points of the cards you have taken.\n\nGiven the integer array `cardPoints` and the integer `k`, return the maximum score you can obtain.",
    "examples": [
      "Input: cardPoints = [1,2,3,4,5,6,1], k = 3\nOutput: 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.",
      "Input: cardPoints = [2,2,2], k = 2\nOutput: 4\nExplanation: Regardless of which two cards you take, your score will always be 4.",
      "Input: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.",
      "Input: cardPoints = [1,1000,1], k = 1\nOutput: 1\nExplanation: You cannot take the card in the middle. Your best score is 1.",
      "Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3\nOutput: 202"
    ],
    "constraints": "`1 <= cardPoints.length <= 10^5`\n`1 <= cardPoints[i] <= 10^4`\n`1 <= k <= cardPoints.length`"
  },
  {
    "id": "1424",
    "title": "Diagonal Traverse II",
    "difficulty": "Medium",
    "explanation": "Given a list of lists of integers, `nums`, return all elements of `nums` in diagonal order as shown in the below images.",
    "examples": [
      "Input: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]",
      "Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
      "Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]\nOutput: [1,4,2,5,3,8,6,9,7,10,11]",
      "Input: nums = [[1,2,3,4,5,6]]\nOutput: [1,2,3,4,5,6]"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`1 <= nums[i].length <= 10^5`\n`1 <= nums[i][j] <= 10^9`\nThere at most `10^5` elements in `nums`."
  },
  {
    "id": "1425",
    "title": "Constrained Subsequence Sum",
    "difficulty": "Hard",
    "explanation": "Given an integer array `nums` and an integer `k`, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.\n\nA subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.",
    "examples": [
      "Input: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].",
      "Input: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation: The subsequence must be non-empty, so we choose the largest number.",
      "Input: nums = [10,-2,-10,-5,20], k = 2\nOutput: 23\nExplanation: The subsequence is [10, -2, -5, 20]."
    ],
    "constraints": "`1 <= k <= nums.length <= 105`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "1426",
    "title": "Counting Elements",
    "difficulty": "Easy",
    "explanation": "Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.",
    "examples": [
      "Input: arr = [1,2,3]\nOutput: 2\nExplanation: 1 and 2 are counted cause 2 and 3 are in arr.",
      "Input: arr = [1,1,3,3,5,5,7,7]\nOutput: 0\nExplanation: No numbers are counted, cause there's no 2, 4, 6, or 8 in arr.",
      "Input: arr = [1,3,2,3,5,0]\nOutput: 3\nExplanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr.",
      "Input: arr = [1,1,2,2]\nOutput: 2\nExplanation: Two 1s are counted cause 2 is in arr.",
      "Input: arr = [1,1,2]\nOutput: 2\nExplanation: Both 1s are counted because 2 is in the array."
    ],
    "constraints": "`1 <= arr.length <= 1000`\n`0 <= arr[i] <= 1000`"
  },
  {
    "id": "1427",
    "title": "Perform String Shifts",
    "difficulty": "Easy",
    "explanation": "You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [direction, amount]`:\n`direction` can be `0` (for left shift) or `1` (for right shift). \n`amount` is the amount by which string `s` is to be shifted.\n\nA left shift by 1 means remove the first character of `s` and append it to the end.\n\nSimilarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.\n\nReturn the final string after all operations.",
    "examples": [
      "Input: s = \"abc\", shift = [[0,1],[1,2]]\nOutput: \"cab\"\nExplanation: \n[0,1] means shift to left by 1. \"abc\" -> \"bca\"\n[1,2] means shift to right by 2. \"bca\" -> \"cab\"",
      "Input: s = \"abcdefg\", shift = [[1,1],[1,1],[0,2],[1,3]]\nOutput: \"efgabcd\"\nExplanation:  \n[1,1] means shift to right by 1. \"abcdefg\" -> \"gabcdef\"\n[1,1] means shift to right by 1. \"gabcdef\" -> \"fgabcde\"\n[0,2] means shift to left by 2. \"fgabcde\" -> \"abcdefg\"\n[1,3] means shift to right by 3. \"abcdefg\" -> \"efgabcd\""
    ],
    "constraints": "`1 <= s.length <= 100`\n`s` only contains lower case English letters.\n\n`1 <= shift.length <= 100`\n`shift[i].length == 2`\n`0 <= shift[i][0] <= 1`\n`0 <= shift[i][1] <= 100`"
  },
  {
    "id": "1428",
    "title": "Leftmost Column with at Least a One",
    "difficulty": "Medium",
    "explanation": "(This problem is an interactive problem.)\nA row-sorted binary matrix means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order.\n\nGiven a row-sorted binary matrix `binaryMatrix`, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return `-1`.\n\nYou can't access the Binary Matrix directly. You may only access the matrix using a `BinaryMatrix` interface:\n`BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed).\n\n`BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`.\n\nSubmissions making more than `1000` calls to `BinaryMatrix.get` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\nFor custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.",
    "examples": [
      "Input: mat = [[0,0],[1,1]]\nOutput: 0",
      "Input: mat = [[0,0],[0,1]]\nOutput: 1",
      "Input: mat = [[0,0],[0,0]]\nOutput: -1",
      "Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]\nOutput: 1"
    ],
    "constraints": "`rows == mat.length`\n`cols == mat[i].length`\n`1 <= rows, cols <= 100`\n`mat[i][j]` is either `0` or `1`.\n\n`mat[i]` is sorted in non-decreasing order."
  },
  {
    "id": "1429",
    "title": "First Unique Number",
    "difficulty": "Medium",
    "explanation": "You have a queue of integers, you need to retrieve the first unique integer in the queue.\n\nImplement the `FirstUnique` class:\n`FirstUnique(int[] nums)` Initializes the object with the numbers in the queue.\n\n`int showFirstUnique()` returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.\n\n`void add(int value)` insert value to the queue.",
    "examples": [
      "Input: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[2,3,5]],[],[5],[],[2],[],[3],[]]\nOutput: \n[null,2,null,2,null,3,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([2,3,5]);\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(5);            // the queue is now [2,3,5,5]\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(2);            // the queue is now [2,3,5,5,2]\nfirstUnique.showFirstUnique(); // return 3\nfirstUnique.add(3);            // the queue is now [2,3,5,5,2,3]\nfirstUnique.showFirstUnique(); // return -1",
      "Input: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"add\",\"add\",\"add\",\"add\",\"showFirstUnique\"]\n[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\nOutput: \n[null,-1,null,null,null,null,null,17]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);\nfirstUnique.showFirstUnique(); // return -1\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]\nfirstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]\nfirstUnique.showFirstUnique(); // return 17",
      "Input: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[809]],[],[809],[]]\nOutput: \n[null,809,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([809]);\nfirstUnique.showFirstUnique(); // return 809\nfirstUnique.add(809);          // the queue is now [809,809]\nfirstUnique.showFirstUnique(); // return -1"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`1 <= nums[i] <= 10^8`\n`1 <= value <= 10^8`\nAt most `50000` calls will be made to `showFirstUnique` and `add`."
  },
  {
    "id": "1430",
    "title": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. \nWe get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.",
    "examples": [
      "Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]\nOutput: true\nExplanation: \nThe path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). \nOther valid sequences are: \n0 -> 1 -> 1 -> 0 \n0 -> 0 -> 0",
      "Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]\nOutput: false \nExplanation: The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.",
      "Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]\nOutput: false\nExplanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence."
    ],
    "constraints": "`1 <= arr.length <= 5000`\n`0 <= arr[i] <= 9`\nEach node's value is between [0 - 9]."
  },
  {
    "id": "1431",
    "title": "Kids With the Greatest Number of Candies",
    "difficulty": "Easy",
    "explanation": "Given the array `candies` and the integer `extraCandies`, where `candies[i]` represents the number of candies that the ith kid has.\n\nFor each kid check if there is a way to distribute `extraCandies` among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.",
    "examples": [
      "Input: candies = [2,3,5,1,3], extraCandies = 3\nOutput: [true,true,true,false,true] \nExplanation: \nKid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. \nKid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. \nKid 3 has 5 candies and this is already the greatest number of candies among the kids. \nKid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. \nKid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids.",
      "Input: candies = [4,2,1,1,2], extraCandies = 1\nOutput: [true,false,false,false,false] \nExplanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.",
      "Input: candies = [12,1,12], extraCandies = 10\nOutput: [true,false,true]"
    ],
    "constraints": "`2 <= candies.length <= 100`\n`1 <= candies[i] <= 100`\n`1 <= extraCandies <= 50`"
  },
  {
    "id": "1432",
    "title": "Max Difference You Can Get From Changing an Integer",
    "difficulty": "Medium",
    "explanation": "You are given an integer `num`. You will apply the following steps exactly two times:\nPick a digit `x (0 <= x <= 9)`.\n\nPick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n\nReplace all the occurrences of `x` in the decimal representation of `num` by `y`.\n\nThe new integer cannot have any leading zeros, also the new integer cannot be 0.\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\nReturn the max difference between `a` and `b`.",
    "examples": [
      "Input: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\n\nThe second time pick x = 5 and y = 1 and store the new integer in b.\n\nWe have now a = 999 and b = 111 and max difference = 888",
      "Input: num = 9\nOutput: 8\nExplanation: The first time pick x = 9 and y = 9 and store the new integer in a.\n\nThe second time pick x = 9 and y = 1 and store the new integer in b.\n\nWe have now a = 9 and b = 1 and max difference = 8",
      "Input: num = 123456\nOutput: 820000",
      "Input: num = 10000\nOutput: 80000",
      "Input: num = 9288\nOutput: 8700"
    ],
    "constraints": "`1 <= num <= 10^8`"
  },
  {
    "id": "1433",
    "title": "Check If a String Can Break Another String",
    "difficulty": "Medium",
    "explanation": "Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.\n\nA string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.",
    "examples": [
      "Input: s1 = \"abc\", s2 = \"xya\"\nOutput: true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".",
      "Input: s1 = \"abe\", s2 = \"acd\"\nOutput: false \nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.",
      "Input: s1 = \"leetcodee\", s2 = \"interview\"\nOutput: true"
    ],
    "constraints": "`s1.length == n`\n`s2.length == n`\n`1 <= n <= 10^5`\nAll strings consist of lowercase English letters."
  },
  {
    "id": "1434",
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "difficulty": "Hard",
    "explanation": "There are `n` people and 40 types of hats labeled from 1 to 40.\n\nGiven a list of list of integers `hats`, where `hats[i]` is a list of all hats preferred by the i-th` person.\n\nReturn the number of ways that the n people wear different hats to each other.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.",
    "examples": [
      "Input: hats = [[3,4],[4,5],[5]]\nOutput: 1\nExplanation: There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.",
      "Input: hats = [[3,5,1],[3,5]]\nOutput: 4\nExplanation: There are 4 ways to choose hats\n(3,5), (5,3), (1,3) and (1,5)",
      "Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nOutput: 24\nExplanation: Each person can choose hats labeled from 1 to 4.\n\nNumber of Permutations of (1,2,3,4) = 24.",
      "Input: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]\nOutput: 111"
    ],
    "constraints": "`n == hats.length`\n`1 <= n <= 10`\n`1 <= hats[i].length <= 40`\n`1 <= hats[i][j] <= 40`\n`hats[i]` contains a list of unique integers."
  },
  {
    "id": "1435",
    "title": "Create a Session Bar Chart",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1436",
    "title": "Destination City",
    "difficulty": "Easy",
    "explanation": "You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. Return the destination city, that is, the city without any path outgoing to another city.\n\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.",
    "examples": [
      "Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\nOutput: \"Sao Paulo\" \nExplanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\".",
      "Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\nOutput: \"A\"\nExplanation: All possible trips are: \n\"D\" -> \"B\" -> \"C\" -> \"A\". \n\"B\" -> \"C\" -> \"A\". \n\"C\" -> \"A\". \n\"A\". \nClearly the destination city is \"A\".",
      "Input: paths = [[\"A\",\"Z\"]]\nOutput: \"Z\""
    ],
    "constraints": "`1 <= paths.length <= 100`\n`paths[i].length == 2`\n`1 <= cityAi.length, cityBi.length <= 10`\n`cityAi != cityBi`\nAll strings consist of lowercase and uppercase English letters and the space character."
  },
  {
    "id": "1437",
    "title": "Check If All 1's Are at Least Length K Places Away",
    "difficulty": "Easy",
    "explanation": "Given an array `nums` of 0s and 1s and an integer `k`, return `True` if all 1's are at least `k` places away from each other, otherwise return `False`.",
    "examples": [
      "Input: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.",
      "Input: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.",
      "Input: nums = [1,1,1,1,1], k = 0\nOutput: true",
      "Input: nums = [0,1,0,1], k = 1\nOutput: true"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`0 <= k <= nums.length`\n`nums[i]` is `0` or `1`"
  },
  {
    "id": "1438",
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and an integer `limit`, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`.",
    "examples": [
      "Input: nums = [8,2,4,7], limit = 4\nOutput: 2 \nExplanation: All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n\n[8,2] with maximum absolute diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n\n[7] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2.",
      "Input: nums = [10,1,2,4,7,2], limit = 5\nOutput: 4 \nExplanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.",
      "Input: nums = [4,2,2,2,4,4,2,2], limit = 0\nOutput: 3"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 109`\n`0 <= limit <= 109`"
  },
  {
    "id": "1439",
    "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "difficulty": "Hard",
    "explanation": "You are given an `m * n` matrix, `mat`, and an integer `k`, which has its rows sorted in non-decreasing order.\n\nYou are allowed to choose exactly 1 element from each row to form an array. Return the Kth smallest array sum among all possible arrays.",
    "examples": [
      "Input: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.",
      "Input: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17",
      "Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.",
      "Input: mat = [[1,1,10],[2,2,9]], k = 7\nOutput: 12"
    ],
    "constraints": "`m == mat.length`\n`n == mat.length[i]`\n`1 <= m, n <= 40`\n`1 <= k <= min(200, n ^ m)`\n`1 <= mat[i][j] <= 5000`\n`mat[i]` is a non decreasing array."
  },
  {
    "id": "1440",
    "title": "Evaluate Boolean Expression",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1441",
    "title": "Build an Array With Stack Operations",
    "difficulty": "Easy",
    "explanation": "Given an array `target` and an integer `n`. In each iteration, you will read a number from  `list = {1,2,3..., n}`.\n\nBuild the `target` array using the following operations:\nPush: Read a new element from the beginning `list`, and push it in the array.\n\nPop: delete the last element of the array.\n\nIf the target array is already built, stop reading more elements.\n\nReturn the operations to build the target array. You are guaranteed that the answer is unique.",
    "examples": [
      "Input: target = [1,3], n = 3\nOutput: [\"Push\",\"Push\",\"Pop\",\"Push\"]\nExplanation: \nRead number 1 and automatically push in the array -> [1]\nRead number 2 and automatically push in the array then Pop it -> [1]\nRead number 3 and automatically push in the array -> [1,3]",
      "Input: target = [1,2,3], n = 3\nOutput: [\"Push\",\"Push\",\"Push\"]",
      "Input: target = [1,2], n = 4\nOutput: [\"Push\",\"Push\"]\nExplanation: You only need to read the first 2 numbers and stop.",
      "Input: target = [2,3,4], n = 4\nOutput: [\"Push\",\"Pop\",\"Push\",\"Push\",\"Push\"]"
    ],
    "constraints": "`1 <= target.length <= 100`\n`1 <= target[i] <= n`\n`1 <= n <= 100`\n`target` is strictly increasing."
  },
  {
    "id": "1442",
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr`.\n\nWe want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.\n\nLet's define `a` and `b` as follows:\n`a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n`b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\nNote that ^ denotes the bitwise-xor operation.\n\nReturn the number of triplets (`i`, `j` and `k`) Where `a == b`.",
    "examples": [
      "Input: arr = [2,3,1,6,7]\nOutput: 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)",
      "Input: arr = [1,1,1,1,1]\nOutput: 10",
      "Input: arr = [2,3]\nOutput: 0",
      "Input: arr = [1,3,5,7,9]\nOutput: 3",
      "Input: arr = [7,11,12,9,5,2,7,17,22]\nOutput: 8"
    ],
    "constraints": "`1 <= arr.length <= 300`\n`1 <= arr[i] <= 10^8`"
  },
  {
    "id": "1443",
    "title": "Minimum Time to Collect All Apples in a Tree",
    "difficulty": "Medium",
    "explanation": "Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.",
    "examples": [
      "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\nOutput: 8 \nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.",
      "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]\nOutput: 6\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.",
      "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]\nOutput: 0"
    ],
    "constraints": "`1 <= n <= 10^5`\n`edges.length == n - 1`\n`edges[i].length == 2`\n`0 <= ai < bi <= n - 1`\n`fromi < toi`\n`hasApple.length == n`"
  },
  {
    "id": "1444",
    "title": "Number of Ways of Cutting a Pizza",
    "difficulty": "Hard",
    "explanation": "Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts. \nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\n\nReturn the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.",
    "examples": [
      "Input: pizza = [\"A..\",\"AAA\",\"...\"], k = 3\nOutput: 3 \nExplanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.",
      "Input: pizza = [\"A..\",\"AA.\",\"...\"], k = 3\nOutput: 1",
      "Input: pizza = [\"A..\",\"A..\",\"...\"], k = 1\nOutput: 1"
    ],
    "constraints": "`1 <= rows, cols <= 50`\n`rows == pizza.length`\n`cols == pizza[i].length`\n`1 <= k <= 10`\n`pizza` consists of characters `'A'` and `'.'` only."
  },
  {
    "id": "1445",
    "title": "Apples & Oranges",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1446",
    "title": "Consecutive Characters",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, the power of the string is the maximum length of a non-empty substring that contains only one unique character.\n\nReturn the power of the string.",
    "examples": [
      "Input: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.",
      "Input: s = \"abbcccddddeeeeedcba\"\nOutput: 5\nExplanation: The substring \"eeeee\" is of length 5 with the character 'e' only.",
      "Input: s = \"triplepillooooow\"\nOutput: 5",
      "Input: s = \"hooraaaaaaaaaaay\"\nOutput: 11",
      "Input: s = \"tourist\"\nOutput: 1"
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1447",
    "title": "Simplified Fractions",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. The fractions can be in any order.",
    "examples": [
      "Input: n = 2\nOutput: [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.",
      "Input: n = 3\nOutput: [\"1/2\",\"1/3\",\"2/3\"]",
      "Input: n = 4\nOutput: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\nExplanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".",
      "Input: n = 1\nOutput: []"
    ],
    "constraints": "`1 <= n <= 100`"
  },
  {
    "id": "1448",
    "title": "Count Good Nodes in Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree `root`, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.\n\nReturn the number of good nodes in the binary tree.",
    "examples": [
      "Input: root = [3,1,4,3,null,1,5]\nOutput: 4\nExplanation: Nodes in blue are good.\n\nRoot Node (3) is always a good node.\n\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\n\nNode 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum value in the path.",
      "Input: root = [3,3,null,4,2]\nOutput: 3\nExplanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it.",
      "Input: root = [1]\nOutput: 1\nExplanation: Root is considered as good."
    ],
    "constraints": "The number of nodes in the binary tree is in the range `[1, 10^5]`.\n\nEach node's value is between `[-10^4, 10^4]`."
  },
  {
    "id": "1449",
    "title": "Form Largest Integer With Digits That Add up to Target",
    "difficulty": "Hard",
    "explanation": "Given an array of integers `cost` and an integer `target`. Return the maximum integer you can paint under the following rules:\nThe cost of painting a digit (i+1) is given by `cost[i]` (0 indexed).\n\nThe total cost used must be equal to `target`.\n\nInteger does not have digits 0.\n\nSince the answer may be too large, return it as string.\n\nIf there is no way to paint any integer given the condition, return \"0\".",
    "examples": [
      "Input: cost = [4,3,2,5,6,7,2,5,5], target = 9\nOutput: \"7772\"\nExplanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\n\nDigit    cost\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5",
      "Input: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput: \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.",
      "Input: cost = [2,4,6,2,4,6,4,4,4], target = 5\nOutput: \"0\"\nExplanation: It's not possible to paint any integer with total cost equal to target.",
      "Input: cost = [6,10,15,40,40,40,40,40,40], target = 47\nOutput: \"32211\""
    ],
    "constraints": "`cost.length == 9`\n`1 <= cost[i] <= 5000`\n`1 <= target <= 5000`"
  },
  {
    "id": "1450",
    "title": "Number of Students Doing Homework at a Given Time",
    "difficulty": "Easy",
    "explanation": "Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`.\n\nThe `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`.\n\nReturn the number of students doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.",
    "examples": [
      "Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\n\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\n\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
      "Input: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime.",
      "Input: startTime = [4], endTime = [4], queryTime = 5\nOutput: 0",
      "Input: startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7\nOutput: 0",
      "Input: startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5\nOutput: 5"
    ],
    "constraints": "`startTime.length == endTime.length`\n`1 <= startTime.length <= 100`\n`1 <= startTime[i] <= endTime[i] <= 1000`\n`1 <= queryTime <= 1000`"
  },
  {
    "id": "1451",
    "title": "Rearrange Words in a Sentence",
    "difficulty": "Medium",
    "explanation": "Given a sentence `text` (A sentence is a string of space-separated words) in the following format:\nFirst letter is in upper case.\n\nEach word in `text` are separated by a single space.\n\nYour task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\n\nReturn the new text following the format shown above.",
    "examples": [
      "Input: text = \"Leetcode is cool\"\nOutput: \"Is cool leetcode\"\nExplanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\n\nOutput is ordered by length and the new first word starts with capital letter.",
      "Input: text = \"Keep calm and code on\"\nOutput: \"On and keep calm code\"\nExplanation: Output is ordered as follows:\n\"On\" 2 letters.\n\n\"and\" 3 letters.\n\n\"keep\" 4 letters in case of tie order by position in original text.\n\n\"calm\" 4 letters.\n\n\"code\" 4 letters.",
      "Input: text = \"To be or not to be\"\nOutput: \"To be or to be not\""
    ],
    "constraints": "`text` begins with a capital letter and then contains lowercase letters and single space between words.\n\n`1 <= text.length <= 10^5`"
  },
  {
    "id": "1452",
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "difficulty": "Medium",
    "explanation": "Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (indexed from 0).\n\nReturn the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.",
    "examples": [
      "Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\nOutput: [0,1,4] \nExplanation: \nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].",
      "Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\nOutput: [0,1] \nExplanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1].",
      "Input: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\nOutput: [0,1,2,3]"
    ],
    "constraints": "`1 <= favoriteCompanies.length <= 100`\n`1 <= favoriteCompanies[i].length <= 500`\n`1 <= favoriteCompanies[i][j].length <= 20`\nAll strings in `favoriteCompanies[i]` are distinct.\n\nAll lists of favorite companies are distinct, that is, If we sort alphabetically each list then `favoriteCompanies[i] != favoriteCompanies[j].`\nAll strings consist of lowercase English letters only."
  },
  {
    "id": "1453",
    "title": "Maximum Number of Darts Inside of a Circular Dartboard",
    "difficulty": "Hard",
    "explanation": "You have a very large square wall and a circular dartboard placed on the wall. You have been challenged to throw darts into the board blindfolded. Darts thrown at the wall are represented as an array of `points` on a 2D plane. \nReturn the maximum number of points that are within or lie on any circular dartboard of radius `r`.",
    "examples": [
      "Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.",
      "Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).",
      "Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1",
      "Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4"
    ],
    "constraints": "`1 <= points.length <= 100`\n`points[i].length == 2`\n`-10^4 <= points[i][0], points[i][1] <= 10^4`\n`1 <= r <= 5000`"
  },
  {
    "id": "1454",
    "title": "Active Users",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1455",
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "difficulty": "Easy",
    "explanation": "Given a `sentence` that consists of some words separated by a single space, and a `searchWord`.\n\nYou have to check if `searchWord` is a prefix of any word in `sentence`.\n\nReturn the index of the word in `sentence` where `searchWord` is a prefix of this word (1-indexed).\n\nIf `searchWord` is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\n\nA prefix of a string `S` is any leading contiguous substring of `S`.",
    "examples": [
      "Input: sentence = \"i love eating burger\", searchWord = \"burg\"\nOutput: 4\nExplanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.",
      "Input: sentence = \"this problem is an easy problem\", searchWord = \"pro\"\nOutput: 2\nExplanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.",
      "Input: sentence = \"i am tired\", searchWord = \"you\"\nOutput: -1\nExplanation: \"you\" is not a prefix of any word in the sentence.",
      "Input: sentence = \"i use triple pillow\", searchWord = \"pill\"\nOutput: 4",
      "Input: sentence = \"hello from the other side\", searchWord = \"they\"\nOutput: -1"
    ],
    "constraints": "`1 <= sentence.length <= 100`\n`1 <= searchWord.length <= 10`\n`sentence` consists of lowercase English letters and spaces.\n\n`searchWord` consists of lowercase English letters."
  },
  {
    "id": "1456",
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and an integer `k`.\n\nReturn the maximum number of vowel letters in any substring of `s` with length `k`.\n\nVowel letters in English are (a, e, i, o, u).",
    "examples": [
      "Input: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.",
      "Input: s = \"aeiou\", k = 2\nOutput: 2\nExplanation: Any substring of length 2 contains 2 vowels.",
      "Input: s = \"leetcode\", k = 3\nOutput: 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.",
      "Input: s = \"rhythms\", k = 4\nOutput: 0\nExplanation: We can see that s doesn't have any vowel letters.",
      "Input: s = \"tryhard\", k = 4\nOutput: 1"
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s` consists of lowercase English letters.\n\n`1 <= k <= s.length`"
  },
  {
    "id": "1457",
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.\n\nReturn the number of pseudo-palindromic paths going from the root node to leaf nodes.",
    "examples": [
      "Input: root = [2,3,1,3,1,null,1]\nOutput: 2 \nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).",
      "Input: root = [2,1,1,1,3,null,null,null,null,null,1]\nOutput: 1 \nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).",
      "Input: root = [9]\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 105]`.\n\n`1 <= Node.val <= 9`"
  },
  {
    "id": "1458",
    "title": "Max Dot Product of Two Subsequences",
    "difficulty": "Hard",
    "explanation": "Given two arrays `nums1` and `nums2`.\n\nReturn the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).",
    "examples": [
      "Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\n\nTheir dot product is (2*3 + (-2)*(-6)) = 18.",
      "Input: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\n\nTheir dot product is (3*7) = 21.",
      "Input: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\n\nTheir dot product is -1."
    ],
    "constraints": "`1 <= nums1.length, nums2.length <= 500`\n`-1000 <= nums1[i], nums2[i] <= 1000`"
  },
  {
    "id": "1459",
    "title": "Rectangles Area",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1460",
    "title": "Make Two Arrays Equal by Reversing Sub-arrays",
    "difficulty": "Easy",
    "explanation": "Given two integer arrays of equal length `target` and `arr`.\n\nIn one step, you can select any non-empty sub-array of `arr` and reverse it. You are allowed to make any number of steps.\n\nReturn True if you can make `arr` equal to `target`, or False otherwise.",
    "examples": [
      "Input: target = [1,2,3,4], arr = [2,4,1,3]\nOutput: true\nExplanation: You can follow the next steps to convert arr to target:\n1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n2- Reverse sub-array [4,2], arr becomes [1,2,4,3]\n3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so.",
      "Input: target = [7], arr = [7]\nOutput: true\nExplanation: arr is equal to target without any reverses.",
      "Input: target = [1,12], arr = [12,1]\nOutput: true",
      "Input: target = [3,7,9], arr = [3,7,11]\nOutput: false\nExplanation: arr doesn't have value 9 and it can never be converted to target.",
      "Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]\nOutput: true"
    ],
    "constraints": "`target.length == arr.length`\n`1 <= target.length <= 1000`\n`1 <= target[i] <= 1000`\n`1 <= arr[i] <= 1000`"
  },
  {
    "id": "1461",
    "title": "Check If a String Contains All Binary Codes of Size K",
    "difficulty": "Medium",
    "explanation": "Given a binary string `s` and an integer `k`.\n\nReturn `true` if every binary code of length `k` is a substring of `s`. Otherwise, return `false`.",
    "examples": [
      "Input: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.",
      "Input: s = \"00110\", k = 2\nOutput: true",
      "Input: s = \"0110\", k = 1\nOutput: true\nExplanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring.",
      "Input: s = \"0110\", k = 2\nOutput: false\nExplanation: The binary code \"00\" is of length 2 and doesn't exist in the array.",
      "Input: s = \"0000000001011100\", k = 4\nOutput: false"
    ],
    "constraints": "`1 <= s.length <= 5 * 105`\n`s[i]` is either `'0'` or `'1'`.\n\n`1 <= k <= 20`"
  },
  {
    "id": "1462",
    "title": "Course Schedule IV",
    "difficulty": "Medium",
    "explanation": "There are a total of `n` courses you have to take, labeled from `0` to `n-1`.\n\nSome courses may have direct prerequisites, for example, to take course 0 you have first to take course 1, which is expressed as a pair: `[1,0]`\nGiven the total number of courses `n`, a list of direct `prerequisite` pairs and a list of `queries` pairs.\n\nYou should answer for each `queries[i]` whether the course `queries[i][0]` is a prerequisite of the course `queries[i][1]` or not.\n\nReturn a list of boolean, the answers to the given `queries`.\n\nPlease note that if course a is a prerequisite of course b and course b is a prerequisite of course c, then, course a is a prerequisite of course c.",
    "examples": [
      "Input: n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\nOutput: [false,true]\nExplanation: course 0 is not a prerequisite of course 1 but the opposite is true.",
      "Input: n = 2, prerequisites = [], queries = [[1,0],[0,1]]\nOutput: [false,false]\nExplanation: There are no prerequisites and each course is independent.",
      "Input: n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\nOutput: [true,true]",
      "Input: n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]\nOutput: [false,true]",
      "Input: n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]\nOutput: [true,false,true,false]"
    ],
    "constraints": "`2 <= n <= 100`\n`0 <= prerequisite.length <= (n * (n - 1) / 2)`\n`0 <= prerequisite[i][0], prerequisite[i][1] < n`\n`prerequisite[i][0] != prerequisite[i][1]`\nThe prerequisites graph has no cycles.\n\nThe prerequisites graph has no repeated edges.\n\n`1 <= queries.length <= 10^4`\n`queries[i][0] != queries[i][1]`"
  },
  {
    "id": "1463",
    "title": "Cherry Pickup II",
    "difficulty": "Hard",
    "explanation": "Given a `rows x cols` matrix `grid` representing a field of cherries. Each cell in `grid` represents the number of cherries that you can collect.\n\nYou have two robots that can collect cherries for you, Robot #1 is located at the top-left corner (0,0) , and Robot #2 is located at the top-right corner (0, cols-1) of the grid.\n\nReturn the maximum number of cherries collection using both robots  by following the rules below:\nFrom a cell (i,j), robots can move to cell (i+1, j-1) , (i+1, j) or (i+1, j+1).\n\nWhen any robot is passing through a cell, It picks it up all cherries, and the cell becomes an empty cell (0).\n\nWhen both robots stay on the same cell, only one of them takes the cherries.\n\nBoth robots cannot move outside of the grid at any moment.\n\nBoth robots should reach the bottom row in the `grid`.",
    "examples": [
      "Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\nOutput: 24\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\n\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\n\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\n\nTotal of cherries: 12 + 12 = 24.",
      "Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\nOutput: 28\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\n\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\n\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\n\nTotal of cherries: 17 + 11 = 28.",
      "Input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]\nOutput: 22",
      "Input: grid = [[1,1],[1,1]]\nOutput: 4"
    ],
    "constraints": "`rows == grid.length`\n`cols == grid[i].length`\n`2 <= rows, cols <= 70`\n`0 <= grid[i][j] <= 100 `"
  },
  {
    "id": "1464",
    "title": "Maximum Product of Two Elements in an Array",
    "difficulty": "Easy",
    "explanation": "Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.",
    "examples": [
      "Input: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.",
      "Input: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.",
      "Input: nums = [3,7]\nOutput: 12"
    ],
    "constraints": "`2 <= nums.length <= 500`\n`1 <= nums[i] <= 10^3`"
  },
  {
    "id": "1465",
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "difficulty": "Medium",
    "explanation": "Given a rectangular cake with height `h` and width `w`, and two arrays of integers `horizontalCuts` and `verticalCuts` where `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.\n\nReturn the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays `horizontalCuts` and `verticalCuts`. Since the answer can be a huge number, return this modulo 10^9 + 7.",
    "examples": [
      "Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\nOutput: 4 \nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.",
      "Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\nOutput: 6\nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.",
      "Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\nOutput: 9"
    ],
    "constraints": "`2 <= h, w <= 10^9`\n`1 <= horizontalCuts.length < min(h, 10^5)`\n`1 <= verticalCuts.length < min(w, 10^5)`\n`1 <= horizontalCuts[i] < h`\n`1 <= verticalCuts[i] < w`\nIt is guaranteed that all elements in `horizontalCuts` are distinct.\n\nIt is guaranteed that all elements in `verticalCuts` are distinct."
  },
  {
    "id": "1466",
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "difficulty": "Medium",
    "explanation": "There are `n` cities numbered from `0` to `n-1` and `n-1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\n\nRoads are represented by `connections` where `connections[i] = [a, b]` represents a road from city `a` to `b`.\n\nThis year, there will be a big event in the capital (city 0), and many people want to travel to this city.\n\nYour task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.\n\nIt's guaranteed that each city can reach the city 0 after reorder.",
    "examples": [
      "Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\nOutput: 3\nExplanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).",
      "Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\nOutput: 2\nExplanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).",
      "Input: n = 3, connections = [[1,0],[2,0]]\nOutput: 0"
    ],
    "constraints": "`2 <= n <= 5 * 10^4`\n`connections.length == n-1`\n`connections[i].length == 2`\n`0 <= connections[i][0], connections[i][1] <= n-1`\n`connections[i][0] != connections[i][1]`"
  },
  {
    "id": "1467",
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "difficulty": "Hard",
    "explanation": "Given `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`. \nAll the balls will be shuffled uniformly at random, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully).\n\nPlease note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a) `(Please read the explanation of the first example carefully).\n\nWe want to calculate the probability that the two boxes have the same number of distinct balls.",
    "examples": [
      "Input: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1",
      "Input: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that we add the first two balls to the first box and the second two balls to the second box.\n\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\n\nProbability is 8/12 = 0.66667",
      "Input: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\n\nProbability = 108 / 180 = 0.6",
      "Input: balls = [3,2,1]\nOutput: 0.30000\nExplanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.\n\nProbability = 18 / 60 = 0.3",
      "Input: balls = [6,6,6,6,6,6]\nOutput: 0.90327"
    ],
    "constraints": "`1 <= balls.length <= 8`\n`1 <= balls[i] <= 6`\n`sum(balls)` is even.\n\nAnswers within `10^-5` of the actual value will be accepted as correct."
  },
  {
    "id": "1468",
    "title": "Calculate Salaries",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1469",
    "title": "Find All The Lonely Nodes",
    "difficulty": "Easy",
    "explanation": "In a binary tree, a lonely node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.\n\nGiven the `root` of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list in any order.",
    "examples": [
      "Input: root = [1,2,3,null,4]\nOutput: [4]\nExplanation: Light blue node is the only lonely node.\n\nNode 1 is the root and is not lonely.\n\nNodes 2 and 3 have the same parent and are not lonely.",
      "Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]\nOutput: [6,2]\nExplanation: Light blue nodes are lonely nodes.\n\nPlease remember that order doesn't matter, [2,6] is also an acceptable answer.",
      "Input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]\nOutput: [77,55,33,66,44,22]\nExplanation: Nodes 99 and 88 share the same parent. Node 11 is the root.\n\nAll other nodes are lonely.",
      "Input: root = [197]\nOutput: []",
      "Input: root = [31,null,78,null,28]\nOutput: [78,28]"
    ],
    "constraints": "The number of nodes in the `tree` is in the range `[1, 1000].`\nEach node's value is between `[1, 10^6]`."
  },
  {
    "id": "1470",
    "title": "Shuffle the Array",
    "difficulty": "Easy",
    "explanation": "Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.\n\nReturn the array in the form `[x1,y1,x2,y2,...,xn,yn]`.",
    "examples": [
      "Input: nums = [2,5,1,3,4,7], n = 3\nOutput: [2,3,5,4,1,7] \nExplanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].",
      "Input: nums = [1,2,3,4,4,3,2,1], n = 4\nOutput: [1,4,2,3,3,2,4,1]",
      "Input: nums = [1,1,2,2], n = 2\nOutput: [1,2,1,2]"
    ],
    "constraints": "`1 <= n <= 500`\n`nums.length == 2n`\n`1 <= nums[i] <= 10^3`"
  },
  {
    "id": "1471",
    "title": "The k Strongest Values in an Array",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr` and an integer `k`.\n\nA value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the median of the array.\n\nIf `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.\n\nReturn a list of the strongest `k` values in the array. return the answer in any arbitrary order.\n\nMedian is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list (0-indexed).\n\nFor `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.\n\nFor `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.",
    "examples": [
      "Input: arr = [1,2,3,4,5], k = 2\nOutput: [5,1]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.\n\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.",
      "Input: arr = [1,1,3,5,5], k = 2\nOutput: [5,5]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].",
      "Input: arr = [6,7,11,7,6,8], k = 5\nOutput: [11,8,6,6,7]\nExplanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\n\nAny permutation of [11,8,6,6,7] is accepted.",
      "Input: arr = [6,-3,7,2,11], k = 3\nOutput: [-3,11,2]",
      "Input: arr = [-7,22,17,3], k = 2\nOutput: [22,17]"
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`-10^5 <= arr[i] <= 10^5`\n`1 <= k <= arr.length`"
  },
  {
    "id": "1472",
    "title": "Design Browser History",
    "difficulty": "Medium",
    "explanation": "You have a browser of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`.\n\nImplement the `BrowserHistory` class:\n`BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.\n\n`void visit(string url)` Visits `url` from the current page. It clears up all the forward history.\n\n`string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history at most `steps`.\n\n`string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history at most `steps`.\n\n\nExample:\nInput:\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\nOutput:\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\nExplanation:\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\");       // You are in \"leetcode.com\". Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\");     // You are in \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\");      // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1);                   // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.back(1);                   // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1);                // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\");     // You are in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2);                // You are in \"linkedin.com\", you cannot move forward any steps.\n\nbrowserHistory.back(2);                   // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\nbrowserHistory.back(7);                   // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"\n\nConstraints:\n`1 <= homepage.length <= 20`\n`1 <= url.length <= 20`\n`1 <= steps <= 100`\n`homepage` and `url` consist of  '.' or lower case English letters.\n\nAt most `5000` calls will be made to `visit`, `back`, and `forward`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1473",
    "title": "Paint House III",
    "difficulty": "Hard",
    "explanation": "There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.\n\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\n\nFor example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.\n\nGiven an array `houses`, an `m x n` matrix `cost` and an integer `target` where:\n`houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.\n\n`cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.\n\nReturn the minimum cost of painting all the remaining houses in such a way that there are exactly `target` neighborhoods. If it is not possible, return `-1`.",
    "examples": [
      "Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\n\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.",
      "Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 11\nExplanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11.",
      "Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5\nOutput: 5",
      "Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\nOutput: -1\nExplanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3."
    ],
    "constraints": "`m == houses.length == cost.length`\n`n == cost[i].length`\n`1 <= m <= 100`\n`1 <= n <= 20`\n`1 <= target <= m`\n`0 <= houses[i] <= n`\n`1 <= cost[i][j] <= 10^4`"
  },
  {
    "id": "1474",
    "title": "Delete N Nodes After M Nodes of a Linked List",
    "difficulty": "Easy",
    "explanation": "Given the `head` of a linked list and two integers `m` and `n`. Traverse the linked list and remove some nodes in the following way:\nStart with the head as the current node.\n\nKeep the first `m` nodes starting with the current node.\n\nRemove the next `n` nodes\nKeep repeating steps 2 and 3 until you reach the end of the list.\n\nReturn the head of the modified list after removing the mentioned nodes.\n\nFollow up question: How can you solve this problem by modifying the list in-place?",
    "examples": [
      "Input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3\nOutput: [1,2,6,7,11,12]\nExplanation: Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes.\n\nDelete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes.\n\nContinue with the same procedure until reaching the tail of the Linked List.\n\nHead of linked list after removing nodes is returned.",
      "Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3\nOutput: [1,5,9]\nExplanation: Head of linked list after removing nodes is returned.",
      "Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1\nOutput: [1,2,3,5,6,7,9,10,11]",
      "Input: head = [9,3,7,7,9,10,8,2], m = 1, n = 2\nOutput: [9,7,8]"
    ],
    "constraints": "The given linked list will contain between `1` and `10^4` nodes.\n\nThe value of each node in the linked list will be in the range` [1, 10^6]`.\n\n`1 <= m,n <= 1000`"
  },
  {
    "id": "1475",
    "title": "Final Prices With a Special Discount in a Shop",
    "difficulty": "Easy",
    "explanation": "Given the array `prices` where `prices[i]` is the price of the `ith` item in a shop. There is a special discount for items in the shop, if you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`, otherwise, you will not receive any discount at all.\n\nReturn an array where the `ith` element is the final price you will pay for the `ith` item of the shop considering the special discount.",
    "examples": [
      "Input: prices = [8,4,6,2,3]\nOutput: [4,2,4,2,3]\nExplanation: \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. \nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. \nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. \nFor items 3 and 4 you will not receive any discount at all.",
      "Input: prices = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: In this case, for all items, you will not receive any discount at all.",
      "Input: prices = [10,1,1,6]\nOutput: [9,0,1,6]"
    ],
    "constraints": "`1 <= prices.length <= 500`\n`1 <= prices[i] <= 10^3`"
  },
  {
    "id": "1476",
    "title": "Subrectangle Queries",
    "difficulty": "Medium",
    "explanation": "Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:\n1.` updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\nUpdates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.\n\n2.` getValue(int row, int col)`\nReturns the current value of the coordinate `(row,col)` from the rectangle.",
    "examples": [
      "Input\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\nOutput\n[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5",
      "Input\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\nOutput\n[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20"
    ],
    "constraints": "There will be at most `500` operations considering both methods: `updateSubrectangle` and `getValue`.\n\n`1 <= rows, cols <= 100`\n`rows == rectangle.length`\n`cols == rectangle[i].length`\n`0 <= row1 <= row2 < rows`\n`0 <= col1 <= col2 < cols`\n`1 <= newValue, rectangle[i][j] <= 10^9`\n`0 <= row < rows`\n`0 <= col < cols`"
  },
  {
    "id": "1477",
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr` and an integer `target`.\n\nYou have to find two non-overlapping sub-arrays of `arr` each with sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\n\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.",
    "examples": [
      "Input: arr = [3,2,2,4,3], target = 3\nOutput: 2\nExplanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.",
      "Input: arr = [7,3,4,7], target = 7\nOutput: 2\nExplanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.",
      "Input: arr = [4,3,2,6,2,3,4], target = 6\nOutput: -1\nExplanation: We have only one sub-array of sum = 6.",
      "Input: arr = [5,5,4,4,5], target = 3\nOutput: -1\nExplanation: We cannot find a sub-array of sum = 3.",
      "Input: arr = [3,1,1,1,5,1,2,1], target = 3\nOutput: 3\nExplanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap."
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`1 <= arr[i] <= 1000`\n`1 <= target <= 10^8`"
  },
  {
    "id": "1478",
    "title": "Allocate Mailboxes",
    "difficulty": "Hard",
    "explanation": "Given the array `houses` and an integer `k`. where `houses[i]` is the location of the ith house along a street, your task is to allocate `k` mailboxes in the street.\n\nReturn the minimum total distance between each house and its nearest mailbox.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
      "Input: houses = [1,4,8,10,20], k = 3\nOutput: 5\nExplanation: Allocate mailboxes in position 3, 9 and 20.\n\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5",
      "Input: houses = [2,3,5,12,18], k = 2\nOutput: 9\nExplanation: Allocate mailboxes in position 3 and 14.\n\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.",
      "Input: houses = [7,4,6,1], k = 1\nOutput: 8",
      "Input: houses = [3,6,14,10], k = 4\nOutput: 0"
    ],
    "constraints": "`n == houses.length`\n`1 <= n <= 100`\n`1 <= houses[i] <= 10^4`\n`1 <= k <= n`\nArray `houses` contain unique integers."
  },
  {
    "id": "1479",
    "title": "Sales by Day of the Week",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1480",
    "title": "Running Sum of 1d Array",
    "difficulty": "Easy",
    "explanation": "Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`.\n\nReturn the running sum of `nums`.",
    "examples": [
      "Input: nums = [1,2,3,4]\nOutput: [1,3,6,10]\nExplanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].",
      "Input: nums = [1,1,1,1,1]\nOutput: [1,2,3,4,5]\nExplanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].",
      "Input: nums = [3,1,2,10,1]\nOutput: [3,4,6,16,17]"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`-10^6 <= nums[i] <= 10^6`"
  },
  {
    "id": "1481",
    "title": "Least Number of Unique Integers after K Removals",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr` and an integer `k`. Find the least number of unique integers after removing exactly `k` elements.",
    "examples": [
      "Input: arr = [5,5,4], k = 1\nOutput: 1\nExplanation: Remove the single 4, only 5 is left.",
      "Input: arr = [4,3,1,1,3,3,2], k = 3\nOutput: 2\nExplanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left."
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`1 <= arr[i] <= 10^9`\n`0 <= k <= arr.length`"
  },
  {
    "id": "1482",
    "title": "Minimum Number of Days to Make m Bouquets",
    "difficulty": "Medium",
    "explanation": "Given an integer array `bloomDay`, an integer `m` and an integer `k`.\n\nWe need to make `m` bouquets. To make a bouquet, you need to use `k` adjacent flowers from the garden.\n\nThe garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in exactly one bouquet.\n\nReturn the minimum number of days you need to wait to be able to make `m` bouquets from the garden. If it is impossible to make `m` bouquets return -1.",
    "examples": [
      "Input: bloomDay = [1,10,3,10,2], m = 3, k = 1\nOutput: 3\nExplanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.\n\nWe need 3 bouquets each should contain 1 flower.\n\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\n\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\n\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.",
      "Input: bloomDay = [1,10,3,10,2], m = 3, k = 2\nOutput: -1\nExplanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.",
      "Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\nOutput: 12\nExplanation: We need 2 bouquets each should have 3 flowers.\n\nHere's the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\n\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.",
      "Input: bloomDay = [1000000000,1000000000], m = 1, k = 1\nOutput: 1000000000\nExplanation: You need to wait 1000000000 days to have a flower ready for a bouquet.",
      "Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2\nOutput: 9"
    ],
    "constraints": "`bloomDay.length == n`\n`1 <= n <= 10^5`\n`1 <= bloomDay[i] <= 10^9`\n`1 <= m <= 10^6`\n`1 <= k <= n`"
  },
  {
    "id": "1483",
    "title": "Kth Ancestor of a Tree Node",
    "difficulty": "Hard",
    "explanation": "You are given a tree with `n` nodes numbered from `0` to `n-1` in the form of a parent array where `parent[i]` is the parent of node `i`. The root of the tree is node `0`.\n\nImplement the function `getKthAncestor``(int node, int k)` to return the `k`-th ancestor of the given `node`. If there is no such ancestor, return `-1`.\n\nThe k-th ancestor of a tree node is the `k`-th node in the path from that node to the root.\n\n\nExample:\nInput:\n[\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\n[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]\nOutput:\n[null,1,0,-1]\nExplanation:\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1);  // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2);  // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3);  // returns -1 because there is no such ancestor\n\nConstraints:\n`1 <= k <= n <= 5*10^4`\n`parent[0] == -1` indicating that `0` is the root node.\n\n`0 <= parent[i] < n` for all `0 < i < n`\n`0 <= node < n`\nThere will be at most `5*10^4` queries.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1484",
    "title": "Group Sold Products By The Date",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1485",
    "title": "Clone Binary Tree With Random Pointer",
    "difficulty": "Medium",
    "explanation": "A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.\n\nReturn a deep copy of the tree.\n\nThe tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where:\n`val`: an integer representing `Node.val`\n`random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node.\n\nYou will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.",
    "examples": [
      "Input: root = [[1,null],null,[4,3],[7,0]]\nOutput: [[1,null],null,[4,3],[7,0]]\nExplanation: The original binary tree is [1,null,4,7].\n\nThe random pointer of node one is null, so it is represented as [1, null].\n\nThe random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.\n\nThe random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.",
      "Input: root = [[1,4],null,[1,0],null,[1,5],[1,5]]\nOutput: [[1,4],null,[1,0],null,[1,5],[1,5]]\nExplanation: The random pointer of a node can be the node itself.",
      "Input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\nOutput: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]",
      "Input: root = []\nOutput: []",
      "Input: root = [[1,null],null,[2,null],null,[1,null]]\nOutput: [[1,null],null,[2,null],null,[1,null]]"
    ],
    "constraints": "The number of nodes in the `tree` is in the range `[0, 1000].`\nEach node's value is between `[1, 10^6]`."
  },
  {
    "id": "1486",
    "title": "XOR Operation in an Array",
    "difficulty": "Easy",
    "explanation": "Given an integer `n` and an integer `start`.\n\nDefine an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n == nums.length`.\n\nReturn the bitwise XOR of all elements of `nums`.",
    "examples": [
      "Input: n = 5, start = 0\nOutput: 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\n\nWhere \"^\" corresponds to bitwise XOR operator.",
      "Input: n = 4, start = 3\nOutput: 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.",
      "Input: n = 1, start = 7\nOutput: 7",
      "Input: n = 10, start = 5\nOutput: 2"
    ],
    "constraints": "`1 <= n <= 1000`\n`0 <= start <= 1000`\n`n == nums.length`"
  },
  {
    "id": "1487",
    "title": "Making File Names Unique",
    "difficulty": "Medium",
    "explanation": "Given an array of strings `names` of size `n`. You will create `n` folders in your file system such that, at the `ith` minute, you will create a folder with the name `names[i]`.\n\nSince two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the smallest positive integer such that the obtained name remains unique.\n\nReturn an array of strings of length `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.",
    "examples": [
      "Input: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nOutput: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nExplanation: Let's see how the file system creates folder names:\n\"pes\" --> not assigned before, remains \"pes\"\n\"fifa\" --> not assigned before, remains \"fifa\"\n\"gta\" --> not assigned before, remains \"gta\"\n\"pes(2019)\" --> not assigned before, remains \"pes(2019)\"",
      "Input: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\nOutput: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\nExplanation: Let's see how the file system creates folder names:\n\"gta\" --> not assigned before, remains \"gta\"\n\"gta(1)\" --> not assigned before, remains \"gta(1)\"\n\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --> not assigned before, remains \"avalon\"",
      "Input: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\nOutput: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\nExplanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".",
      "Input: names = [\"wano\",\"wano\",\"wano\",\"wano\"]\nOutput: [\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]\nExplanation: Just increase the value of k each time you create folder \"wano\".",
      "Input: names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]\nOutput: [\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]\nExplanation: Please note that system adds the suffix (k) to current name even it contained the same suffix before."
    ],
    "constraints": "`1 <= names.length <= 5 * 10^4`\n`1 <= names[i].length <= 20`\n`names[i]` consists of lower case English letters, digits and/or round brackets."
  },
  {
    "id": "1488",
    "title": "Avoid Flood in The City",
    "difficulty": "Medium",
    "explanation": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.\n\nGiven an integer array `rains` where:\n`rains[i] > 0` means there will be rains over the `rains[i]` lake.\n\n`rains[i] == 0` means there are no rains this day and you can choose one lake this day and dry it.\n\nReturn an array `ans` where:\n`ans.length == rains.length`\n`ans[i] == -1` if `rains[i] > 0`.\n\n`ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.\n\nIf there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.\n\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)",
    "examples": [
      "Input: rains = [1,2,3,4]\nOutput: [-1,-1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake.",
      "Input: rains = [1,2,0,0,2,1]\nOutput: [-1,-1,2,1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\n\nAfter the fifth day, full lakes are [2].\n\nAfter the sixth day, full lakes are [1,2].\n\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.",
      "Input: rains = [1,2,0,1,2]\nOutput: []\nExplanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\n\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.",
      "Input: rains = [69,0,0,0,69]\nOutput: [-1,69,1,1,-1]\nExplanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9",
      "Input: rains = [10,20,20]\nOutput: []\nExplanation: It will rain over lake 20 two consecutive days. There is no chance to dry any lake."
    ],
    "constraints": "`1 <= rains.length <= 105`\n`0 <= rains[i] <= 109`"
  },
  {
    "id": "1489",
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "difficulty": "Hard",
    "explanation": "Given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.\n\nFind all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\n\nNote that you can return the indices of the edges in any order.",
    "examples": [
      "Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\nOutput: [[0,1],[2,3,4,5]]\nExplanation: The figure above describes the graph.\n\nThe following figure shows all the possible MSTs:\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\n\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.",
      "Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\nOutput: [[],[0,1,2,3]]\nExplanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical."
    ],
    "constraints": "`2 <= n <= 100`\n`1 <= edges.length <= min(200, n * (n - 1) / 2)`\n`edges[i].length == 3`\n`0 <= ai < bi < n`\n`1 <= weighti <= 1000`\nAll pairs `(ai, bi)` are distinct."
  },
  {
    "id": "1490",
    "title": "Clone N-ary Tree",
    "difficulty": "Medium",
    "explanation": "Given a `root` of an N-ary tree, return a deep copy (clone) of the tree.\n\nEach node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children.\n\nclass Node {\n    public int val;\n    public List<Node> children;\n}\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\nFollow up: Can your solution work for the graph problem?",
    "examples": [
      "Input: root = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]",
      "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"
    ],
    "constraints": "The depth of the n-ary tree is less than or equal to `1000`.\n\nThe total number of nodes is between `[0, 10^4]`."
  },
  {
    "id": "1491",
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "difficulty": "Easy",
    "explanation": "Given an array of unique integers `salary` where `salary[i]` is the salary of the employee `i`.\n\nReturn the average salary of employees excluding the minimum and maximum salary.",
    "examples": [
      "Input: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\n\nAverage salary excluding minimum and maximum salary is (2000+3000)/2= 2500",
      "Input: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\n\nAverage salary excluding minimum and maximum salary is (2000)/1= 2000",
      "Input: salary = [6000,5000,4000,3000,2000,1000]\nOutput: 3500.00000",
      "Input: salary = [8000,9000,2000,3000,6000,1000]\nOutput: 4750.00000"
    ],
    "constraints": "`3 <= salary.length <= 100`\n`10^3 <= salary[i] <= 10^6`\n`salary[i]` is unique.\n\nAnswers within `10^-5` of the actual value will be accepted as correct."
  },
  {
    "id": "1492",
    "title": "The kth Factor of n",
    "difficulty": "Medium",
    "explanation": "Given two positive integers `n` and `k`.\n\nA factor of an integer `n` is defined as an integer `i` where `n % i == 0`.\n\nConsider a list of all factors of `n` sorted in ascending order, return the `kth` factor in this list or return -1 if `n` has less than `k` factors.",
    "examples": [
      "Input: n = 12, k = 3\nOutput: 3\nExplanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.",
      "Input: n = 7, k = 2\nOutput: 7\nExplanation: Factors list is [1, 7], the 2nd factor is 7.",
      "Input: n = 4, k = 4\nOutput: -1\nExplanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.",
      "Input: n = 1, k = 1\nOutput: 1\nExplanation: Factors list is [1], the 1st factor is 1.",
      "Input: n = 1000, k = 3\nOutput: 4\nExplanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000]."
    ],
    "constraints": "`1 <= k <= n <= 1000`"
  },
  {
    "id": "1493",
    "title": "Longest Subarray of 1's After Deleting One Element",
    "difficulty": "Medium",
    "explanation": "Given a binary array `nums`, you should delete one element from it.\n\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array.\n\nReturn 0 if there is no such subarray.",
    "examples": [
      "Input: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.",
      "Input: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].",
      "Input: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.",
      "Input: nums = [1,1,0,0,1,1,1,0,1]\nOutput: 4",
      "Input: nums = [0,0,0]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`nums[i]` is either `0` or `1`."
  },
  {
    "id": "1494",
    "title": "Parallel Courses II",
    "difficulty": "Hard",
    "explanation": "Given the integer `n` representing the number of courses at some university labeled from `1` to `n`, and the array `dependencies` where `dependencies[i] = [xi, yi]` represents a prerequisite relationship, that is, the course `xi` must be taken before the course `yi`. Also, you are given the integer `k`.\n\nIn one semester you can take at most `k` courses as long as you have taken all the prerequisites for the courses you are taking.\n\nReturn the minimum number of semesters to take all courses. It is guaranteed that you can take all courses in some way.",
    "examples": [
      "Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2\nOutput: 3 \nExplanation: The figure above represents the given graph. In this case we can take courses 2 and 3 in the first semester, then take course 1 in the second semester and finally take course 4 in the third semester.",
      "Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2\nOutput: 4 \nExplanation: The figure above represents the given graph. In this case one optimal way to take all courses is: take courses 2 and 3 in the first semester and take course 4 in the second semester, then take course 1 in the third semester and finally take course 5 in the fourth semester.",
      "Input: n = 11, dependencies = [], k = 2\nOutput: 6"
    ],
    "constraints": "`1 <= n <= 15`\n`1 <= k <= n`\n`0 <= dependencies.length <= n * (n-1) / 2`\n`dependencies[i].length == 2`\n`1 <= xi, yi <= n`\n`xi != yi`\nAll prerequisite relationships are distinct, that is, `dependencies[i] != dependencies[j]`.\n\nThe given graph is a directed acyclic graph."
  },
  {
    "id": "1495",
    "title": "Friendly Movies Streamed Last Month",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1496",
    "title": "Path Crossing",
    "difficulty": "Easy",
    "explanation": "Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.\n\nReturn `True` if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return `False` otherwise.",
    "examples": [
      "Input: path = \"NES\"\nOutput: false \nExplanation: Notice that the path doesn't cross any point more than once.",
      "Input: path = \"NESWW\"\nOutput: true\nExplanation: Notice that the path visits the origin twice."
    ],
    "constraints": "`1 <= path.length <= 10^4`\n`path` will only consist of characters in `{'N', 'S', 'E', 'W}`"
  },
  {
    "id": "1497",
    "title": "Check If Array Pairs Are Divisible by k",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr` of even length `n` and an integer `k`.\n\nWe want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`.\n\nReturn True If you can find a way to do that or False otherwise.",
    "examples": [
      "Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5\nOutput: true\nExplanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).",
      "Input: arr = [1,2,3,4,5,6], k = 7\nOutput: true\nExplanation: Pairs are (1,6),(2,5) and(3,4).",
      "Input: arr = [1,2,3,4,5,6], k = 10\nOutput: false\nExplanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.",
      "Input: arr = [-10,10], k = 2\nOutput: true",
      "Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3\nOutput: true"
    ],
    "constraints": "`arr.length == n`\n`1 <= n <= 105`\n`n` is even.\n\n`-109 <= arr[i] <= 109`\n`1 <= k <= 105`"
  },
  {
    "id": "1498",
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums` and an integer `target`.\n\nReturn the number of non-empty subsequences of `nums` such that the sum of the minimum and maximum element on it is less or equal to `target`. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: nums = [3,5,6,7], target = 9\nOutput: 4\nExplanation: There are 4 subsequences that satisfy the condition.\n\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)",
      "Input: nums = [3,3,6,8], target = 10\nOutput: 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]",
      "Input: nums = [2,3,3,4,6,7], target = 12\nOutput: 61\nExplanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).\n\nNumber of valid subsequences (63 - 2 = 61).",
      "Input: nums = [5,2,4,1,7,6,8], target = 16\nOutput: 127\nExplanation: All non-empty subset satisfy the condition (2^7 - 1) = 127"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 106`\n`1 <= target <= 106`"
  },
  {
    "id": "1499",
    "title": "Max Value of Equation",
    "difficulty": "Hard",
    "explanation": "Given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.\n\nFind the maximum value of the equation `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`. It is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.",
    "examples": [
      "Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\nOutput: 4\nExplanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\n\nNo other pairs satisfy the condition, so we return the max of 4 and 1.",
      "Input: points = [[0,0],[3,0],[9,2]], k = 3\nOutput: 3\nExplanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3."
    ],
    "constraints": "`2 <= points.length <= 10^5`\n`points[i].length == 2`\n`-10^8 <= points[i][0], points[i][1] <= 10^8`\n`0 <= k <= 2 * 10^8`\n`points[i][0] < points[j][0]` for all `1 <= i < j <= points.length`\n`xi` form a strictly increasing sequence."
  },
  {
    "id": "1500",
    "title": "Design a File Sharing System",
    "difficulty": "Medium",
    "explanation": "We will use a file-sharing system to share a very large file which consists of `m` small chunks with IDs from `1` to `m`.\n\nWhen users join the system, the system should assign a unique ID to them. The unique ID should be used once for each user, but when a user leaves the system, the ID can be reused again.\n\nUsers can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receive a non-empty list of IDs, they receive the requested chunk successfully.\n\nImplement the `FileSharing` class:\n`FileSharing(int m)` Initializes the object with a file of `m` chunks.\n\n`int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the smallest positive integer not taken by any other user. Return the assigned id.\n\n`void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore.\n\n`int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.\n\nFollow-ups:\nWhat happens if the system identifies the user by their IP address instead of their unique ID and users disconnect and connect from the system with the same IP?\nIf the users in the system join and leave the system frequently without requesting any chunks, will your solution still be efficient?\nIf all each user join the system one time, request all files and then leave, will your solution still be efficient?\nIf the system will be used to share `n` files where the `ith` file consists of `m[i]`, what are the changes you have to do?\n\nExample:\nInput:\n[\"FileSharing\",\"join\",\"join\",\"join\",\"request\",\"request\",\"leave\",\"request\",\"leave\",\"join\"]\n[[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]]\nOutput:\n[null,1,2,3,[2],[1,2],null,[],null,1]\nExplanation:\nFileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.\n\nfileSharing.join([1, 2]);    // A user who has chunks [1,2] joined the system, assign id = 1 to them and return 1.\n\nfileSharing.join([2, 3]);    // A user who has chunks [2,3] joined the system, assign id = 2 to them and return 2.\n\nfileSharing.join([4]);       // A user who has chunk [4] joined the system, assign id = 3 to them and return 3.\n\nfileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . Notice that user 1 now has chunks [1,2,3].\n\nfileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2].\n\nfileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.\n\nfileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list [].\n\nfileSharing.leave(2);        // The user with id = 2 left the system.\n\nfileSharing.join([]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.\n\n\nConstraints:\n`1 <= m <= 10^5`\n`0 <= ownedChunks.length <= min(100, m)`\n`1 <= ownedChunks[i] <= m`\nValues of `ownedChunks` are unique.\n\n`1 <= chunkID <= m`\n`userID` is guaranteed to be a user in the system if you assign the IDs correctly. \nAt most `10^4` calls will be made to `join`, `leave` and `request`.\n\nEach call to `leave` will have a matching call for `join`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1501",
    "title": "Countries You Can Safely Invest In",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1502",
    "title": "Can Make Arithmetic Progression From Sequence",
    "difficulty": "Easy",
    "explanation": "Given an array of numbers `arr`. A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\n\nReturn `true` if the array can be rearranged to form an arithmetic progression, otherwise, return `false`.",
    "examples": [
      "Input: arr = [3,5,1]\nOutput: true\nExplanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.",
      "Input: arr = [1,2,4]\nOutput: false\nExplanation: There is no way to reorder the elements to obtain an arithmetic progression."
    ],
    "constraints": "`2 <= arr.length <= 1000`\n`-10^6 <= arr[i] <= 10^6`"
  },
  {
    "id": "1503",
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "difficulty": "Medium",
    "explanation": "We have a wooden plank of the length `n` units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.\n\nWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn't take any additional time.\n\nWhen an ant reaches one end of the plank at a time `t`, it falls out of the plank imediately.\n\nGiven an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.",
    "examples": [
      "Input: n = 4, left = [4,3], right = [0,1]\nOutput: 4\nExplanation: In the image above:\n-The ant at index 0 is named A and going to the right.\n\n-The ant at index 1 is named B and going to the right.\n\n-The ant at index 3 is named C and going to the left.\n\n-The ant at index 4 is named D and going to the left.\n\nNote that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i.e. We can say that at t = 4.0000000001, there is no ants on the plank).",
      "Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]\nOutput: 7\nExplanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.",
      "Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []\nOutput: 7\nExplanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.",
      "Input: n = 9, left = [5], right = [4]\nOutput: 5\nExplanation: At t = 1 second, both ants will be at the same intial position but with different direction.",
      "Input: n = 6, left = [6], right = [0]\nOutput: 6"
    ],
    "constraints": "`1 <= n <= 10^4`\n`0 <= left.length <= n + 1`\n`0 <= left[i] <= n`\n`0 <= right.length <= n + 1`\n`0 <= right[i] <= n`\n`1 <= left.length + right.length <= n + 1`\nAll values of `left` and `right` are unique, and each value can appear only in one of the two arrays."
  },
  {
    "id": "1504",
    "title": "Count Submatrices With All Ones",
    "difficulty": "Medium",
    "explanation": "Given a `rows * columns` matrix `mat` of ones and zeros, return how many submatrices have all ones.",
    "examples": [
      "Input: mat = [[1,0,1],\n              [1,1,0],\n              [1,1,0]]\nOutput: 13\nExplanation:\nThere are 6 rectangles of side 1x1.\n\nThere are 2 rectangles of side 1x2.\n\nThere are 3 rectangles of side 2x1.\n\nThere is 1 rectangle of side 2x2. \nThere is 1 rectangle of side 3x1.\n\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.",
      "Input: mat = [[0,1,1,0],\n              [0,1,1,1],\n              [1,1,1,0]]\nOutput: 24\nExplanation:\nThere are 8 rectangles of side 1x1.\n\nThere are 5 rectangles of side 1x2.\n\nThere are 2 rectangles of side 1x3. \nThere are 4 rectangles of side 2x1.\n\nThere are 2 rectangles of side 2x2. \nThere are 2 rectangles of side 3x1. \nThere is 1 rectangle of side 3x2. \nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.",
      "Input: mat = [[1,1,1,1,1,1]]\nOutput: 21",
      "Input: mat = [[1,0,1],[0,1,0],[1,0,1]]\nOutput: 5"
    ],
    "constraints": "`1 <= rows <= 150`\n`1 <= columns <= 150`\n`0 <= mat[i][j] <= 1`"
  },
  {
    "id": "1505",
    "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "difficulty": "Hard",
    "explanation": "Given a string `num` representing the digits of a very large integer and an integer `k`.\n\nYou are allowed to swap any two adjacent digits of the integer at most `k` times.\n\nReturn the minimum integer you can obtain also as a string.",
    "examples": [
      "Input: num = \"4321\", k = 4\nOutput: \"1342\"\nExplanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.",
      "Input: num = \"100\", k = 1\nOutput: \"010\"\nExplanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.",
      "Input: num = \"36789\", k = 1000\nOutput: \"36789\"\nExplanation: We can keep the number without any swaps.",
      "Input: num = \"22\", k = 22\nOutput: \"22\"",
      "Input: num = \"9438957234785635408\", k = 23\nOutput: \"0345989723478563548\""
    ],
    "constraints": "`1 <= num.length <= 30000`\n`num` contains digits only and doesn't have leading zeros.\n\n`1 <= k <= 10^9`"
  },
  {
    "id": "1506",
    "title": "Find Root of N-Ary Tree",
    "difficulty": "Medium",
    "explanation": "You are given all the nodes of an N-ary tree as an array of `Node` objects, where each node has a unique value.\n\nReturn the root of the N-ary tree.\n\nCustom testing:\nAn N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples).\n\nFor example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\nThe testing will be done in the following way:\nThe input data should be provided as a serialization of the tree.\n\nThe driver code will construct the tree from the serialized input data and put each `Node` object into an array in an arbitrary order.\n\nThe driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array.\n\nThe driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the same, the test passes.",
    "examples": [
      "Input: tree = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]\nExplanation: The tree from the input data is shown above.\n\nThe driver code creates the tree and gives findRoot the Node objects in an arbitrary order.\n\nFor example, the passed array could be [Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)] or [Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)].\n\nThe findRoot function should return the root Node(1), and the driver code will serialize it and compare with the input data.\n\nThe input data and serialized Node(1) are the same, so the test passes.",
      "Input: tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"
    ],
    "constraints": "The total number of nodes is between `[1, 5 * 104]`.\n\nEach node has a unique value.\n\nFollow up:\nCould you solve this problem in constant space complexity with a linear time algorithm?"
  },
  {
    "id": "1507",
    "title": "Reformat Date",
    "difficulty": "Easy",
    "explanation": "Given a `date` string in the form `Day Month Year`, where:\n`Day` is in the set `{\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}`.\n\n`Month` is in the set `{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}`.\n\n`Year` is in the range `[1900, 2100]`.\n\nConvert the date string to the format `YYYY-MM-DD`, where:\n`YYYY` denotes the 4 digit year.\n\n`MM` denotes the 2 digit month.\n\n`DD` denotes the 2 digit day.",
    "examples": [
      "Input: date = \"20th Oct 2052\"\nOutput: \"2052-10-20\"",
      "Input: date = \"6th Jun 1933\"\nOutput: \"1933-06-06\"",
      "Input: date = \"26th May 1960\"\nOutput: \"1960-05-26\""
    ],
    "constraints": "The given dates are guaranteed to be valid, so no error handling is necessary."
  },
  {
    "id": "1508",
    "title": "Range Sum of Sorted Subarray Sums",
    "difficulty": "Medium",
    "explanation": "Given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.\n\nReturn the sum of the numbers from index `left` to index `right` (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.",
    "examples": [
      "Input: nums = [1,2,3,4], n = 4, left = 1, right = 5\nOutput: 13 \nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13.",
      "Input: nums = [1,2,3,4], n = 4, left = 3, right = 4\nOutput: 6\nExplanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.",
      "Input: nums = [1,2,3,4], n = 4, left = 1, right = 10\nOutput: 50"
    ],
    "constraints": "`1 <= nums.length <= 10^3`\n`nums.length == n`\n`1 <= nums[i] <= 100`\n`1 <= left <= right <= n * (n + 1) / 2`"
  },
  {
    "id": "1509",
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "difficulty": "Medium",
    "explanation": "Given an array `nums`, you are allowed to choose one element of `nums` and change it by any value in one move.\n\nReturn the minimum difference between the largest and smallest value of `nums` after perfoming at most 3 moves.",
    "examples": [
      "Input: nums = [5,3,2,4]\nOutput: 0\nExplanation: Change the array [5,3,2,4] to [2,2,2,2].\n\nThe difference between the maximum and minimum is 2-2 = 0.",
      "Input: nums = [1,5,0,10,14]\nOutput: 1\nExplanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. \nThe difference between the maximum and minimum is 1-0 = 1.",
      "Input: nums = [6,6,0,1,1,4,6]\nOutput: 2",
      "Input: nums = [1,5,6,14,15]\nOutput: 1"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`-10^9 <= nums[i] <= 10^9`"
  },
  {
    "id": "1510",
    "title": "Stone Game IV",
    "difficulty": "Hard",
    "explanation": "Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there are `n` stones in a pile.  On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.\n\nAlso, if a player cannot make a move, he/she loses the game.\n\nGiven a positive integer `n`. Return `True` if and only if Alice wins the game otherwise return `False`, assuming both players play optimally.",
    "examples": [
      "Input: n = 1\nOutput: true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.",
      "Input: n = 2\nOutput: false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).",
      "Input: n = 4\nOutput: true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).",
      "Input: n = 7\nOutput: false\nExplanation: Alice can't win the game if Bob plays optimally.\n\nIf Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). \nIf Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).",
      "Input: n = 17\nOutput: false\nExplanation: Alice can't win the game if Bob plays optimally."
    ],
    "constraints": "`1 <= n <= 10^5`"
  },
  {
    "id": "1511",
    "title": "Customer Order Frequency",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1512",
    "title": "Number of Good Pairs",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums`.\n\nA pair `(i,j)` is called good if `nums[i]` == `nums[j]` and `i` < `j`.\n\nReturn the number of good pairs.",
    "examples": [
      "Input: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.",
      "Input: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.",
      "Input: nums = [1,2,3]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "1513",
    "title": "Number of Substrings With Only 1s",
    "difficulty": "Medium",
    "explanation": "Given a binary string `s` (a string consisting only of '0' and '1's).\n\nReturn the number of substrings with all characters 1's.\n\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
      "Input: s = \"0110111\"\nOutput: 9\nExplanation: There are 9 substring in total with only 1's characters.\n\n\"1\" -> 5 times.\n\n\"11\" -> 3 times.\n\n\"111\" -> 1 time.",
      "Input: s = \"101\"\nOutput: 2\nExplanation: Substring \"1\" is shown 2 times in s.",
      "Input: s = \"111111\"\nOutput: 21\nExplanation: Each substring contains only 1's characters.",
      "Input: s = \"000\"\nOutput: 0"
    ],
    "constraints": "`s[i] == '0'` or `s[i] == '1'`\n`1 <= s.length <= 10^5`"
  },
  {
    "id": "1514",
    "title": "Path with Maximum Probability",
    "difficulty": "Medium",
    "explanation": "You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`.\n\nGiven two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability.\n\nIf there is no path from `start` to `end`, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.",
    "examples": [
      "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.",
      "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000",
      "Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation: There is no path between 0 and 2."
    ],
    "constraints": "`2 <= n <= 10^4`\n`0 <= start, end < n`\n`start != end`\n`0 <= a, b < n`\n`a != b`\n`0 <= succProb.length == edges.length <= 2*10^4`\n`0 <= succProb[i] <= 1`\nThere is at most one edge between every two nodes."
  },
  {
    "id": "1515",
    "title": "Best Position for a Service Centre",
    "difficulty": "Hard",
    "explanation": "A delivery company wants to build a new service centre in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.\n\nGiven an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return the minimum sum of the euclidean distances to all customers.\n\nIn other words, you need to choose the position of the service centre `[xcentre, ycentre]` such that the following formula is minimized:\nAnswers within `10^-5` of the actual value will be accepted.",
    "examples": [
      "Input: positions = [[0,1],[1,0],[1,2],[2,1]]\nOutput: 4.00000\nExplanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.",
      "Input: positions = [[1,1],[3,3]]\nOutput: 2.82843\nExplanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843",
      "Input: positions = [[1,1]]\nOutput: 0.00000",
      "Input: positions = [[1,1],[0,0],[2,0]]\nOutput: 2.73205\nExplanation: At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.\n\nTry to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205.\n\nBe careful with the precision!",
      "Input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]\nOutput: 32.94036\nExplanation: You can use [4.3460852395, 4.9813795505] as the position of the centre."
    ],
    "constraints": "`1 <= positions.length <= 50`\n`positions[i].length == 2`\n`0 <= positions[i][0], positions[i][1] <= 100`"
  },
  {
    "id": "1516",
    "title": "Move Sub-Tree of N-Ary Tree",
    "difficulty": "Hard",
    "explanation": "Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`.\n\nYou should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, don't change anything. Node `p` must be the last child in the children list of node `q`.\n\nReturn the root of the tree after adjusting it.\n\nThere are 3 cases for nodes `p` and `q`:\nNode `q` is in the sub-tree of node `p`.\n\nNode `p` is in the sub-tree of node `q`.\n\nNeither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`.\n\nIn cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. Please read the examples carefully before solving this problem.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\nFor example, the above tree is serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].",
    "examples": [
      "Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 4, q = 1\nOutput: [1,null,2,3,4,null,5,null,6,null,7,8]\nExplanation: This example follows the second case as node p is in the sub-tree of node q. We move node p with its sub-tree to be a direct child of node q.\n\nNotice that node 4 is the last child of node 1.",
      "Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 7, q = 4\nOutput: [1,null,2,3,null,4,5,null,6,null,7,8]\nExplanation: Node 7 is already a direct child of node 4. We don't change anything.",
      "Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 3, q = 8\nOutput: [1,null,2,null,4,5,null,7,8,null,null,null,3,null,6]\nExplanation: This example follows case 3 because node p is not in the sub-tree of node q and vice-versa. We can move node 3 with its sub-tree and make it as node 8's child.",
      "Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 2, q = 7\nOutput: [1,null,7,3,null,2,null,6,null,4,5,null,null,8]\nExplanation: Node q is in the sub-tree of node p, so this is case 1.\n\nThe first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q.\n\nThen we will see that the tree is disconnected, you need to reconnect node q to replace node p as shown.",
      "Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 1, q = 2\nOutput: [2,null,4,5,1,null,7,8,null,null,3,null,null,null,6]\nExplanation: Node q is in the sub-tree of node p, so this is case 1.\n\nThe first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q.\n\nAs node p was the root of the tree, node q replaces it and becomes the root of the tree."
    ],
    "constraints": "The total number of nodes is between `[2, 1000]`.\n\nEach node has a unique value.\n\n`p != null`\n`q != null`\n`p` and `q` are two different nodes (i.e. `p != q`)."
  },
  {
    "id": "1517",
    "title": "Find Users With Valid E-Mails",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1518",
    "title": "Water Bottles",
    "difficulty": "Easy",
    "explanation": "Given `numBottles` full water bottles, you can exchange `numExchange` empty water bottles for one full water bottle.\n\nThe operation of drinking a full water bottle turns it into an empty bottle.\n\nReturn the maximum number of water bottles you can drink.",
    "examples": [
      "Input: numBottles = 9, numExchange = 3\nOutput: 13\nExplanation: You can exchange 3 empty bottles to get 1 full water bottle.\n\nNumber of water bottles you can drink: 9 + 3 + 1 = 13.",
      "Input: numBottles = 15, numExchange = 4\nOutput: 19\nExplanation: You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19.",
      "Input: numBottles = 5, numExchange = 5\nOutput: 6",
      "Input: numBottles = 2, numExchange = 3\nOutput: 2"
    ],
    "constraints": "`1 <= numBottles <= 100`\n`2 <= numExchange <= 100`"
  },
  {
    "id": "1519",
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "difficulty": "Medium",
    "explanation": "Given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The root of the tree is the node `0`, and each node of the tree has a label which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).\n\nThe `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.\n\nReturn an array of size `n` where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.\n\nA subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.",
    "examples": [
      "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"\nOutput: [2,1,1,1,1,1,1]\nExplanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\n\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).",
      "Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"\nOutput: [4,2,1,1]\nExplanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\n\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\n\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\n\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.",
      "Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"\nOutput: [3,2,1,1,1]",
      "Input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = \"cbabaa\"\nOutput: [1,2,1,1,2,1]",
      "Input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = \"aaabaaa\"\nOutput: [6,5,4,1,3,2,1]"
    ],
    "constraints": "`1 <= n <= 10^5`\n`edges.length == n - 1`\n`edges[i].length == 2`\n`0 <= ai, bi < n`\n`ai != bi`\n`labels.length == n`\n`labels` is consisting of only of lower-case English letters."
  },
  {
    "id": "1520",
    "title": "Maximum Number of Non-Overlapping Substrings",
    "difficulty": "Hard",
    "explanation": "Given a string `s` of lowercase letters, you need to find the maximum number of non-empty substrings of `s` that meet the following conditions:\nThe substrings do not overlap, that is for any two substrings `s[i..j]` and `s[k..l]`, either `j < k` or `i > l` is true.\n\nA substring that contains a certain character `c` must also contain all occurrences of `c`.\n\nFind the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.\n\nNotice that you can return the substrings in any order.",
    "examples": [
      "Input: s = \"adefaddaccc\"\nOutput: [\"e\",\"f\",\"ccc\"]\nExplanation: The following are all the possible substrings that meet the conditions:\n[\n  \"adefaddaccc\"\n  \"adefadda\",\n  \"ef\",\n  \"e\",\n  \"f\",\n  \"ccc\",\n]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist.",
      "Input: s = \"abbaccd\"\nOutput: [\"d\",\"bb\",\"cc\"]\nExplanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length."
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1521",
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "difficulty": "Hard",
    "explanation": "Winston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.\n\nReturn the minimum possible value of `|func(arr, l, r) - target|`.\n\nNotice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.",
    "examples": [
      "Input: arr = [9,12,3,7,15], target = 5\nOutput: 2\nExplanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.",
      "Input: arr = [1000000,1000000,1000000], target = 1\nOutput: 999999\nExplanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.",
      "Input: arr = [1,2,4,8,16], target = 0\nOutput: 0"
    ],
    "constraints": "`1 <= arr.length <= 105`\n`1 <= arr[i] <= 106`\n`0 <= target <= 107`"
  },
  {
    "id": "1522",
    "title": "Diameter of N-Ary Tree",
    "difficulty": "Medium",
    "explanation": "Given a `root` of an N-ary tree, you need to compute the length of the diameter of the tree.\n\nThe diameter of an N-ary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root.\n\n(Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)",
    "examples": [
      "Input: root = [1,null,3,2,4,null,5,6]\nOutput: 3\nExplanation: Diameter is shown in red color.",
      "Input: root = [1,null,2,null,3,4,null,5,null,6]\nOutput: 4",
      "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 7"
    ],
    "constraints": "The depth of the n-ary tree is less than or equal to `1000`.\n\nThe total number of nodes is between `[1, 104]`."
  },
  {
    "id": "1523",
    "title": "Count Odd Numbers in an Interval Range",
    "difficulty": "Easy",
    "explanation": "Given two non-negative integers `low` and `high`. Return the count of odd numbers between `low` and `high` (inclusive).",
    "examples": [
      "Input: low = 3, high = 7\nOutput: 3\nExplanation: The odd numbers between 3 and 7 are [3,5,7].",
      "Input: low = 8, high = 10\nOutput: 1\nExplanation: The odd numbers between 8 and 10 are [9]."
    ],
    "constraints": "`0 <= low <= high <= 10^9`"
  },
  {
    "id": "1524",
    "title": "Number of Sub-arrays With Odd Sum",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `arr`. Return the number of sub-arrays with odd sum.\n\nAs the answer may grow large, the answer must be computed modulo `10^9 + 7`.",
    "examples": [
      "Input: arr = [1,3,5]\nOutput: 4\nExplanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\n\nOdd sums are [1,9,3,5] so the answer is 4.",
      "Input: arr = [2,4,6]\nOutput: 0\nExplanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\n\nAll sub-arrays have even sum and the answer is 0.",
      "Input: arr = [1,2,3,4,5,6,7]\nOutput: 16",
      "Input: arr = [100,100,99,99]\nOutput: 4",
      "Input: arr = [7]\nOutput: 1"
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`1 <= arr[i] <= 100`"
  },
  {
    "id": "1525",
    "title": "Number of Good Ways to Split a String",
    "difficulty": "Medium",
    "explanation": "You are given a string `s`, a split is called good if you can split `s` into 2 non-empty strings `p` and `q` where its concatenation is equal to `s` and the number of distinct letters in `p` and `q` are the same.\n\nReturn the number of good splits you can make in `s`.",
    "examples": [
      "Input: s = \"aacaba\"\nOutput: 2\nExplanation: There are 5 ways to split `\"aacaba\"` and 2 of them are good. \n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.",
      "Input: s = \"abcd\"\nOutput: 1\nExplanation: Split the string as follows (\"ab\", \"cd\").",
      "Input: s = \"aaaaa\"\nOutput: 4\nExplanation: All possible splits are good.",
      "Input: s = \"acbadbaada\"\nOutput: 2"
    ],
    "constraints": "`s` contains only lowercase English letters.\n\n`1 <= s.length <= 10^5`"
  },
  {
    "id": "1526",
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "difficulty": "Hard",
    "explanation": "Given an array of positive integers `target` and an array `initial` of same size with all zeros.\n\nReturn the minimum number of operations to form a `target` array from `initial` if you are allowed to do the following operation:\nChoose any subarray from `initial` and increment each value by one.\n\nThe answer is guaranteed to fit within the range of a 32-bit signed integer.",
    "examples": [
      "Input: target = [1,2,3,2,1]\nOutput: 3\nExplanation: We need at least 3 operations to form the target array from the initial array.\n\n[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).\n\n[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).\n\n[1,2,2,2,1] increment 1 at index 2.\n\n[1,2,3,2,1] target array is formed.",
      "Input: target = [3,1,1,2]\nOutput: 4\nExplanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).",
      "Input: target = [3,1,5,4,2]\nOutput: 7\nExplanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] \n                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).",
      "Input: target = [1,1,1,1]\nOutput: 1"
    ],
    "constraints": "`1 <= target.length <= 10^5`\n`1 <= target[i] <= 10^5`"
  },
  {
    "id": "1527",
    "title": "Patients With a Condition",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1528",
    "title": "Shuffle String",
    "difficulty": "Easy",
    "explanation": "Given a string `s` and an integer array `indices` of the same length.\n\nThe string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.\n\nReturn the shuffled string.",
    "examples": [
      "Input: s = \"codeleet\", `indices` = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\nExplanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.",
      "Input: s = \"abc\", `indices` = [0,1,2]\nOutput: \"abc\"\nExplanation: After shuffling, each character remains in its position.",
      "Input: s = \"aiohn\", `indices` = [3,1,4,2,0]\nOutput: \"nihao\"",
      "Input: s = \"aaiougrt\", `indices` = [4,0,2,6,7,3,1,5]\nOutput: \"arigatou\"",
      "Input: s = \"art\", `indices` = [1,0,2]\nOutput: \"rat\""
    ],
    "constraints": "`s.length == indices.length == n`\n`1 <= n <= 100`\n`s` contains only lower-case English letters.\n\n`0 <= indices[i] < n`\nAll values of `indices` are unique (i.e. `indices` is a permutation of the integers from `0` to `n - 1`)."
  },
  {
    "id": "1529",
    "title": "Bulb Switcher IV",
    "difficulty": "Medium",
    "explanation": "There is a room with `n` bulbs, numbered from `0` to `n-1`, arranged in a row from left to right. Initially all the bulbs are turned off.\n\nYour task is to obtain the configuration represented by `target` where `target[i]` is '1' if the i-th bulb is turned on and is '0' if it is turned off.\n\nYou have a switch to flip the state of the bulb, a flip operation is defined as follows:\nChoose any bulb (index `i`) of your current configuration.\n\nFlip each bulb from index `i` to `n-1`.\n\nWhen any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.\n\nReturn the minimum number of flips required to form `target`.",
    "examples": [
      "Input: target = \"10111\"\nOutput: 3\nExplanation: Initial configuration \"00000\".\n\nflip from the third bulb:  \"00000\" -> \"00111\"\nflip from the first bulb:  \"00111\" -> \"11000\"\nflip from the second bulb:  \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target.",
      "Input: target = \"101\"\nOutput: 3\nExplanation: \"000\" -> \"111\" -> \"100\" -> \"101\".",
      "Input: target = \"00000\"\nOutput: 0",
      "Input: target = \"001011101\"\nOutput: 5"
    ],
    "constraints": "`1 <= target.length <= 10^5`\n`target[i] == '0'` or `target[i] == '1'`"
  },
  {
    "id": "1530",
    "title": "Number of Good Leaf Nodes Pairs",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree and an integer `distance`. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to `distance`.\n\nReturn the number of good leaf node pairs in the tree.",
    "examples": [
      "Input: root = [1,2,3,null,4], distance = 3\nOutput: 1\nExplanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.",
      "Input: root = [1,2,3,4,5,6,7], distance = 3\nOutput: 2\nExplanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.",
      "Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\nOutput: 1\nExplanation: The only good pair is [2,5].",
      "Input: root = [100], distance = 1\nOutput: 0",
      "Input: root = [1,1,1], distance = 2\nOutput: 1"
    ],
    "constraints": "The number of nodes in the `tree` is in the range `[1, 2^10].`\nEach node's value is between `[1, 100]`.\n\n`1 <= distance <= 10`"
  },
  {
    "id": "1531",
    "title": "String Compression II",
    "difficulty": "Hard",
    "explanation": "Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `\"aabccc\"` we replace `\"aa\"` by `\"a2\"` and replace `\"ccc\"` by `\"c3\"`. Thus the compressed string becomes `\"a2bc3\"`.\n\nNotice that in this problem, we are not adding `'1'` after single characters.\n\nGiven a string `s` and an integer `k`. You need to delete at most `k` characters from `s` such that the run-length encoded version of `s` has minimum length.\n\nFind the minimum length of the run-length encoded version of `s` after deleting at most `k` characters.",
    "examples": [
      "Input: s = \"aaabcccd\", k = 2\nOutput: 4\nExplanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4.",
      "Input: s = \"aabbaa\", k = 2\nOutput: 2\nExplanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.",
      "Input: s = \"aaaaaaaaaaa\", k = 0\nOutput: 3\nExplanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3."
    ],
    "constraints": "`1 <= s.length <= 100`\n`0 <= k <= s.length`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1532",
    "title": "The Most Recent Three Orders",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1533",
    "title": "Find the Index of the Large Integer",
    "difficulty": "Medium",
    "explanation": "We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is larger than the rest of the integers. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:\n`int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns:\n\t\n1 if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`.\n\n0 if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`.\n\n-1 if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`.\n\n`int length()`: Returns the size of the array.\n\nYou are allowed to call `compareSub()` 20 times at most. You can assume both functions work in `O(1)` time.\n\nReturn the index of the array `arr` which has the largest integer.\n\nFollow-up:\nWhat if there are two numbers in `arr` that are bigger than all other numbers?\nWhat if there is one number that is bigger than other numbers and one number that is smaller than other numbers?",
    "examples": [
      "Input: arr = [7,7,7,7,10,7,7,7]\nOutput: 4\nExplanation: The following calls to the API\nreader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]).\n\nThus we know that arr[0] and arr[1] doesn't contain the largest element.\n\nreader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].\n\nreader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array.\n\nNotice that we made only 3 calls, so the answer is valid.",
      "Input: nums = [6,6,12]\nOutput: 2"
    ],
    "constraints": "`2 <= arr.length <= 5 * 10^5`\n`1 <= arr[i] <= 100`\nAll elements of `arr` are equal except for one element which is larger than all other elements."
  },
  {
    "id": "1534",
    "title": "Count Good Triplets",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets.\n\nA triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are true:\n`0 <= i < j < k < arr.length`\n`|arr[i] - arr[j]| <= a`\n`|arr[j] - arr[k]| <= b`\n`|arr[i] - arr[k]| <= c`\nWhere `|x|` denotes the absolute value of `x`.\n\nReturn the number of good triplets.",
    "examples": [
      "Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\nOutput: 4\nExplanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].",
      "Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1\nOutput: 0\nExplanation: No triplet satisfies all conditions."
    ],
    "constraints": "`3 <= arr.length <= 100`\n`0 <= arr[i] <= 1000`\n`0 <= a, b, c <= 1000`"
  },
  {
    "id": "1535",
    "title": "Find the Winner of an Array Game",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr` of distinct integers and an integer `k`.\n\nA game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.\n\nReturn the integer which will win the game.\n\nIt is guaranteed that there will be a winner of the game.",
    "examples": [
      "Input: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.",
      "Input: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.",
      "Input: arr = [1,9,8,2,3,7,6,4,5], k = 7\nOutput: 9",
      "Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\nOutput: 99"
    ],
    "constraints": "`2 <= arr.length <= 10^5`\n`1 <= arr[i] <= 10^6`\n`arr` contains distinct integers.\n\n`1 <= k <= 10^9`"
  },
  {
    "id": "1536",
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "difficulty": "Medium",
    "explanation": "Given an `n x n` binary `grid`, in one step you can choose two adjacent rows of the grid and swap them.\n\nA grid is said to be valid if all the cells above the main diagonal are zeros.\n\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\n\nThe main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.",
    "examples": [
      "Input: grid = [[0,0,1],[1,1,0],[1,0,0]]\nOutput: 3",
      "Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\nOutput: -1\nExplanation: All rows are similar, swaps have no effect on the grid.",
      "Input: grid = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: 0"
    ],
    "constraints": "`n == grid.length`\n`n == grid[i].length`\n`1 <= n <= 200`\n`grid[i][j]` is `0` or `1`"
  },
  {
    "id": "1537",
    "title": "Get the Maximum Score",
    "difficulty": "Hard",
    "explanation": "You are given two sorted arrays of distinct integers `nums1` and `nums2.`\nA valid path is defined as follows:\nChoose array nums1 or nums2 to traverse (from index-0).\n\nTraverse the current array from left to right.\n\nIf you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\nScore is defined as the sum of uniques values in a valid path.\n\nReturn the maximum score you can obtain of all possible valid paths.\n\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
      "Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\nOutput: 30\nExplanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].",
      "Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\nOutput: 109\nExplanation: Maximum sum is obtained with the path [1,3,5,100].",
      "Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation: There are no common elements between nums1 and nums2.\n\nMaximum sum is obtained with the path [6,7,8,9,10].",
      "Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]\nOutput: 61"
    ],
    "constraints": "`1 <= nums1.length <= 10^5`\n`1 <= nums2.length <= 10^5`\n`1 <= nums1[i], nums2[i] <= 10^7`\n`nums1` and `nums2` are strictly increasing."
  },
  {
    "id": "1538",
    "title": "Guess the Majority in a Hidden Array",
    "difficulty": "Medium",
    "explanation": "We have an integer array `nums`, where all the integers in `nums` are 0 or 1. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:\n`int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < ArrayReader.length()`. The function returns the distribution of the value of the 4 elements and returns:\n\t\n4 : if the values of the 4 elements are the same (0 or 1).\n\n2 : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.\n\n0 : if two element have a value equal to 0 and two elements have a value equal to 1.\n\n`int length()`: Returns the size of the array.\n\nYou are allowed to call `query()` 2 * n times at most where n is equal to `ArrayReader.length()`.\n\nReturn any index of the most frequent value in `nums`, in case of tie, return -1.\n\nFollow up: What is the minimum number of calls needed to find the majority element?",
    "examples": [
      "Input: nums = [0,0,1,0,1,1,1,1]\nOutput: 5\nExplanation: The following calls to the API\nreader.length() // returns 8 because there are 8 elements in the hidden array.\n\nreader.query(0,1,2,3) // returns 2 this is a query that compares the elements nums[0], nums[1], nums[2], nums[3]\n// Three elements have a value equal to 0 and one element has value equal to 1 or viceversa.\n\nreader.query(4,5,6,7) // returns 4 because nums[4], nums[5], nums[6], nums[7] have the same value.\n\nwe can infer that the most frequent value is found in the last 4 elements.\n\nIndex 2, 4, 6, 7 is also a correct answer.",
      "Input: nums = [0,0,1,1,0]\nOutput: 0",
      "Input: nums = [1,0,1,0,1,0,1,0]\nOutput: -1"
    ],
    "constraints": "`5 <= nums.length <= 10^5`\n`0 <= nums[i] <= 1`"
  },
  {
    "id": "1539",
    "title": "Kth Missing Positive Number",
    "difficulty": "Easy",
    "explanation": "Given an array `arr` of positive integers sorted in a strictly increasing order, and an integer `k`.\n\nFind the `kth` positive integer that is missing from this array.",
    "examples": [
      "Input: arr = [2,3,4,7,11], k = 5\nOutput: 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.",
      "Input: arr = [1,2,3,4], k = 2\nOutput: 6\nExplanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6."
    ],
    "constraints": "`1 <= arr.length <= 1000`\n`1 <= arr[i] <= 1000`\n`1 <= k <= 1000`\n`arr[i] < arr[j]` for `1 <= i < j <= arr.length`"
  },
  {
    "id": "1540",
    "title": "Can Convert String in K Moves",
    "difficulty": "Medium",
    "explanation": "Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less.\n\nDuring the `ith` (`1 <= i <= k`) move you can:\nChoose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.\n\nDo nothing.\n\nShifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times.\n\nRemember that any index `j` can be picked at most once.\n\nReturn `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.",
    "examples": [
      "Input: s = \"input\", t = \"ouput\", k = 9\nOutput: true\nExplanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.",
      "Input: s = \"abc\", t = \"bcd\", k = 10\nOutput: false\nExplanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.",
      "Input: s = \"aab\", t = \"bbb\", k = 27\nOutput: true\nExplanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'."
    ],
    "constraints": "`1 <= s.length, t.length <= 10^5`\n`0 <= k <= 10^9`\n`s`, `t` contain only lowercase English letters."
  },
  {
    "id": "1541",
    "title": "Minimum Insertions to Balance a Parentheses String",
    "difficulty": "Medium",
    "explanation": "Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is balanced if:\nAny left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.\n\nLeft parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.\n\nIn other words, we treat `'('` as openning parenthesis and `'))'` as closing parenthesis.\n\nFor example, `\"())\"`, `\"())(())))\"` and `\"(())())))\"` are balanced, `\")()\"`, `\"()))\"` and `\"(()))\"` are not balanced.\n\nYou can insert the characters `'('` and `')'` at any position of the string to balance it if needed.\n\nReturn the minimum number of insertions needed to make `s` balanced.",
    "examples": [
      "Input: s = \"(()))\"\nOutput: 1\nExplanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be \"(())))\" which is balanced.",
      "Input: s = \"())\"\nOutput: 0\nExplanation: The string is already balanced.",
      "Input: s = \"))())(\"\nOutput: 3\nExplanation: Add '(' to match the first '))', Add '))' to match the last '('.",
      "Input: s = \"((((((\"\nOutput: 12\nExplanation: Add 12 ')' to balance the string.",
      "Input: s = \")))))))\"\nOutput: 5\nExplanation: Add 4 '(' at the beginning of the string and one ')' at the end. The string becomes \"(((())))))))\"."
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s` consists of `'('` and `')'` only."
  },
  {
    "id": "1542",
    "title": "Find Longest Awesome Substring",
    "difficulty": "Hard",
    "explanation": "Given a string `s`. An awesome substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it palindrome.\n\nReturn the length of the maximum length awesome substring of `s`.",
    "examples": [
      "Input: s = \"3242415\"\nOutput: 5\nExplanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps.",
      "Input: s = \"12345678\"\nOutput: 1",
      "Input: s = \"213123\"\nOutput: 6\nExplanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.",
      "Input: s = \"00\"\nOutput: 2"
    ],
    "constraints": "`1 <= s.length <= 10^5`\n`s` consists only of digits."
  },
  {
    "id": "1543",
    "title": "Fix Product Name Format",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1544",
    "title": "Make The String Great",
    "difficulty": "Easy",
    "explanation": "Given a string `s` of lower and upper case English letters.\n\nA good string is a string which doesn't have two adjacent characters `s[i]` and `s[i + 1]` where:\n`0 <= i <= s.length - 2`\n`s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or vice-versa.\n\nTo make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.\n\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\n\nNotice that an empty string is also good.",
    "examples": [
      "Input: s = \"leEeetcode\"\nOutput: \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".",
      "Input: s = \"abBAcC\"\nOutput: \"\"\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"",
      "Input: s = \"s\"\nOutput: \"s\""
    ],
    "constraints": "`1 <= s.length <= 100`\n`s` contains only lower and upper case English letters."
  },
  {
    "id": "1545",
    "title": "Find Kth Bit in Nth Binary String",
    "difficulty": "Medium",
    "explanation": "Given two positive integers `n` and `k`, the binary string  `Sn` is formed as follows:\n`S1 = \"0\"`\n`Si = Si-1 + \"1\" + reverse(invert(Si-1))` for `i > 1`\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0).\n\nFor example, the first 4 strings in the above sequence are:\n`S1 = \"0\"`\n`S2 = \"011\"`\n`S3 = \"0111001\"`\n`S4 = \"011100110110001\"`\nReturn the `kth` bit in `Sn`. It is guaranteed that `k` is valid for the given `n`.",
    "examples": [
      "Input: n = 3, k = 1\nOutput: \"0\"\nExplanation: S3 is \"0111001\". The first bit is \"0\".",
      "Input: n = 4, k = 11\nOutput: \"1\"\nExplanation: S4 is \"011100110110001\". The 11th bit is \"1\".",
      "Input: n = 1, k = 1\nOutput: \"0\"",
      "Input: n = 2, k = 3\nOutput: \"1\""
    ],
    "constraints": "`1 <= n <= 20`\n`1 <= k <= 2n - 1`"
  },
  {
    "id": "1546",
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` and an integer `target`.\n\nReturn the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to `target`.",
    "examples": [
      "Input: nums = [1,1,1,1,1], target = 2\nOutput: 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).",
      "Input: nums = [-1,3,5,1,4,2,-9], target = 6\nOutput: 2\nExplanation: There are 3 subarrays with sum equal to 6.\n\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.",
      "Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10\nOutput: 3",
      "Input: nums = [0,0,0], target = 0\nOutput: 3"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`-10^4 <= nums[i] <= 10^4`\n`0 <= target <= 10^6`"
  },
  {
    "id": "1547",
    "title": "Minimum Cost to Cut a Stick",
    "difficulty": "Hard",
    "explanation": "Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length 6 is labelled as follows:\nGiven an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.\n\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\n\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n\nReturn the minimum total cost of the cuts.",
    "examples": [
      "Input: n = 7, cuts = [1,3,4,5]\nOutput: 16\nExplanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\n\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).",
      "Input: n = 9, cuts = [5,6,1,4,2]\nOutput: 22\nExplanation: If you try the given cuts ordering the cost will be 25.\n\nThere are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible."
    ],
    "constraints": "`2 <= n <= 10^6`\n`1 <= cuts.length <= min(n - 1, 100)`\n`1 <= cuts[i] <= n - 1`\nAll the integers in `cuts` array are distinct."
  },
  {
    "id": "1548",
    "title": "The Most Similar Path in a Graph",
    "difficulty": "Hard",
    "explanation": "We have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. Each city has a name consisting of exactly 3 upper-case English letters given in the string array `names`. Starting at any city `x`, you can reach any city `y` where `y != x` (i.e. the cities and the roads are forming an undirected connected graph).\n\nYou will be given a string array `targetPath`. You should find a path in the graph of the same length and with the minimum edit distance to `targetPath`.\n\nYou need to return the order of the nodes in the path with the minimum edit distance, The path should be of the same length of `targetPath` and should be valid (i.e. there should be a direct road between `ans[i]` and `ans[i + 1]`). If there are multiple answers return any one of them.\n\nThe edit distance is defined as follows:\nFollow-up: If each node can be visited only once in the path, What should you change in your solution?",
    "examples": [
      "Input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [\"ATL\",\"PEK\",\"LAX\",\"DXB\",\"HND\"], targetPath = [\"ATL\",\"DXB\",\"HND\",\"LAX\"]\nOutput: [0,2,4,2]\nExplanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers.\n\n[0,2,4,2] is equivalent to [\"ATL\",\"LAX\",\"HND\",\"LAX\"] which has edit distance = 1 with targetPath.\n\n[0,3,0,2] is equivalent to [\"ATL\",\"DXB\",\"ATL\",\"LAX\"] which has edit distance = 1 with targetPath.\n\n[0,3,1,2] is equivalent to [\"ATL\",\"DXB\",\"PEK\",\"LAX\"] which has edit distance = 1 with targetPath.",
      "Input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [\"ATL\",\"PEK\",\"LAX\",\"DXB\"], targetPath = [\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\"]\nOutput: [0,1,0,1,0,1,0,1]\nExplanation: Any path in this graph has edit distance = 8 with targetPath.",
      "Input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [\"ATL\",\"PEK\",\"LAX\",\"ATL\",\"DXB\",\"HND\"], targetPath = [\"ATL\",\"DXB\",\"HND\",\"DXB\",\"ATL\",\"LAX\",\"PEK\"]\nOutput: [3,4,5,4,3,2,1]\nExplanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetPath.\n\nIt's equivalent to [\"ATL\",\"DXB\",\"HND\",\"DXB\",\"ATL\",\"LAX\",\"PEK\"]"
    ],
    "constraints": "`2 <= n <= 100`\n`m == roads.length`\n`n - 1 <= m <= (n * (n - 1) / 2)`\n`0 <= ai, bi <= n - 1`\n`ai != bi `\nThe graph is guaranteed to be connected and each pair of nodes may have at most one direct road.\n\n`names.length == n`\n`names[i].length == 3`\n`names[i]` consists of upper-case English letters.\n\nThere can be two cities with the same name.\n\n`1 <= targetPath.length <= 100`\n`targetPath[i].length == 3`\n`targetPath[i]` consists of upper-case English letters."
  },
  {
    "id": "1549",
    "title": "The Most Recent Orders for Each Product",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1550",
    "title": "Three Consecutive Odds",
    "difficulty": "Easy",
    "explanation": "Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.",
    "examples": [
      "Input: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.",
      "Input: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds."
    ],
    "constraints": "`1 <= arr.length <= 1000`\n`1 <= arr[i] <= 1000`"
  },
  {
    "id": "1551",
    "title": "Minimum Operations to Make Array Equal",
    "difficulty": "Medium",
    "explanation": "You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`).\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\n\nGiven an integer `n`, the length of the array. Return the minimum number of operations needed to make all the elements of arr equal.",
    "examples": [
      "Input: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].",
      "Input: n = 6\nOutput: 9"
    ],
    "constraints": "`1 <= n <= 10^4`"
  },
  {
    "id": "1552",
    "title": "Magnetic Force Between Two Balls",
    "difficulty": "Medium",
    "explanation": "In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.\n\nRick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.\n\nGiven the integer array `position` and the integer `m`. Return the required force.",
    "examples": [
      "Input: position = [1,2,3,4,7], m = 3\nOutput: 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.",
      "Input: position = [5,4,3,2,1,1000000000], m = 2\nOutput: 999999999\nExplanation: We can use baskets 1 and 1000000000."
    ],
    "constraints": "`n == position.length`\n`2 <= n <= 10^5`\n`1 <= position[i] <= 10^9`\nAll integers in `position` are distinct.\n\n`2 <= m <= position.length`"
  },
  {
    "id": "1553",
    "title": "Minimum Number of Days to Eat N Oranges",
    "difficulty": "Hard",
    "explanation": "There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows:\nEat one orange.\n\nIf the number of remaining oranges (`n`) is divisible by 2 then you can eat  n/2 oranges.\n\nIf the number of remaining oranges (`n`) is divisible by 3 then you can eat  2*(n/3) oranges.\n\nYou can only choose one of the actions per day.\n\nReturn the minimum number of days to eat `n` oranges.",
    "examples": [
      "Input: n = 10\nOutput: 4\nExplanation: You have 10 oranges.\n\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\n\nYou need at least 4 days to eat the 10 oranges.",
      "Input: n = 6\nOutput: 3\nExplanation: You have 6 oranges.\n\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\n\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\n\nYou need at least 3 days to eat the 6 oranges.",
      "Input: n = 1\nOutput: 1",
      "Input: n = 56\nOutput: 6"
    ],
    "constraints": "`1 <= n <= 2*10^9`"
  },
  {
    "id": "1554",
    "title": "Strings Differ by One Character",
    "difficulty": "Medium",
    "explanation": "Given a list of strings `dict` where all the strings are of the same length.\n\nReturn `True` if there are 2 strings that only differ by 1 character in the same index, otherwise return `False`.\n\nFollow up: Could you solve this problem in O(n*m) where n is the length of `dict` and m is the length of each string.",
    "examples": [
      "Input: dict = [\"abcd\",\"acbd\", \"aacd\"]\nOutput: true\nExplanation: Strings \"abcd\" and \"aacd\" differ only by one character in the index 1.",
      "Input: dict = [\"ab\",\"cd\",\"yz\"]\nOutput: false",
      "Input: dict = [\"abcd\",\"cccc\",\"abyd\",\"abab\"]\nOutput: true"
    ],
    "constraints": "Number of characters in `dict <= 10^5`\n`dict[i].length == dict[j].length`\n`dict[i]` should be unique.\n\n`dict[i]` contains only lowercase English letters."
  },
  {
    "id": "1555",
    "title": "Bank Account Summary",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1556",
    "title": "Thousand Separator",
    "difficulty": "Easy",
    "explanation": "Given an integer `n`, add a dot (\".\") as the thousands separator and return it in string format.",
    "examples": [
      "Input: n = 987\nOutput: \"987\"",
      "Input: n = 1234\nOutput: \"1.234\"",
      "Input: n = 123456789\nOutput: \"123.456.789\"",
      "Input: n = 0\nOutput: \"0\""
    ],
    "constraints": "`0 <= n < 2^31`"
  },
  {
    "id": "1557",
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "difficulty": "Medium",
    "explanation": "Given a directed acyclic graph, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.\n\nFind the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.\n\nNotice that you can return the vertices in any order.",
    "examples": [
      "Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\nOutput: [0,3]\nExplanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].",
      "Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]\nOutput: [0,2,3]\nExplanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4."
    ],
    "constraints": "`2 <= n <= 10^5`\n`1 <= edges.length <= min(10^5, n * (n - 1) / 2)`\n`edges[i].length == 2`\n`0 <= fromi, toi < n`\nAll pairs `(fromi, toi)` are distinct."
  },
  {
    "id": "1558",
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "difficulty": "Medium",
    "explanation": "Your task is to form an integer array `nums` from an initial array of zeros `arr` that is the same size as `nums`.\n\nReturn the minimum number of function calls to make `nums` from `arr`.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
      "Input: nums = [1,5]\nOutput: 5\nExplanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\n\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\n\nIncrement by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).\n\nTotal of operations: 1 + 2 + 2 = 5.",
      "Input: nums = [2,2]\nOutput: 3\nExplanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\n\nDouble all the elements: [1, 1] -> [2, 2] (1 operation).\n\nTotal of operations: 2 + 1 = 3.",
      "Input: nums = [4,2,5]\nOutput: 6\nExplanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).",
      "Input: nums = [3,2,2,4]\nOutput: 7",
      "Input: nums = [2,4,8,16]\nOutput: 8"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`0 <= nums[i] <= 10^9`"
  },
  {
    "id": "1559",
    "title": "Detect Cycles in 2D Grid",
    "difficulty": "Hard",
    "explanation": "Given a 2D array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the same value in `grid`.\n\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\n\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell.\n\nReturn `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.",
    "examples": [
      "Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:",
      "Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:",
      "Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m <= 500`\n`1 <= n <= 500`\n`grid` consists only of lowercase English letters."
  },
  {
    "id": "1560",
    "title": "Most Visited Sector in  a Circular Track",
    "difficulty": "Easy",
    "explanation": "Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\nReturn an array of the most visited sectors sorted in ascending order.\n\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).",
    "examples": [
      "Input: n = 4, rounds = [1,3,1,2]\nOutput: [1,2]\nExplanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.",
      "Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]\nOutput: [2]",
      "Input: n = 7, rounds = [1,3,5,7]\nOutput: [1,2,3,4,5,6,7]"
    ],
    "constraints": "`2 <= n <= 100`\n`1 <= m <= 100`\n`rounds.length == m + 1`\n`1 <= rounds[i] <= n`\n`rounds[i] != rounds[i + 1]` for `0 <= i < m`"
  },
  {
    "id": "1561",
    "title": "Maximum Number of Coins You Can Get",
    "difficulty": "Medium",
    "explanation": "There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\nIn each step, you will choose any 3 piles of coins (not necessarily consecutive).\n\nOf your choice, Alice will pick the pile with the maximum number of coins.\n\nYou will pick the next pile with maximum number of coins.\n\nYour friend Bob will pick the last pile.\n\nRepeat until there are no more piles of coins.\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\nReturn the maximum number of coins which you can have.",
    "examples": [
      "Input: piles = [2,4,1,2,7,8]\nOutput: 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\n\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\n\nThe maximum number of coins which you can have are: 7 + 2 = 9.\n\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.",
      "Input: piles = [2,4,5]\nOutput: 4",
      "Input: piles = [9,8,7,6,5,1,2,3,4]\nOutput: 18"
    ],
    "constraints": "`3 <= piles.length <= 10^5`\n`piles.length % 3 == 0`\n`1 <= piles[i] <= 10^4`"
  },
  {
    "id": "1562",
    "title": "Find Latest Group of Size M",
    "difficulty": "Medium",
    "explanation": "Given an array `arr` that represents a permutation of numbers from `1` to `n`. You have a binary string of size `n` that initially has all its bits set to zero.\n\nAt each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`. You are given an integer `m` and you need to find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.\n\nReturn the latest step at which there exists a group of ones of length exactly `m`. If no such group exists, return `-1`.",
    "examples": [
      "Input: arr = [3,5,1,2,4], m = 1\nOutput: 4\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4.",
      "Input: arr = [3,1,5,4,2], m = 2\nOutput: -1\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step.",
      "Input: arr = [1], m = 1\nOutput: 1",
      "Input: arr = [2,1], m = 2\nOutput: 2"
    ],
    "constraints": "`n == arr.length`\n`1 <= n <= 10^5`\n`1 <= arr[i] <= n`\nAll integers in `arr` are distinct.\n\n`1 <= m <= arr.length`"
  },
  {
    "id": "1563",
    "title": "Stone Game V",
    "difficulty": "Hard",
    "explanation": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\n\nThe game ends when there is only one stone remaining. Alice's is initially zero.\n\nReturn the maximum score that Alice can obtain.",
    "examples": [
      "Input: stoneValue = [6,2,3,4,5,5]\nOutput: 18\nExplanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\n\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\n\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.",
      "Input: stoneValue = [7,7,7,7,7,7,7]\nOutput: 28",
      "Input: stoneValue = [4]\nOutput: 0"
    ],
    "constraints": "`1 <= stoneValue.length <= 500`\n`1 <= stoneValue[i] <= 10^6`"
  },
  {
    "id": "1564",
    "title": "Put Boxes Into the Warehouse I",
    "difficulty": "Medium",
    "explanation": "You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\nBoxes are put into the warehouse by the following rules:\nBoxes cannot be stacked.\n\nYou can rearrange the insertion order of the boxes.\n\nBoxes can only be pushed into the warehouse from left to right only.\n\nIf the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn the maximum number of boxes you can put into the warehouse.",
    "examples": [
      "Input: boxes = [4,3,4,1], warehouse = [5,3,3,4,1]\nOutput: 3\nExplanation: \nWe can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.\n\nThere is no way we can fit all 4 boxes in the warehouse.",
      "Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]\nOutput: 3\nExplanation: \nNotice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.\n\nAlso, for the last two rooms, 2 and 3, only boxes of height 1 can fit.\n\nWe can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.\n\nSwapping the orange and green boxes is also valid, or swapping one of them with the red box.",
      "Input: boxes = [1,2,3], warehouse = [1,2,3,4]\nOutput: 1\nExplanation: Since the first room in the warehouse is of height 1, we can only put boxes of height 1.",
      "Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]\nOutput: 0"
    ],
    "constraints": "`n == warehouse.length`\n`1 <= boxes.length, warehouse.length <= 10^5`\n`1 <= boxes[i], warehouse[i] <= 10^9`"
  },
  {
    "id": "1565",
    "title": "Unique Orders and Customers Per Month",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1566",
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "difficulty": "Easy",
    "explanation": "Given an array of positive integers `arr`,  find a pattern of length `m` that is repeated `k` or more times.\n\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\n\nReturn `true` if there exists a pattern of length `m` that is repeated `k` or more times, otherwise return `false`.",
    "examples": [
      "Input: arr = [1,2,4,4,4,4], m = 1, k = 3\nOutput: true\nExplanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.",
      "Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\nOutput: true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.",
      "Input: arr = [1,2,1,2,1,3], m = 2, k = 3\nOutput: false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.",
      "Input: arr = [1,2,3,1,2], m = 2, k = 2\nOutput: false\nExplanation: Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count.",
      "Input: arr = [2,2,2,2], m = 2, k = 3\nOutput: false\nExplanation: The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions."
    ],
    "constraints": "`2 <= arr.length <= 100`\n`1 <= arr[i] <= 100`\n`1 <= m <= 100`\n`2 <= k <= 100`"
  },
  {
    "id": "1567",
    "title": "Maximum Length of Subarray With Positive Product",
    "difficulty": "Medium",
    "explanation": "Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.\n\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\n\nReturn the maximum length of a subarray with positive product.",
    "examples": [
      "Input: nums = [1,-2,-3,4]\nOutput: 4\nExplanation: The array nums already has a positive product of 24.",
      "Input: nums = [0,1,-2,-3,-4]\nOutput: 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\n\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.",
      "Input: nums = [-1,-2,-3,0,1]\nOutput: 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].",
      "Input: nums = [-1,2]\nOutput: 1",
      "Input: nums = [1,2,3,5,-6,4,0,10]\nOutput: 4"
    ],
    "constraints": "`1 <= nums.length <= 10^5`\n`-10^9 <= nums[i] <= 10^9`"
  },
  {
    "id": "1568",
    "title": "Minimum Number of Days to Disconnect Island",
    "difficulty": "Hard",
    "explanation": "Given a 2D `grid` consisting of `1`s (land) and `0`s (water).  An island is a maximal 4-directionally (horizontal or vertical) connected group of `1`s.\n\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\n\nIn one day, we are allowed to change any single land cell `(1)` into a water cell `(0)`.\n\nReturn the minimum number of days to disconnect the grid.",
    "examples": [
      "Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 2\nExplanation: We need at least 2 days to get a disconnected grid.\n\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island.",
      "Input: grid = [[1,1]]\nOutput: 2\nExplanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.",
      "Input: grid = [[1,0,1,0]]\nOutput: 0",
      "Input: grid = [[1,1,0,1,1],\n               [1,1,1,1,1],\n               [1,1,0,1,1],\n               [1,1,0,1,1]]\nOutput: 1",
      "Input: grid = [[1,1,0,1,1],\n               [1,1,1,1,1],\n               [1,1,0,1,1],\n               [1,1,1,1,1]]\nOutput: 2"
    ],
    "constraints": "`1 <= grid.length, grid[i].length <= 30`\n`grid[i][j]` is `0` or `1`."
  },
  {
    "id": "1569",
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "difficulty": "Hard",
    "explanation": "Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.\n\nFor example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST.\n\nReturn the number of ways to reorder `nums` such that the BST formed is identical to the original BST formed from `nums`.\n\nSince the answer may be very large, return it modulo `10^9 + 7`.",
    "examples": [
      "Input: nums = [2,1,3]\nOutput: 1\nExplanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.",
      "Input: nums = [3,4,5,1,2]\nOutput: 5\nExplanation: The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]",
      "Input: nums = [1,2,3]\nOutput: 0\nExplanation: There are no other orderings of nums that will yield the same BST.",
      "Input: nums = [3,1,2,5,4,6]\nOutput: 19",
      "Input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]\nOutput: 216212978\nExplanation: The number of ways to reorder nums to get the same BST is 3216212999. Taking this number modulo 10^9 + 7 gives 216212978."
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= nums.length`\nAll integers in `nums` are distinct."
  },
  {
    "id": "1570",
    "title": "Dot Product of Two Sparse Vectors",
    "difficulty": "Medium",
    "explanation": "Given two sparse vectors, compute their dot product.\n\nImplement class `SparseVector`:\n`SparseVector(nums)` Initializes the object with the vector `nums`\n`dotProduct(vec)` Compute the dot product between the instance of SparseVector and `vec`\nA sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.\n\nFollow up: What if only one of the vectors is sparse?",
    "examples": [
      "Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]\nOutput: 8\nExplanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8",
      "Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]\nOutput: 0\nExplanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0",
      "Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]\nOutput: 6"
    ],
    "constraints": "`n == nums1.length == nums2.length`\n`1 <= n <= 10^5`\n`0 <= nums1[i], nums2[i] <= 100`"
  },
  {
    "id": "1571",
    "title": "Warehouse Manager",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1572",
    "title": "Matrix Diagonal Sum",
    "difficulty": "Easy",
    "explanation": "Given a square matrix `mat`, return the sum of the matrix diagonals.\n\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.",
    "examples": [
      "Input: mat = [[1,2,3],\n              [4,5,6],\n              [7,8,9]]\nOutput: 25\nExplanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once.",
      "Input: mat = [[1,1,1,1],\n              [1,1,1,1],\n              [1,1,1,1],\n              [1,1,1,1]]\nOutput: 8",
      "Input: mat = [[5]]\nOutput: 5"
    ],
    "constraints": "`n == mat.length == mat[i].length`\n`1 <= n <= 100`\n`1 <= mat[i][j] <= 100`"
  },
  {
    "id": "1573",
    "title": "Number of Ways to Split a String",
    "difficulty": "Medium",
    "explanation": "Given a binary string `s` (a string consisting only of '0's and '1's), we can split `s` into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).\n\nReturn the number of ways `s` can be split such that the number of characters '1' is the same in s1, s2, and s3.\n\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
      "Input: s = \"10101\"\nOutput: 4\nExplanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\"",
      "Input: s = \"1001\"\nOutput: 0",
      "Input: s = \"0000\"\nOutput: 3\nExplanation: There are three ways to split s in 3 parts.\n\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\"",
      "Input: s = \"100100010100110\"\nOutput: 12"
    ],
    "constraints": "`3 <= s.length <= 10^5`\n`s[i]` is `'0'` or `'1'`."
  },
  {
    "id": "1574",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "difficulty": "Medium",
    "explanation": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are non-decreasing.\n\nA subarray is a contiguous subsequence of the array.\n\nReturn the length of the shortest subarray to remove.",
    "examples": [
      "Input: arr = [1,2,3,10,4,2,3,5]\nOutput: 3\nExplanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\n\nAnother correct solution is to remove the subarray [3,10,4].",
      "Input: arr = [5,4,3,2,1]\nOutput: 4\nExplanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].",
      "Input: arr = [1,2,3]\nOutput: 0\nExplanation: The array is already non-decreasing. We do not need to remove any elements.",
      "Input: arr = [1]\nOutput: 0"
    ],
    "constraints": "`1 <= arr.length <= 10^5`\n`0 <= arr[i] <= 10^9`"
  },
  {
    "id": "1575",
    "title": "Count All Possible Routes",
    "difficulty": "Hard",
    "explanation": "You are given an array of distinct positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively.\n\nAt each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.\n\nNotice that `fuel` cannot become negative at any point in time, and that you are allowed to visit any city more than once (including `start` and `finish`).\n\nReturn the count of all possible routes from `start` to `finish`.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.",
    "examples": [
      "Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3",
      "Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5",
      "Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.",
      "Input: locations = [2,1,5], start = 0, finish = 0, fuel = 3\nOutput: 2\nExplanation: There are two possible routes, 0 and 0 -> 1 -> 0.",
      "Input: locations = [1,2,3], start = 0, finish = 2, fuel = 40\nOutput: 615088286\nExplanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us 615088286."
    ],
    "constraints": "`2 <= locations.length <= 100`\n`1 <= locations[i] <= 10^9`\nAll integers in `locations` are distinct.\n\n`0 <= start, finish < locations.length`\n`1 <= fuel <= 200`"
  },
  {
    "id": "1576",
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "difficulty": "Easy",
    "explanation": "Given a string `s` containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.\n\nIt is guaranteed that there are no consecutive repeating characters in the given string except for '?'.\n\nReturn the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.",
    "examples": [
      "Input: s = \"?zs\"\nOutput: \"azs\"\nExplanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".",
      "Input: s = \"ubv?w\"\nOutput: \"ubvaw\"\nExplanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".",
      "Input: s = \"j?qg??b\"\nOutput: \"jaqgacb\"",
      "Input: s = \"??yw?ipkj?\"\nOutput: \"acywaipkja\""
    ],
    "constraints": "`1 <= s.length <= 100`\n`s` contains only lower case English letters and `'?'`."
  },
  {
    "id": "1577",
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "difficulty": "Medium",
    "explanation": "Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\nType 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n\nType 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.",
    "examples": [
      "Input: nums1 = [7,4], nums2 = [5,2,8,9]\nOutput: 1\nExplanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8).",
      "Input: nums1 = [1,1], nums2 = [1,1,1]\nOutput: 9\nExplanation: All Triplets are valid, because 1^2 = 1 * 1.\n\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].\n\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].",
      "Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]\nOutput: 2\nExplanation: There are 2 valid triplets.\n\nType 1: (3,0,2).  nums1[3]^2 = nums2[0] * nums2[2].\n\nType 2: (3,0,1).  nums2[3]^2 = nums1[0] * nums1[1].",
      "Input: nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]\nOutput: 0\nExplanation: There are no valid triplets."
    ],
    "constraints": "`1 <= nums1.length, nums2.length <= 1000`\n`1 <= nums1[i], nums2[i] <= 10^5`"
  },
  {
    "id": "1578",
    "title": "Minimum Deletion Cost to Avoid Repeating Letters",
    "difficulty": "Medium",
    "explanation": "Given a string `s` and an array of integers `cost` where `cost[i]` is the cost of deleting the `ith` character in `s`.\n\nReturn the minimum cost of deletions such that there are no two identical letters next to each other.\n\nNotice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.",
    "examples": [
      "Input: s = \"abaac\", cost = [1,2,3,4,5]\nOutput: 3\nExplanation: Delete the letter \"a\" with cost 3 to get \"abac\" (String without two identical letters next to each other).",
      "Input: s = \"abc\", cost = [1,2,3]\nOutput: 0\nExplanation: You don't need to delete any character because there are no identical letters next to each other.",
      "Input: s = \"aabaa\", cost = [1,2,3,4,1]\nOutput: 2\nExplanation: Delete the first and the last character, getting the string (\"aba\")."
    ],
    "constraints": "`s.length == cost.length`\n`1 <= s.length, cost.length <= 10^5`\n`1 <= cost[i] <= 10^4`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1579",
    "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
    "difficulty": "Hard",
    "explanation": "Alice and Bob have an undirected graph of `n` nodes and 3 types of edges:\nType 1: Can be traversed by Alice only.\n\nType 2: Can be traversed by Bob only.\n\nType 3: Can by traversed by both Alice and Bob.\n\nGiven an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\n\nReturn the maximum number of edges you can remove, or return `-1` if it's impossible for the graph to be fully traversed by Alice and Bob.",
    "examples": [
      "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\nOutput: 2\nExplanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.",
      "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\nOutput: 0\nExplanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.",
      "Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\nOutput: -1\nExplanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable."
    ],
    "constraints": "`1 <= n <= 10^5`\n`1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)`\n`edges[i].length == 3`\n`1 <= edges[i][0] <= 3`\n`1 <= edges[i][1] < edges[i][2] <= n`\nAll tuples `(typei, ui, vi)` are distinct."
  },
  {
    "id": "1580",
    "title": "Put Boxes Into the Warehouse II",
    "difficulty": "Medium",
    "explanation": "You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\nBoxes are put into the warehouse by the following rules:\nBoxes cannot be stacked.\n\nYou can rearrange the insertion order of the boxes.\n\nBoxes can be pushed into the warehouse from either side (left or right)\nIf the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn the maximum number of boxes you can put into the warehouse.",
    "examples": [
      "Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]\nOutput: 4\nExplanation:\nWe can store the boxes in the following order:\n1- Put the yellow box in room 2 from either the left or right side.\n\n2- Put the orange box in room 3 from the right side.\n\n3- Put the green box in room 1 from the left side.\n\n4- Put the red box in room 0 from the left side.\n\nNotice that there are other valid ways to put 4 boxes such as swapping the red and green boxes or the red and orange boxes.",
      "Input: boxes = [3,5,5,2], warehouse = [2,1,3,4,5]\nOutput: 3\nExplanation:\nIt's not possible to put the two boxes of height 5 in the warehouse since there's only 1 room of height >= 5.\n\nOther valid solutions are to put the green box in room 2 or to put the orange box first in room 2 before putting the green and red boxes.",
      "Input: boxes = [1,2,3], warehouse = [1,2,3,4]\nOutput: 3",
      "Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]\nOutput: 0"
    ],
    "constraints": "`n == warehouse.length`\n`1 <= boxes.length, warehouse.length <= 105`\n`1 <= boxes[i], warehouse[i] <= 109`"
  },
  {
    "id": "1581",
    "title": "Customer Who Visited but Did Not Make Any Transactions",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1582",
    "title": "Special Positions in a Binary Matrix",
    "difficulty": "Easy",
    "explanation": "Given a `rows x cols` matrix `mat`, where `mat[i][j]` is either `0` or `1`, return the number of special positions in `mat`.\n\nA position `(i,j)` is called special if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are 0-indexed).",
    "examples": [
      "Input: mat = [[1,0,0],\n              [0,0,1],\n              [1,0,0]]\nOutput: 1\nExplanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.",
      "Input: mat = [[1,0,0],\n              [0,1,0],\n              [0,0,1]]\nOutput: 3\nExplanation: (0,0), (1,1) and (2,2) are special positions.",
      "Input: mat = [[0,0,0,1],\n              [1,0,0,0],\n              [0,1,1,0],\n              [0,0,0,0]]\nOutput: 2",
      "Input: mat = [[0,0,0,0,0],\n              [1,0,0,0,0],\n              [0,1,0,0,0],\n              [0,0,1,0,0],\n              [0,0,0,1,1]]\nOutput: 3"
    ],
    "constraints": "`rows == mat.length`\n`cols == mat[i].length`\n`1 <= rows, cols <= 100`\n`mat[i][j]` is `0` or `1`."
  },
  {
    "id": "1583",
    "title": "Count Unhappy Friends",
    "difficulty": "Medium",
    "explanation": "You are given a list of `preferences` for `n` friends, where `n` is always even.\n\nFor each person `i`, `preferences[i]` contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`.\n\nAll the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`.\n\nHowever, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but:\n`x` prefers `u` over `y`, and\n`u` prefers `x` over `v`.\n\nReturn the number of unhappy friends.",
    "examples": [
      "Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput: 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\n\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\n\nFriends 0 and 2 are happy.",
      "Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput: 0\nExplanation: Both friends 0 and 1 are happy.",
      "Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput: 4"
    ],
    "constraints": "`2 <= n <= 500`\n`n` is even.\n\n`preferences.length == n`\n`preferences[i].length == n - 1`\n`0 <= preferences[i][j] <= n - 1`\n`preferences[i]` does not contain `i`.\n\nAll values in `preferences[i]` are unique.\n\n`pairs.length == n/2`\n`pairs[i].length == 2`\n`xi != yi`\n`0 <= xi, yi <= n - 1`\nEach person is contained in exactly one pair."
  },
  {
    "id": "1584",
    "title": "Min Cost to Connect All Points",
    "difficulty": "Medium",
    "explanation": "You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.\n\nThe cost of connecting two points `[xi, yi]` and `[xj, yj]` is the manhattan distance between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.\n\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.",
    "examples": [
      "Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\nOutput: 20\nExplanation:\nWe can connect the points as shown above to get the minimum cost of 20.\n\nNotice that there is a unique path between every pair of points.",
      "Input: points = [[3,12],[-2,5],[-4,1]]\nOutput: 18",
      "Input: points = [[0,0],[1,1],[1,0],[-1,1]]\nOutput: 4",
      "Input: points = [[-1000000,-1000000],[1000000,1000000]]\nOutput: 4000000",
      "Input: points = [[0,0]]\nOutput: 0"
    ],
    "constraints": "`1 <= points.length <= 1000`\n`-106 <= xi, yi <= 106`\nAll pairs `(xi, yi)` are distinct."
  },
  {
    "id": "1585",
    "title": "Check If String Is Transformable With Substring Sort Operations",
    "difficulty": "Hard",
    "explanation": "Given two strings `s` and `t`, you want to transform string `s` into string `t` using the following operation any number of times:\nChoose a non-empty substring in `s` and sort it in-place so the characters are in ascending order.\n\nFor example, applying the operation on the underlined substring in `\"14234\"` results in `\"12344\"`.\n\nReturn `true` if it is possible to transform string `s` into string `t`. Otherwise, return `false`.\n\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
      "Input: s = \"84532\", t = \"34852\"\nOutput: true\nExplanation: You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -> \"84352\"\n\"84352\" (from index 0 to 2) -> \"34852\"",
      "Input: s = \"34521\", t = \"23415\"\nOutput: true\nExplanation: You can transform s into t using the following sort operations:\n\"34521\" -> \"23451\"\n\"23451\" -> \"23415\"",
      "Input: s = \"12345\", t = \"12435\"\nOutput: false",
      "Input: s = \"1\", t = \"2\"\nOutput: false"
    ],
    "constraints": "`s.length == t.length`\n`1 <= s.length <= 105`\n`s` and `t` only contain digits from `'0'` to `'9'`."
  },
  {
    "id": "1586",
    "title": "Binary Search Tree Iterator II",
    "difficulty": "Medium",
    "explanation": "Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):\n`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n\n`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n\n`int next()` Moves the pointer to the right, then returns the number at the pointer.\n\n`boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`.\n\n`int prev()` Moves the pointer to the left, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.",
    "examples": [
      "Input\n[\"BSTIterator\", \"next\", \"next\", \"prev\", \"next\", \"hasNext\", \"next\", \"next\", \"next\", \"hasNext\", \"hasPrev\", \"prev\", \"prev\"]\n[[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]\nOutput\n[null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]\nExplanation\n// The underlined element is where the pointer currently is.\n\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is   [3, 7, 9, 15, 20]\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 3\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7\nbSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 3\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7\nbSTIterator.hasNext(); // return true\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 9\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 15\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 20\nbSTIterator.hasNext(); // return false\nbSTIterator.hasPrev(); // return true\nbSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 15\nbSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 9"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 105]`.\n\n`0 <= Node.val <= 106`\nAt most `105` calls will be made to `hasNext`, `next`, `hasPrev`, and `prev`.\n\nFollow up: Could you solve the problem without precalculating the values of the tree?"
  },
  {
    "id": "1587",
    "title": "Bank Account Summary II",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1588",
    "title": "Sum of All Odd Length Subarrays",
    "difficulty": "Easy",
    "explanation": "Given an array of positive integers `arr`, calculate the sum of all possible odd-length subarrays.\n\nA subarray is a contiguous subsequence of the array.\n\nReturn the sum of all odd-length subarrays of `arr`.",
    "examples": [
      "Input: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58",
      "Input: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.",
      "Input: arr = [10,11,12]\nOutput: 66"
    ],
    "constraints": "`1 <= arr.length <= 100`\n`1 <= arr[i] <= 1000`"
  },
  {
    "id": "1589",
    "title": "Maximum Sum Obtained of Any Permutation",
    "difficulty": "Medium",
    "explanation": "We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are 0-indexed.\n\nReturn the maximum total sum of all requests among all permutations of `nums`.\n\nSince the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\nOutput: 19\nExplanation: One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\n\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.",
      "Input: nums = [1,2,3,4,5,6], requests = [[0,1]]\nOutput: 11\nExplanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].",
      "Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\nOutput: 47\nExplanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 105`\n`0 <= nums[i] <= 105`\n`1 <= requests.length <= 105`\n`requests[i].length == 2`\n`0 <= starti <= endi < n`"
  },
  {
    "id": "1590",
    "title": "Make Sum Divisible by P",
    "difficulty": "Medium",
    "explanation": "Given an array of positive integers `nums`, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by `p`. It is not allowed to remove the whole array.\n\nReturn the length of the smallest subarray that you need to remove, or `-1` if it's impossible.\n\nA subarray is defined as a contiguous block of elements in the array.",
    "examples": [
      "Input: nums = [3,1,4,2], p = 6\nOutput: 1\nExplanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.",
      "Input: nums = [6,3,5,2], p = 9\nOutput: 2\nExplanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.",
      "Input: nums = [1,2,3], p = 3\nOutput: 0\nExplanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.",
      "Input: nums = [1,2,3], p = 7\nOutput: -1\nExplanation: There is no way to remove a subarray in order to get a sum divisible by 7.",
      "Input: nums = [1000000000,1000000000,1000000000], p = 3\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 109`\n`1 <= p <= 109`"
  },
  {
    "id": "1591",
    "title": "Strange Printer II",
    "difficulty": "Hard",
    "explanation": "There is a strange printer with the following two special requirements:\nOn each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\n\nOnce the printer has used a color for the above operation, the same color cannot be used again.\n\nYou are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid.\n\nReturn `true` if it is possible to print the matrix `targetGrid`, otherwise, return `false`.",
    "examples": [
      "Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\nOutput: true",
      "Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\nOutput: true",
      "Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\nOutput: false\nExplanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.",
      "Input: targetGrid = [[1,1,1],[3,1,3]]\nOutput: false"
    ],
    "constraints": "`m == targetGrid.length`\n`n == targetGrid[i].length`\n`1 <= m, n <= 60`\n`1 <= targetGrid[row][col] <= 60`"
  },
  {
    "id": "1592",
    "title": "Rearrange Spaces Between Words",
    "difficulty": "Easy",
    "explanation": "You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` contains at least one word.\n\nRearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as `text`.\n\nReturn the string after rearranging the spaces.",
    "examples": [
      "Input: text = \"  this   is  a sentence \"\nOutput: \"this   is   a   sentence\"\nExplanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.",
      "Input: text = \" practice   makes   perfect\"\nOutput: \"practice   makes   perfect \"\nExplanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.",
      "Input: text = \"hello   world\"\nOutput: \"hello   world\"",
      "Input: text = \"  walks  udp package   into  bar a\"\nOutput: \"walks  udp  package  into  bar  a \"",
      "Input: text = \"a\"\nOutput: \"a\""
    ],
    "constraints": "`1 <= text.length <= 100`\n`text` consists of lowercase English letters and `' '`.\n\n`text` contains at least one word."
  },
  {
    "id": "1593",
    "title": "Split a String Into the Max Number of Unique Substrings",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, return the maximum number of unique substrings that the given string can be split into.\n\nYou can split string `s` into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.\n\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
      "Input: s = \"ababccc\"\nOutput: 5\nExplanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.",
      "Input: s = \"aba\"\nOutput: 2\nExplanation: One way to split maximally is ['a', 'ba'].",
      "Input: s = \"aa\"\nOutput: 1\nExplanation: It is impossible to split the string any further."
    ],
    "constraints": "`1 <= s.length <= 16`\n`s` contains only lower case English letters."
  },
  {
    "id": "1594",
    "title": "Maximum Non Negative Product in a Matrix",
    "difficulty": "Medium",
    "explanation": "You are given a `rows x cols` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only move right or down in the matrix.\n\nAmong all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(rows - 1, cols - 1)`, find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.\n\nReturn the maximum non-negative product modulo `109 + 7`. If the maximum product is negative return `-1`.\n\nNotice that the modulo is performed after getting the maximum product.",
    "examples": [
      "Input: grid = [[-1,-2,-3],\n               [-2,-3,-3],\n               [-3,-3,-2]]\nOutput: -1\nExplanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.",
      "Input: grid = [[1,-2,1],\n               [1,-2,1],\n               [3,-4,1]]\nOutput: 8\nExplanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).",
      "Input: grid = [[1, 3],\n               [0,-4]]\nOutput: 0\nExplanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).",
      "Input: grid = [[ 1, 4,4,0],\n               [-2, 0,0,1],\n               [ 1,-1,1,1]]\nOutput: 2\nExplanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2)."
    ],
    "constraints": "`1 <= rows, cols <= 15`\n`-4 <= grid[i][j] <= 4`"
  },
  {
    "id": "1595",
    "title": "Minimum Cost to Connect Two Groups of Points",
    "difficulty": "Hard",
    "explanation": "You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`.\n\nThe `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\n\nReturn the minimum cost it takes to connect the two groups.",
    "examples": [
      "Input: cost = [[15, 96], [36, 2]]\nOutput: 17\nExplanation: The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17.",
      "Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]\nOutput: 4\nExplanation: The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\n\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.",
      "Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]\nOutput: 10"
    ],
    "constraints": "`size1 == cost.length`\n`size2 == cost[i].length`\n`1 <= size1, size2 <= 12`\n`size1 >= size2`\n`0 <= cost[i][j] <= 100`"
  },
  {
    "id": "1596",
    "title": "The Most Frequently Ordered Products for Each Customer",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1597",
    "title": "Build Binary Expression Tree From Infix Expression",
    "difficulty": "Hard",
    "explanation": "A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).\n\nFor each internal node with operator `o`, the infix expression that it represents is `(A o B)`, where `A` is the expression the left subtree represents and `B` is the expression the right subtree represents.\n\nYou are given a string `s`, an infix expression containing operands, the operators described above, and parentheses `'('` and `')'`.\n\nReturn any valid binary expression tree, which its in-order traversal reproduces `s` after omitting the parenthesis from it (see examples below).\n\nPlease note that order of operations applies in `s`. That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.\n\nOperands must also appear in the same order in both `s` and the in-order traversal of the tree.",
    "examples": [
      "Input: s = \"3*4-2*5\"\nOutput: [-,*,*,3,4,2,5]\nExplanation: The tree above is the only valid tree whose inorder traversal produces s.",
      "Input: s = \"2-3/(5*2)+1\"\nOutput: [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2]\nExplanation: The inorder traversal of the tree above is 2-3/5*2+1 which is the same as s without the parenthesis. The tree also produces the correct result and its operands are in the same order as they appear in s.\n\nThe tree below is also a valid binary expression tree with the same inorder traversal as s, but it not a valid answer because it does not evaluate to the same value.\n\nThe third tree below is also not valid. Although it produces the same result and is equivalent to the above trees, its inorder traversal does not produce s and its operands are not in the same order as s.",
      "Input: s = \"1+2+3+4+5\"\nOutput: [+,+,5,+,4,null,null,+,3,null,null,1,2]\nExplanation: The tree [+,+,5,+,+,null,null,1,2,3,4] is also one of many other valid trees."
    ],
    "constraints": "`1 <= s.length <= 1000`\n`s` consists of digits and the characters `'+'`, `'-'`, `'*'`, and `'/'`.\n\nOperands in `s` are exactly 1 digit.\n\nIt is guaranteed that `s` is a valid expression."
  },
  {
    "id": "1598",
    "title": "Crawler Log Folder",
    "difficulty": "Easy",
    "explanation": "The Leetcode file system keeps a log each time some user performs a change folder operation.\n\nThe operations are described below:\n`\"../\"` : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\n\n`\"./\"` : Remain in the same folder.\n\n`\"x/\"` : Move to the child folder named `x` (This folder is guaranteed to always exist).\n\nYou are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.\n\nThe file system starts in the main folder, then the operations in `logs` are performed.\n\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.",
    "examples": [
      "Input: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\nOutput: 2\nExplanation: Use this change folder operation \"../\" 2 times and go back to the main folder.",
      "Input: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\nOutput: 3",
      "Input: logs = [\"d1/\",\"../\",\"../\",\"../\"]\nOutput: 0"
    ],
    "constraints": "`1 <= logs.length <= 103`\n`2 <= logs[i].length <= 10`\n`logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.\n\n`logs[i]` follows the format described in the statement.\n\nFolder names consist of lowercase English letters and digits."
  },
  {
    "id": "1599",
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "difficulty": "Medium",
    "explanation": "You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you `runningCost` dollars.\n\nYou are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you must rotate the wheel `i` times before the `customers[i]` customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\n\nYou can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\n\nReturn the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return `-1`.",
    "examples": [
      "Input: customers = [8,3], boardingCost = 5, runningCost = 6\nOutput: 3\nExplanation: The numbers written on the gondolas are the number of people currently there.\n\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\n\nThe highest profit was $37 after rotating the wheel 3 times.",
      "Input: customers = [10,9,6], boardingCost = 6, runningCost = 4\nOutput: 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\n\nThe highest profit was $122 after rotating the wheel 7 times.",
      "Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\nOutput: -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\n\nThe profit was never positive, so return -1.",
      "Input: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8\nOutput: 9\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.\n\n2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.\n\n3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.\n\n4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.\n\n5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.\n\n6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.\n\n7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.\n\n8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.\n\n9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.\n\n10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.\n\nThe highest profit was $36 after rotating the wheel 9 times."
    ],
    "constraints": "`n == customers.length`\n`1 <= n <= 105`\n`0 <= customers[i] <= 50`\n`1 <= boardingCost, runningCost <= 100`"
  },
  {
    "id": "1600",
    "title": "Throne Inheritance",
    "difficulty": "Medium",
    "explanation": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\n\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.\n\nSuccessor(x, curOrder):\n    if x has no children or all of x's children are in curOrder:\n        if x is the king return null\n        else return Successor(x's parent, curOrder)\n    else return x's oldest child who's not in curOrder\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n\nIn the beginning, `curOrder` will be `[\"king\"]`.\n\nCalling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[\"king\", \"Alice\"]`.\n\nCalling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\"]`.\n\nCalling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.\n\nCalling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.\n\nUsing the above function, we can always obtain a unique order of inheritance.\n\nImplement the `ThroneInheritance` class:\n`ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.\n\n`void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.\n\n`void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.\n\n`string[] getInheritanceOrder()` Returns a list representing the current order of inheritance excluding dead people.",
    "examples": [
      "Input\n[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]\nOutput\n[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]\nExplanation\nThroneInheritance t= new ThroneInheritance(\"king\"); // order: king\nt.birth(\"king\", \"andy\"); // order: king > andy\nt.birth(\"king\", \"bob\"); // order: king > andy > bob\nt.birth(\"king\", \"catherine\"); // order: king > andy > bob > catherine\nt.birth(\"andy\", \"matthew\"); // order: king > andy > matthew > bob > catherine\nt.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > alex > catherine\nt.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // order: king > andy > matthew > bob > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]"
    ],
    "constraints": "`1 <= kingName.length, parentName.length, childName.length, name.length <= 15`\n`kingName`, `parentName`, `childName`, and `name` consist of lowercase English letters only.\n\nAll arguments `childName` and `kingName` are distinct.\n\nAll `name` arguments of `death` will be passed to either the constructor or as `childName` to `birth` first.\n\nFor each call to `birth(parentName, childName)`, it is guaranteed that `parentName` is alive.\n\nAt most `105` calls will be made to `birth` and `death`.\n\nAt most `10` calls will be made to `getInheritanceOrder`."
  },
  {
    "id": "1601",
    "title": "Maximum Number of Achievable Transfer Requests",
    "difficulty": "Hard",
    "explanation": "We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\n\nYou are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.\n\nAll buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.\n\nReturn the maximum number of achievable requests.",
    "examples": [
      "Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\nOutput: 5\nExplantion: Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\n\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\n\nFrom building 2 we have employee z and they want to move to building 0.\n\nFrom building 3 we have employee c and they want to move to building 4.\n\nFrom building 4 we don't have any requests.\n\nWe can achieve the requests of users x and b by swapping their places.\n\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.",
      "Input: n = 3, requests = [[0,0],[1,2],[2,1]]\nOutput: 3\nExplantion: Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\n\nFrom building 1 we have employee y and they want to move to building 2.\n\nFrom building 2 we have employee z and they want to move to building 1.\n\nWe can achieve all the requests.",
      "Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\nOutput: 4"
    ],
    "constraints": "`1 <= n <= 20`\n`1 <= requests.length <= 16`\n`requests[i].length == 2`\n`0 <= fromi, toi < n`"
  },
  {
    "id": "1602",
    "title": "Find Nearest Right Node in Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree and a node `u` in the tree, return the nearest node on the same level that is to the right of `u`, or return `null` if `u` is the rightmost node in its level.",
    "examples": [
      "Input: root = [1,2,3,null,4,5,6], u = 4\nOutput: 5\nExplanation: The nearest node on the same level to the right of node 4 is node 5.",
      "Input: root = [3,null,4,2], u = 2\nOutput: null\nExplanation: There are no nodes to the right of 2.",
      "Input: root = [1], u = 1\nOutput: null",
      "Input: root = [3,4,2,null,null,null,1], u = 4\nOutput: 2"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 105]`.\n\n`1 <= Node.val <= 105`\nAll values in the tree are distinct.\n\n`u` is a node in the binary tree rooted at `root`."
  },
  {
    "id": "1603",
    "title": "Design Parking System",
    "difficulty": "Easy",
    "explanation": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\n\nImplement the `ParkingSystem` class:\n`ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.\n\n`bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. A car can only park in a parking space of its `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.",
    "examples": [
      "Input\n[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]\nOutput\n[null, true, true, false, false]\nExplanation\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied."
    ],
    "constraints": "`0 <= big, medium, small <= 1000`\n`carType` is `1`, `2`, or `3`\nAt most `1000` calls will be made to `addCar`"
  },
  {
    "id": "1604",
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "difficulty": "Medium",
    "explanation": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.\n\nYou are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used in a single day.\n\nAccess times are given in the 24-hour time format \"HH:MM\", such as `\"23:51\"` and `\"09:49\"`.\n\nReturn a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.\n\nNotice that `\"10:00\"` - `\"11:00\"` is considered to be within a one-hour period, while `\"22:51\"` - `\"23:52\"` is not considered to be within a one-hour period.",
    "examples": [
      "Input: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\nOutput: [\"daniel\"]\nExplanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").",
      "Input: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\nOutput: [\"bob\"]\nExplanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").",
      "Input: keyName = [\"john\",\"john\",\"john\"], keyTime = [\"23:58\",\"23:59\",\"00:01\"]\nOutput: []",
      "Input: keyName = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keyTime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]\nOutput: [\"clare\",\"leslie\"]"
    ],
    "constraints": "`1 <= keyName.length, keyTime.length <= 105`\n`keyName.length == keyTime.length`\n`keyTime[i]` is in the format \"HH:MM\".\n\n`[keyName[i], keyTime[i]]` is unique.\n\n`1 <= keyName[i].length <= 10`\n`keyName[i] contains only lowercase English letters.`"
  },
  {
    "id": "1605",
    "title": "Find Valid Matrix Given Row and Column Sums",
    "difficulty": "Medium",
    "explanation": "You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\n\nFind any matrix of non-negative integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.\n\nReturn a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.",
    "examples": [
      "Input: rowSum = [3,8], colSum = [4,7]\nOutput: [[3,0],\n         [1,7]]\nExplanation:\n0th row: 3 + 0 = 3 == rowSum[0]\n1st row: 1 + 7 = 8 == rowSum[1]\n0th column: 3 + 1 = 4 == colSum[0]\n1st column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\n\nAnother possible matrix is: [[1,2],\n                             [3,5]]",
      "Input: rowSum = [5,7,10], colSum = [8,6,8]\nOutput: [[0,5,0],\n         [6,1,0],\n         [2,0,8]]",
      "Input: rowSum = [14,9], colSum = [6,9,8]\nOutput: [[0,9,5],\n         [6,0,3]]",
      "Input: rowSum = [1,0], colSum = [1]\nOutput: [[1],\n         [0]]",
      "Input: rowSum = [0], colSum = [0]\nOutput: [[0]]"
    ],
    "constraints": "`1 <= rowSum.length, colSum.length <= 500`\n`0 <= rowSum[i], colSum[i] <= 108`\n`sum(rows) == sum(columns)`"
  },
  {
    "id": "1606",
    "title": "Find Servers That Handled Most Number of Requests",
    "difficulty": "Hard",
    "explanation": "You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:\nThe `ith` (0-indexed) request arrives.\n\nIf all servers are busy, the request is dropped (not handled at all).\n\nIf the `(i % k)th` server is available, assign the request to that server.\n\nOtherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.\n\nYou are given a strictly increasing array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.\n\nReturn a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.",
    "examples": [
      "Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \nOutput: [1] \nExplanation:\nAll of the servers start out available.\n\nThe first 3 requests are handled by the first 3 servers in order.\n\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\n\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\n\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.",
      "Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\nOutput: [0]\nExplanation:\nThe first 3 requests are handled by first 3 servers.\n\nRequest 3 comes in. It is handled by server 0 since the server is available.\n\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.",
      "Input: k = 3, arrival = [1,2,3], load = [10,12,11]\nOutput: [0,1,2]\nExplanation: Each server handles a single request, so they are all considered the busiest.",
      "Input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]\nOutput: [1]",
      "Input: k = 1, arrival = [1], load = [1]\nOutput: [0]"
    ],
    "constraints": "`1 <= k <= 105`\n`1 <= arrival.length, load.length <= 105`\n`arrival.length == load.length`\n`1 <= arrival[i], load[i] <= 109`\n`arrival` is strictly increasing."
  },
  {
    "id": "1607",
    "title": "Sellers With No Sales",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1608",
    "title": "Special Array With X Elements Greater Than or Equal X",
    "difficulty": "Easy",
    "explanation": "You are given an array `nums` of non-negative integers. `nums` is considered special if there exists a number `x` such that there are exactly `x` numbers in `nums` that are greater than or equal to `x`.\n\nNotice that `x` does not have to be an element in `nums`.\n\nReturn `x` if the array is special, otherwise, return `-1`. It can be proven that if `nums` is special, the value for `x` is unique.",
    "examples": [
      "Input: nums = [3,5]\nOutput: 2\nExplanation: There are 2 values (3 and 5) that are greater than or equal to 2.",
      "Input: nums = [0,0]\nOutput: -1\nExplanation: No numbers fit the criteria for x.\n\nIf x = 0, there should be 0 numbers >= x, but there are 2.\n\nIf x = 1, there should be 1 number >= x, but there are 0.\n\nIf x = 2, there should be 2 numbers >= x, but there are 0.\n\nx cannot be greater since there are only 2 numbers in nums.",
      "Input: nums = [0,4,3,0,4]\nOutput: 3\nExplanation: There are 3 values that are greater than or equal to 3.",
      "Input: nums = [3,6,7,7,0]\nOutput: -1"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`0 <= nums[i] <= 1000`"
  },
  {
    "id": "1609",
    "title": "Even Odd Tree",
    "difficulty": "Medium",
    "explanation": "A binary tree is named Even-Odd if it meets the following conditions:\nThe root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.\n\nFor every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).\n\nFor every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).\n\nGiven the `root` of a binary tree, return `true` if the binary tree is Even-Odd, otherwise return `false`.",
    "examples": [
      "Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]\nOutput: true\nExplanation: The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.",
      "Input: root = [5,4,2,3,3,7]\nOutput: false\nExplanation: The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in the level 2 must be in strictly increasing order, so the tree is not Even-Odd.",
      "Input: root = [5,9,1,3,5,7]\nOutput: false\nExplanation: Node values in the level 1 should be even integers.",
      "Input: root = [1]\nOutput: true",
      "Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]\nOutput: true"
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 105]`.\n\n`1 <= Node.val <= 106`"
  },
  {
    "id": "1610",
    "title": "Maximum Number of Visible Points",
    "difficulty": "Hard",
    "explanation": "You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote integral coordinates on the X-Y plane.\n\nInitially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, `posx` and `posy` cannot be changed. Your field of view in degrees is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles `[d - angle/2, d + angle/2]`.\n\nYour browser does not support the video tag or this video format.\n\nYou can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.\n\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\n\nReturn the maximum number of points you can see.",
    "examples": [
      "Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]\nOutput: 3\nExplanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.",
      "Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]\nOutput: 4\nExplanation: All points can be made visible in your field of view, including the one at your location.",
      "Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]\nOutput: 1\nExplanation: You can only see one of the two points, as shown above."
    ],
    "constraints": "`1 <= points.length <= 105`\n`points[i].length == 2`\n`location.length == 2`\n`0 <= angle < 360`\n`0 <= posx, posy, xi, yi <= 100`"
  },
  {
    "id": "1611",
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "difficulty": "Hard",
    "explanation": "Given an integer `n`, you must transform it into `0` using the following operations any number of times:\nChange the rightmost (`0th`) bit in the binary representation of `n`.\n\nChange the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.\n\nReturn the minimum number of operations to transform `n` into `0`.",
    "examples": [
      "Input: n = 0\nOutput: 0",
      "Input: n = 3\nOutput: 2\nExplanation: The binary representation of 3 is \"11\".\n\n\"11\" -> \"01\" with the 2nd operation since the 0th bit is 1.\n\n\"01\" -> \"00\" with the 1st operation.",
      "Input: n = 6\nOutput: 4\nExplanation: The binary representation of 6 is \"110\".\n\n\"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n\n\"010\" -> \"011\" with the 1st operation.\n\n\"011\" -> \"001\" with the 2nd operation since the 0th bit is 1.\n\n\"001\" -> \"000\" with the 1st operation.",
      "Input: n = 9\nOutput: 14",
      "Input: n = 333\nOutput: 393"
    ],
    "constraints": "`0 <= n <= 109`"
  },
  {
    "id": "1612",
    "title": "Check If Two Expression Trees are Equivalent",
    "difficulty": "Medium",
    "explanation": "A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition).\n\nYou are given the roots of two binary expression trees, `root1` and `root2`. Return `true` if the two binary expression trees are equivalent. Otherwise, return `false`.\n\nTwo binary expression trees are equivalent if they evaluate to the same value regardless of what the variables are set to.\n\nFollow up: What will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)?",
    "examples": [
      "Input: root1 = [x], root2 = [x]\nOutput: true",
      "Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]\nOutput: true\nExplaination: `a + (b + c) == (b + c) + a`",
      "Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]\nOutput: false\nExplaination: `a + (b + c) != (b + d) + a`"
    ],
    "constraints": "The number of nodes in both trees are equal, odd and, in the range `[1, 4999]`.\n\n`Node.val` is `'+'` or a lower-case English letter.\n\nIt's guaranteed that the tree given is a valid binary expression tree."
  },
  {
    "id": "1613",
    "title": "Find the Missing IDs",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1614",
    "title": "Maximum Nesting Depth of the Parentheses",
    "difficulty": "Easy",
    "explanation": "A string is a valid parentheses string (denoted VPS) if it meets one of the following:\nIt is an empty string `\"\"`, or a single character not equal to `\"(\"` or `\")\"`,\nIt can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\nIt can be written as `(A)`, where `A` is a VPS.\n\nWe can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:\n`depth(\"\") = 0`\n`depth(C) = 0`, where `C` is a string with a single character not equal to `\"(\"` or `\")\"`.\n\n`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's.\n\n`depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS.\n\nFor example, `\"\"`, `\"()()\"`, and `\"()(()())\"` are VPS's (with nesting depths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS's.\n\nGiven a VPS represented as string `s`, return the nesting depth of `s`.",
    "examples": [
      "Input: s = \"(1+(2*3)+((8)/4))+1\"\nOutput: 3\nExplanation: Digit 8 is inside of 3 nested parentheses in the string.",
      "Input: s = \"(1)+((2))+(((3)))\"\nOutput: 3",
      "Input: s = \"1+(2*3)/(2-1)\"\nOutput: 1",
      "Input: s = \"1\"\nOutput: 0"
    ],
    "constraints": "`1 <= s.length <= 100`\n`s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n\nIt is guaranteed that parentheses expression `s` is a VPS."
  },
  {
    "id": "1615",
    "title": "Maximal Network Rank",
    "difficulty": "Medium",
    "explanation": "There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.\n\nThe network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.\n\nThe maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.\n\nGiven the integer `n` and the array `roads`, return the maximal network rank of the entire infrastructure.",
    "examples": [
      "Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\nOutput: 4\nExplanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.",
      "Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\nOutput: 5\nExplanation: There are 5 roads that are connected to cities 1 or 2.",
      "Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\nOutput: 5\nExplanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected."
    ],
    "constraints": "`2 <= n <= 100`\n`0 <= roads.length <= n * (n - 1) / 2`\n`roads[i].length == 2`\n`0 <= ai, bi <= n-1`\n`ai != bi`\nEach pair of cities has at most one road connecting them."
  },
  {
    "id": "1616",
    "title": "Split Two Strings to Make Palindrome",
    "difficulty": "Medium",
    "explanation": "You are given two strings `a` and `b` of the same length. Choose an index and split both strings at the same index, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.\n\nWhen you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = \"abc\"`, then `\"\" + \"abc\"`, `\"a\" + \"bc\"`, `\"ab\" + \"c\"` , and `\"abc\" + \"\"` are valid splits.\n\nReturn `true` if it is possible to form a palindrome string, otherwise return `false`.\n\nNotice that `x + y` denotes the concatenation of strings `x` and `y`.",
    "examples": [
      "Input: a = \"x\", b = \"y\"\nOutput: true\nExplaination: If either a or b are palindromes the answer is true since you can split in the following way:\naprefix = \"\", asuffix = \"x\"\nbprefix = \"\", bsuffix = \"y\"\nThen, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.",
      "Input: a = \"abdef\", b = \"fecab\"\nOutput: true",
      "Input: a = \"ulacfd\", b = \"jizalu\"\nOutput: true\nExplaination: Split them at index 3:\naprefix = \"ula\", asuffix = \"cfd\"\nbprefix = \"jiz\", bsuffix = \"alu\"\nThen, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.",
      "Input: a = \"xbdef\", b = \"xecab\"\nOutput: false"
    ],
    "constraints": "`1 <= a.length, b.length <= 105`\n`a.length == b.length`\n`a` and `b` consist of lowercase English letters"
  },
  {
    "id": "1617",
    "title": "Count Subtrees With Max Distance Between Cities",
    "difficulty": "Hard",
    "explanation": "There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a tree.\n\nA subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\n\nFor each `d` from `1` to `n-1`, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to `d`.\n\nReturn an array of size `n-1` where the `dth` element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to `d`.\n\nNotice that the distance between the two cities is the number of edges in the path between them.",
    "examples": [
      "Input: n = 4, edges = [[1,2],[2,3],[2,4]]\nOutput: [3,4,0]\nExplanation:\nThe subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\n\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\n\nNo subtree has two nodes where the max distance between them is 3.",
      "Input: n = 2, edges = [[1,2]]\nOutput: [1]",
      "Input: n = 3, edges = [[1,2],[2,3]]\nOutput: [2,1]"
    ],
    "constraints": "`2 <= n <= 15`\n`edges.length == n-1`\n`edges[i].length == 2`\n`1 <= ui, vi <= n`\nAll pairs `(ui, vi)` are distinct."
  },
  {
    "id": "1618",
    "title": "Maximum Font to Fit a Sentence in a Screen",
    "difficulty": "Medium",
    "explanation": "You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes in ascending order.\n\nYou can use the `FontInfo` interface to get the width and height of any character at any available font size.\n\nThe `FontInfo` interface is defined as such:\ninterface FontInfo {\n  // Returns the width of character ch on the screen using font size fontSize.\n\n  // O(1) per call\n  public int getWidth(int fontSize, char ch);\n  // Returns the height of any character on the screen using font size fontSize.\n\n  // O(1) per call\n  public int getHeight(int fontSize);\n}\nThe calculated width of `text` for some `fontSize` is the sum of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (0-indexed). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a single line.\n\nIt is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters.\n\nIt is also guaranteed that for any font size `fontSize` and any character `ch`:\n`getHeight(fontSize) <= getHeight(fontSize+1)`\n`getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`\nReturn the maximum font size you can use to display `text` on the screen. If `text` cannot fit on the display with any font size, return `-1`.",
    "examples": [
      "Input: text = \"helloworld\", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]\nOutput: 6",
      "Input: text = \"leetcode\", w = 1000, h = 50, fonts = [1,2,4]\nOutput: 4",
      "Input: text = \"easyquestion\", w = 100, h = 100, fonts = [10,15,20,25]\nOutput: -1"
    ],
    "constraints": "`1 <= text.length <= 50000`\n`text` contains only lowercase English letters.\n\n`1 <= w <= 107`\n`1 <= h <= 104`\n`1 <= fonts.length <= 105`\n`1 <= fonts[i] <= 105`\n`fonts` is sorted in ascending order and does not contain duplicates."
  },
  {
    "id": "1619",
    "title": "Mean of Array After Removing Some Elements",
    "difficulty": "Easy",
    "explanation": "Given an integer array `arr`, return the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements.\n\nAnswers within `10-5` of the actual answer will be considered accepted.",
    "examples": [
      "Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\nOutput: 2.00000\nExplanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.",
      "Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\nOutput: 4.00000",
      "Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\nOutput: 4.77778",
      "Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]\nOutput: 5.27778",
      "Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]\nOutput: 5.29167"
    ],
    "constraints": "`20 <= arr.length <= 1000`\n`arr.length` is a multiple of `20`.\n\n`0 <= arr[i] <= 105`"
  },
  {
    "id": "1620",
    "title": "Coordinate With Maximum Network Quality",
    "difficulty": "Medium",
    "explanation": "You are given an array of network towers `towers` and an integer `radius`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.\n\nThe integer `radius` denotes the maximum distance in which the tower is reachable. The tower is reachable if the distance is less than or equal to `radius`. Outside that distance, the signal becomes garbled, and the tower is not reachable.\n\nThe signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `⌊qi / (1 + d)⌋`, where `d` is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.\n\nReturn the integral coordinate where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate.\n\nNote:\nA coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either `x1 < x2` or `x1 == x2` and `y1 < y2`.\n\n`⌊val⌋` is the greatest integer less than or equal to `val` (the floor function).",
    "examples": [
      "Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2\nOutput: [2,1]\nExplanation: \nAt coordinate (2, 1) the total quality is 13\n- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7\n- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2\n- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4\nNo other coordinate has higher quality.",
      "Input: towers = [[23,11,21]], radius = 9\nOutput: [23,11]",
      "Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2\nOutput: [1,2]",
      "Input: towers = [[2,1,9],[0,1,9]], radius = 2\nOutput: [0,1]\nExplanation: Both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal."
    ],
    "constraints": "`1 <= towers.length <= 50`\n`towers[i].length == 3`\n`0 <= xi, yi, qi <= 50`\n`1 <= radius <= 50`"
  },
  {
    "id": "1621",
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "difficulty": "Medium",
    "explanation": "Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw exactly `k` non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The `k` line segments do not have to cover all `n` points, and they are allowed to share endpoints.\n\nReturn the number of ways we can draw `k` non-overlapping line segments. Since this number can be huge, return it modulo `109 + 7`.",
    "examples": [
      "Input: n = 4, k = 2\nOutput: 5\nExplanation: \nThe two line segments are shown in red and blue.\n\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.",
      "Input: n = 3, k = 1\nOutput: 3\nExplanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.",
      "Input: n = 30, k = 7\nOutput: 796297179\nExplanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.",
      "Input: n = 5, k = 3\nOutput: 7",
      "Input: n = 3, k = 2\nOutput: 1"
    ],
    "constraints": "`2 <= n <= 1000`\n`1 <= k <= n-1`"
  },
  {
    "id": "1622",
    "title": "Fancy Sequence",
    "difficulty": "Hard",
    "explanation": "Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations.\n\nImplement the `Fancy` class:\n`Fancy()` Initializes the object with an empty sequence.\n\n`void append(val)` Appends an integer `val` to the end of the sequence.\n\n`void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.\n\n`void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.\n\n`int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence modulo `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.",
    "examples": [
      "Input\n[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\nOutput\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]\nExplanation\nFancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: [2]\nfancy.addAll(3);   // fancy sequence: [2+3] -> [5]\nfancy.append(7);   // fancy sequence: [5, 7]\nfancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]\nfancy.append(10);  // fancy sequence: [13, 17, 10]\nfancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20"
    ],
    "constraints": "`1 <= val, inc, m <= 100`\n`0 <= idx <= 105`\nAt most `105` calls total will be made to `append`, `addAll`, `multAll`, and `getIndex`."
  },
  {
    "id": "1623",
    "title": "All Valid Triplets That Can Represent a Country",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1624",
    "title": "Largest Substring Between Two Equal Characters",
    "difficulty": "Easy",
    "explanation": "Given a string `s`, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return `-1`.\n\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
      "Input: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two `'a's`.",
      "Input: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".",
      "Input: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s.",
      "Input: s = \"cabbac\"\nOutput: 4\nExplanation: The optimal substring here is \"abba\". Other non-optimal substrings include \"bb\" and \"\"."
    ],
    "constraints": "`1 <= s.length <= 300`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1625",
    "title": "Lexicographically Smallest String After Applying Operations",
    "difficulty": "Medium",
    "explanation": "You are given a string `s` of even length consisting of digits from `0` to `9`, and two integers `a` and `b`.\n\nYou can apply either of the following two operations any number of times and in any order on `s`:\nAdd `a` to all odd indices of `s` (0-indexed). Digits post `9` are cycled back to `0`. For example, if `s = \"3456\"` and `a = 5`, `s` becomes `\"3951\"`.\n\nRotate `s` to the right by `b` positions. For example, if `s = \"3456\"` and `b = 1`, `s` becomes `\"6345\"`.\n\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on `s`.\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"0158\"` is lexicographically smaller than `\"0190\"` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.",
    "examples": [
      "Input: s = \"5525\", a = 9, b = 2\nOutput: \"2050\"\nExplanation: We can apply the following operations:\nStart:  \"5525\"\nRotate: \"2555\"\nAdd:    \"2454\"\nAdd:    \"2353\"\nRotate: \"5323\"\nAdd:    \"5222\"\n​​​​​​​Add:    \"5121\"\n​​​​​​​Rotate: \"2151\"\n​​​​​​​Add:    \"2050\"​​​​​​​​​​​​\nThere is no way to obtain a string that is lexicographically smaller then \"2050\".",
      "Input: s = \"74\", a = 5, b = 1\nOutput: \"24\"\nExplanation: We can apply the following operations:\nStart:  \"74\"\nRotate: \"47\"\n​​​​​​​Add:    \"42\"\n​​​​​​​Rotate: \"24\"​​​​​​​​​​​​\nThere is no way to obtain a string that is lexicographically smaller then \"24\".",
      "Input: s = \"0011\", a = 4, b = 2\nOutput: \"0011\"\nExplanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".",
      "Input: s = \"43987654\", a = 7, b = 3\nOutput: \"00553311\""
    ],
    "constraints": "`2 <= s.length <= 100`\n`s.length` is even.\n\n`s` consists of digits from `0` to `9` only.\n\n`1 <= a <= 9`\n`1 <= b <= s.length - 1`"
  },
  {
    "id": "1626",
    "title": "Best Team With No Conflicts",
    "difficulty": "Medium",
    "explanation": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.\n\nHowever, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.\n\nGiven two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return the highest overall score of all possible basketball teams.",
    "examples": [
      "Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]\nOutput: 34\nExplanation: You can choose all the players.",
      "Input: scores = [4,5,6,5], ages = [2,1,2,1]\nOutput: 16\nExplanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.",
      "Input: scores = [1,2,3,5], ages = [8,9,10,1]\nOutput: 6\nExplanation: It is best to choose the first 3 players."
    ],
    "constraints": "`1 <= scores.length, ages.length <= 1000`\n`scores.length == ages.length`\n`1 <= scores[i] <= 106`\n`1 <= ages[i] <= 1000`"
  },
  {
    "id": "1627",
    "title": "Graph Connectivity With Threshold",
    "difficulty": "Hard",
    "explanation": "We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor strictly greater than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true:\n`x % z == 0`,\n`y % z == 0`, and\n`z > threshold`.\n\nGiven the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them).\n\nReturn an array `answer`, where `answer.length == queries.length` and `answer[i]` is `true` if for the `ith` query, there is a path between `ai` and `bi`, or `answer[i]` is `false` if there is no path.",
    "examples": [
      "Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\nOutput: [false,false,true]\nExplanation: The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6",
      "Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\nOutput: [true,true,true,true,true]\nExplanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.",
      "Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\nOutput: [false,false,false,false,false]\nExplanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\n\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x]."
    ],
    "constraints": "`2 <= n <= 104`\n`0 <= threshold <= n`\n`1 <= queries.length <= 105`\n`queries[i].length == 2`\n`1 <= ai, bi <= cities`\n`ai != bi`"
  },
  {
    "id": "1628",
    "title": "Design an Expression Tree With Evaluate Function",
    "difficulty": "Medium",
    "explanation": "Given the `postfix` tokens of an arithmetic expression, build and return the binary expression tree that represents this expression.\n\nPostfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [\"4\",\"5\",\"7\",\"2\",\"+\",\"-\",\"*\"]`.\n\nThe class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed.\n\nA binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).\n\nIt's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).\n\nFollow up: Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?",
    "examples": [
      "Input: s = [\"3\",\"4\",\"+\",\"2\",\"*\",\"7\",\"/\"]\nOutput: 2\nExplanation: this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.`",
      "Input: s = [\"4\",\"5\",\"7\",\"2\",\"+\",\"-\",\"*\"]\nOutput: -16\nExplanation: this expression evaluates to the above binary tree with expression 4*(5-`(2+7)) = 4*(-4) = -16.`",
      "Input: s = [\"4\",\"2\",\"+\",\"3\",\"5\",\"1\",\"-\",\"*\",\"+\"]\nOutput: 18",
      "Input: s = [\"100\",\"200\",\"+\",\"2\",\"/\",\"5\",\"*\",\"7\",\"+\"]\nOutput: 757"
    ],
    "constraints": "`1 <= s.length < 100`\n`s.length` is odd.\n\n`s` consists of numbers and the characters `'+'`, `'-'`, `'*'`, and `'/'`.\n\nIf `s[i]` is a number, its integer representation is no more than `105`.\n\nIt is guaranteed that `s` is a valid expression.\n\nThe absolute value of the result and intermediate values will not exceed `109`.\n\nIt is guaranteed that no expression will include division by zero."
  },
  {
    "id": "1629",
    "title": "Slowest Key",
    "difficulty": "Easy",
    "explanation": "A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.\n\nYou are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are 0-indexed. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the exact time the previous key was released.\n\nThe tester wants to know the key of the keypress that had the longest duration. The `ith` keypress had a duration of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.\n\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.\n\nReturn the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.",
    "examples": [
      "Input: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"\nOutput: \"c\"\nExplanation: The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\n\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\n\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\n\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\n\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n\n'c' is lexicographically larger than 'b', so the answer is 'c'.",
      "Input: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"\nOutput: \"a\"\nExplanation: The keypresses were as follows:\nKeypress for 's' had a duration of 12.\n\nKeypress for 'p' had a duration of 23 - 12 = 11.\n\nKeypress for 'u' had a duration of 36 - 23 = 13.\n\nKeypress for 'd' had a duration of 46 - 36 = 10.\n\nKeypress for 'a' had a duration of 62 - 46 = 16.\n\nThe longest of these was the keypress for 'a' with duration 16."
    ],
    "constraints": "`releaseTimes.length == n`\n`keysPressed.length == n`\n`2 <= n <= 1000`\n`1 <= releaseTimes[i] <= 109`\n`releaseTimes[i] < releaseTimes[i+1]`\n`keysPressed` contains only lowercase English letters."
  },
  {
    "id": "1630",
    "title": "Arithmetic Subarrays",
    "difficulty": "Medium",
    "explanation": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0] `for all valid `i`.\n\nFor example, these are arithmetic sequences:\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\nThe following sequence is not arithmetic:\n1, 1, 2, 5, 7\nYou are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are 0-indexed.\n\nReturn a list of `boolean` elements `answer`, where `answer[i]` is `true` if the subarray `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` can be rearranged to form an arithmetic sequence, and `false` otherwise.",
    "examples": [
      "Input: nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`\nOutput: `[true,false,true]`\nExplanation:\nIn the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\n\nIn the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\n\nIn the 2nd query, the subarray is `[5,9,3,7]. This` can be rearranged as `[3,5,7,9]`, which is an arithmetic sequence.",
      "Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]\nOutput: [false,true,false,false,true,true]"
    ],
    "constraints": "`n == nums.length`\n`m == l.length`\n`m == r.length`\n`2 <= n <= 500`\n`1 <= m <= 500`\n`0 <= l[i] < r[i] < n`\n`-105 <= nums[i] <= 105`"
  },
  {
    "id": "1631",
    "title": "Path With Minimum Effort",
    "difficulty": "Medium",
    "explanation": "You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n\nA route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\n\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.",
    "examples": [
      "Input: heights = [[1,2,2],[3,8,2],[5,3,5]]\nOutput: 2\nExplanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\n\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.",
      "Input: heights = [[1,2,3],[3,8,4],[5,3,5]]\nOutput: 1\nExplanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].",
      "Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\nOutput: 0\nExplanation: This route does not require any effort."
    ],
    "constraints": "`rows == heights.length`\n`columns == heights[i].length`\n`1 <= rows, columns <= 100`\n`1 <= heights[i][j] <= 106`"
  },
  {
    "id": "1632",
    "title": "Rank Transform of a Matrix",
    "difficulty": "Hard",
    "explanation": "Given an `m x n` `matrix`, return a new matrix `answer` where `answer[row][col]` is the rank of `matrix[row][col]`.\n\nThe rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:\nThe rank is an integer starting from `1`.\n\nIf two elements `p` and `q` are in the same row or column, then:\n\t\nIf `p < q` then `rank(p) < rank(q)`\nIf `p == q` then `rank(p) == rank(q)`\nIf `p > q` then `rank(p) > rank(q)`\nThe rank should be as small as possible.\n\nIt is guaranteed that `answer` is unique under the given rules.",
    "examples": [
      "Input: matrix = [[1,2],[3,4]]\nOutput: [[1,2],[2,3]]\nExplanation:\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\n\nThe rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\n\nThe rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\n\nThe rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.",
      "Input: matrix = [[7,7],[7,7]]\nOutput: [[1,1],[1,1]]",
      "Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\nOutput: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]",
      "Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]\nOutput: [[5,1,4],[1,2,3],[6,3,1]]"
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 500`\n`-109 <= matrix[row][col] <= 109`"
  },
  {
    "id": "1633",
    "title": "Percentage of Users Attended a Contest",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1634",
    "title": "Add Two Polynomials Represented as Linked Lists",
    "difficulty": "Medium",
    "explanation": "A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.\n\nEach node has three attributes:\n`coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `9x4` is `9`.\n\n`power`: an integer representing the exponent. The power of the term `9x4` is `4`.\n\n`next`: a pointer to the next node in the list, or `null` if it is the last node of the list.\n\nFor example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below:\nThe polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted.\n\nGiven two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return the head of the sum of the polynomials.\n\n`PolyNode` format:\nThe input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.",
    "examples": [
      "Input: poly1 = [[1,1]], poly2 = [[1,0]]\nOutput: [[1,1],[1,0]]\nExplanation: poly1 = x. poly2 = 1. The sum is x + 1.",
      "Input: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]\nOutput: [[5,2],[2,0]]\nExplanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the \"0x\" term.",
      "Input: poly1 = [[1,2]], poly2 = [[-1,2]]\nOutput: []\nExplanation: The sum is 0. We return an empty list."
    ],
    "constraints": "`0 <= n <= 104`\n`-109 <= PolyNode.coefficient <= 109`\n`PolyNode.coefficient != 0`\n`0 <= PolyNode.power <= 109`\n`PolyNode.power > PolyNode.next.power`"
  },
  {
    "id": "1635",
    "title": "Hopper Company Queries I",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1636",
    "title": "Sort Array by Increasing Frequency",
    "difficulty": "Easy",
    "explanation": "Given an array of integers `nums`, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\n\nReturn the sorted array.",
    "examples": [
      "Input: nums = [1,1,2,2,2,3]\nOutput: [3,1,1,2,2,2]\nExplanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.",
      "Input: nums = [2,3,1,3,2]\nOutput: [1,3,3,2,2]\nExplanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.",
      "Input: nums = [-1,1,-6,4,5,-6,1,4,1]\nOutput: [5,-1,4,4,-6,-6,1,1,1]"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`-100 <= nums[i] <= 100`"
  },
  {
    "id": "1637",
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "difficulty": "Medium",
    "explanation": "Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return the widest vertical area between two points such that no points are inside the area.\n\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\n\nNote that points on the edge of a vertical area are not considered included in the area.",
    "examples": [
      "​\nInput: points = [[8,7],[9,9],[7,4],[9,7]]\nOutput: 1\nExplanation: Both the red and the blue area are optimal.",
      "Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\nOutput: 3"
    ],
    "constraints": "`n == points.length`\n`2 <= n <= 105`\n`points[i].length == 2`\n`0 <= xi, yi <= 109`"
  },
  {
    "id": "1638",
    "title": "Count Substrings That Differ by One Character",
    "difficulty": "Medium",
    "explanation": "Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a single character by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by exactly one character.\n\nFor example, the underlined substrings in `\"computer\"` and `\"computation\"` only differ by the `'e'`/`'a'`, so this is a valid way.\n\nReturn the number of substrings that satisfy the condition above.\n\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
      "Input: s = \"aba\", t = \"baba\"\nOutput: 6\nExplanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions are the substrings that are chosen from s and t.\n\n\n​​Example 2:\nInput: s = \"ab\", t = \"bb\"\nOutput: 3\nExplanation: The following are the pairs of substrings from s and t that differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n​​​​The underlined portions are the substrings that are chosen from s and t.",
      "Input: s = \"a\", t = \"a\"\nOutput: 0",
      "Input: s = \"abe\", t = \"bbc\"\nOutput: 10"
    ],
    "constraints": "`1 <= s.length, t.length <= 100`\n`s` and `t` consist of lowercase English letters only."
  },
  {
    "id": "1639",
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "difficulty": "Hard",
    "explanation": "You are given a list of strings of the same length `words` and a string `target`.\n\nYour task is to form `target` using the given `words` under the following rules:\n`target` should be formed from left to right.\n\nTo form the `ith` character (0-indexed) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.\n\nOnce you use the `kth` character of the `jth` string of `words`, you can no longer use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.\n\nRepeat the process until you form the string `target`.\n\nNotice that you can use multiple characters from the same string in `words` provided the conditions above are met.\n\nReturn the number of ways to form `target` from `words`. Since the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"\nOutput: 6\nExplanation: There are 6 ways to form target.\n\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")",
      "Input: words = [\"abba\",\"baab\"], target = \"bab\"\nOutput: 4\nExplanation: There are 4 ways to form target.\n\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")",
      "Input: words = [\"abcd\"], target = \"abcd\"\nOutput: 1",
      "Input: words = [\"abab\",\"baba\",\"abba\",\"baab\"], target = \"abba\"\nOutput: 16"
    ],
    "constraints": "`1 <= words.length <= 1000`\n`1 <= words[i].length <= 1000`\nAll strings in `words` have the same length.\n\n`1 <= target.length <= 1000`\n`words[i]` and `target` contain only lowercase English letters."
  },
  {
    "id": "1640",
    "title": "Check Array Formation Through Concatenation",
    "difficulty": "Easy",
    "explanation": "You are given an array of distinct integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are distinct. Your goal is to form `arr` by concatenating the arrays in `pieces` in any order. However, you are not allowed to reorder the integers in each array `pieces[i]`.\n\nReturn `true` if it is possible to form the array `arr` from `pieces`. Otherwise, return `false`.",
    "examples": [
      "Input: arr = [85], pieces = [[85]]\nOutput: true",
      "Input: arr = [15,88], pieces = [[88],[15]]\nOutput: true\nExplanation: Concatenate `[15]` then `[88]`",
      "Input: arr = [49,18,16], pieces = [[16,18,49]]\nOutput: false\nExplanation: Even though the numbers match, we cannot reorder pieces[0].",
      "Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]\nOutput: true\nExplanation: Concatenate `[91]` then `[4,64]` then `[78]`",
      "Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]\nOutput: false"
    ],
    "constraints": "`1 <= pieces.length <= arr.length <= 100`\n`sum(pieces[i].length) == arr.length`\n`1 <= pieces[i].length <= arr.length`\n`1 <= arr[i], pieces[i][j] <= 100`\nThe integers in `arr` are distinct.\n\nThe integers in `pieces` are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct)."
  },
  {
    "id": "1641",
    "title": "Count Sorted Vowel Strings",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the number of strings of length `n` that consist only of vowels (`a`, `e`, `i`, `o`, `u`) and are lexicographically sorted.\n\nA string `s` is lexicographically sorted if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.",
    "examples": [
      "Input: n = 1\nOutput: 5\nExplanation: The 5 sorted strings that consist of vowels only are `[\"a\",\"e\",\"i\",\"o\",\"u\"].`",
      "Input: n = 2\nOutput: 15\nExplanation: The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\n\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.",
      "Input: n = 33\nOutput: 66045"
    ],
    "constraints": "`1 <= n <= 50`"
  },
  {
    "id": "1642",
    "title": "Furthest Building You Can Reach",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.\n\nYou start your journey from building `0` and move to the next building by possibly using bricks or ladders.\n\nWhile moving from building `i` to building `i+1` (0-indexed),\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.\n\nIf the current building's height is less than the next building's height, you can either use one ladder or `(h[i+1] - h[i])` bricks.\n\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.",
    "examples": [
      "Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\nOutput: 4\nExplanation: Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\n\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.",
      "Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\nOutput: 7",
      "Input: heights = [14,3,19,3], bricks = 17, ladders = 0\nOutput: 3"
    ],
    "constraints": "`1 <= heights.length <= 105`\n`1 <= heights[i] <= 106`\n`0 <= bricks <= 109`\n`0 <= ladders <= heights.length`"
  },
  {
    "id": "1643",
    "title": "Kth Smallest Instructions",
    "difficulty": "Hard",
    "explanation": "Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel right and down. You are going to help Bob by providing instructions for him to reach `destination`.\n\nThe instructions are represented as a string, where each character is either:\n`'H'`, meaning move horizontally (go right), or\n`'V'`, meaning move vertically (go down).\n\nMultiple instructions will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `\"HHHVV\"` and `\"HVHVH\"` are valid instructions.\n\nHowever, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` lexicographically smallest instructions that will lead him to `destination`. `k` is 1-indexed.\n\nGiven an integer array `destination` and an integer `k`, return the `kth` lexicographically smallest instructions that will take Bob to `destination`.",
    "examples": [
      "Input: destination = [2,3], k = 1\nOutput: \"HHHVV\"\nExplanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].",
      "Input: destination = [2,3], k = 2\nOutput: \"HHVHV\"",
      "Input: destination = [2,3], k = 3\nOutput: \"HHVVH\""
    ],
    "constraints": "`destination.length == 2`\n`1 <= row, column <= 15`\n`1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`​​​​​."
  },
  {
    "id": "1644",
    "title": "Lowest Common Ancestor of a Binary Tree II",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree, return the lowest common ancestor (LCA) of two given nodes, `p` and `q`. If either node `p` or `q` does not exist in the tree, return `null`. All values of the nodes in the tree are unique.\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself)\". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10\nOutput: null\nExplanation: Node 10 does not exist in the tree, so return null."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`p != q`\nFollow up: Can you find the LCA traversing the tree, without checking nodes existence?"
  },
  {
    "id": "1645",
    "title": "Hopper Company Queries II",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1646",
    "title": "Get Maximum in Generated Array",
    "difficulty": "Easy",
    "explanation": "You are given an integer `n`. An array `nums` of length `n + 1` is generated in the following way:\n`nums[0] = 0`\n`nums[1] = 1`\n`nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n`nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\nReturn the maximum integer in the array `nums`​​​.",
    "examples": [
      "Input: n = 7\nOutput: 3\nExplanation: According to the given rules:\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is 3.",
      "Input: n = 2\nOutput: 1\nExplanation: According to the given rules, the maximum between nums[0], nums[1], and nums[2] is 1.",
      "Input: n = 3\nOutput: 2\nExplanation: According to the given rules, the maximum between nums[0], nums[1], nums[2], and nums[3] is 2."
    ],
    "constraints": "`0 <= n <= 100`"
  },
  {
    "id": "1647",
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "difficulty": "Medium",
    "explanation": "A string `s` is called good if there are no two different characters in `s` that have the same frequency.\n\nGiven a string `s`, return the minimum number of characters you need to delete to make `s` good.\n\nThe frequency of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the frequency of `'a'` is `2`, while the frequency of `'b'` is `1`.",
    "examples": [
      "Input: s = \"aab\"\nOutput: 0\nExplanation: `s` is already good.",
      "Input: s = \"aaabbbcc\"\nOutput: 2\nExplanation: You can delete two 'b's resulting in the good string \"aaabcc\".\n\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".",
      "Input: s = \"ceabaacb\"\nOutput: 2\nExplanation: You can delete both 'c's resulting in the good string \"eabaab\".\n\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored)."
    ],
    "constraints": "`1 <= s.length <= 105`\n`s` contains only lowercase English letters."
  },
  {
    "id": "1648",
    "title": "Sell Diminishing-Valued Colored Balls",
    "difficulty": "Medium",
    "explanation": "You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of any color.\n\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).\n\nYou are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls in any order.\n\nReturn the maximum total value that you can attain after selling `orders` colored balls. As the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: inventory = [2,5], orders = 4\nOutput: 14\nExplanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\n\nThe maximum total value is 2 + 5 + 4 + 3 = 14.",
      "Input: inventory = [3,5], orders = 6\nOutput: 19\nExplanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\n\nThe maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.",
      "Input: inventory = [2,8,4,10,6], orders = 20\nOutput: 110",
      "Input: inventory = [1000000000], orders = 1000000000\nOutput: 21\nExplanation: Sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21."
    ],
    "constraints": "`1 <= inventory.length <= 105`\n`1 <= inventory[i] <= 109`\n`1 <= orders <= min(sum(inventory[i]), 109)`"
  },
  {
    "id": "1649",
    "title": "Create Sorted Array through Instructions",
    "difficulty": "Hard",
    "explanation": "Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from left to right in `instructions`, insert it into `nums`. The cost of each insertion is the minimum of the following:\nThe number of elements currently in `nums` that are strictly less than `instructions[i]`.\n\nThe number of elements currently in `nums` that are strictly greater than `instructions[i]`.\n\nFor example, if inserting element `3` into `nums = [1,2,3,5]`, the cost of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.\n\nReturn the total cost to insert all elements from `instructions` into `nums`. Since the answer may be large, return it modulo `109 + 7`",
    "examples": [
      "Input: instructions = [1,5,6,2]\nOutput: 1\nExplanation: Begin with nums = [].\n\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\n\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\n\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\n\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\n\nThe total cost is 0 + 0 + 0 + 1 = 1.",
      "Input: instructions = [1,2,3,6,5,4]\nOutput: 3\nExplanation: Begin with nums = [].\n\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\n\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\n\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\n\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\n\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\n\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\n\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.",
      "Input: instructions = [1,3,3,3,2,4,2,1,2]\nOutput: 4\nExplanation: Begin with nums = [].\n\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\n\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\n\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\n\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\n\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\n\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\n\n​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\n\n​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\n\n​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\n\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4."
    ],
    "constraints": "`1 <= instructions.length <= 105`\n`1 <= instructions[i] <= 105`"
  },
  {
    "id": "1650",
    "title": "Lowest Common Ancestor of a Binary Tree III",
    "difficulty": "Medium",
    "explanation": "Given two nodes of a binary tree `p` and `q`, return their lowest common ancestor (LCA).\n\nEach node will have a reference to its parent node. The definition for `Node` is below:\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).\"",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.",
      "Input: root = [1,2], p = 1, q = 2\nOutput: 1"
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 105]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`p != q`\n`p` and `q` exist in the tree."
  },
  {
    "id": "1651",
    "title": "Hopper Company Queries III",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1652",
    "title": "Defuse the Bomb",
    "difficulty": "Easy",
    "explanation": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array `code` of length of `n` and a key `k`.\n\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\n\nIf `k > 0`, replace the `ith` number with the sum of the next `k` numbers.\n\nIf `k < 0`, replace the `ith` number with the sum of the previous `k` numbers.\n\nIf `k == 0`, replace the `ith` number with `0`.\n\nAs `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`.\n\nGiven the circular array `code` and an integer key `k`, return the decrypted code to defuse the bomb!",
    "examples": [
      "Input: code = [5,7,1,4], k = 3\nOutput: [12,10,16,13]\nExplanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.",
      "Input: code = [1,2,3,4], k = 0\nOutput: [0,0,0,0]\nExplanation: When k is zero, the numbers are replaced by 0.",
      "Input: code = [2,4,9,3], k = -2\nOutput: [12,5,6,13]\nExplanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers."
    ],
    "constraints": "`n == code.length`\n`1 <= n <= 100`\n`1 <= code[i] <= 100`\n`-(n - 1) <= k <= n - 1`"
  },
  {
    "id": "1653",
    "title": "Minimum Deletions to Make String Balanced",
    "difficulty": "Medium",
    "explanation": "You are given a string `s` consisting only of characters `'a'` and `'b'`​​​​.\n\nYou can delete any number of characters in `s` to make `s` balanced. `s` is balanced if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.\n\nReturn the minimum number of deletions needed to make `s` balanced.",
    "examples": [
      "Input: s = \"aababbab\"\nOutput: 2\nExplanation: You can either:\nDelete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or\nDelete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\").",
      "Input: s = \"bbaaaaabb\"\nOutput: 2\nExplanation: The only solution is to delete the first two characters."
    ],
    "constraints": "`1 <= s.length <= 105`\n`s[i]` is `'a'` or `'b'`​​."
  },
  {
    "id": "1654",
    "title": "Minimum Jumps to Reach Home",
    "difficulty": "Medium",
    "explanation": "A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.\n\nThe bug jumps according to the following rules:\nIt can jump exactly `a` positions forward (to the right).\n\nIt can jump exactly `b` positions backward (to the left).\n\nIt cannot jump backward twice in a row.\n\nIt cannot jump to any `forbidden` positions.\n\nThe bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`",
    "examples": [
      "Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\nOutput: 3\nExplanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.",
      "Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\nOutput: -1",
      "Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\nOutput: 2\nExplanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home."
    ],
    "constraints": "`1 <= forbidden.length <= 1000`\n`1 <= a, b, forbidden[i] <= 2000`\n`0 <= x <= 2000`\nAll the elements in `forbidden` are distinct.\n\nPosition `x` is not forbidden."
  },
  {
    "id": "1655",
    "title": "Distribute Repeating Integers",
    "difficulty": "Hard",
    "explanation": "You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that:\nThe `ith` customer gets exactly `quantity[i]` integers,\nThe integers the `ith` customer gets are all equal, and\nEvery customer is satisfied.\n\nReturn `true` if it is possible to distribute `nums` according to the above conditions.",
    "examples": [
      "Input: nums = [1,2,3,4], quantity = [2]\nOutput: false\nExplanation: The 0th customer cannot be given two different integers.",
      "Input: nums = [1,2,3,3], quantity = [2]\nOutput: true\nExplanation: The 0th customer is given [3,3]. The integers [1,2] are not used.",
      "Input: nums = [1,1,2,2], quantity = [2,2]\nOutput: true\nExplanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].",
      "Input: nums = [1,1,2,3], quantity = [2,2]\nOutput: false\nExplanation: Although the 0th customer could be given [1,1], the 1st customer cannot be satisfied.",
      "Input: nums = [1,1,1,1,1], quantity = [2,3]\nOutput: true\nExplanation: The 0th customer is given [1,1], and the 1st customer is given [1,1,1]."
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 105`\n`1 <= nums[i] <= 1000`\n`m == quantity.length`\n`1 <= m <= 10`\n`1 <= quantity[i] <= 105`\nThere are at most `50` unique values in `nums`."
  },
  {
    "id": "1656",
    "title": "Design an Ordered Stream",
    "difficulty": "Easy",
    "explanation": "There is a stream of `n` `(idKey, value)` pairs arriving in an arbitrary order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.\n\nDesign a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.\n\nImplement the `OrderedStream` class:\n`OrderedStream(int n)` Constructs the stream to take `n` values.\n\n`String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.\n\n\nExample:\nInput\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\nOutput\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\nExplanation\n// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\n\nOrderedStream os = new OrderedStream(5);\nos.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\n\nos.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\n\nos.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\n\nos.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\n\nos.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n\n// Concatentating all the chunks returned:\n// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n// The resulting order is the same as the order above.\n\n\nConstraints:\n`1 <= n <= 1000`\n`1 <= id <= n`\n`value.length == 5`\n`value` consists only of lowercase letters.\n\nEach call to `insert` will have a unique `id.`\nExactly `n` calls will be made to `insert`.",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1657",
    "title": "Determine if Two Strings Are Close",
    "difficulty": "Medium",
    "explanation": "Two strings are considered close if you can attain one from the other using the following operations:\nOperation 1: Swap any two existing characters.\n\n\t\nFor example, `abcde -> aecdb`\nOperation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.\n\n\t\nFor example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\nYou can use the operations on either string as many times as necessary.\n\nGiven two strings, `word1` and `word2`, return `true` if `word1` and `word2` are close, and `false` otherwise.",
    "examples": [
      "Input: word1 = \"abc\", word2 = \"bca\"\nOutput: true\nExplanation: You can attain word2 from word1 in 2 operations.\n\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\"",
      "Input: word1 = \"a\", word2 = \"aa\"\nOutput: false\nExplanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.",
      "Input: word1 = \"cabbba\", word2 = \"abbccc\"\nOutput: true\nExplanation: You can attain word2 from word1 in 3 operations.\n\nApply Operation 1: \"cabbba\" -> \"caabbb\"\n`Apply Operation 2: \"`caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\"",
      "Input: word1 = \"cabbba\", word2 = \"aabbss\"\nOutput: false\nExplanation: It is impossible to attain word2 from word1, or vice versa, in any amount of operations."
    ],
    "constraints": "`1 <= word1.length, word2.length <= 105`\n`word1` and `word2` contain only lowercase English letters."
  },
  {
    "id": "1658",
    "title": "Minimum Operations to Reduce X to Zero",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this modifies the array for future operations.\n\nReturn the minimum number of operations to reduce `x` to exactly `0` if it's possible, otherwise, return `-1`.",
    "examples": [
      "Input: nums = [1,1,4,2,3], x = 5\nOutput: 2\nExplanation: The optimal solution is to remove the last two elements to reduce x to zero.",
      "Input: nums = [5,6,7,8,9], x = 4\nOutput: -1",
      "Input: nums = [3,2,20,1,1,3], x = 10\nOutput: 5\nExplanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 104`\n`1 <= x <= 109`"
  },
  {
    "id": "1659",
    "title": "Maximize Grid Happiness",
    "difficulty": "Hard",
    "explanation": "You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.\n\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.\n\nThe happiness of each person is calculated as follows:\nIntroverts start with `120` happiness and lose `30` happiness for each neighbor (introvert or extrovert).\n\nExtroverts start with `40` happiness and gain `20` happiness for each neighbor (introvert or extrovert).\n\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\n\nThe grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.",
    "examples": [
      "Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\nOutput: 240\nExplanation: Assume the grid is 1-indexed with coordinates (row, column).\n\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\n\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.",
      "Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\nOutput: 260\nExplanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.",
      "Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\nOutput: 240"
    ],
    "constraints": "`1 <= m, n <= 5`\n`0 <= introvertsCount, extrovertsCount <= min(m * n, 6)`"
  },
  {
    "id": "1660",
    "title": "Correct a Binary Tree",
    "difficulty": "Medium",
    "explanation": "You have a binary tree with a small defect. There is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right.\n\nGiven the root of the binary tree with this defect, `root`, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to).\n\nCustom testing:\nThe test input is read as 3 lines:\n`TreeNode root`\n`int fromNode` (not available to `correctBinaryTree`)\n`int toNode` (not available to `correctBinaryTree`)\nAfter the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.",
    "examples": [
      "Input: root = [1,2,3], fromNode = 2, toNode = 3\nOutput: [1,null,3]\nExplanation: The node with value 2 is invalid, so remove it.",
      "Input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4\nOutput: [8,3,1,null,null,9,4,null,null,5,6]\nExplanation: The node with value 7 is invalid, so remove it and the node underneath it, node 2."
    ],
    "constraints": "The number of nodes in the tree is in the range `[3, 104]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`fromNode != toNode`\n`fromNode` and `toNode` will exist in the tree and will be on the same depth.\n\n`toNode` is to the right of `fromNode`.\n\n`fromNode.right` is `null` in the initial tree from the test data."
  },
  {
    "id": "1661",
    "title": "Average Time of Process per Machine",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1662",
    "title": "Check If Two String Arrays are Equivalent",
    "difficulty": "Easy",
    "explanation": "Given two string arrays `word1` and `word2`, return `true` if the two arrays represent the same string, and `false` otherwise.\n\nA string is represented by an array if the array elements concatenated in order forms the string.",
    "examples": [
      "Input: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]\nOutput: true\nExplanation:\nword1 represents string \"ab\" + \"c\" -> \"abc\"\nword2 represents string \"a\" + \"bc\" -> \"abc\"\nThe strings are the same, so return true.",
      "Input: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]\nOutput: false",
      "Input: word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]\nOutput: true"
    ],
    "constraints": "`1 <= word1.length, word2.length <= 103`\n`1 <= word1[i].length, word2[i].length <= 103`\n`1 <= sum(word1[i].length), sum(word2[i].length) <= 103`\n`word1[i]` and `word2[i]` consist of lowercase letters."
  },
  {
    "id": "1663",
    "title": "Smallest String With A Given Numeric Value",
    "difficulty": "Medium",
    "explanation": "The numeric value of a lowercase character is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\nThe numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe\"` is equal to `1 + 2 + 5 = 8`.\n\nYou are given two integers `n` and `k`. Return the lexicographically smallest string with length equal to `n` and numeric value equal to `k`.\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.",
    "examples": [
      "Input: n = 3, k = 27\nOutput: \"aay\"\nExplanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.",
      "Input: n = 5, k = 73\nOutput: \"aaszz\""
    ],
    "constraints": "`1 <= n <= 105`\n`n <= k <= 26 * n`"
  },
  {
    "id": "1664",
    "title": "Ways to Make a Fair Array",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums`. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.\n\nFor example, if `nums = [6,1,7,4,1]`:\nChoosing to remove index `1` results in `nums = [6,7,4,1]`.\n\nChoosing to remove index `2` results in `nums = [6,1,4,1]`.\n\nChoosing to remove index `4` results in `nums = [6,1,7,4]`.\n\nAn array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.\n\nReturn the number of indices that you could choose such that after the removal, `nums` is fair.",
    "examples": [
      "Input: nums = [2,1,6,4]\nOutput: 1\nExplanation:\nRemove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\n\nRemove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\n\nRemove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\n\nRemove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\n\nThere is 1 index that you can remove to make nums fair.",
      "Input: nums = [1,1,1]\nOutput: 3\nExplanation: You can remove any index and the remaining array is fair.",
      "Input: nums = [1,2,3]\nOutput: 0\nExplanation: You cannot make a fair array after removing any index."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 104`"
  },
  {
    "id": "1665",
    "title": "Minimum Initial Energy to Finish Tasks",
    "difficulty": "Hard",
    "explanation": "You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:\n`actuali` is the actual amount of energy you spend to finish the `ith` task.\n\n`minimumi` is the minimum amount of energy you require to begin the `ith` task.\n\nFor example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.\n\nYou can finish the tasks in any order you like.\n\nReturn the minimum initial amount of energy you will need to finish all the tasks.",
    "examples": [
      "Input: tasks = [[1,2],[2,4],[4,8]]\nOutput: 8\nExplanation:\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n\n    - 2nd task. Now energy = 4 - 2 = 2.\n\n    - 1st task. Now energy = 2 - 1 = 1.\n\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.",
      "Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\nOutput: 32\nExplanation:\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n\n    - 2nd task. Now energy = 31 - 2 = 29.\n\n    - 3rd task. Now energy = 29 - 10 = 19.\n\n    - 4th task. Now energy = 19 - 10 = 9.\n\n    - 5th task. Now energy = 9 - 8 = 1.",
      "Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\nOutput: 27\nExplanation:\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n\n    - 2nd task. Now energy = 22 - 2 = 20.\n\n    - 3rd task. Now energy = 20 - 3 = 17.\n\n    - 1st task. Now energy = 17 - 1 = 16.\n\n    - 4th task. Now energy = 16 - 4 = 12.\n\n    - 6th task. Now energy = 12 - 6 = 6."
    ],
    "constraints": "`1 <= tasks.length <= 105`\n`1 <= actual​i <= minimumi <= 104`"
  },
  {
    "id": "1666",
    "title": "Change the Root of a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root.\n\nYou can reroot the tree with the following steps for each node `cur` on the path starting from the `leaf` up to the `root`​​​ excluding the root:\nIf `cur` has a left child, then that child becomes `cur`'s right child.\n\n`cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child.\n\nReturn the new root of the rerooted tree.\n\nNote: Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive \"Wrong Answer\".",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7\nOutput: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0\nOutput: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]"
    ],
    "constraints": "The number of nodes in the tree is in the range `[2, 100]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`leaf` exist in the tree."
  },
  {
    "id": "1667",
    "title": "Fix Names in a Table",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1668",
    "title": "Maximum Repeating Substring",
    "difficulty": "Easy",
    "explanation": "For a string `sequence`, a string `word` is `k`-repeating if `word` concatenated `k` times is a substring of `sequence`. The `word`'s maximum `k`-repeating value is the highest value `k` where `word` is `k`-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`-repeating value is `0`.\n\nGiven strings `sequence` and `word`, return the maximum `k`-repeating value of `word` in `sequence`.",
    "examples": [
      "Input: sequence = \"ababc\", word = \"ab\"\nOutput: 2\nExplanation: \"abab\" is a substring in \"ababc\".",
      "Input: sequence = \"ababc\", word = \"ba\"\nOutput: 1\nExplanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\".",
      "Input: sequence = \"ababc\", word = \"ac\"\nOutput: 0\nExplanation: \"ac\" is not a substring in \"ababc\"."
    ],
    "constraints": "`1 <= sequence.length <= 100`\n`1 <= word.length <= 100`\n`sequence` and `word` contains only lowercase English letters."
  },
  {
    "id": "1669",
    "title": "Merge In Between Linked Lists",
    "difficulty": "Medium",
    "explanation": "You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.\n\nRemove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.\n\nThe blue edges and nodes in the following figure incidate the result:\nBuild the result list and return its head.",
    "examples": [
      "Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\nOutput: [0,1,2,1000000,1000001,1000002,5]\nExplanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.",
      "Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\nOutput: [0,1,1000000,1000001,1000002,1000003,1000004,6]\nExplanation: The blue edges and nodes in the above figure indicate the result."
    ],
    "constraints": "`3 <= list1.length <= 104`\n`1 <= a <= b < list1.length - 1`\n`1 <= list2.length <= 104`"
  },
  {
    "id": "1670",
    "title": "Design Front Middle Back Queue",
    "difficulty": "Medium",
    "explanation": "Design a queue that supports `push` and `pop` operations in the front, middle, and back.\n\nImplement the `FrontMiddleBack` class:\n`FrontMiddleBack()` Initializes the queue.\n\n`void pushFront(int val)` Adds `val` to the front of the queue.\n\n`void pushMiddle(int val)` Adds `val` to the middle of the queue.\n\n`void pushBack(int val)` Adds `val` to the back of the queue.\n\n`int popFront()` Removes the front element of the queue and returns it. If the queue is empty, return `-1`.\n\n`int popMiddle()` Removes the middle element of the queue and returns it. If the queue is empty, return `-1`.\n\n`int popBack()` Removes the back element of the queue and returns it. If the queue is empty, return `-1`.\n\nNotice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:\nPushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.\n\nPopping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.",
    "examples": [
      "Input:\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\nOutput:\n[null, null, null, null, null, 1, 3, 4, 2, -1]\nExplanation:\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [1]\nq.pushBack(2);    // [1, 2]\nq.pushMiddle(3);  // [1, 3, 2]\nq.pushMiddle(4);  // [1, 4, 3, 2]\nq.popFront();     // return 1 -> [4, 3, 2]\nq.popMiddle();    // return 3 -> [4, 2]\nq.popMiddle();    // return 4 -> [2]\nq.popBack();      // return 2 -> []\nq.popFront();     // return -1 -> [] (The queue is empty)"
    ],
    "constraints": "`1 <= val <= 109`\nAt most `1000` calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`."
  },
  {
    "id": "1671",
    "title": "Minimum Number of Removals to Make Mountain Array",
    "difficulty": "Hard",
    "explanation": "You may recall that an array `arr` is a mountain array if and only if:\n`arr.length >= 3`\nThere exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:\n\t\n`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\nGiven an integer array `nums`​​​, return the minimum number of elements to remove to make `nums​​​` a mountain array.",
    "examples": [
      "Input: nums = [1,3,1]\nOutput: 0\nExplanation: The array itself is a mountain array so we do not need to remove any elements.",
      "Input: nums = [2,1,1,5,6,2,3,1]\nOutput: 3\nExplanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].",
      "Input: nums = [4,3,2,1,1,2,3,1]\nOutput: 4",
      "Input: nums = [1,2,3,4,4,3,2,1]\nOutput: 1"
    ],
    "constraints": "`3 <= nums.length <= 1000`\n`1 <= nums[i] <= 109`\nIt is guaranteed that you can make a mountain array out of `nums`."
  },
  {
    "id": "1672",
    "title": "Richest Customer Wealth",
    "difficulty": "Easy",
    "explanation": "You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i​​​​​​​​​​​th​​​​` customer has in the `j​​​​​​​​​​​th`​​​​ bank. Return the wealth that the richest customer has.\n\nA customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.",
    "examples": [
      "Input: accounts = [[1,2,3],[3,2,1]]\nOutput: 6\nExplanation:\n`1st customer has wealth = 1 + 2 + 3 = 6\n``2nd customer has wealth = 3 + 2 + 1 = 6\n`Both customers are considered the richest with a wealth of 6 each, so return 6.",
      "Input: accounts = [[1,5],[7,3],[3,5]]\nOutput: 10\nExplanation: \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.",
      "Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]\nOutput: 17"
    ],
    "constraints": "`m == accounts.length`\n`n == accounts[i].length`\n`1 <= m, n <= 50`\n`1 <= accounts[i][j] <= 100`"
  },
  {
    "id": "1673",
    "title": "Find the Most Competitive Subsequence",
    "difficulty": "Medium",
    "explanation": "Given an integer array `nums` and a positive integer `k`, return the most competitive subsequence of `nums` of size `k`.\n\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\n\nWe define that a subsequence `a` is more competitive than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number less than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.",
    "examples": [
      "Input: nums = [3,5,2,6], k = 2\nOutput: [2,6]\nExplanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.",
      "Input: nums = [2,4,3,3,5,4,9,6], k = 4\nOutput: [2,3,3,4]"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`0 <= nums[i] <= 109`\n`1 <= k <= nums.length`"
  },
  {
    "id": "1674",
    "title": "Minimum Moves to Make Array Complementary",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` of even length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.\n\nThe array `nums` is complementary if for all indices `i` (0-indexed), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.\n\nReturn the minimum number of moves required to make `nums` complementary.",
    "examples": [
      "Input: nums = [1,2,4,3], limit = 4\nOutput: 1\nExplanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\n\nnums[0] + nums[3] = 1 + 3 = 4.\n\nnums[1] + nums[2] = 2 + 2 = 4.\n\nnums[2] + nums[1] = 2 + 2 = 4.\n\nnums[3] + nums[0] = 3 + 1 = 4.\n\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.",
      "Input: nums = [1,2,2,1], limit = 2\nOutput: 2\nExplanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.",
      "Input: nums = [1,2,1,2], limit = 2\nOutput: 0\nExplanation: nums is already complementary."
    ],
    "constraints": "`n == nums.length`\n`2 <= n <= 105`\n`1 <= nums[i] <= limit <= 105`\n`n` is even."
  },
  {
    "id": "1675",
    "title": "Minimize Deviation in Array",
    "difficulty": "Hard",
    "explanation": "You are given an array `nums` of `n` positive integers.\n\nYou can perform two types of operations on any element of the array any number of times:\nIf the element is even, divide it by `2`.\n\n\t\nFor example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`\nIf the element is odd, multiply it by `2`.\n\n\t\nFor example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`\nThe deviation of the array is the maximum difference between any two elements in the array.\n\nReturn the minimum deviation the array can have after performing some number of operations.",
    "examples": [
      "Input: nums = [1,2,3,4]\nOutput: 1\nExplanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.",
      "Input: nums = [4,1,5,20,3]\nOutput: 3\nExplanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.",
      "Input: nums = [2,10,8]\nOutput: 3"
    ],
    "constraints": "`n == nums.length`\n`2 <= n <= 105`\n`1 <= nums[i] <= 109`"
  },
  {
    "id": "1676",
    "title": "Lowest Common Ancestor of a Binary Tree IV",
    "difficulty": "Medium",
    "explanation": "Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return the lowest common ancestor (LCA) of all the nodes in `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are unique.\n\nExtending the definition of LCA on Wikipedia: \"The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a descendant (where we allow a node to be a descendant of itself) for every valid `i`\". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]\nOutput: 2\nExplanation: The lowest common ancestor of nodes 4 and 7 is node 2.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]\nOutput: 1\nExplanation: The lowest common ancestor of a single node is the node itself.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]\nOutput: 5\nExplanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]\nOutput: 3\nExplanation: The lowest common ancestor of all the nodes is the root node."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`-109 <= Node.val <= 109`\nAll `Node.val` are unique.\n\nAll `nodes[i]` will exist in the tree.\n\nAll `nodes[i]` are distinct."
  },
  {
    "id": "1677",
    "title": "Product's Worth Over Invoices",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1678",
    "title": "Goal Parser Interpretation",
    "difficulty": "Easy",
    "explanation": "You own a Goal Parser that can interpret a string `command`. The `command` consists of an alphabet of `\"G\"`, `\"()\"` and/or `\"(al)\"` in some order. The Goal Parser will interpret `\"G\"` as the string `\"G\"`, `\"()\"` as the string `\"o\"`, and `\"(al)\"` as the string `\"al\"`. The interpreted strings are then concatenated in the original order.\n\nGiven the string `command`, return the Goal Parser's interpretation of `command`.",
    "examples": [
      "Input: command = \"G()(al)\"\nOutput: \"Goal\"\nExplanation: The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\".",
      "Input: command = \"G()()()()(al)\"\nOutput: \"Gooooal\"",
      "Input: command = \"(al)G(al)()()G\"\nOutput: \"alGalooG\""
    ],
    "constraints": "`1 <= command.length <= 100`\n`command` consists of `\"G\"`, `\"()\"`, and/or `\"(al)\"` in some order."
  },
  {
    "id": "1679",
    "title": "Max Number of K-Sum Pairs",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` and an integer `k`.\n\nIn one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.\n\nReturn the maximum number of operations you can perform on the array.",
    "examples": [
      "Input: nums = [1,2,3,4], k = 5\nOutput: 2\nExplanation: Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.",
      "Input: nums = [3,1,3,4,3], k = 6\nOutput: 1\nExplanation: Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 109`\n`1 <= k <= 109`"
  },
  {
    "id": "1680",
    "title": "Concatenation of Consecutive Binary Numbers",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return the decimal value of the binary string formed by concatenating the binary representations of `1` to `n` in order, modulo `109 + 7`.",
    "examples": [
      "Input: n = 1\nOutput: 1\nExplanation: \"1\" in binary corresponds to the decimal value 1.",
      "Input: n = 3\nOutput: 27\nExplanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\n\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27.",
      "Input: n = 12\nOutput: 505379714\nExplanation: The concatenation results in \"1101110010111011110001001101010111100\".\n\nThe decimal value of that is 118505380540.\n\nAfter modulo 109 + 7, the result is 505379714."
    ],
    "constraints": "`1 <= n <= 105`"
  },
  {
    "id": "1681",
    "title": "Minimum Incompatibility",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `nums`​​​ and an integer `k`. You are asked to distribute this array into `k` subsets of equal size such that there are no two equal elements in the same subset.\n\nA subset's incompatibility is the difference between the maximum and minimum elements in that array.\n\nReturn the minimum possible sum of incompatibilities of the `k` subsets after distributing the array optimally, or return `-1` if it is not possible.\n\nA subset is a group integers that appear in the array with no particular order.",
    "examples": [
      "Input: nums = [1,2,1,4], k = 2\nOutput: 4\nExplanation: The optimal distribution of subsets is [1,2] and [1,4].\n\nThe incompatibility is (2-1) + (4-1) = 4.\n\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.",
      "Input: nums = [6,3,8,1,3,1,2,2], k = 4\nOutput: 6\nExplanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\n\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.",
      "Input: nums = [5,3,3,6,3,3], k = 3\nOutput: -1\nExplanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset."
    ],
    "constraints": "`1 <= k <= nums.length <= 16`\n`nums.length` is divisible by `k`\n`1 <= nums[i] <= nums.length`"
  },
  {
    "id": "1682",
    "title": "Longest Palindromic Subsequence II",
    "difficulty": "Medium",
    "explanation": "A subsequence of a string `s` is considered a good palindromic subsequence if:\nIt is a subsequence of `s`.\n\nIt is a palindrome (has the same value if reversed).\n\nIt has an even length.\n\nNo two consecutive characters are equal, except the two middle ones.\n\nFor example, if `s = \"abcabcabb\"`, then `\"abba\"` is considered a good palindromic subsequence, while `\"bcb\"` (not even length) and `\"bbbb\"` (has equal consecutive characters) are not.\n\nGiven a string `s`, return the length of the longest good palindromic subsequence in `s`.",
    "examples": [
      "Input: s = \"bbabab\"\nOutput: 4\nExplanation: The longest good palindromic subsequence of s is \"baab\".",
      "Input: s = \"dcbccacdb\"\nOutput: 4\nExplanation: The longest good palindromic subsequence of s is \"dccd\"."
    ],
    "constraints": "`1 <= s.length <= 250`\n`s` consists of lowercase English letters."
  },
  {
    "id": "1683",
    "title": "Invalid Tweets",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1684",
    "title": "Count the Number of Consistent Strings",
    "difficulty": "Easy",
    "explanation": "You are given a string `allowed` consisting of distinct characters and an array of strings `words`. A string is consistent if all characters in the string appear in the string `allowed`.\n\nReturn the number of consistent strings in the array `words`.",
    "examples": [
      "Input: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\nOutput: 2\nExplanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.",
      "Input: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\nOutput: 7\nExplanation: All strings are consistent.",
      "Input: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\nOutput: 4\nExplanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent."
    ],
    "constraints": "`1 <= words.length <= 104`\n`1 <= allowed.length <= 26`\n`1 <= words[i].length <= 10`\nThe characters in `allowed` are distinct.\n\n`words[i]` and `allowed` contain only lowercase English letters."
  },
  {
    "id": "1685",
    "title": "Sum of Absolute Differences in a Sorted Array",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` sorted in non-decreasing order.\n\nBuild and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of absolute differences between `nums[i]` and all the other elements in the array.\n\nIn other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (0-indexed).",
    "examples": [
      "Input: nums = [2,3,5]\nOutput: [4,3,5]\nExplanation: Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.",
      "Input: nums = [1,4,6,8,10]\nOutput: [24,15,13,15,21]"
    ],
    "constraints": "`2 <= nums.length <= 105`\n`1 <= nums[i] <= nums[i + 1] <= 104`"
  },
  {
    "id": "1686",
    "title": "Stone Game VI",
    "difficulty": "Medium",
    "explanation": "Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are `n` stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\n\nYou are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.\n\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.\n\nDetermine the result of the game, and:\nIf Alice wins, return `1`.\n\nIf Bob wins, return `-1`.\n\nIf the game results in a draw, return `0`.",
    "examples": [
      "Input: aliceValues = [1,3], bobValues = [2,1]\nOutput: 1\nExplanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\n\nBob can only choose stone 0, and will only receive 2 points.\n\nAlice wins.",
      "Input: aliceValues = [1,2], bobValues = [3,1]\nOutput: 0\nExplanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\n\nDraw.",
      "Input: aliceValues = [2,4,3], bobValues = [1,6,7]\nOutput: -1\nExplanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\n\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\n\nBob wins."
    ],
    "constraints": "`n == aliceValues.length == bobValues.length`\n`1 <= n <= 105`\n`1 <= aliceValues[i], bobValues[i] <= 100`"
  },
  {
    "id": "1687",
    "title": "Delivering Boxes from Storage to Ports",
    "difficulty": "Hard",
    "explanation": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.\n\nYou are given an array `boxes`, where `boxes[i] = [ports​​i​, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n`ports​​i` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n\n`portsCount` is the number of ports.\n\n`maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\nThe boxes need to be delivered in the order they are given. The ship will follow these steps:\nThe ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n\nFor each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.\n\nThe ship then makes a return trip to storage to take more boxes from the queue.\n\nThe ship must end at storage after all the boxes have been delivered.\n\nReturn the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.",
    "examples": [
      "Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\nOutput: 4\nExplanation: The optimal strategy is as follows: \n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\n\nSo the total number of trips is 4.\n\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).",
      "Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\nOutput: 6\nExplanation: The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n\n- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.\n\nSo the total number of trips is 2 + 2 + 2 = 6.",
      "Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\nOutput: 6\nExplanation: The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\n\nSo the total number of trips is 2 + 2 + 2 = 6.",
      "Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7\nOutput: 14\nExplanation: The optimal strategy is as follows:\n- The ship takes the first box, goes to port 2, then storage. 2 trips.\n\n- The ship takes the second box, goes to port 2, then storage. 2 trips.\n\n- The ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips.\n\n- The ship takes the fifth box, goes to port 3, then storage. 2 trips.\n\n- The ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. \n- The ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips.\n\nSo the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14."
    ],
    "constraints": "`1 <= boxes.length <= 105`\n`1 <= portsCount, maxBoxes, maxWeight <= 105`\n`1 <= ports​​i <= portsCount`\n`1 <= weightsi <= maxWeight`"
  },
  {
    "id": "1688",
    "title": "Count of Matches in Tournament",
    "difficulty": "Easy",
    "explanation": "You are given an integer `n`, the number of teams in a tournament that has strange rules:\nIf the current number of teams is even, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.\n\nIf the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.\n\nReturn the number of matches played in the tournament until a winner is decided.",
    "examples": [
      "Input: n = 7\nOutput: 6\nExplanation: Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\n\nTotal number of matches = 3 + 2 + 1 = 6.",
      "Input: n = 14\nOutput: 13\nExplanation: Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\n\nTotal number of matches = 7 + 3 + 2 + 1 = 13."
    ],
    "constraints": "`1 <= n <= 200`"
  },
  {
    "id": "1689",
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "difficulty": "Medium",
    "explanation": "A decimal number is called deci-binary if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are deci-binary, while `112` and `3001` are not.\n\nGiven a string `n` that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to `n`.",
    "examples": [
      "Input: n = \"32\"\nOutput: 3\nExplanation: 10 + 11 + 11 = 32",
      "Input: n = \"82734\"\nOutput: 8",
      "Input: n = \"27346209830709182346\"\nOutput: 9"
    ],
    "constraints": "`1 <= n.length <= 105`\n`n` consists of only digits.\n\n`n` does not contain any leading zeros and represents a positive integer."
  },
  {
    "id": "1690",
    "title": "Stone Game VII",
    "difficulty": "Medium",
    "explanation": "Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are `n` stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\n\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.\n\nGiven an array of integers `stones` where `stones[i]` represents the value of the `ith` stone from the left, return the difference in Alice and Bob's score if they both play optimally.",
    "examples": [
      "Input: stones = [5,3,1,4,2]\nOutput: 6\nExplanation: \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\n\nThe score difference is 18 - 12 = 6.",
      "Input: stones = [7,90,5,1,100,10,10,2]\nOutput: 122"
    ],
    "constraints": "`n == stones.length`\n`2 <= n <= 1000`\n`1 <= stones[i] <= 1000`"
  },
  {
    "id": "1691",
    "title": "Maximum Height by Stacking Cuboids",
    "difficulty": "Hard",
    "explanation": "Given `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (0-indexed). Choose a subset of `cuboids` and place them on each other.\n\nYou can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\n\nReturn the maximum height of the stacked `cuboids`.",
    "examples": [
      "Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]\nOutput: 190\nExplanation:\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\n\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\n\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\n\nThe total height is 95 + 50 + 45 = 190.",
      "Input: cuboids = [[38,25,45],[76,35,3]]\nOutput: 76\nExplanation:\nYou can't place any of the cuboids on the other.\n\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.",
      "Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\nOutput: 102\nExplanation:\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\n\nYou can place the 11x7 side down on all cuboids so their heights are 17.\n\nThe maximum height of stacked cuboids is 6 * 17 = 102."
    ],
    "constraints": "`n == cuboids.length`\n`1 <= n <= 100`\n`1 <= widthi, lengthi, heighti <= 100`"
  },
  {
    "id": "1692",
    "title": "Count Ways to Distribute Candies",
    "difficulty": "Hard",
    "explanation": "There are `n` unique candies (labeled `1` through `n`) and `k` bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.\n\nThere can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\n\nFor example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways.\n\nGiven two integers, `n` and `k`, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: n = 3, k = 2\nOutput: 3\nExplanation: You can distribute 3 candies into 2 bags in 3 ways:\n(1), (2,3)\n(1,2), (3)\n(1,3), (2)",
      "Input: n = 4, k = 2\nOutput: 7\nExplanation: You can distribute 4 candies into 2 bags in 7 ways:\n(1), (2,3,4)\n(1,2), (3,4)\n(1,3), (2,4)\n(1,4), (2,3)\n(1,2,3), (4)\n(1,2,4), (3)\n(1,3,4), (2)",
      "Input: n = 20, k = 5\nOutput: 206085257\nExplanation: You can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257."
    ],
    "constraints": "`1 <= k <= n <= 1000`"
  },
  {
    "id": "1693",
    "title": "Daily Leads and Partners",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1694",
    "title": "Reformat Phone Number",
    "difficulty": "Easy",
    "explanation": "You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.\n\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\n2 digits: A single block of length 2.\n\n3 digits: A single block of length 3.\n\n4 digits: Two blocks of length 2 each.\n\nThe blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\n\nReturn the phone number after formatting.",
    "examples": [
      "Input: number = \"1-23-45 6\"\nOutput: \"123-456\"\nExplanation: The digits are \"123456\".\n\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\n\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\n\nJoining the blocks gives \"123-456\".",
      "Input: number = \"123 4-567\"\nOutput: \"123-45-67\"\nExplanation: The digits are \"1234567\".\n\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\n\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\n\nJoining the blocks gives \"123-45-67\".",
      "Input: number = \"123 4-5678\"\nOutput: \"123-456-78\"\nExplanation: The digits are \"12345678\".\n\nStep 1: The 1st block is \"123\".\n\nStep 2: The 2nd block is \"456\".\n\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\n\nJoining the blocks gives \"123-456-78\".",
      "Input: number = \"12\"\nOutput: \"12\"",
      "Input: number = \"--17-5 229 35-39475 \"\nOutput: \"175-229-353-94-75\""
    ],
    "constraints": "`2 <= number.length <= 100`\n`number` consists of digits and the characters `'-'` and `' '`.\n\nThere are at least two digits in `number`."
  },
  {
    "id": "1695",
    "title": "Maximum Erasure Value",
    "difficulty": "Medium",
    "explanation": "You are given an array of positive integers `nums` and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.\n\nReturn the maximum score you can get by erasing exactly one subarray.\n\nAn array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.",
    "examples": [
      "Input: nums = [4,2,4,5,6]\nOutput: 17\nExplanation: The optimal subarray here is [2,4,5,6].",
      "Input: nums = [5,2,1,2,5,2,1,2,5]\nOutput: 8\nExplanation: The optimal subarray here is [5,2,1] or [1,2,5]."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 104`"
  },
  {
    "id": "1696",
    "title": "Jump Game VI",
    "difficulty": "Medium",
    "explanation": "You are given a 0-indexed integer array `nums` and an integer `k`.\n\nYou are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` inclusive.\n\nYou want to reach the last index of the array (index `n - 1`). Your score is the sum of all `nums[j]` for each index `j` you visited in the array.\n\nReturn the maximum score you can get.",
    "examples": [
      "Input: nums = [1,-1,-2,4,-7,3], k = 2\nOutput: 7\nExplanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.",
      "Input: nums = [10,-5,-2,4,0,3], k = 3\nOutput: 17\nExplanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.",
      "Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length, k <= 105`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "1697",
    "title": "Checking Existence of Edge Length Limited Paths",
    "difficulty": "Hard",
    "explanation": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be multiple edges between two nodes.\n\nGiven an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance strictly less than `limitj` .\n\nReturn a boolean array `answer`, where `answer.length == queries.length` and the `jth` value of `answer` is `true` if there is a path for `queries[j]` is `true`, and `false` otherwise.",
    "examples": [
      "Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\nOutput: [false,true]\nExplanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\n\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\n\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.",
      "Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\nOutput: [true,false]\nExaplanation: The above figure shows the given graph."
    ],
    "constraints": "`2 <= n <= 105`\n`1 <= edgeList.length, queries.length <= 105`\n`edgeList[i].length == 3`\n`queries[j].length == 3`\n`0 <= ui, vi, pj, qj <= n - 1`\n`ui != vi`\n`pj != qj`\n`1 <= disi, limitj <= 109`\nThere may be multiple edges between two nodes."
  },
  {
    "id": "1698",
    "title": "Number of Distinct Substrings in a String",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, return the number of distinct substrings of `s`.\n\nA substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.",
    "examples": [
      "Input: s = \"aabbaba\"\nOutput: 21\nExplanation: The set of distinct strings is [\"a\",\"b\",\"aa\",\"bb\",\"ab\",\"ba\",\"aab\",\"abb\",\"bab\",\"bba\",\"aba\",\"aabb\",\"abba\",\"bbab\",\"baba\",\"aabba\",\"abbab\",\"bbaba\",\"aabbab\",\"abbaba\",\"aabbaba\"]",
      "Input: s = \"abcdefg\"\nOutput: 28"
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` consists of lowercase English letters.\n\nFollow up: Can you solve this problem in `O(n)` time complexity?"
  },
  {
    "id": "1699",
    "title": "Number of Calls Between Two Persons",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1700",
    "title": "Number of Students Unable to Eat Lunch",
    "difficulty": "Easy",
    "explanation": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\n\nOtherwise, they will leave it and go to the queue's end.\n\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\n\nYou are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i​​​​​​th` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j​​​​​​th` student in the initial queue (`j = 0` is the front of the queue). Return the number of students that are unable to eat.",
    "examples": [
      "Input: students = [1,1,0,0], sandwiches = [0,1,0,1]\nOutput: 0 \nExplanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\n\nHence all students are able to eat.",
      "Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\nOutput: 3"
    ],
    "constraints": "`1 <= students.length, sandwiches.length <= 100`\n`students.length == sandwiches.length`\n`sandwiches[i]` is `0` or `1`.\n\n`students[i]` is `0` or `1`."
  },
  {
    "id": "1701",
    "title": "Average Waiting Time",
    "difficulty": "Medium",
    "explanation": "There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`\n`arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in non-decreasing order.\n\n`timei` is the time needed to prepare the order of the `ith` customer.\n\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.\n\nReturn the average waiting time of all customers. Solutions within `10-5` from the actual answer are considered accepted.",
    "examples": [
      "Input: customers = [[1,2],[2,5],[4,3]]\nOutput: 5.00000\nExplanation:\n1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\n\nSo the average waiting time = (2 + 6 + 7) / 3 = 5.",
      "Input: customers = [[5,2],[5,4],[10,3],[20,1]]\nOutput: 3.25000\nExplanation:\n1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\n\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25."
    ],
    "constraints": "`1 <= customers.length <= 105`\n`1 <= arrivali, timei <= 104`\n`arrivali <= arrivali+1`"
  },
  {
    "id": "1702",
    "title": "Maximum Binary String After Change",
    "difficulty": "Medium",
    "explanation": "You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:\nOperation 1: If the number contains the substring `\"00\"`, you can replace it with `\"10\"`.\n\n\t\nFor example, `\"00010\" -> \"10010`\"\nOperation 2: If the number contains the substring `\"10\"`, you can replace it with `\"01\"`.\n\n\t\nFor example, `\"00010\" -> \"00001\"`\nReturn the maximum binary string you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation.",
    "examples": [
      "Input: binary = \"000110\"\nOutput: \"111011\"\nExplanation: A valid transformation sequence can be:\n\"000110\" -> \"000101\" \n\"000101\" -> \"100101\" \n\"100101\" -> \"110101\" \n\"110101\" -> \"110011\" \n\"110011\" -> \"111011\"",
      "Input: binary = \"01\"\nOutput: \"01\"\nExplanation: \"01\" cannot be transformed any further."
    ],
    "constraints": "`1 <= binary.length <= 105`\n`binary` consist of `'0'` and `'1'`."
  },
  {
    "id": "1703",
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "difficulty": "Hard",
    "explanation": "You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two adjacent indices and swap their values.\n\nReturn the minimum number of moves required so that `nums` has `k` consecutive `1`'s.",
    "examples": [
      "Input: nums = [1,0,0,1,0,1], k = 2\nOutput: 1\nExplanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.",
      "Input: nums = [1,0,0,0,0,0,1,1], k = 3\nOutput: 5\nExplanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].",
      "Input: nums = [1,1,0,1], k = 2\nOutput: 0\nExplanation: nums already has 2 consecutive 1's."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`nums[i]` is `0` or `1`.\n\n`1 <= k <= sum(nums)`"
  },
  {
    "id": "1704",
    "title": "Determine if String Halves Are Alike",
    "difficulty": "Easy",
    "explanation": "You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.\n\nTwo strings are alike if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.\n\nReturn `true` if `a` and `b` are alike. Otherwise, return `false`.",
    "examples": [
      "Input: s = \"book\"\nOutput: true\nExplanation: a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike.",
      "Input: s = \"textbook\"\nOutput: false\nExplanation: a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\n\nNotice that the vowel o is counted twice.",
      "Input: s = \"MerryChristmas\"\nOutput: false",
      "Input: s = \"AbCdEfGh\"\nOutput: true"
    ],
    "constraints": "`2 <= s.length <= 1000`\n`s.length` is even.\n\n`s` consists of uppercase and lowercase letters."
  },
  {
    "id": "1705",
    "title": "Maximum Number of Eaten Apples",
    "difficulty": "Medium",
    "explanation": "There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.\n\nYou decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.\n\nGiven two integer arrays `days` and `apples` of length `n`, return the maximum number of apples you can eat.",
    "examples": [
      "Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]\nOutput: 7\nExplanation: You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n\n- On the second day, you eat an apple that grew on the second day.\n\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.",
      "Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\nOutput: 5\nExplanation: You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n\n- Do nothing on the fouth and fifth days.\n\n- On the sixth and seventh days you eat apples that grew on the sixth day."
    ],
    "constraints": "`apples.length == n`\n`days.length == n`\n`1 <= n <= 2 * 104`\n`0 <= apples[i], days[i] <= 2 * 104`\n`days[i] = 0` if and only if `apples[i] = 0`."
  },
  {
    "id": "1706",
    "title": "Where Will the Ball Fall",
    "difficulty": "Medium",
    "explanation": "You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.\n\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\n\nA board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n\nA board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\n\nReturn an array `answer` of size `n` where `answer[i]` is the column that the ball falls out of at the bottom after dropping the ball from the `ith` column at the top, or `-1` if the ball gets stuck in the box.",
    "examples": [
      "Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\nOutput: [1,-1,-1,-1,-1]\nExplanation: This example is shown in the photo.\n\nBall b0 is dropped at column 0 and falls out of the box at column 1.\n\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\n\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\n\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\n\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.",
      "Input: grid = [[-1]]\nOutput: [-1]\nExplanation: The ball gets stuck against the left wall.",
      "Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\nOutput: [0,1,2,3,4,-1]"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 100`\n`grid[i][j]` is `1` or `-1`."
  },
  {
    "id": "1707",
    "title": "Maximum XOR With an Element From Array",
    "difficulty": "Hard",
    "explanation": "You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.\n\nReturn an integer array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query.",
    "examples": [
      "Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\nOutput: [3,3,7]\nExplanation:\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n\n2) 1 XOR 2 = 3.\n\n3) 5 XOR 2 = 7.",
      "Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\nOutput: [15,-1,5]"
    ],
    "constraints": "`1 <= nums.length, queries.length <= 105`\n`queries[i].length == 2`\n`0 <= nums[j], xi, mi <= 109`"
  },
  {
    "id": "1708",
    "title": "Largest Subarray Length K",
    "difficulty": "Easy",
    "explanation": "An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.\n\nFor example, consider `0`-indexing:\n`[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.\n\n`[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.\n\nA subarray is a contiguous subsequence of the array.\n\nGiven an integer array `nums` of distinct integers, return the largest subarray of `nums` of length `k`.",
    "examples": [
      "Input: nums = [1,4,5,2,3], k = 3\nOutput: [5,2,3]\nExplanation: The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3].\n\nOf these, [5,2,3] is the largest.",
      "Input: nums = [1,4,5,2,3], k = 4\nOutput: [4,5,2,3]\nExplanation: The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3].\n\nOf these, [4,5,2,3] is the largest.",
      "Input: nums = [1,4,5,2,3], k = 1\nOutput: [5]"
    ],
    "constraints": "`1 <= k <= nums.length <= 105`\n`1 <= nums[i] <= 109`\nAll the integers of `nums` are unique.\n\nFollow up: What if the integers in `nums` are not distinct?"
  },
  {
    "id": "1709",
    "title": "Biggest Window Between Visits",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1710",
    "title": "Maximum Units on a Truck",
    "difficulty": "Easy",
    "explanation": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:\n`numberOfBoxesi` is the number of boxes of type `i`.\n\n`numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.\n\nYou are also given an integer `truckSize`, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.\n\nReturn the maximum total number of units that can be put on the truck.",
    "examples": [
      "Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\nOutput: 8\nExplanation: There are:\n- 1 box of the first type that contains 3 units.\n\n- 2 boxes of the second type that contain 2 units each.\n\n- 3 boxes of the third type that contain 1 unit each.\n\nYou can take all the boxes of the first and second types, and one box of the third type.\n\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.",
      "Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\nOutput: 91"
    ],
    "constraints": "`1 <= boxTypes.length <= 1000`\n`1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`\n`1 <= truckSize <= 106`"
  },
  {
    "id": "1711",
    "title": "Count Good Meals",
    "difficulty": "Medium",
    "explanation": "A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.\n\nYou can pick any two different foods to make a good meal.\n\nGiven an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i​​​​​​th​​​​`​​​​ item of food, return the number of different good meals you can make from this list modulo `109 + 7`.\n\nNote that items with different indices are considered different even if they have the same deliciousness value.",
    "examples": [
      "Input: deliciousness = [1,3,5,7,9]\nOutput: 4\nExplanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).\n\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.",
      "Input: deliciousness = [1,1,1,3,3,3,7]\nOutput: 15\nExplanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
    ],
    "constraints": "`1 <= deliciousness.length <= 105`\n`0 <= deliciousness[i] <= 220`"
  },
  {
    "id": "1712",
    "title": "Ways to Split Array Into Three Subarrays",
    "difficulty": "Medium",
    "explanation": "A split of an integer array is good if:\nThe array is split into three non-empty contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.\n\nThe sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.\n\nGiven `nums`, an array of non-negative integers, return the number of good ways to split `nums`. As the number may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: nums = [1,1,1]\nOutput: 1\nExplanation: The only good way to split nums is [1] [1] [1].",
      "Input: nums = [1,2,2,2,5,0]\nOutput: 3\nExplanation: There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]",
      "Input: nums = [3,2,1]\nOutput: 0\nExplanation: There is no good way to split nums."
    ],
    "constraints": "`3 <= nums.length <= 105`\n`0 <= nums[i] <= 104`"
  },
  {
    "id": "1713",
    "title": "Minimum Operations to Make a Subsequence",
    "difficulty": "Hard",
    "explanation": "You are given an array `target` that consists of distinct integers and another integer array `arr` that can have duplicates.\n\nIn one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.\n\nReturn the minimum number of operations needed to make `target` a subsequence of `arr`.\n\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.",
    "examples": [
      "Input: target = [5,1,3], `arr` = [9,4,2,3,4]\nOutput: 2\nExplanation: You can add 5 and 1 in such a way that makes `arr` = [5,9,4,1,2,3,4], then target will be a subsequence of `arr`.",
      "Input: target = [6,4,8,1,3,2], `arr` = [4,7,6,2,3,8,6,1]\nOutput: 3"
    ],
    "constraints": "`1 <= target.length, arr.length <= 105`\n`1 <= target[i], arr[i] <= 109`\n`target` contains no duplicates."
  },
  {
    "id": "1714",
    "title": "Sum Of Special Evenly-Spaced Elements In Array",
    "difficulty": "Hard",
    "explanation": "You are given a 0-indexed integer array `nums` consisting of `n` non-negative integers.\n\nYou are also given an array `queries`, where `queries[i] = [xi, yi]`. The answer to the `ith` query is the sum of all `nums[j]` where `xi <= j < n` and `(j - xi)` is divisible by `yi`.\n\nReturn an array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query modulo `109 + 7`.",
    "examples": [
      "Input: nums = [0,1,2,3,4,5,6,7], queries = [[0,3],[5,1],[4,2]]\nOutput: [9,18,10]\nExplanation: The answers of the queries are as follows:\n1) The j indices that satisfy this query are 0, 3, and 6. nums[0] + nums[3] + nums[6] = 9\n2) The j indices that satisfy this query are 5, 6, and 7. nums[5] + nums[6] + nums[7] = 18\n3) The j indices that satisfy this query are 4 and 6. nums[4] + nums[6] = 10",
      "Input: nums = [100,200,101,201,102,202,103,203], queries = [[0,7]]\nOutput: [303]"
    ],
    "constraints": "`n == nums.length`\n`1 <= n <= 5 * 104`\n`0 <= nums[i] <= 109`\n`1 <= queries.length <= 1.5 * 105`\n`0 <= xi < n`\n`1 <= yi <= 5 * 104`"
  },
  {
    "id": "1715",
    "title": "Count Apples and Oranges",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1716",
    "title": "Calculate Money in Leetcode Bank",
    "difficulty": "Easy",
    "explanation": "Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.\n\nHe starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the previous Monday. \nGiven `n`, return the total amount of money he will have in the Leetcode bank at the end of the `nth` day.",
    "examples": [
      "Input: n = 4\nOutput: 10\nExplanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.",
      "Input: n = 10\nOutput: 37\nExplanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.",
      "Input: n = 20\nOutput: 96\nExplanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."
    ],
    "constraints": "`1 <= n <= 1000`"
  },
  {
    "id": "1717",
    "title": "Maximum Score From Removing Substrings",
    "difficulty": "Medium",
    "explanation": "You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.\n\nRemove substring `\"ab\"` and gain `x` points.\n\n\t\nFor example, when removing `\"ab\"` from `\"cabxbae\"` it becomes `\"cxbae\"`.\n\nRemove substring `\"ba\"` and gain `y` points.\n\n\t\nFor example, when removing `\"ba\"` from `\"cabxbae\"` it becomes `\"cabxe\"`.\n\nReturn the maximum points you can gain after applying the above operations on `s`.",
    "examples": [
      "Input: s = \"cdbcbbaaabab\", x = 4, y = 5\nOutput: 19\nExplanation:\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\n\nTotal score = 5 + 4 + 5 + 5 = 19.",
      "Input: s = \"aabbaaxybbaabb\", x = 5, y = 4\nOutput: 20"
    ],
    "constraints": "`1 <= s.length <= 105`\n`1 <= x, y <= 104`\n`s` consists of lowercase English letters."
  },
  {
    "id": "1718",
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, find a sequence that satisfies all of the following:\nThe integer `1` occurs once in the sequence.\n\nEach integer between `2` and `n` occurs twice in the sequence.\n\nFor every integer `i` between `2` and `n`, the distance between the two occurrences of `i` is exactly `i`.\n\nThe distance between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.\n\nReturn the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. \nA sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.",
    "examples": [
      "Input: n = 3\nOutput: [3,1,2,3,2]\nExplanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.",
      "Input: n = 5\nOutput: [5,3,1,4,3,5,2,4,2]"
    ],
    "constraints": "`1 <= n <= 20`"
  },
  {
    "id": "1719",
    "title": "Number Of Ways To Reconstruct A Tree",
    "difficulty": "Hard",
    "explanation": "You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:\nThere are no duplicates.\n\n`xi < yi`\nLet `ways` be the number of rooted trees that satisfy the following conditions:\nThe tree consists of nodes whose values appeared in `pairs`.\n\nA pair `[xi, yi]` exists in `pairs` if and only if `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.\n\nNote: the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\n\nReturn:\n`0` if `ways == 0`\n`1` if `ways == 1`\n`2` if `ways > 1`\nA rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\n\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.",
    "examples": [
      "Input: pairs = [[1,2],[2,3]]\nOutput: 1\nExplanation: There is exactly one valid rooted tree, which is shown in the above figure.",
      "Input: pairs = [[1,2],[2,3],[1,3]]\nOutput: 2\nExplanation: There are multiple valid rooted trees. Three of them are shown in the above figures.",
      "Input: pairs = [[1,2],[2,3],[2,4],[1,5]]\nOutput: 0\nExplanation: There are no valid rooted trees."
    ],
    "constraints": "`1 <= pairs.length <= 105`\n`1 <= xi < yi <= 500`\nThe elements in `pairs` are unique."
  },
  {
    "id": "1720",
    "title": "Decode XORed Array",
    "difficulty": "Easy",
    "explanation": "There is a hidden integer array `arr` that consists of `n` non-negative integers.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.\n\nYou are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.\n\nReturn the original array `arr`. It can be proved that the answer exists and is unique.",
    "examples": [
      "Input: encoded = [1,2,3], first = 1\nOutput: [1,0,2,1]\nExplanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]",
      "Input: encoded = [6,2,7,3], first = 4\nOutput: [4,2,0,7,4]"
    ],
    "constraints": "`2 <= n <= 104`\n`encoded.length == n - 1`\n`0 <= encoded[i] <= 105`\n`0 <= first <= 105`"
  },
  {
    "id": "1721",
    "title": "Swapping Nodes in a Linked List",
    "difficulty": "Medium",
    "explanation": "You are given the `head` of a linked list, and an integer `k`.\n\nReturn the head of the linked list after swapping the values of the `kth` node from the beginning and the `kth` node from the end (the list is 1-indexed).",
    "examples": [
      "Input: head = [1,2,3,4,5], k = 2\nOutput: [1,4,3,2,5]",
      "Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5\nOutput: [7,9,6,6,8,7,3,0,9,5]",
      "Input: head = [1], k = 1\nOutput: [1]",
      "Input: head = [1,2], k = 1\nOutput: [2,1]",
      "Input: head = [1,2,3], k = 2\nOutput: [1,2,3]"
    ],
    "constraints": "The number of nodes in the list is `n`.\n\n`1 <= k <= n <= 105`\n`0 <= Node.val <= 100`"
  },
  {
    "id": "1722",
    "title": "Minimize Hamming Distance After Swap Operations",
    "difficulty": "Medium",
    "explanation": "You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` (0-indexed) of array `source`. Note that you can swap elements at a specific pair of indices multiple times and in any order.\n\nThe Hamming distance of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` (0-indexed).\n\nReturn the minimum Hamming distance of `source` and `target` after performing any amount of swap operations on array `source`.",
    "examples": [
      "Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\nOutput: 1\nExplanation: source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3.",
      "Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\nOutput: 2\nExplanation: There are no allowed swaps.\n\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.",
      "Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\nOutput: 0"
    ],
    "constraints": "`n == source.length == target.length`\n`1 <= n <= 105`\n`1 <= source[i], target[i] <= 105`\n`0 <= allowedSwaps.length <= 105`\n`allowedSwaps[i].length == 2`\n`0 <= ai, bi <= n - 1`\n`ai != bi`"
  },
  {
    "id": "1723",
    "title": "Find Minimum Time to Finish All Jobs",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job.\n\nThere are `k` workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n\nReturn the minimum possible maximum working time of any assignment.",
    "examples": [
      "Input: jobs = [3,2,3], k = 3\nOutput: 3\nExplanation: By assigning each person one job, the maximum time is 3.",
      "Input: jobs = [1,2,4,7,8], k = 2\nOutput: 11\nExplanation: Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11."
    ],
    "constraints": "`1 <= k <= jobs.length <= 12`\n`1 <= jobs[i] <= 107`"
  },
  {
    "id": "1724",
    "title": "Checking Existence of Edge Length Limited Paths II",
    "difficulty": "Hard",
    "explanation": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be multiple edges between two nodes, and the graph may not be connected.\n\nImplement the `DistanceLimitedPathsExist` class:\n`DistanceLimitedPathsExist(int n, int[][] edgeList)` Initializes the class with an undirected graph.\n\n`boolean query(int p, int q, int limit)` Returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance strictly less than `limit`, and otherwise `false`.",
    "examples": [
      "Input\n[\"DistanceLimitedPathsExist\", \"query\", \"query\", \"query\", \"query\"]\n[[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]]\nOutput\n[null, true, false, true, false]\nExplanation\nDistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]);\ndistanceLimitedPathsExist.query(2, 3, 2); // return true. There is an edge from 2 to 3 of distance 1, which is less than 2.\n\ndistanceLimitedPathsExist.query(1, 3, 3); // return false. There is no way to go from 1 to 3 with distances strictly less than 3.\n\ndistanceLimitedPathsExist.query(2, 0, 3); // return true. There is a way to go from 2 to 0 with distance < 3: travel from 2 to 3 to 0.\n\ndistanceLimitedPathsExist.query(0, 5, 6); // return false. There are no paths from 0 to 5.\n\n\n`Constraints:`\n`2 <= n <= 104`\n`0 <= edgeList.length <= 104`\n`edgeList[i].length == 3`\n`0 <= ui, vi, p, q <= n-1`\n`ui != vi`\n`p != q`\n`1 <= disi, limit <= 109`\nAt most `104` calls will be made to `query`."
    ],
    "constraints": ""
  },
  {
    "id": "1725",
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "difficulty": "Easy",
    "explanation": "You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.\n\nYou can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.\n\nLet `maxLen` be the side length of the largest square you can obtain from any of the given rectangles.\n\nReturn the number of rectangles that can make a square with a side length of `maxLen`.",
    "examples": [
      "Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]\nOutput: 3\nExplanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].\n\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.",
      "Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]\nOutput: 3"
    ],
    "constraints": "`1 <= rectangles.length <= 1000`\n`rectangles[i].length == 2`\n`1 <= li, wi <= 109`\n`li != wi`"
  },
  {
    "id": "1726",
    "title": "Tuple with Same Product",
    "difficulty": "Medium",
    "explanation": "Given an array `nums` of distinct positive integers, return the number of tuples `(a, b, c, d)` such that `a * b = c * d` where `a`, `b`, `c`, and `d` are elements of `nums`, and `a != b != c != d`.",
    "examples": [
      "Input: nums = [2,3,4,6]\nOutput: 8\nExplanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)",
      "Input: nums = [1,2,4,5,10]\nOutput: 16\nExplanation: There are 16 valids tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)",
      "Input: nums = [2,3,4,6,8,12]\nOutput: 40",
      "Input: nums = [2,3,5,7]\nOutput: 0"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`1 <= nums[i] <= 104`\nAll elements in `nums` are distinct."
  },
  {
    "id": "1727",
    "title": "Largest Submatrix With Rearrangements",
    "difficulty": "Medium",
    "explanation": "You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the columns of the `matrix` in any order.\n\nReturn the area of the largest submatrix within `matrix` where every element of the submatrix is `1` after reordering the columns optimally.",
    "examples": [
      "Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]\nOutput: 4\nExplanation: You can rearrange the columns as shown above.\n\nThe largest submatrix of 1s, in bold, has an area of 4.",
      "Input: matrix = [[1,0,1,0,1]]\nOutput: 3\nExplanation: You can rearrange the columns as shown above.\n\nThe largest submatrix of 1s, in bold, has an area of 3.",
      "Input: matrix = [[1,1,0],[1,0,1]]\nOutput: 2\nExplanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.",
      "Input: matrix = [[0,0],[0,0]]\nOutput: 0\nExplanation: As there are no 1s, no submatrix of 1s can be formed and the area is 0."
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m * n <= 105`\n`matrix[i][j]` is `0` or `1`."
  },
  {
    "id": "1728",
    "title": "Cat and Mouse II",
    "difficulty": "Hard",
    "explanation": "A game is played by a cat and a mouse named Cat and Mouse.\n\nThe environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food.\n\nPlayers are represented by the characters `'C'`(Cat)`,'M'`(Mouse).\n\nFloors are represented by the character `'.'` and can be walked on.\n\nWalls are represented by the character `'#'` and cannot be walked on.\n\nFood is represented by the character `'F'` and can be walked on.\n\nThere is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n\nMouse and Cat play according to the following rules:\nMouse moves first, then they take turns to move.\n\nDuring each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.\n\n`catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n\nStaying in the same position is allowed.\n\nMouse can jump over Cat.\n\nThe game can end in 4 ways:\nIf Cat occupies the same position as Mouse, Cat wins.\n\nIf Cat reaches the food first, Cat wins.\n\nIf Mouse reaches the food first, Mouse wins.\n\nIf Mouse cannot get to the food within 1000 turns, Cat wins.\n\nGiven a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` if Mouse can win the game if both Cat and Mouse play optimally, otherwise return `false`.",
    "examples": [
      "Input: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2\nOutput: true\nExplanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.",
      "Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4\nOutput: true",
      "Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3\nOutput: false",
      "Input: grid = [\"C...#\",\"...#F\",\"....#\",\"M....\"], catJump = 2, mouseJump = 5\nOutput: false",
      "Input: grid = [\".M...\",\"..#..\",\"#..#.\",\"C#.#.\",\"...#F\"], catJump = 3, mouseJump = 1\nOutput: true"
    ],
    "constraints": "`rows == grid.length`\n`cols = grid[i].length`\n`1 <= rows, cols <= 8`\n`grid[i][j]` consist only of characters `'C'`, `'M'`, `'F'`, `'.'`, and `'#'`.\n\nThere is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n\n`1 <= catJump, mouseJump <= 8`"
  },
  {
    "id": "1729",
    "title": "Find Followers Count",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1730",
    "title": "Shortest Path to Get Food",
    "difficulty": "Medium",
    "explanation": "You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.\n\nYou are given an `m x n` character matrix, `grid`, of these different types of cells:\n`'*'` is your location. There is exactly one `'*'` cell.\n\n`'#'` is a food cell. There may be multiple food cells.\n\n`'O'` is free space, and you can travel through these cells.\n\n`'X'` is an obstacle, and you cannot travel through these cells.\n\nYou can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.\n\nReturn the length of the shortest path for you to reach any food cell. If there is no path for you to reach food, return `-1`.",
    "examples": [
      "Input: grid = [[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"O\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]\nOutput: 3\nExplanation: It takes 3 steps to reach the food.",
      "Input: grid = [[\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"#\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\"]]\nOutput: -1\nExplanation: It is not possible to reach the food.",
      "Input: grid = [[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"],[\"X\",\"*\",\"O\",\"X\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"O\",\"O\",\"X\",\"O\",\"O\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"O\",\"O\",\"#\",\"O\",\"X\"],[\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\",\"X\"]]\nOutput: 6\nExplanation: There can be multiple food cells. It only takes 6 steps to reach the bottom food.",
      "Input: grid = [[\"O\",\"*\"],[\"#\",\"O\"]]\nOutput: 2",
      "Input: grid = [[\"X\",\"*\"],[\"#\",\"X\"]]\nOutput: -1"
    ],
    "constraints": "`m == grid.length`\n`n == grid[i].length`\n`1 <= m, n <= 200`\n`grid[row][col]` is `'*'`, `'X'`, `'O'`, or `'#'`.\n\nThe `grid` contains exactly one `'*'`."
  },
  {
    "id": "1731",
    "title": "The Number of Employees Which Report to Each Employee",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1732",
    "title": "Find the Highest Altitude",
    "difficulty": "Easy",
    "explanation": "There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`.\n\nYou are given an integer array `gain` of length `n` where `gain[i]` is the net gain in altitude between points `i`​​​​​​ and `i + 1` for all (`0 <= i < n)`. Return the highest altitude of a point.",
    "examples": [
      "Input: gain = [-5,1,5,0,-7]\nOutput: 1\nExplanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.",
      "Input: gain = [-4,-3,-2,-1,4,3,2]\nOutput: 0\nExplanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0."
    ],
    "constraints": "`n == gain.length`\n`1 <= n <= 100`\n`-100 <= gain[i] <= 100`"
  },
  {
    "id": "1733",
    "title": "Minimum Number of People to Teach",
    "difficulty": "Medium",
    "explanation": "On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.\n\nYou are given an integer `n`, an array `languages`, and an array `friendships` where:\nThere are `n` languages numbered `1` through `n`,\n`languages[i]` is the set of languages the `i​​​​​​th`​​​​ user knows, and\n`friendships[i] = [u​​​​​​i​​​, v​​​​​​i]` denotes a friendship between the users `u​​​​​​​​​​​i`​​​​​ and `vi`.\n\nYou can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.\n\nNote that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.",
    "examples": [
      "Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\nOutput: 1\nExplanation: You can either teach user 1 the second language or user 2 the first language.",
      "Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\nOutput: 2\nExplanation: Teach the third language to users 1 and 3, yielding two users to teach."
    ],
    "constraints": "`2 <= n <= 500`\n`languages.length == m`\n`1 <= m <= 500`\n`1 <= languages[i].length <= n`\n`1 <= languages[i][j] <= n`\n`1 <= u​​​​​​i < v​​​​​​i <= languages.length`\n`1 <= friendships.length <= 500`\nAll tuples `(u​​​​​i, v​​​​​​i)` are unique\n`languages[i]` contains only unique values"
  },
  {
    "id": "1734",
    "title": "Decode XORed Permutation",
    "difficulty": "Medium",
    "explanation": "There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always odd.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.\n\nGiven the `encoded` array, return the original array `perm`. It is guaranteed that the answer exists and is unique.",
    "examples": [
      "Input: encoded = [3,1]\nOutput: [1,2,3]\nExplanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]",
      "Input: encoded = [6,5,4,6]\nOutput: [2,4,1,5,3]"
    ],
    "constraints": "`3 <= n < 105`\n`n` is odd.\n\n`encoded.length == n - 1`"
  },
  {
    "id": "1735",
    "title": "Count Ways to Make Array With Product",
    "difficulty": "Hard",
    "explanation": "You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways modulo `109 + 7`.\n\nReturn an integer array `answer` where `answer.length == queries.length`, and `answer[i]` is the answer to the `ith` query.",
    "examples": [
      "Input: queries = [[2,6],[5,1],[73,660]]\nOutput: [4,1,50734910]\nExplanation: Each query is independent.\n\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.",
      "Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\nOutput: [1,2,3,10,5]"
    ],
    "constraints": "`1 <= queries.length <= 104 `\n`1 <= ni, ki <= 104`"
  },
  {
    "id": "1736",
    "title": "Latest Time by Replacing Hidden Digits",
    "difficulty": "Easy",
    "explanation": "You are given a string `time` in the form of ` hh:mm`, where some of the digits in the string are hidden (represented by `?`).\n\nThe valid times are those inclusively between `00:00` and `23:59`.\n\nReturn the latest valid time you can get from `time` by replacing the hidden digits.",
    "examples": [
      "Input: time = \"2?:?0\"\nOutput: \"23:50\"\nExplanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.",
      "Input: time = \"0?:3?\"\nOutput: \"09:39\"",
      "Input: time = \"1?:22\"\nOutput: \"19:22\""
    ],
    "constraints": "`time` is in the format `hh:mm`.\n\nIt is guaranteed that you can produce a valid time from the given string."
  },
  {
    "id": "1737",
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "difficulty": "Medium",
    "explanation": "You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to any lowercase letter.\n\nYour goal is to satisfy one of the following three conditions:\nEvery letter in `a` is strictly less than every letter in `b` in the alphabet.\n\nEvery letter in `b` is strictly less than every letter in `a` in the alphabet.\n\nBoth `a` and `b` consist of only one distinct letter.\n\nReturn the minimum number of operations needed to achieve your goal.",
    "examples": [
      "Input: a = \"aba\", b = \"caa\"\nOutput: 2\nExplanation: Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\n\nThe best way was done in 2 operations (either condition 1 or condition 3).",
      "Input: a = \"dabadd\", b = \"cda\"\nOutput: 3\nExplanation: The best way is to make condition 1 true by changing b to \"eee\"."
    ],
    "constraints": "`1 <= a.length, b.length <= 105`\n`a` and `b` consist only of lowercase letters."
  },
  {
    "id": "1738",
    "title": "Find Kth Largest XOR Coordinate Value",
    "difficulty": "Medium",
    "explanation": "You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.\n\nThe value of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` (0-indexed).\n\nFind the `kth` largest value (1-indexed) of all the coordinates of `matrix`.",
    "examples": [
      "Input: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.",
      "Input: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.",
      "Input: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.",
      "Input: matrix = [[5,2],[1,6]], k = 4\nOutput: 0\nExplanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value."
    ],
    "constraints": "`m == matrix.length`\n`n == matrix[i].length`\n`1 <= m, n <= 1000`\n`0 <= matrix[i][j] <= 106`\n`1 <= k <= m * n`"
  },
  {
    "id": "1739",
    "title": "Building Boxes",
    "difficulty": "Hard",
    "explanation": "You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\nYou can place the boxes anywhere on the floor.\n\nIf box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` must either be adjacent to another box or to a wall.\n\nGiven an integer `n`, return the minimum possible number of boxes touching the floor.",
    "examples": [
      "Input: n = 3\nOutput: 3\nExplanation: The figure above is for the placement of the three boxes.\n\nThese boxes are placed in the corner of the room, where the corner is on the left side.",
      "Input: n = 4\nOutput: 3\nExplanation: The figure above is for the placement of the four boxes.\n\nThese boxes are placed in the corner of the room, where the corner is on the left side.",
      "Input: n = 10\nOutput: 6\nExplanation: The figure above is for the placement of the ten boxes.\n\nThese boxes are placed in the corner of the room, where the corner is on the back side."
    ],
    "constraints": "`1 <= n <= 109`"
  },
  {
    "id": "1740",
    "title": "Find Distance in a Binary Tree",
    "difficulty": "Medium",
    "explanation": "Given the root of a binary tree and two integers `p` and `q`, return the distance between the nodes of value `p` and value `q` in the tree.\n\nThe distance between two nodes is the number of edges on the path from one to the other.",
    "examples": [
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0\nOutput: 3\nExplanation: There are 3 edges between 5 and 0: 5-3-1-0.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7\nOutput: 2\nExplanation: There are 2 edges between 5 and 7: 5-2-7.",
      "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5\nOutput: 0\nExplanation: The distance between a node and itself is 0."
    ],
    "constraints": "The number of nodes in the tree is in the range `[1, 104]`.\n\n`0 <= Node.val <= 109`\nAll `Node.val` are unique.\n\n`p` and `q` are values in the tree."
  },
  {
    "id": "1741",
    "title": "Find Total Time Spent by Each Employee",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1742",
    "title": "Maximum Number of Balls in a Box",
    "difficulty": "Easy",
    "explanation": "You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` inclusive (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.\n\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.\n\nGiven two integers `lowLimit` and `highLimit`, return the number of balls in the box with the most balls.",
    "examples": [
      "Input: lowLimit = 1, highLimit = 10\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\n\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\n\nBox 1 has the most number of balls with 2 balls.",
      "Input: lowLimit = 5, highLimit = 15\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\n\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\n\nBoxes 5 and 6 have the most number of balls with 2 balls in each.",
      "Input: lowLimit = 19, highLimit = 28\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\n\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\n\nBox 10 has the most number of balls with 2 balls."
    ],
    "constraints": "`1 <= lowLimit <= highLimit <= 105`"
  },
  {
    "id": "1743",
    "title": "Restore the Array From Adjacent Pairs",
    "difficulty": "Medium",
    "explanation": "There is an integer array `nums` that consists of `n` unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.\n\nYou are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.\n\nIt is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear in any order.\n\nReturn the original array `nums`. If there are multiple solutions, return any of them.",
    "examples": [
      "Input: adjacentPairs = [[2,1],[3,4],[3,2]]\nOutput: [1,2,3,4]\nExplanation: This array has all its adjacent pairs in adjacentPairs.\n\nNotice that adjacentPairs[i] may not be in left-to-right order.",
      "Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]\nOutput: [-2,4,1,-3]\nExplanation: There can be negative numbers.\n\nAnother solution is [-3,1,4,-2], which would also be accepted.",
      "Input: adjacentPairs = [[100000,-100000]]\nOutput: [100000,-100000]"
    ],
    "constraints": "`nums.length == n`\n`adjacentPairs.length == n - 1`\n`adjacentPairs[i].length == 2`\n`2 <= n <= 105`\n`-105 <= nums[i], ui, vi <= 105`\nThere exists some `nums` that has `adjacentPairs` as its pairs."
  },
  {
    "id": "1744",
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "difficulty": "Medium",
    "explanation": "You are given a (0-indexed) array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.\n\nYou play a game with the following rules:\nYou start eating candies on day `0`.\n\nYou cannot eat any candy of type `i` unless you have eaten all candies of type `i - 1`.\n\nYou must eat at least one candy per day until you have eaten all the candies.\n\nConstruct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating more than `dailyCapi` candies on any day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.\n\nReturn the constructed array `answer`.",
    "examples": [
      "Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\nOutput: [true,false,true]\nExplanation:\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n\n2- You can eat at most 4 candies each day.\n\n   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n\n   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.",
      "Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\nOutput: [false,true,true,false,false]"
    ],
    "constraints": "`1 <= candiesCount.length <= 105`\n`1 <= candiesCount[i] <= 105`\n`1 <= queries.length <= 105`\n`queries[i].length == 3`\n`0 <= favoriteTypei < candiesCount.length`\n`0 <= favoriteDayi <= 109`\n`1 <= dailyCapi <= 109`"
  },
  {
    "id": "1745",
    "title": "Palindrome Partitioning IV",
    "difficulty": "Hard",
    "explanation": "Given a string `s`, return `true` if it is possible to split the string `s` into three non-empty palindromic substrings. Otherwise, return `false`.​​​​​\nA string is said to be palindrome if it the same string when reversed.",
    "examples": [
      "Input: s = \"abcbdd\"\nOutput: true\nExplanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.",
      "Input: s = \"bcbddxy\"\nOutput: false\nExplanation: s cannot be split into 3 palindromes."
    ],
    "constraints": "`3 <= s.length <= 2000`\n`s`​​​​​​ consists only of lowercase English letters."
  },
  {
    "id": "1746",
    "title": "Maximum Subarray Sum After One Operation",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums`. You must perform exactly one operation where you can replace one element `nums[i]` with `nums[i] * nums[i]`. \nReturn the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.",
    "examples": [
      "Input: nums = [2,-1,-4,-3]\nOutput: 17\nExplanation: You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.",
      "Input: nums = [1,-1,1,1,-1,-1,1]\nOutput: 4\nExplanation: You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "1747",
    "title": "Leetflex Banned Accounts",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1748",
    "title": "Sum of Unique Elements",
    "difficulty": "Easy",
    "explanation": "You are given an integer array `nums`. The unique elements of an array are the elements that appear exactly once in the array.\n\nReturn the sum of all the unique elements of `nums`.",
    "examples": [
      "Input: nums = [1,2,3,2]\nOutput: 4\nExplanation: The unique elements are [1,3], and the sum is 4.",
      "Input: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: There are no unique elements, and the sum is 0.",
      "Input: nums = [1,2,3,4,5]\nOutput: 15\nExplanation: The unique elements are [1,2,3,4,5], and the sum is 15."
    ],
    "constraints": "`1 <= nums.length <= 100`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "1749",
    "title": "Maximum Absolute Sum of Any Subarray",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums`. The absolute sum of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.\n\nReturn the maximum absolute sum of any (possibly empty) subarray of `nums`.\n\nNote that `abs(x)` is defined as follows:\nIf `x` is a negative integer, then `abs(x) = -x`.\n\nIf `x` is a non-negative integer, then `abs(x) = x`.",
    "examples": [
      "Input: nums = [1,-3,2,3,-4]\nOutput: 5\nExplanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.",
      "Input: nums = [2,-5,1,-4,3,-2]\nOutput: 8\nExplanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`-104 <= nums[i] <= 104`"
  },
  {
    "id": "1750",
    "title": "Minimum Length of String After Deleting Similar Ends",
    "difficulty": "Medium",
    "explanation": "Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:\nPick a non-empty prefix from the string `s` where all the characters in the prefix are equal.\n\nPick a non-empty suffix from the string `s` where all the characters in this suffix are equal.\n\nThe prefix and the suffix should not intersect at any index.\n\nThe characters from the prefix and suffix must be the same.\n\nDelete both the prefix and the suffix.\n\nReturn the minimum length of `s` after performing the above operation any number of times (possibly zero times).",
    "examples": [
      "Input: s = \"ca\"\nOutput: 2\nExplanation: You can't remove any characters, so the string stays as is.",
      "Input: s = \"cabaabac\"\nOutput: 0\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\".",
      "Input: s = \"aabccabba\"\nOutput: 3\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\"."
    ],
    "constraints": "`1 <= s.length <= 105`\n`s` only consists of characters `'a'`, `'b'`, and `'c'`."
  },
  {
    "id": "1751",
    "title": "Maximum Number of Events That Can Be Attended II",
    "difficulty": "Hard",
    "explanation": "You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.\n\nYou can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.\n\nReturn the maximum sum of values that you can receive by attending events.",
    "examples": [
      "Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\nOutput: 7\nExplanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.",
      "Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\nOutput: 10\nExplanation: Choose event 2 for a total value of 10.\n\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.",
      "Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\nOutput: 9\nExplanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three."
    ],
    "constraints": "`1 <= k <= events.length`\n`1 <= k * events.length <= 106`\n`1 <= startDayi <= endDayi <= 109`\n`1 <= valuei <= 106`"
  },
  {
    "id": "1752",
    "title": "Check if Array Is Sorted and Rotated",
    "difficulty": "Easy",
    "explanation": "Given an array `nums`, return `true` if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return `false`.\n\nThere may be duplicates in the original array.\n\nNote: An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.",
    "examples": [
      "Input: nums = [3,4,5,1,2]\nOutput: true\nExplanation: [1,2,3,4,5] is the original sorted array.\n\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].",
      "Input: nums = [2,1,3,4]\nOutput: false\nExplanation: There is no sorted array once rotated that can make nums.",
      "Input: nums = [1,2,3]\nOutput: true\nExplanation: [1,2,3] is the original sorted array.\n\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.",
      "Input: nums = [1,1,1]\nOutput: true\nExplanation: [1,1,1] is the original sorted array.\n\nYou can rotate any number of positions to make nums.",
      "Input: nums = [2,1]\nOutput: true\nExplanation: [1,2] is the original sorted array.\n\nYou can rotate the array by x = 5 positions to begin on the element of value 2: [2,1]."
    ],
    "constraints": "`1 <= nums.length <= 100`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "1753",
    "title": "Maximum Score From Removing Stones",
    "difficulty": "Medium",
    "explanation": "You are playing a solitaire game with three piles of stones of sizes `a`​​​​​​, `b`,​​​​​​ and `c`​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add `1` point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\n\nGiven three integers `a`​​​​​, `b`,​​​​​ and `c`​​​​​, return the maximum score you can get.",
    "examples": [
      "Input: a = 2, b = 4, c = 6\nOutput: 6\nExplanation: The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.",
      "Input: a = 4, b = 4, c = 6\nOutput: 7\nExplanation: The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.",
      "Input: a = 1, b = 8, c = 8\nOutput: 8\nExplanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\n\nAfter that, there are fewer than two non-empty piles, so the game ends."
    ],
    "constraints": "`1 <= a, b, c <= 105`"
  },
  {
    "id": "1754",
    "title": "Largest Merge Of Two Strings",
    "difficulty": "Medium",
    "explanation": "You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose one of the following options:\nIf `word1` is non-empty, append the first character in `word1` to `merge` and delete it from `word1`.\n\n\t\nFor example, if `word1 = \"abc\" `and `merge = \"dv\"`, then after choosing this operation, `word1 = \"bc\"` and `merge = \"dva\"`.\n\nIf `word2` is non-empty, append the first character in `word2` to `merge` and delete it from `word2`.\n\n\t\nFor example, if `word2 = \"abc\" `and `merge = \"\"`, then after choosing this operation, `word2 = \"bc\"` and `merge = \"a\"`.\n\nReturn the lexicographically largest `merge` you can construct.\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.",
    "examples": [
      "Input: word1 = \"cabaa\", word2 = \"bcaaa\"\nOutput: \"cbcabaaaaa\"\nExplanation: One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge.",
      "Input: word1 = \"abcabc\", word2 = \"abdcaba\"\nOutput: \"abdcabcabcaba\""
    ],
    "constraints": "`1 <= word1.length, word2.length <= 3000`\n`word1` and `word2` consist only of lowercase English letters."
  },
  {
    "id": "1755",
    "title": "Closest Subsequence Sum",
    "difficulty": "Hard",
    "explanation": "You are given an integer array `nums` and an integer `goal`.\n\nYou want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to minimize the absolute difference `abs(sum - goal)`.\n\nReturn the minimum possible value of `abs(sum - goal)`.\n\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.",
    "examples": [
      "Input: nums = [5,-7,3,5], goal = 6\nOutput: 0\nExplanation: Choose the whole array as a subsequence, with a sum of 6.\n\nThis is equal to the goal, so the absolute difference is 0.",
      "Input: nums = [7,-9,15,-2], goal = -5\nOutput: 1\nExplanation: Choose the subsequence [7,-9,-2], with a sum of -4.\n\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.",
      "Input: nums = [1,2,3], goal = -7\nOutput: 7"
    ],
    "constraints": "`1 <= nums.length <= 40`\n`-107 <= nums[i] <= 107`\n`-109 <= goal <= 109`"
  },
  {
    "id": "1756",
    "title": "Design Most Recently Used Queue",
    "difficulty": "Medium",
    "explanation": "Design a queue-like data structure that moves the most recently used element to the end of the queue.\n\nImplement the `MRUQueue` class:\n`MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`.\n\n`fetch(int k)` moves the `kth` element (1-indexed) to the end of the queue and returns it.",
    "examples": [
      "Input:\n[\"MRUQueue\", \"fetch\", \"fetch\", \"fetch\", \"fetch\"]\n[[8], [3], [5], [2], [8]]\nOutput:\n[null, 3, 6, 2, 2]\nExplanation:\nMRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].\n\nmRUQueue.fetch(3); // Moves the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.\n\nmRUQueue.fetch(5); // Moves the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.\n\nmRUQueue.fetch(2); // Moves the 2nd element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.\n\nmRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it."
    ],
    "constraints": "`1 <= n <= 2000`\n`1 <= k <= n`\nAt most `2000` calls will be made to `fetch`.\n\nFollow up: Finding an `O(n)` algorithm per `fetch` is a bit easy. Can you find an algorithm with a better complexity for each `fetch` call?"
  },
  {
    "id": "1757",
    "title": "Recyclable and Low Fat Products",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1758",
    "title": "Minimum Changes To Make Alternating Binary String",
    "difficulty": "Easy",
    "explanation": "You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.\n\nThe string is called alternating if no two adjacent characters are equal. For example, the string `\"010\"` is alternating, while the string `\"0100\"` is not.\n\nReturn the minimum number of operations needed to make `s` alternating.",
    "examples": [
      "Input: s = \"0100\"\nOutput: 1\nExplanation: If you change the last character to '1', s will be \"0101\", which is alternating.",
      "Input: s = \"10\"\nOutput: 0\nExplanation: s is already alternating.",
      "Input: s = \"1111\"\nOutput: 2\nExplanation: You need two operations to reach \"0101\" or \"1010\"."
    ],
    "constraints": "`1 <= s.length <= 104`\n`s[i]` is either `'0'` or `'1'`."
  },
  {
    "id": "1759",
    "title": "Count Number of Homogenous Substrings",
    "difficulty": "Medium",
    "explanation": "Given a string `s`, return the number of homogenous substrings of `s`. Since the answer may be too large, return it modulo `109 + 7`.\n\nA string is homogenous if all the characters of the string are the same.\n\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
      "Input: s = \"abbcccaa\"\nOutput: 13\nExplanation: The homogenous substrings are listed as below:\n\"a\"   appears 3 times.\n\n\"aa\"  appears 1 time.\n\n\"b\"   appears 2 times.\n\n\"bb\"  appears 1 time.\n\n\"c\"   appears 3 times.\n\n\"cc\"  appears 2 times.\n\n\"ccc\" appears 1 time.\n\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.",
      "Input: s = \"xy\"\nOutput: 2\nExplanation: The homogenous substrings are \"x\" and \"y\".",
      "Input: s = \"zzzzz\"\nOutput: 15"
    ],
    "constraints": "`1 <= s.length <= 105`\n`s` consists of lowercase letters."
  },
  {
    "id": "1760",
    "title": "Minimum Limit of Balls in a Bag",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.\n\nYou can perform the following operation at most `maxOperations` times:\nTake any bag of balls and divide it into two new bags with a positive number of balls.\n\n\t\nFor example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.\n\nYour penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.\n\nReturn the minimum possible penalty after performing the operations.",
    "examples": [
      "Input: nums = [9], maxOperations = 2\nOutput: 3\nExplanation: \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].\n\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].\n\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.",
      "Input: nums = [2,4,8,2], maxOperations = 4\nOutput: 2\nExplanation:\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].\n\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].\n\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].\n\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].\n\nThe bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.",
      "Input: nums = [7,17], maxOperations = 2\nOutput: 7"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= maxOperations, nums[i] <= 109`"
  },
  {
    "id": "1761",
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "difficulty": "Hard",
    "explanation": "You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.\n\nA connected trio is a set of three nodes where there is an edge between every pair of them.\n\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\n\nReturn the minimum degree of a connected trio in the graph, or `-1` if the graph has no connected trios.",
    "examples": [
      "Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\nOutput: 3\nExplanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.",
      "Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\nOutput: 0\nExplanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n\n2) [2,5,6] with degree 2.\n\n3) [5,6,7] with degree 2."
    ],
    "constraints": "`2 <= n <= 400`\n`edges[i].length == 2`\n`1 <= edges.length <= n * (n-1) / 2`\n`1 <= ui, vi <= n`\n`ui != vi`\nThere are no repeated edges."
  },
  {
    "id": "1762",
    "title": "Buildings With an Ocean View",
    "difficulty": "Medium",
    "explanation": "There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line.\n\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.\n\nReturn a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.",
    "examples": [
      "Input: heights = [4,2,3,1]\nOutput: [0,2,3]\nExplanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.",
      "Input: heights = [4,3,2,1]\nOutput: [0,1,2,3]\nExplanation: All the buildings have an ocean view.",
      "Input: heights = [1,3,2,4]\nOutput: [3]\nExplanation: Only building 3 has an ocean view.",
      "Input: heights = [2,2,2,2]\nOutput: [3]\nExplanation: Buildings cannot see the ocean if there are buildings of the same height to its right."
    ],
    "constraints": "`1 <= heights.length <= 105`\n`1 <= heights[i] <= 109`"
  },
  {
    "id": "1763",
    "title": "Longest Nice Substring",
    "difficulty": "Easy",
    "explanation": "A string `s` is nice if, for every letter of the alphabet that `s` contains, it appears both in uppercase and lowercase. For example, `\"abABB\"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA\"` is not because `'b'` appears, but `'B'` does not.\n\nGiven a string `s`, return the longest substring of `s` that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.",
    "examples": [
      "Input: s = \"YazaAay\"\nOutput: \"aAa\"\nExplanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\n\"aAa\" is the longest nice substring.",
      "Input: s = \"Bb\"\nOutput: \"Bb\"\nExplanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring.",
      "Input: s = \"c\"\nOutput: \"\"\nExplanation: There are no nice substrings.",
      "Input: s = \"dDzeE\"\nOutput: \"dD\"\nExplanation: Both \"dD\" and \"eE\" are the longest nice substrings.\n\nAs there are multiple longest nice substrings, return \"dD\" since it occurs earlier."
    ],
    "constraints": "`1 <= s.length <= 100`\n`s` consists of uppercase and lowercase English letters."
  },
  {
    "id": "1764",
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "difficulty": "Medium",
    "explanation": "You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.\n\nYou are asked if you can choose `n` disjoint subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (0-indexed), and if `i > 0`, the `(i-1)th` subarray appears before the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).\n\nReturn `true` if you can do this task, and `false` otherwise.\n\nNote that the subarrays are disjoint if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.",
    "examples": [
      "Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]\nOutput: true\nExplanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0].\n\nThese subarrays are disjoint as they share no common nums[k] element.",
      "Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]\nOutput: false\nExplanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.\n\n[10,-2] must come before [1,2,3,4].",
      "Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]\nOutput: false\nExplanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.\n\nThey share a common elements nums[4] (0-indexed)."
    ],
    "constraints": "`groups.length == n`\n`1 <= n <= 103`\n`1 <= groups[i].length, sum(groups[i].length) <= 103`\n`1 <= nums.length <= 103`\n`-107 <= groups[i][j], nums[k] <= 107`"
  },
  {
    "id": "1765",
    "title": "Map of Highest Peak",
    "difficulty": "Medium",
    "explanation": "You are given an integer matrix `isWater` of size `m x n` that represents a map of land and water cells.\n\nIf `isWater[i][j] == 0`, cell `(i, j)` is a land cell.\n\nIf `isWater[i][j] == 1`, cell `(i, j)` is a water cell.\n\nYou must assign each cell a height in a way that follows these rules:\nThe height of each cell must be non-negative.\n\nIf the cell is a water cell, its height must be `0`.\n\nAny two adjacent cells must have an absolute height difference of at most `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\nFind an assignment of heights such that the maximum height in the matrix is maximized.\n\nReturn an integer matrix `height` of size `m x n` where `height[i][j]` is cell `(i, j)`'s height. If there are multiple solutions, return any of them.",
    "examples": [
      "Input: isWater = [[0,1],[0,0]]\nOutput: [[1,0],[2,1]]\nExplanation: The image shows the assigned heights of each cell.\n\nThe blue cell is the water cell, and the green cells are the land cells.",
      "Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]\nOutput: [[1,1,0],[0,1,1],[1,2,2]]\nExplanation: A height of 2 is the maximum possible height of any assignment.\n\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted."
    ],
    "constraints": "`m == isWater.length`\n`n == isWater[i].length`\n`1 <= m, n <= 1000`\n`isWater[i][j]` is `0` or `1`.\n\nThere is at least one water cell."
  },
  {
    "id": "1766",
    "title": "Tree of Coprimes",
    "difficulty": "Hard",
    "explanation": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the root of the tree is node `0`.\n\nTo represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.\n\nTwo values `x` and `y` are coprime if `gcd(x, y) == 1` where `gcd(x, y)` is the greatest common divisor of `x` and `y`.\n\nAn ancestor of a node `i` is any other node on the shortest path from node `i` to the root. A node is not considered an ancestor of itself.\n\nReturn an array `ans` of size `n`, where `ans[i]` is the closest ancestor to node `i` such that `nums[i]` and `nums[ans[i]]` are coprime, or `-1` if there is no such ancestor.",
    "examples": [
      "Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\nOutput: [-1,0,0,1]\nExplanation: In the above figure, each node's value is in parentheses.\n\n- Node 0 has no coprime ancestors.\n\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n\n- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.",
      "Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\nOutput: [-1,0,-1,0,0,0,-1]"
    ],
    "constraints": "`nums.length == n`\n`1 <= nums[i] <= 50`\n`1 <= n <= 105`\n`edges.length == n - 1`\n`edges[j].length == 2`\n`0 <= uj, vj < n`\n`uj != vj`"
  },
  {
    "id": "1767",
    "title": "Find the Subtasks That Did Not Execute",
    "difficulty": "Hard",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1768",
    "title": "Merge Strings Alternately",
    "difficulty": "Easy",
    "explanation": "You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\nReturn the merged string.",
    "examples": [
      "Input: word1 = \"abc\", word2 = \"pqr\"\nOutput: \"apbqcr\"\nExplanation: The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r",
      "Input: word1 = \"ab\", word2 = \"pqrs\"\nOutput: \"apbqrs\"\nExplanation: Notice that as word2 is longer, \"rs\" is appended to the end.\n\nword1:  a   b \nword2:    p   q   r   s\nmerged: a p b q   r   s",
      "Input: word1 = \"abcd\", word2 = \"pq\"\nOutput: \"apbqcd\"\nExplanation: Notice that as word1 is longer, \"cd\" is appended to the end.\n\nword1:  a   b   c   d\nword2:    p   q \nmerged: a p b q c   d"
    ],
    "constraints": "`1 <= word1.length, word2.length <= 100`\n`word1` and `word2` consist of lowercase English letters."
  },
  {
    "id": "1769",
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "difficulty": "Medium",
    "explanation": "You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is empty, and `'1'` if it contains one ball.\n\nIn one operation, you can move one ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.\n\nReturn an array `answer` of size `n`, where `answer[i]` is the minimum number of operations needed to move all the balls to the `ith` box.\n\nEach `answer[i]` is calculated considering the initial state of the boxes.",
    "examples": [
      "Input: boxes = \"110\"\nOutput: [1,1,3]\nExplanation: The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.",
      "Input: boxes = \"001011\"\nOutput: [11,8,5,4,3,4]"
    ],
    "constraints": "`n == boxes.length`\n`1 <= n <= 2000`\n`boxes[i]` is either `'0'` or `'1'`."
  },
  {
    "id": "1770",
    "title": "Maximum Score from Performing Multiplication Operations",
    "difficulty": "Medium",
    "explanation": "You are given two integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. The arrays are 1-indexed.\n\nYou begin with a score of `0`. You want to perform exactly `m` operations. On the `ith` operation (1-indexed), you will:\nChoose one integer `x` from either the start or the end of the array `nums`.\n\nAdd `multipliers[i] * x` to your score.\n\nRemove `x` from the array `nums`.\n\nReturn the maximum score after performing `m` operations.",
    "examples": [
      "Input: nums = [1,2,3], multipliers = [3,2,1]\nOutput: 14\nExplanation: An optimal solution is as follows:\n- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.\n\n- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.\n\n- Choose from the end, [1], adding 1 * 1 = 1 to the score.\n\nThe total score is 9 + 4 + 1 = 14.",
      "Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\nOutput: 102\nExplanation: An optimal solution is as follows:\n- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n\n- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n\n- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.\n\n- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.\n\n- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102."
    ],
    "constraints": "`n == nums.length`\n`m == multipliers.length`\n`1 <= m <= 103`\n`m <= n <= 105`` `\n`-1000 <= nums[i], multipliers[i] <= 1000`"
  },
  {
    "id": "1771",
    "title": "Maximize Palindrome Length From Subsequences",
    "difficulty": "Hard",
    "explanation": "You are given two strings, `word1` and `word2`. You want to construct a string in the following manner:\nChoose some non-empty subsequence `subsequence1` from `word1`.\n\nChoose some non-empty subsequence `subsequence2` from `word2`.\n\nConcatenate the subsequences: `subsequence1 + subsequence2`, to make the string.\n\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return `0`.\n\nA subsequence of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.\n\nA palindrome is a string that reads the same forward as well as backward.",
    "examples": [
      "Input: word1 = \"cacb\", word2 = \"cbba\"\nOutput: 5\nExplanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.",
      "Input: word1 = \"ab\", word2 = \"ab\"\nOutput: 3\nExplanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.",
      "Input: word1 = \"aa\", word2 = \"bb\"\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0."
    ],
    "constraints": "`1 <= word1.length, word2.length <= 1000`\n`word1` and `word2` consist of lowercase English letters."
  },
  {
    "id": "1772",
    "title": "Sort Features by Popularity",
    "difficulty": "Medium",
    "explanation": "You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words.\n\nThe popularity of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.\n\nReturn the features in sorted order.",
    "examples": [
      "Input: features = [\"cooler\",\"lock\",\"touch\"], responses = [\"i like cooler cooler\",\"lock touch cool\",\"locker like touch\"]\nOutput: [\"touch\",\"cooler\",\"lock\"]\nExplanation: appearances(\"cooler\") = 1, appearances(\"lock\") = 1, appearances(\"touch\") = 2. Since \"cooler\" and \"lock\" both had 1 appearance, \"cooler\" comes first because \"cooler\" came first in the features array.",
      "Input: features = [\"a\",\"aa\",\"b\",\"c\"], responses = [\"a\",\"a aa\",\"a a a a a\",\"b a\"]\nOutput: [\"a\",\"aa\",\"b\",\"c\"]"
    ],
    "constraints": "`1 <= features.length <= 104`\n`1 <= features[i].length <= 10`\n`features` contains no duplicates.\n\n`features[i]` consists of lowercase letters.\n\n`1 <= responses.length <= 102`\n`1 <= responses[i].length <= 103`\n`responses[i]` consists of lowercase letters and spaces.\n\n`responses[i]` contains no two consecutive spaces.\n\n`responses[i]` has no leading or trailing spaces."
  },
  {
    "id": "1773",
    "title": "Count Items Matching a Rule",
    "difficulty": "Easy",
    "explanation": "You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.\n\nThe `ith` item is said to match the rule if one of the following is true:\n`ruleKey == \"type\"` and `ruleValue == typei`.\n\n`ruleKey == \"color\"` and `ruleValue == colori`.\n\n`ruleKey == \"name\"` and `ruleValue == namei`.\n\nReturn the number of items that match the given rule.",
    "examples": [
      "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"\nOutput: 1\nExplanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].",
      "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"\nOutput: 2\nExplanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."
    ],
    "constraints": "`1 <= items.length <= 104`\n`1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`\n`ruleKey` is equal to either `\"type\"`, `\"color\"`, or `\"name\"`.\n\nAll strings consist only of lowercase letters."
  },
  {
    "id": "1774",
    "title": "Closest Dessert Cost",
    "difficulty": "Medium",
    "explanation": "You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:\nThere must be exactly one ice cream base.\n\nYou can add one or more types of topping or have no toppings at all.\n\nThere are at most two of each type of topping.\n\nYou are given three inputs:\n`baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.\n\n`toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of one of the `ith` topping.\n\n`target`, an integer representing your target price for dessert.\n\nYou want to make a dessert with a total cost as close to `target` as possible.\n\nReturn the closest possible cost of the dessert to `target`. If there are multiple, return the lower one.",
    "examples": [
      "Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10\nOutput: 10\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.",
      "Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\nOutput: 17\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.",
      "Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9\nOutput: 8\nExplanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.",
      "Input: baseCosts = [10], toppingCosts = [1], target = 1\nOutput: 10\nExplanation: Notice that you don't have to have any toppings, but you must have exactly one base."
    ],
    "constraints": "`n == baseCosts.length`\n`m == toppingCosts.length`\n`1 <= n, m <= 10`\n`1 <= baseCosts[i], toppingCosts[i] <= 104`\n`1 <= target <= 104`"
  },
  {
    "id": "1775",
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "difficulty": "Medium",
    "explanation": "You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.\n\nIn one operation, you can change any integer's value in any of the arrays to any value between `1` and `6`, inclusive.\n\nReturn the minimum number of operations required to make the sum of values in `nums1` equal to the sum of values in `nums2`. Return `-1`​​​​​ if it is not possible to make the sum of the two arrays equal.",
    "examples": [
      "Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].\n\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].\n\n- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].",
      "Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]\nOutput: -1\nExplanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.",
      "Input: nums1 = [6,6], nums2 = [1]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].\n\n- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].\n\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4]."
    ],
    "constraints": "`1 <= nums1.length, nums2.length <= 105`\n`1 <= nums1[i], nums2[i] <= 6`"
  },
  {
    "id": "1776",
    "title": "Car Fleet II",
    "difficulty": "Hard",
    "explanation": "There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents:\n`positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.\n\n`speedi` is the initial speed of the `ith` car in meters per second.\n\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.\n\nReturn an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.",
    "examples": [
      "Input: cars = [[1,2],[2,1],[4,3],[7,2]]\nOutput: [1.00000,-1.00000,3.00000,-1.00000]\nExplanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.",
      "Input: cars = [[3,4],[5,4],[6,3],[9,1]]\nOutput: [2.00000,1.00000,1.50000,-1.00000]"
    ],
    "constraints": "`1 <= cars.length <= 105`\n`1 <= positioni, speedi <= 106`\n`positioni < positioni+1`"
  },
  {
    "id": "1777",
    "title": "Product's Price for Each Store",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1778",
    "title": "Shortest Path in a Hidden Grid",
    "difficulty": "Medium",
    "explanation": "This is an interactive problem.\n\nThere is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.\n\nYou want to find the minimum distance to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.\n\nThr `GridMaster` class has the following functions:\n`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.\n\n`void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, and the robot will remain in the same position.\n\n`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.\n\nNote that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.\n\nReturn the minimum distance between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return `-1`.\n\nCustom testing:\nThe test input is read as a 2D matrix `grid` of size `m x n` where:\n`grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell).\n\n`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.\n\n`grid[i][j] == 1` indicates that the cell `(i, j)` is empty.\n\n`grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell.\n\nThere is exactly one `-1` and `2` in `grid`. Remember that you will not have this information in your code.",
    "examples": [
      "Input: grid = [[1,2],[-1,0]]\nOutput: 2\nExplanation: One possible interaction is described below:\nThe robot is initially standing on cell (1, 0), denoted by the -1.\n\n- master.canMove('U') returns true.\n\n- master.canMove('D') returns false.\n\n- master.canMove('L') returns false.\n\n- master.canMove('R') returns false.\n\n- master.move('U') moves the robot to the cell (0, 0).\n\n- master.isTarget() returns false.\n\n- master.canMove('U') returns false.\n\n- master.canMove('D') returns true.\n\n- master.canMove('L') returns false.\n\n- master.canMove('R') returns true.\n\n- master.move('R') moves the robot to the cell (0, 1).\n\n- master.isTarget() returns true. \nWe now know that the target is the cell (0, 1), and the shortest path to the target cell is 2.",
      "Input: grid = [[0,0,-1],[1,1,1],[2,0,0]]\nOutput: 4\nExplanation: The minimum distance between the robot and the target cell is 4.",
      "Input: grid = [[-1,0],[0,2]]\nOutput: -1\nExplanation: There is no path from the robot to the target cell."
    ],
    "constraints": "`1 <= n, m <= 500`\n`m == grid.length`\n`n == grid[i].length`\n`grid[i][j]` is either `-1`, `0`, `1`, or `2`.\n\nThere is exactly one `-1` in `grid`.\n\nThere is exactly one `2` in `grid`."
  },
  {
    "id": "1779",
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "difficulty": "Easy",
    "explanation": "You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\n\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return `-1`.\n\nThe Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.",
    "examples": [
      "Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.",
      "Input: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.",
      "Input: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points."
    ],
    "constraints": "`1 <= points.length <= 104`\n`points[i].length == 2`\n`1 <= x, y, ai, bi <= 104`"
  },
  {
    "id": "1780",
    "title": "Check if Number is a Sum of Powers of Three",
    "difficulty": "Medium",
    "explanation": "Given an integer `n`, return `true` if it is possible to represent `n` as the sum of distinct powers of three. Otherwise, return `false`.\n\nAn integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.",
    "examples": [
      "Input: n = 12\nOutput: true\nExplanation: 12 = 31 + 32",
      "Input: n = 91\nOutput: true\nExplanation: 91 = 30 + 32 + 34",
      "Input: n = 21\nOutput: false"
    ],
    "constraints": "`1 <= n <= 107`"
  },
  {
    "id": "1781",
    "title": "Sum of Beauty of All Substrings",
    "difficulty": "Medium",
    "explanation": "The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\n\nFor example, the beauty of `\"abaacc\"` is `3 - 1 = 2`.\n\nGiven a string `s`, return the sum of beauty of all of its substrings.",
    "examples": [
      "Input: s = \"aabcb\"\nOutput: 5\nExplanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.",
      "Input: s = \"aabcbaa\"\nOutput: 17"
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` consists of only lowercase English letters."
  },
  {
    "id": "1782",
    "title": "Count Pairs Of Nodes",
    "difficulty": "Hard",
    "explanation": "You are given an undirected graph represented by an integer `n`, which is the number of nodes, and `edges`, where `edges[i] = [ui, vi]` which indicates that there is an undirected edge between `ui` and `vi`. You are also given an integer array `queries`.\n\nThe answer to the `jth` query is the number of pairs of nodes `(a, b)` that satisfy the following conditions:\n`a < b`\n`cnt` is strictly greater than `queries[j]`, where `cnt` is the number of edges incident to `a` or `b`.\n\nReturn an array `answers` such that `answers.length == queries.length` and `answers[j]` is the answer of the `jth` query.\n\nNote that there can be repeated edges.",
    "examples": [
      "Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\nOutput: [6,5]\nExplanation: The number of edges incident to at least one of each pair is shown above.",
      "Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\nOutput: [10,10,9,8,6]"
    ],
    "constraints": "`2 <= n <= 2 * 104`\n`1 <= edges.length <= 105`\n`1 <= ui, vi <= n`\n`ui != vi`\n`1 <= queries.length <= 20`\n`0 <= queries[j] < edges.length`"
  },
  {
    "id": "1783",
    "title": "Grand Slam Titles",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1784",
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "difficulty": "Easy",
    "explanation": "Given a binary string `s` ​​​​​without leading zeros, return `true`​​​ if `s` contains at most one contiguous segment of ones. Otherwise, return `false`.",
    "examples": [
      "Input: s = \"1001\"\nOutput: false\nExplanation: The ones do not form a contiguous segment.",
      "Input: s = \"110\"\nOutput: true"
    ],
    "constraints": "`1 <= s.length <= 100`\n`s[i]`​​​​ is either `'0'` or `'1'`.\n\n`s[0]` is `'1'`."
  },
  {
    "id": "1785",
    "title": "Minimum Elements to Add to Form a Given Sum",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.\n\nReturn the minimum number of elements you need to add to make the sum of the array equal to `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.",
    "examples": [
      "Input: nums = [1,-1,1], limit = 3, goal = -4\nOutput: 2\nExplanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.",
      "Input: nums = [1,-10,9,1], limit = 100, goal = 0\nOutput: 1"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= limit <= 106`\n`-limit <= nums[i] <= limit`\n`-109 <= goal <= 109`"
  },
  {
    "id": "1786",
    "title": "Number of Restricted Paths From First to Last Node",
    "difficulty": "Medium",
    "explanation": "There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.\n\nA path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.\n\nThe distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A restricted path is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.\n\nReturn the number of restricted paths from node `1` to node `n`. Since that number may be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\nOutput: 3\nExplanation: Each circle contains the node number in black and its `distanceToLastNode value in blue. `The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5",
      "Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\nOutput: 1\nExplanation: Each circle contains the node number in black and its `distanceToLastNode value in blue. `The only restricted path is 1 --> 3 --> 7."
    ],
    "constraints": "`1 <= n <= 2 * 104`\n`n - 1 <= edges.length <= 4 * 104`\n`edges[i].length == 3`\n`1 <= ui, vi <= n`\n`ui != vi`\n`1 <= weighti <= 105`\nThere is at most one edge between any two nodes.\n\nThere is at least one path between any two nodes."
  },
  {
    "id": "1787",
    "title": "Make the XOR of All Segments Equal to Zero",
    "difficulty": "Hard",
    "explanation": "You are given an array `nums`​​​ and an integer `k`​​​​​. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.\n\nReturn the minimum number of elements to change in the array such that the `XOR` of all segments of size `k`​​​​​​ is equal to zero.",
    "examples": [
      "Input: nums = [1,2,0,3,0], k = 1\nOutput: 3\nExplanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].",
      "Input: nums = [3,4,5,2,1,7,3,4,7], k = 3\nOutput: 3\nExplanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].",
      "Input: nums = [1,2,4,1,2,5,1,2,6], k = 3\nOutput: 3\nExplanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3]."
    ],
    "constraints": "`1 <= k <= nums.length <= 2000`\n`​​​​​​0 <= nums[i] < 210`"
  },
  {
    "id": "1788",
    "title": "Maximize the Beauty of the Garden",
    "difficulty": "Hard",
    "explanation": "There is a garden of `n` flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower.\n\nA garden is valid if it meets these conditions:\nThe garden has at least two flowers.\n\nThe first and the last flower of the garden have the same beauty value.\n\nAs the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.\n\nReturn the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.",
    "examples": [
      "Input: flowers = [1,2,3,1,2]\nOutput: 8\nExplanation: You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.",
      "Input: flowers = [100,1,1,-3,1]\nOutput: 3\nExplanation: You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.",
      "Input: flowers = [-1,-2,0,-1]\nOutput: -2\nExplanation: You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2."
    ],
    "constraints": "`2 <= flowers.length <= 105`\n`-104 <= flowers[i] <= 104`\nIt is possible to create a valid garden by removing some (possibly none) flowers."
  },
  {
    "id": "1789",
    "title": "Primary Department for Each Employee",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1790",
    "title": "Check if One String Swap Can Make Strings Equal",
    "difficulty": "Easy",
    "explanation": "You are given two strings `s1` and `s2` of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\n\nReturn `true` if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return `false`.",
    "examples": [
      "Input: s1 = \"bank\", s2 = \"kanb\"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make \"bank\".",
      "Input: s1 = \"attack\", s2 = \"defend\"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.",
      "Input: s1 = \"kelb\", s2 = \"kelb\"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required.",
      "Input: s1 = \"abcd\", s2 = \"dcba\"\nOutput: false"
    ],
    "constraints": "`1 <= s1.length, s2.length <= 100`\n`s1.length == s2.length`\n`s1` and `s2` consist of only lowercase English letters."
  },
  {
    "id": "1791",
    "title": "Find Center of Star Graph",
    "difficulty": "Medium",
    "explanation": "There is an undirected star graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one center node and exactly `n - 1` edges that connect the center node with every other node.\n\nYou are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.",
    "examples": [
      "Input: edges = [[1,2],[2,3],[4,2]]\nOutput: 2\nExplanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.",
      "Input: edges = [[1,2],[5,1],[1,3],[1,4]]\nOutput: 1"
    ],
    "constraints": "`3 <= n <= 105`\n`edges.length == n - 1`\n`edges[i].length == 2`\n`1 <= ui, vi <= n`\n`ui != vi`\nThe given `edges` represent a valid star graph."
  },
  {
    "id": "1792",
    "title": "Maximum Average Pass Ratio",
    "difficulty": "Medium",
    "explanation": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.\n\nYou are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that maximizes the average pass ratio across all the classes.\n\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\n\nReturn the maximum possible average pass ratio after assigning the `extraStudents` students. Answers within `10-5` of the actual answer will be accepted.",
    "examples": [
      "Input: classes = [[1,2],[3,5],[2,2]], `extraStudents` = 2\nOutput: 0.78333\nExplanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.",
      "Input: classes = [[2,4],[3,9],[4,5],[2,10]], `extraStudents` = 4\nOutput: 0.53485"
    ],
    "constraints": "`1 <= classes.length <= 105`\n`classes[i].length == 2`\n`1 <= passi <= totali <= 105`\n`1 <= extraStudents <= 105`"
  },
  {
    "id": "1793",
    "title": "Maximum Score of a Good Subarray",
    "difficulty": "Hard",
    "explanation": "You are given an array of integers `nums` (0-indexed) and an integer `k`.\n\nThe score of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A good subarray is a subarray where `i <= k <= j`.\n\nReturn the maximum possible score of a good subarray.",
    "examples": [
      "Input: nums = [1,4,3,7,4,5], k = 3\nOutput: 15\nExplanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15.",
      "Input: nums = [5,5,4,5,4,1,1,1], k = 0\nOutput: 20\nExplanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20."
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 2 * 104`\n`0 <= k < nums.length`"
  },
  {
    "id": "1794",
    "title": "Count Pairs of Equal Substrings With Minimum Difference",
    "difficulty": "Medium",
    "explanation": "You are given two strings `firstString` and `secondString` that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:\n`0 <= i <= j < firstString.length`\n`0 <= a <= b < secondString.length`\nThe substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is equal to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).\n\n`j - a` is the minimum possible value among all quadruples that satisfy the previous conditions.\n\nReturn the number of such quadruples.",
    "examples": [
      "Input: firstString = \"abcd\", secondString = \"bccda\"\nOutput: 1\nExplanation: The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a.",
      "Input: firstString = \"ab\", secondString = \"cd\"\nOutput: 0\nExplanation: There are no quadruples satisfying all the conditions."
    ],
    "constraints": "`1 <= firstString.length, secondString.length <= 2 * 105`\nBoth strings consist only of lowercase English letters."
  },
  {
    "id": "1795",
    "title": "Rearrange Products Table",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1796",
    "title": "Second Largest Digit in a String",
    "difficulty": "Easy",
    "explanation": "Given an alphanumeric string `s`, return the second largest numerical digit that appears in `s`, or `-1` if it does not exist.\n\nAn alphanumeric string is a string consisting of lowercase English letters and digits.",
    "examples": [
      "Input: s = \"dfa12321afd\"\nOutput: 2\nExplanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.",
      "Input: s = \"abc1111\"\nOutput: -1\nExplanation: The digits that appear in s are [1]. There is no second largest digit."
    ],
    "constraints": "`1 <= s.length <= 500`\n`s` consists of only lowercase English letters and/or digits."
  },
  {
    "id": "1797",
    "title": "Design Authentication Manager",
    "difficulty": "Medium",
    "explanation": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be extended to expire `timeToLive` seconds after the (potentially different) `currentTime`.\n\nImplement the `AuthenticationManager` class:\n`AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.\n\n`generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.\n\n`renew(string tokenId, int currentTime)` renews the unexpired token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.\n\n`countUnexpiredTokens(int currentTime)` returns the number of unexpired tokens at the given currentTime.\n\nNote that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place before the other actions.",
    "examples": [
      "Input\n[\"AuthenticationManager\", \"`renew`\", \"generate\", \"`countUnexpiredTokens`\", \"generate\", \"`renew`\", \"`renew`\", \"`countUnexpiredTokens`\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\nOutput\n[null, null, null, 1, null, null, null, 0]\nExplanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with `timeToLive` = 5 seconds.\n\nauthenticationManager.`renew`(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\n\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\n\nauthenticationManager.`countUnexpiredTokens`(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\n\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\n\nauthenticationManager.`renew`(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the `renew` request is ignored, and nothing happens.\n\nauthenticationManager.`renew`(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the `renew` request is fulfilled and now the token will expire at time 15.\n\nauthenticationManager.`countUnexpiredTokens`(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0."
    ],
    "constraints": "`1 <= timeToLive <= 108`\n`1 <= currentTime <= 108`\n`1 <= tokenId.length <= 5`\n`tokenId` consists only of lowercase letters.\n\nAll calls to `generate` will contain unique values of `tokenId`.\n\nThe values of `currentTime` across all the function calls will be strictly increasing.\n\nAt most `2000` calls will be made to all functions combined."
  },
  {
    "id": "1798",
    "title": "Maximum Number of Consecutive Values You Can Make",
    "difficulty": "Medium",
    "explanation": "You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can make some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.\n\nReturn the maximum number of consecutive integer values that you can make with your coins starting from and including `0`.\n\nNote that you may have multiple coins of the same value.",
    "examples": [
      "Input: coins = [1,3]\nOutput: 2\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0.",
      "Input: coins = [1,1,1,4]\nOutput: 8\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0.",
      "Input: nums = [1,4,10,3,1]\nOutput: 20"
    ],
    "constraints": "`coins.length == n`\n`1 <= n <= 4 * 104`\n`1 <= coins[i] <= 4 * 104`"
  },
  {
    "id": "1799",
    "title": "Maximize Score After N Operations",
    "difficulty": "Hard",
    "explanation": "You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array.\n\nIn the `ith` operation (1-indexed), you will:\nChoose two elements, `x` and `y`.\n\nReceive a score of `i * gcd(x, y)`.\n\nRemove `x` and `y` from `nums`.\n\nReturn the maximum score you can receive after performing `n` operations.\n\nThe function `gcd(x, y)` is the greatest common divisor of `x` and `y`.",
    "examples": [
      "Input: nums = [1,2]\nOutput: 1\nExplanation: The optimal choice of operations is:\n(1 * gcd(1, 2)) = 1",
      "Input: nums = [3,4,6,8]\nOutput: 11\nExplanation: The optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11",
      "Input: nums = [1,2,3,4,5,6]\nOutput: 14\nExplanation: The optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14"
    ],
    "constraints": "`1 <= n <= 7`\n`nums.length == 2 * n`\n`1 <= nums[i] <= 106`"
  },
  {
    "id": "1800",
    "title": "Maximum Ascending Subarray Sum",
    "difficulty": "Easy",
    "explanation": "Given an array of positive integers `nums`, return the maximum possible sum of an ascending subarray in `nums`.\n\nA subarray is defined as a contiguous sequence of numbers in an array.\n\nA subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is ascending if for all `i` where `l <= i < r`, `numsi  < numsi+1`. Note that a subarray of size `1` is ascending.",
    "examples": [
      "Input: nums = [10,20,30,5,10,50]\nOutput: 65\nExplanation: [5,10,50] is the ascending subarray with the maximum sum of 65.",
      "Input: nums = [10,20,30,40,50]\nOutput: 150\nExplanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.",
      "Input: nums = [12,17,15,13,10,11,12]\nOutput: 33\nExplanation: [10,11,12] is the ascending subarray with the maximum sum of 33.",
      "Input: nums = [100,10,1]\nOutput: 100"
    ],
    "constraints": "`1 <= nums.length <= 100`\n`1 <= nums[i] <= 100`"
  },
  {
    "id": "1801",
    "title": "Number of Orders in the Backlog",
    "difficulty": "Medium",
    "explanation": "You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:\n`0` if it is a batch of `buy` orders, or\n`1` if it is a batch of `sell` orders.\n\nNote that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.\n\nThere is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\nIf the order is a `buy` order, you look at the `sell` order with the smallest price in the backlog. If that `sell` order's price is smaller than or equal to the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.\n\nVice versa, if the order is a `sell` order, you look at the `buy` order with the largest price in the backlog. If that `buy` order's price is larger than or equal to the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.\n\nReturn the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo `109 + 7`.",
    "examples": [
      "Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\nOutput: 6\nExplanation: Here is what happens with the orders:\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\n\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\n\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\n\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.\n\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.",
      "Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\nOutput: 999999984\nExplanation: Here is what happens with the orders:\n- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.\n\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\n\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\n\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\n\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7)."
    ],
    "constraints": "`1 <= orders.length <= 105`\n`orders[i].length == 3`\n`1 <= pricei, amounti <= 109`\n`orderTypei` is either `0` or `1`."
  },
  {
    "id": "1802",
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "difficulty": "Medium",
    "explanation": "You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (0-indexed) that satisfies the following conditions:\n`nums.length == n`\n`nums[i]` is a positive integer where `0 <= i < n`.\n\n`abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.\n\nThe sum of all the elements of `nums` does not exceed `maxSum`.\n\n`nums[index]` is maximized.\n\nReturn `nums[index]` of the constructed array.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.",
    "examples": [
      "Input: n = 4, index = 2,  maxSum = 6\nOutput: 2\nExplanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\n\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].",
      "Input: n = 6, index = 1,  maxSum = 10\nOutput: 3"
    ],
    "constraints": "`1 <= n <= maxSum <= 109`\n`0 <= index < n`"
  },
  {
    "id": "1803",
    "title": "Count Pairs With XOR in a Range",
    "difficulty": "Hard",
    "explanation": "Given a (0-indexed) integer array `nums` and two integers `low` and `high`, return the number of nice pairs.\n\nA nice pair is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.",
    "examples": [
      "Input: nums = [1,4,2,7], low = 2, high = 6\nOutput: 6\nExplanation: All nice pairs (i, j) are as follows:\n    - (0, 1): nums[0] XOR nums[1] = 5 \n    - (0, 2): nums[0] XOR nums[2] = 3\n    - (0, 3): nums[0] XOR nums[3] = 6\n    - (1, 2): nums[1] XOR nums[2] = 6\n    - (1, 3): nums[1] XOR nums[3] = 3\n    - (2, 3): nums[2] XOR nums[3] = 5",
      "Input: nums = [9,8,4,2,1], low = 5, high = 14\nOutput: 8\nExplanation: All nice pairs (i, j) are as follows:\n​​​​​    - (0, 2): nums[0] XOR nums[2] = 13\n    - (0, 3): nums[0] XOR nums[3] = 11\n    - (0, 4): nums[0] XOR nums[4] = 8\n    - (1, 2): nums[1] XOR nums[2] = 12\n    - (1, 3): nums[1] XOR nums[3] = 10\n    - (1, 4): nums[1] XOR nums[4] = 9\n    - (2, 3): nums[2] XOR nums[3] = 6\n    - (2, 4): nums[2] XOR nums[4] = 5"
    ],
    "constraints": "`1 <= nums.length <= 2 * 104`\n`1 <= nums[i] <= 2 * 104`\n`1 <= low <= high <= 2 * 104`"
  },
  {
    "id": "1804",
    "title": "Implement Trie II (Prefix Tree)",
    "difficulty": "Medium",
    "explanation": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n`Trie()` Initializes the trie object.\n\n`void insert(String word)` Inserts the string `word` into the trie.\n\n`int countWordsEqualTo(String word)` Returns the number of instances of the string `word` in the trie.\n\n`int countWordsStartingWith(String prefix)` Returns the number of strings in the trie that have the string `prefix` as a prefix.\n\n`void erase(String word)` Erases the string `word` from the trie.",
    "examples": [
      "Input\n[\"Trie\", \"insert\", \"insert\", \"countWordsEqualTo\", \"countWordsStartingWith\", \"erase\", \"countWordsEqualTo\", \"countWordsStartingWith\", \"erase\", \"countWordsStartingWith\"]\n[[], [\"apple\"], [\"apple\"], [\"apple\"], [\"app\"], [\"apple\"], [\"apple\"], [\"app\"], [\"apple\"], [\"app\"]]\nOutput\n[null, null, null, 2, 2, null, 1, 1, null, 0]\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");               // Inserts \"apple\".\n\ntrie.insert(\"apple\");               // Inserts another \"apple\".\n\ntrie.countWordsEqualTo(\"apple\");    // There are two instances of \"apple\" so return 2.\n\ntrie.countWordsStartingWith(\"app\"); // \"app\" is a prefix of \"apple\" so return 2.\n\ntrie.erase(\"apple\");                // Erases one \"apple\".\n\ntrie.countWordsEqualTo(\"apple\");    // Now there is only one instance of \"apple\" so return 1.\n\ntrie.countWordsStartingWith(\"app\"); // return 1\ntrie.erase(\"apple\");                // Erases \"apple\". Now the trie is empty.\n\ntrie.countWordsStartingWith(\"app\"); // return 0"
    ],
    "constraints": "`1 <= word.length, prefix.length <= 2000`\n`word` and `prefix` consist only of lowercase English letters.\n\nAt most `3 * 104` calls in total will be made to `insert`, `countWordsEqualTo`, `countWordsStartingWith`, and `erase`.\n\nIt is guaranteed that for any function call to `erase`, the string `word` will exist in the trie."
  },
  {
    "id": "1805",
    "title": "Number of Different Integers in a String",
    "difficulty": "Easy",
    "explanation": "You are given a string `word` that consists of digits and lowercase English letters.\n\nYou will replace every non-digit character with a space. For example, `\"a123bc34d8ef34\"` will become `\" 123  34 8  34\"`. Notice that you are left with some integers that are separated by at least one space: `\"123\"`, `\"34\"`, `\"8\"`, and `\"34\"`.\n\nReturn the number of different integers after performing the replacement operations on `word`.\n\nTwo integers are considered different if their decimal representations without any leading zeros are different.",
    "examples": [
      "Input: word = \"a123bc34d8ef34\"\nOutput: 3\nExplanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once.",
      "Input: word = \"leet1234code234\"\nOutput: 2",
      "Input: word = \"a1b01c001\"\nOutput: 1\nExplanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values."
    ],
    "constraints": "`1 <= word.length <= 1000`\n`word` consists of digits and lowercase English letters."
  },
  {
    "id": "1806",
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "difficulty": "Medium",
    "explanation": "You are given an even integer `n`​​​​​​. You initially have a permutation `perm` of size `n`​​ where `perm[i] == i`​ (0-indexed)​​​​.\n\nIn one operation, you will create a new array `arr`, and for each `i`:\nIf `i % 2 == 0`, then `arr[i] = perm[i / 2]`.\n\nIf `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.\n\nYou will then assign `arr`​​​​ to `perm`.\n\nReturn the minimum non-zero number of operations you need to perform on `perm` to return the permutation to its initial value.",
    "examples": [
      "Input: n = 2\nOutput: 1\nExplanation: perm = [0,1] initially.\n\nAfter the 1st operation, perm = [0,1]\nSo it takes only 1 operation.",
      "Input: n = 4\nOutput: 2\nExplanation: perm = [0,1,2,3] initially.\n\nAfter the 1st operation, perm = [0,2,1,3]\nAfter the 2nd operation, perm = [0,1,2,3]\nSo it takes only 2 operations.",
      "Input: n = 6\nOutput: 4"
    ],
    "constraints": "`2 <= n <= 1000`\n`n`​​​​ is even."
  },
  {
    "id": "1807",
    "title": "Evaluate the Bracket Pairs of a String",
    "difficulty": "Medium",
    "explanation": "You are given a string `s` that contains some bracket pairs, with each pair containing a non-empty key.\n\nFor example, in the string `\"(name)is(age)yearsold\"`, there are two bracket pairs that contain the keys `\"name\"` and `\"age\"`.\n\nYou know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.\n\nYou are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:\nReplace `keyi` and the bracket pair with the key's corresponding `valuei`.\n\nIf you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"?\"` (without the quotation marks).\n\nEach key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.\n\nReturn the resulting string after evaluating all of the bracket pairs.",
    "examples": [
      "Input: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]\nOutput: \"bobistwoyearsold\"\nExplanation:\nThe key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\n\nThe key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\".",
      "Input: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]\nOutput: \"hi?\"\nExplanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\".",
      "Input: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]\nOutput: \"yesyesyesaaa\"\nExplanation: The same key can appear multiple times.\n\nThe key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\n\nNotice that the \"a\"s not in a bracket pair are not evaluated.",
      "Input: s = \"(a)(b)\", knowledge = [[\"a\",\"b\"],[\"b\",\"a\"]]\nOutput: \"ba\""
    ],
    "constraints": "`1 <= s.length <= 105`\n`0 <= knowledge.length <= 105`\n`knowledge[i].length == 2`\n`1 <= keyi.length, valuei.length <= 10`\n`s` consists of lowercase English letters and round brackets `'('` and `')'`.\n\nEvery open bracket `'('` in `s` will have a corresponding close bracket `')'`.\n\nThe key in each bracket pair of `s` will be non-empty.\n\nThere will not be any nested bracket pairs in `s`.\n\n`keyi` and `valuei` consist of lowercase English letters.\n\nEach `keyi` in `knowledge` is unique."
  },
  {
    "id": "1808",
    "title": "Maximize Number of Nice Divisors",
    "difficulty": "Hard",
    "explanation": "You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions:\nThe number of prime factors of `n` (not necessarily distinct) is at most `primeFactors`.\n\nThe number of nice divisors of `n` is maximized. Note that a divisor of `n` is nice if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.\n\nReturn the number of nice divisors of `n`. Since that number can be too large, return it modulo `109 + 7`.\n\nNote that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.",
    "examples": [
      "Input: primeFactors = 5\nOutput: 6\nExplanation: 200 is a valid value of n.\n\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\n\nThere is not other value of n that has at most 5 prime factors and more nice divisors.",
      "Input: primeFactors = 8\nOutput: 18"
    ],
    "constraints": "`1 <= primeFactors <= 109`"
  },
  {
    "id": "1809",
    "title": "Ad-Free Sessions",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1810",
    "title": "Minimum Path Cost in a Hidden Grid",
    "difficulty": "Medium",
    "explanation": "This is an interactive problem.\n\nThere is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.\n\nEach cell has a cost that you need to pay each time you move to the cell. The starting cell's cost is not applied before the robot moves.\n\nYou want to find the minimum total cost to move the robot to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.\n\nThe `GridMaster` class has the following functions:\n`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.\n\n`int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, the robot will remain in the same position, and the function will return `-1`.\n\n`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.\n\nNote that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.\n\nReturn the minimum total cost to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return `-1`.\n\nCustom testing:\nThe test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where:\n`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.\n\n`grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the cost to move to that cell.\n\n`(r1, c1)` is the starting cell of the robot.\n\n`(r2, c2)` is the target cell of the robot.\n\nRemember that you will not have this information in your code.",
    "examples": [
      "Input: grid = [[2,3],[1,1]], r1 = 0, c1 = 1, r2 = 1, c2 = 0\nOutput: 2\nExplanation: One possible interaction is described below:\nThe robot is initially standing on cell (0, 1), denoted by the 3.\n\n- master.canMove('U') returns false.\n\n- master.canMove('D') returns true.\n\n- master.canMove('L') returns true.\n\n- master.canMove('R') returns false.\n\n- master.move('L') moves the robot to the cell (0, 0) and returns 2.\n\n- master.isTarget() returns false.\n\n- master.canMove('U') returns false.\n\n- master.canMove('D') returns true.\n\n- master.canMove('L') returns false.\n\n- master.canMove('R') returns true.\n\n- master.move('D') moves the robot to the cell (1, 0) and returns 1.\n\n- master.isTarget() returns true.\n\n- master.move('L') doesn't move the robot and returns -1.\n\n- master.move('R') moves the robot to the cell (1, 1) and returns 1.\n\nWe now know that the target is the cell (0, 1), and the minimum total cost to reach it is 2.",
      "Input: grid = [[0,3,1],[3,4,2],[1,2,0]], r1 = 2, c1 = 0, r2 = 0, c2 = 2\nOutput: 9\nExplanation: The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2).",
      "Input: grid = [[1,0],[0,1]], r1 = 0, c1 = 0, r2 = 1, c2 = 1\nOutput: -1\nExplanation: There is no path from the robot to the target cell."
    ],
    "constraints": "`1 <= n, m <= 100`\n`m == grid.length`\n`n == grid[i].length`\n`0 <= grid[i][j] <= 100`"
  },
  {
    "id": "1811",
    "title": "Find Interview Candidates",
    "difficulty": "Medium",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1812",
    "title": "Determine Color of a Chessboard Square",
    "difficulty": "Easy",
    "explanation": "You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n\nReturn `true` if the square is white, and `false` if the square is black.\n\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.",
    "examples": [
      "Input: coordinates = \"a1\"\nOutput: false\nExplanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false.",
      "Input: coordinates = \"h3\"\nOutput: true\nExplanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true.",
      "Input: coordinates = \"c7\"\nOutput: false"
    ],
    "constraints": "`coordinates.length == 2`\n`'a' <= coordinates[0] <= 'h'`\n`'1' <= coordinates[1] <= '8'`"
  },
  {
    "id": "1813",
    "title": "Sentence Similarity III",
    "difficulty": "Medium",
    "explanation": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World\"`, `\"HELLO\"`, `\"hello world hello world\"` are all sentences. Words consist of only uppercase and lowercase English letters.\n\nTwo sentences `sentence1` and `sentence2` are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane\"` and `sentence2 = \"Hello Jane\"` can be made equal by inserting `\"my name is\"` between `\"Hello\"` and `\"Jane\"` in `sentence2`.\n\nGiven two sentences `sentence1` and `sentence2`, return `true` if `sentence1` and `sentence2` are similar. Otherwise, return `false`.",
    "examples": [
      "Input: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\".",
      "Input: sentence1 = \"of\", sentence2 = \"A lot of words\"\nOutput: false\nExplanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.",
      "Input: sentence1 = \"Eating right now\", sentence2 = \"Eating\"\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.",
      "Input: sentence1 = \"Luky\", sentence2 = \"Lucccky\"\nOutput: false"
    ],
    "constraints": "`1 <= sentence1.length, sentence2.length <= 100`\n`sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.\n\nThe words in `sentence1` and `sentence2` are separated by a single space."
  },
  {
    "id": "1814",
    "title": "Count Nice Pairs in an Array",
    "difficulty": "Medium",
    "explanation": "You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is nice if it satisfies all of the following conditions:\n`0 <= i < j < nums.length`\n`nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo `109 + 7`.",
    "examples": [
      "Input: nums = [42,11,1,97]\nOutput: 2\nExplanation: The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.",
      "Input: nums = [13,10,35,24,76]\nOutput: 4"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`0 <= nums[i] <= 109`"
  },
  {
    "id": "1815",
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "difficulty": "Hard",
    "explanation": "There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut.\n\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\n\nYou can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.",
    "examples": [
      "Input: batchSize = 3, groups = [1,2,3,4,5,6]\nOutput: 4\nExplanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.",
      "Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\nOutput: 4"
    ],
    "constraints": "`1 <= batchSize <= 9`\n`1 <= groups.length <= 30`\n`1 <= groups[i] <= 109`"
  },
  {
    "id": "1816",
    "title": "Truncate Sentence",
    "difficulty": "Easy",
    "explanation": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).\n\nFor example, `\"Hello World\"`, `\"HELLO\"`, and `\"hello world hello world\"` are all sentences.\n\nYou are given a sentence `s`​​​​​​ and an integer `k`​​​​​​. You want to truncate `s`​​​​​​ such that it contains only the first `k`​​​​​​ words. Return `s`​​​​​​ after truncating it.",
    "examples": [
      "Input: s = \"Hello how are you Contestant\", k = 4\nOutput: \"Hello how are you\"\nExplanation:\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\n\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\n\nHence, you should return \"Hello how are you\".",
      "Input: s = \"What is the solution to this problem\", k = 4\nOutput: \"What is the solution\"\nExplanation:\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\n\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\n\nHence, you should return \"What is the solution\".",
      "Input: s = \"chopper is not a tanuki\", k = 5\nOutput: \"chopper is not a tanuki\""
    ],
    "constraints": "`1 <= s.length <= 500`\n`k` is in the range `[1, the number of words in s]`.\n\n`s` consist of only lowercase and uppercase English letters and spaces.\n\nThe words in `s` are separated by a single space.\n\nThere are no leading or trailing spaces."
  },
  {
    "id": "1817",
    "title": "Finding the Users Active Minutes",
    "difficulty": "Medium",
    "explanation": "You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.\n\nMultiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.\n\nThe user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\n\nYou are to calculate a 1-indexed array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the number of users whose UAM equals `j`.\n\nReturn the array `answer` as described above.",
    "examples": [
      "Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5\nOutput: [0,2,0,0,0]\nExplanation:\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\n\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\n\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.",
      "Input: logs = [[1,1],[2,2],[2,3]], k = 4\nOutput: [1,1,0,0]\nExplanation:\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\n\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\n\nThere is one user with a UAM of 1 and one with a UAM of 2.\n\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0."
    ],
    "constraints": "`1 <= logs.length <= 104`\n`0 <= IDi <= 109`\n`1 <= timei <= 105`\n`k` is in the range `[The maximum UAM for a user, 105]`."
  },
  {
    "id": "1818",
    "title": "Minimum Absolute Sum Difference",
    "difficulty": "Medium",
    "explanation": "You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.\n\nThe absolute sum difference of arrays `nums1` and `nums2` is defined as the sum of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (0-indexed).\n\nYou can replace at most one element of `nums1` with any other element in `nums1` to minimize the absolute sum difference.\n\nReturn the minimum absolute sum difference after replacing at most one element in the array `nums1`. Since the answer may be large, return it modulo `109 + 7`.\n\n`|x|` is defined as:\n`x` if `x >= 0`, or\n`-x` if `x < 0`.",
    "examples": [
      "Input: nums1 = [1,7,5], nums2 = [2,3,5]\nOutput: 3\nExplanation: There are two possible optimal solutions:\n- Replace the second element with the first: [1,7,5] => [1,1,5], or\n- Replace the second element with the third: [1,7,5] => [1,5,5].\n\nBoth will yield an absolute sum difference of `|1-2| + (|1-3| or |5-3|) + |5-5| = `3.",
      "Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]\nOutput: 0\nExplanation: nums1 is equal to nums2 so no replacement is needed. This will result in an \nabsolute sum difference of 0.",
      "Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]\nOutput: 20\nExplanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].\n\nThis yields an absolute sum difference of `|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20`"
    ],
    "constraints": "`n == nums1.length`\n`n == nums2.length`\n`1 <= n <= 105`\n`1 <= nums1[i], nums2[i] <= 105`"
  },
  {
    "id": "1819",
    "title": "Number of Different Subsequences GCDs",
    "difficulty": "Hard",
    "explanation": "You are given an array `nums` that consists of positive integers.\n\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\n\nFor example, the GCD of the sequence `[4,6,16]` is `2`.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\nFor example, `[2,5,10]` is a subsequence of `[1,2,1,2,4,1,5,10]`.\n\nReturn the number of different GCDs among all non-empty subsequences of `nums`.",
    "examples": [
      "Input: nums = [6,10,3]\nOutput: 5\nExplanation: The figure shows all the non-empty subsequences and their GCDs.\n\nThe different GCDs are 6, 10, 3, 2, and 1.",
      "Input: nums = [5,15,40,5,6]\nOutput: 7"
    ],
    "constraints": "`1 <= nums.length <= 105`\n`1 <= nums[i] <= 2 * 105`"
  },
  {
    "id": "1820",
    "title": "Maximum Number of Accepted Invitations",
    "difficulty": "Medium",
    "explanation": "There are `m` boys and `n` girls in a class attending an upcoming party.\n\nYou are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most one girl, and a girl can accept at most one invitation from a boy.\n\nReturn the maximum possible number of accepted invitations.",
    "examples": [
      "Input: grid = [[1,1,1],\n               [1,0,1],\n               [0,0,1]]\nOutput: 3\nExplanation: The invitations are sent as follows:\n- The 1st boy invites the 2nd girl.\n\n- The 2nd boy invites the 1st girl.\n\n- The 3rd boy invites the 3rd girl.",
      "Input: grid = [[1,0,1,0],\n               [1,0,0,0],\n               [0,0,1,0],\n               [1,1,1,0]]\nOutput: 3\nExplanation: The invitations are sent as follows:\n-The 1st boy invites the 3rd girl.\n\n-The 2nd boy invites the 1st girl.\n\n-The 3rd boy invites no one.\n\n-The 4th boy invites the 2nd girl."
    ],
    "constraints": "`grid.length == m`\n`grid[i].length == n`\n`1 <= m, n <= 200`\n`grid[i][j]` is either `0` or `1`."
  },
  {
    "id": "1821",
    "title": "Find Customers With Positive Revenue this Year",
    "difficulty": "Easy",
    "explanation": "SQL Schema",
    "examples": [],
    "constraints": ""
  },
  {
    "id": "1822",
    "title": "Sign of the Product of an Array",
    "difficulty": "Easy",
    "explanation": "There is a function `signFunc(x)` that returns:\n`1` if `x` is positive.\n\n`-1` if `x` is negative.\n\n`0` if `x` is equal to `0`.\n\nYou are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.\n\nReturn `signFunc(product)`.",
    "examples": [
      "Input: nums = [-1,-2,-3,-4,3,2,1]\nOutput: 1\nExplanation: The product of all values in the array is 144, and signFunc(144) = 1",
      "Input: nums = [1,5,0,2,-3]\nOutput: 0\nExplanation: The product of all values in the array is 0, and signFunc(0) = 0",
      "Input: nums = [-1,1,-1,1,-1]\nOutput: -1\nExplanation: The product of all values in the array is -1, and signFunc(-1) = -1"
    ],
    "constraints": "`1 <= nums.length <= 1000`\n`-100 <= nums[i] <= 100`"
  },
  {
    "id": "1823",
    "title": "Find the Winner of the Circular Game",
    "difficulty": "Medium",
    "explanation": "There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in clockwise order. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.\n\nThe rules of the game are as follows:\nStart at the `1st` friend.\n\nCount the next `k` friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\n\nThe last friend you counted leaves the circle and loses the game.\n\nIf there is still more than one friend in the circle, go back to step `2` starting from the friend immediately clockwise of the friend who just lost and repeat.\n\nElse, the last friend in the circle wins the game.\n\nGiven the number of friends, `n`, and an integer `k`, return the winner of the game.",
    "examples": [
      "Input: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n\n2) Count 2 friends clockwise, which are friends 1 and 2.\n\n3) Friend 2 leaves the circle. Next start is friend 3.\n\n4) Count 2 friends clockwise, which are friends 3 and 4.\n\n5) Friend 4 leaves the circle. Next start is friend 5.\n\n6) Count 2 friends clockwise, which are friends 5 and 1.\n\n7) Friend 1 leaves the circle. Next start is friend 3.\n\n8) Count 2 friends clockwise, which are friends 3 and 5.\n\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.",
      "Input: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
    ],
    "constraints": "`1 <= k <= n <= 500`"
  },
  {
    "id": "1824",
    "title": "Minimum Sideway Jumps",
    "difficulty": "Medium",
    "explanation": "There is a 3 lane road of length `n` that consists of `n + 1` points labeled from `0` to `n`. A frog starts at point `0` in the second lane and wants to jump to point `n`. However, there could be obstacles along the way.\n\nYou are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (ranging from 0 to 3) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be at most one obstacle in the 3 lanes at each point.\n\nFor example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.\n\nThe frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\n\nFor example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\n\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane `2` at point 0.\n\nNote: There will be no obstacles on points `0` and `n`.",
    "examples": [
      "Input: obstacles = [0,1,2,3,0]\nOutput: 2 \nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\n\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).",
      "Input: obstacles = [0,1,1,3,3,0]\nOutput: 0\nExplanation: There are no obstacles on lane 2. No side jumps are required.",
      "Input: obstacles = [0,2,1,0,3,0]\nOutput: 2\nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps."
    ],
    "constraints": "`obstacles.length == n + 1`\n`1 <= n <= 5 * 105`\n`0 <= obstacles[i] <= 3`\n`obstacles[0] == obstacles[n] == 0`"
  },
  {
    "id": "1825",
    "title": "Finding MK Average",
    "difficulty": "Hard",
    "explanation": "You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.\n\nThe MKAverage can be calculated using these steps:\nIf the number of the elements in the stream is less than `m` you should consider the MKAverage to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.\n\nRemove the smallest `k` elements and the largest `k` elements from the container.\n\nCalculate the average value for the rest of the elements rounded down to the nearest integer.\n\nImplement the `MKAverage` class:\n`MKAverage(int m, int k)` Initializes the MKAverage object with an empty stream and the two integers `m` and `k`.\n\n`void addElement(int num)` Inserts a new element `num` into the stream.\n\n`int calculateMKAverage()` Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.",
    "examples": [
      "Input\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\nOutput\n[null, null, null, -1, null, 3, null, null, null, 5]\nExplanation\nMKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\n\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n\n                          // After removing smallest and largest 1 element the container will be `[3].\n\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n\n                          // After removing smallest and largest 1 element the container will be `[5].\n\n                          // The average of [5] equals 5/1 = 5, return 5\n``"
    ],
    "constraints": "`3 <= m <= 105`\n`1 <= k*2 < m`\n`1 <= num <= 105`\nAt most `105` calls will be made to `addElement` and `calculateMKAverage`."
  }
]